(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.CloudFileManager = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":1,"ieee754":18,"isarray":19}],3:[function(require,module,exports){
/*istanbul ignore start*/"use strict";

exports.__esModule = true;
exports. /*istanbul ignore end*/convertChangesToDMP = convertChangesToDMP;
// See: http://code.google.com/p/google-diff-match-patch/wiki/API
function convertChangesToDMP(changes) {
  var ret = [],
      change = /*istanbul ignore start*/void 0 /*istanbul ignore end*/,
      operation = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;
  for (var i = 0; i < changes.length; i++) {
    change = changes[i];
    if (change.added) {
      operation = 1;
    } else if (change.removed) {
      operation = -1;
    } else {
      operation = 0;
    }

    ret.push([operation, change.value]);
  }
  return ret;
}


},{}],4:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports. /*istanbul ignore end*/convertChangesToXML = convertChangesToXML;
function convertChangesToXML(changes) {
  var ret = [];
  for (var i = 0; i < changes.length; i++) {
    var change = changes[i];
    if (change.added) {
      ret.push('<ins>');
    } else if (change.removed) {
      ret.push('<del>');
    }

    ret.push(escapeHTML(change.value));

    if (change.added) {
      ret.push('</ins>');
    } else if (change.removed) {
      ret.push('</del>');
    }
  }
  return ret.join('');
}

function escapeHTML(s) {
  var n = s;
  n = n.replace(/&/g, '&amp;');
  n = n.replace(/</g, '&lt;');
  n = n.replace(/>/g, '&gt;');
  n = n.replace(/"/g, '&quot;');

  return n;
}


},{}],5:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.default = /*istanbul ignore end*/Diff;
function Diff() {}

Diff.prototype = { /*istanbul ignore start*/
  /*istanbul ignore end*/diff: function diff(oldString, newString) {
    /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var callback = options.callback;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    this.options = options;

    var self = this;

    function done(value) {
      if (callback) {
        setTimeout(function () {
          callback(undefined, value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }

    // Allow subclasses to massage the input prior to running
    oldString = this.castInput(oldString);
    newString = this.castInput(newString);

    oldString = this.removeEmpty(this.tokenize(oldString));
    newString = this.removeEmpty(this.tokenize(newString));

    var newLen = newString.length,
        oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;
    var bestPath = [{ newPos: -1, components: [] }];

    // Seed editLength = 0, i.e. the content starts with the same values
    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
      // Identity per the equality and tokenizer
      return done([{ value: newString.join(''), count: newString.length }]);
    }

    // Main worker method. checks all permutations of a given edit length for acceptance.
    function execEditLength() {
      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
        var basePath = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;
        var addPath = bestPath[diagonalPath - 1],
            removePath = bestPath[diagonalPath + 1],
            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
        if (addPath) {
          // No one else is going to attempt to use this value, clear it
          bestPath[diagonalPath - 1] = undefined;
        }

        var canAdd = addPath && addPath.newPos + 1 < newLen,
            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;
        if (!canAdd && !canRemove) {
          // If this path is a terminal then prune
          bestPath[diagonalPath] = undefined;
          continue;
        }

        // Select the diagonal that we want to branch from. We select the prior
        // path whose position in the new string is the farthest from the origin
        // and does not pass the bounds of the diff graph
        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
          basePath = clonePath(removePath);
          self.pushComponent(basePath.components, undefined, true);
        } else {
          basePath = addPath; // No need to clone, we've pulled it from the list
          basePath.newPos++;
          self.pushComponent(basePath.components, true, undefined);
        }

        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);

        // If we have hit the end of both strings, then we are done
        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));
        } else {
          // Otherwise track this path as a potential candidate and continue.
          bestPath[diagonalPath] = basePath;
        }
      }

      editLength++;
    }

    // Performs the length of edit iteration. Is a bit fugly as this has to support the
    // sync and async mode which is never fun. Loops over execEditLength until a value
    // is produced.
    if (callback) {
      (function exec() {
        setTimeout(function () {
          // This should not happen, but we want to be safe.
          /* istanbul ignore next */
          if (editLength > maxEditLength) {
            return callback();
          }

          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength) {
        var ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  /*istanbul ignore start*/ /*istanbul ignore end*/pushComponent: function pushComponent(components, added, removed) {
    var last = components[components.length - 1];
    if (last && last.added === added && last.removed === removed) {
      // We need to clone here as the component clone operation is just
      // as shallow array clone
      components[components.length - 1] = { count: last.count + 1, added: added, removed: removed };
    } else {
      components.push({ count: 1, added: added, removed: removed });
    }
  },
  /*istanbul ignore start*/ /*istanbul ignore end*/extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
    var newLen = newString.length,
        oldLen = oldString.length,
        newPos = basePath.newPos,
        oldPos = newPos - diagonalPath,
        commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
      newPos++;
      oldPos++;
      commonCount++;
    }

    if (commonCount) {
      basePath.components.push({ count: commonCount });
    }

    basePath.newPos = newPos;
    return oldPos;
  },
  /*istanbul ignore start*/ /*istanbul ignore end*/equals: function equals(left, right) {
    return left === right;
  },
  /*istanbul ignore start*/ /*istanbul ignore end*/removeEmpty: function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  /*istanbul ignore start*/ /*istanbul ignore end*/castInput: function castInput(value) {
    return value;
  },
  /*istanbul ignore start*/ /*istanbul ignore end*/tokenize: function tokenize(value) {
    return value.split('');
  }
};

function buildValues(diff, components, newString, oldString, useLongestToken) {
  var componentPos = 0,
      componentLen = components.length,
      newPos = 0,
      oldPos = 0;

  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function (value, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value.length ? oldValue : value;
        });

        component.value = value.join('');
      } else {
        component.value = newString.slice(newPos, newPos + component.count).join('');
      }
      newPos += component.count;

      // Common case
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = oldString.slice(oldPos, oldPos + component.count).join('');
      oldPos += component.count;

      // Reverse add and remove so removes are output first to match common convention
      // The diffing algorithm is tied to add then remove output and this is the simplest
      // route to get the desired output with minimal overhead.
      if (componentPos && components[componentPos - 1].added) {
        var tmp = components[componentPos - 1];
        components[componentPos - 1] = components[componentPos];
        components[componentPos] = tmp;
      }
    }
  }

  // Special case handle for when one terminal is ignored. For this case we merge the
  // terminal into the prior string and drop the change.
  var lastComponent = components[componentLen - 1];
  if (componentLen > 1 && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {
    components[componentLen - 2].value += lastComponent.value;
    components.pop();
  }

  return components;
}

function clonePath(path) {
  return { newPos: path.newPos, components: path.components.slice(0) };
}


},{}],6:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.characterDiff = undefined;
exports. /*istanbul ignore end*/diffChars = diffChars;

var /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/var characterDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/characterDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;
function diffChars(oldStr, newStr, callback) {
  return characterDiff.diff(oldStr, newStr, callback);
}


},{"./base":5}],7:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.cssDiff = undefined;
exports. /*istanbul ignore end*/diffCss = diffCss;

var /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/var cssDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/cssDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;
cssDiff.tokenize = function (value) {
  return value.split(/([{}:;,]|\s+)/);
};

function diffCss(oldStr, newStr, callback) {
  return cssDiff.diff(oldStr, newStr, callback);
}


},{"./base":5}],8:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.jsonDiff = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports. /*istanbul ignore end*/diffJson = diffJson;
/*istanbul ignore start*/exports. /*istanbul ignore end*/canonicalize = canonicalize;

var /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

/*istanbul ignore end*/
var /*istanbul ignore start*/_line = require('./line') /*istanbul ignore end*/;

/*istanbul ignore start*/
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/

var objectPrototypeToString = Object.prototype.toString;

var jsonDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/jsonDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;
// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:
jsonDiff.useLongestToken = true;

jsonDiff.tokenize = /*istanbul ignore start*/_line.lineDiff. /*istanbul ignore end*/tokenize;
jsonDiff.castInput = function (value) {
  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value), undefined, '  ');
};
jsonDiff.equals = function (left, right) {
  return (/*istanbul ignore start*/_base2.default. /*istanbul ignore end*/prototype.equals(left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'))
  );
};

function diffJson(oldObj, newObj, callback) {
  return jsonDiff.diff(oldObj, newObj, callback);
}

// This function handles the presence of circular references by bailing out when encountering an
// object that is already on the "stack" of items being processed.
function canonicalize(obj, stack, replacementStack) {
  stack = stack || [];
  replacementStack = replacementStack || [];

  var i = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;

  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }

  var canonicalizedObj = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;

  if ('[object Array]' === objectPrototypeToString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }

  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }

  if ( /*istanbul ignore start*/(typeof /*istanbul ignore end*/obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    var sortedKeys = [],
        key = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;
    for (key in obj) {
      /* istanbul ignore else */
      if (obj.hasOwnProperty(key)) {
        sortedKeys.push(key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      key = sortedKeys[i];
      canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}


},{"./base":5,"./line":9}],9:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.lineDiff = undefined;
exports. /*istanbul ignore end*/diffLines = diffLines;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffTrimmedLines = diffTrimmedLines;

var /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

/*istanbul ignore end*/
var /*istanbul ignore start*/_params = require('../util/params') /*istanbul ignore end*/;

/*istanbul ignore start*/
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/var lineDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/lineDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;
lineDiff.tokenize = function (value) {
  var retLines = [],
      linesAndNewlines = value.split(/(\n|\r\n)/);

  // Ignore the final empty token that occurs if the string ends with a new line
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }

  // Merge the content and line separators into single tokens
  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line = linesAndNewlines[i];

    if (i % 2 && !this.options.newlineIsToken) {
      retLines[retLines.length - 1] += line;
    } else {
      if (this.options.ignoreWhitespace) {
        line = line.trim();
      }
      retLines.push(line);
    }
  }

  return retLines;
};

function diffLines(oldStr, newStr, callback) {
  return lineDiff.diff(oldStr, newStr, callback);
}
function diffTrimmedLines(oldStr, newStr, callback) {
  var options = /*istanbul ignore start*/(0, _params.generateOptions) /*istanbul ignore end*/(callback, { ignoreWhitespace: true });
  return lineDiff.diff(oldStr, newStr, options);
}


},{"../util/params":17,"./base":5}],10:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.sentenceDiff = undefined;
exports. /*istanbul ignore end*/diffSentences = diffSentences;

var /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/var sentenceDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/sentenceDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;
sentenceDiff.tokenize = function (value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};

function diffSentences(oldStr, newStr, callback) {
  return sentenceDiff.diff(oldStr, newStr, callback);
}


},{"./base":5}],11:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.wordDiff = undefined;
exports. /*istanbul ignore end*/diffWords = diffWords;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWordsWithSpace = diffWordsWithSpace;

var /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

/*istanbul ignore end*/
var /*istanbul ignore start*/_params = require('../util/params') /*istanbul ignore end*/;

/*istanbul ignore start*/
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/

// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
//
// Ranges and exceptions:
// Latin-1 Supplement, 0080–00FF
//  - U+00D7  × Multiplication sign
//  - U+00F7  ÷ Division sign
// Latin Extended-A, 0100–017F
// Latin Extended-B, 0180–024F
// IPA Extensions, 0250–02AF
// Spacing Modifier Letters, 02B0–02FF
//  - U+02C7  ˇ &#711;  Caron
//  - U+02D8  ˘ &#728;  Breve
//  - U+02D9  ˙ &#729;  Dot Above
//  - U+02DA  ˚ &#730;  Ring Above
//  - U+02DB  ˛ &#731;  Ogonek
//  - U+02DC  ˜ &#732;  Small Tilde
//  - U+02DD  ˝ &#733;  Double Acute Accent
// Latin Extended Additional, 1E00–1EFF
var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;

var reWhitespace = /\S/;

var wordDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/wordDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;
wordDiff.equals = function (left, right) {
  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
};
wordDiff.tokenize = function (value) {
  var tokens = value.split(/(\s+|\b)/);

  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.
  for (var i = 0; i < tokens.length - 1; i++) {
    // If we have an empty string in the next field and we have only word chars before and after, merge
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
      tokens[i] += tokens[i + 2];
      tokens.splice(i + 1, 2);
      i--;
    }
  }

  return tokens;
};

function diffWords(oldStr, newStr, callback) {
  var options = /*istanbul ignore start*/(0, _params.generateOptions) /*istanbul ignore end*/(callback, { ignoreWhitespace: true });
  return wordDiff.diff(oldStr, newStr, options);
}
function diffWordsWithSpace(oldStr, newStr, callback) {
  return wordDiff.diff(oldStr, newStr, callback);
}


},{"../util/params":17,"./base":5}],12:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports.canonicalize = exports.convertChangesToXML = exports.convertChangesToDMP = exports.parsePatch = exports.applyPatches = exports.applyPatch = exports.createPatch = exports.createTwoFilesPatch = exports.structuredPatch = exports.diffJson = exports.diffCss = exports.diffSentences = exports.diffTrimmedLines = exports.diffLines = exports.diffWordsWithSpace = exports.diffWords = exports.diffChars = exports.Diff = undefined;
/*istanbul ignore end*/
var /*istanbul ignore start*/_base = require('./diff/base') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);

/*istanbul ignore end*/
var /*istanbul ignore start*/_character = require('./diff/character') /*istanbul ignore end*/;

var /*istanbul ignore start*/_word = require('./diff/word') /*istanbul ignore end*/;

var /*istanbul ignore start*/_line = require('./diff/line') /*istanbul ignore end*/;

var /*istanbul ignore start*/_sentence = require('./diff/sentence') /*istanbul ignore end*/;

var /*istanbul ignore start*/_css = require('./diff/css') /*istanbul ignore end*/;

var /*istanbul ignore start*/_json = require('./diff/json') /*istanbul ignore end*/;

var /*istanbul ignore start*/_apply = require('./patch/apply') /*istanbul ignore end*/;

var /*istanbul ignore start*/_parse = require('./patch/parse') /*istanbul ignore end*/;

var /*istanbul ignore start*/_create = require('./patch/create') /*istanbul ignore end*/;

var /*istanbul ignore start*/_dmp = require('./convert/dmp') /*istanbul ignore end*/;

var /*istanbul ignore start*/_xml = require('./convert/xml') /*istanbul ignore end*/;

/*istanbul ignore start*/
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* See LICENSE file for terms of use */

/*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */
exports. /*istanbul ignore end*/Diff = _base2.default;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffChars = _character.diffChars;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWords = _word.diffWords;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWordsWithSpace = _word.diffWordsWithSpace;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffLines = _line.diffLines;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffTrimmedLines = _line.diffTrimmedLines;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffSentences = _sentence.diffSentences;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffCss = _css.diffCss;
/*istanbul ignore start*/exports. /*istanbul ignore end*/diffJson = _json.diffJson;
/*istanbul ignore start*/exports. /*istanbul ignore end*/structuredPatch = _create.structuredPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/createTwoFilesPatch = _create.createTwoFilesPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/createPatch = _create.createPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatch = _apply.applyPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatches = _apply.applyPatches;
/*istanbul ignore start*/exports. /*istanbul ignore end*/parsePatch = _parse.parsePatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/convertChangesToDMP = _dmp.convertChangesToDMP;
/*istanbul ignore start*/exports. /*istanbul ignore end*/convertChangesToXML = _xml.convertChangesToXML;
/*istanbul ignore start*/exports. /*istanbul ignore end*/canonicalize = _json.canonicalize;


},{"./convert/dmp":3,"./convert/xml":4,"./diff/base":5,"./diff/character":6,"./diff/css":7,"./diff/json":8,"./diff/line":9,"./diff/sentence":10,"./diff/word":11,"./patch/apply":13,"./patch/create":14,"./patch/parse":15}],13:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports. /*istanbul ignore end*/applyPatch = applyPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatches = applyPatches;

var /*istanbul ignore start*/_parse = require('./parse') /*istanbul ignore end*/;

var /*istanbul ignore start*/_distanceIterator = require('../util/distance-iterator') /*istanbul ignore end*/;

/*istanbul ignore start*/
var _distanceIterator2 = _interopRequireDefault(_distanceIterator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*istanbul ignore end*/function applyPatch(source, uniDiff) {
  /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  if (typeof uniDiff === 'string') {
    uniDiff = /*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(uniDiff);
  }

  if (Array.isArray(uniDiff)) {
    if (uniDiff.length > 1) {
      throw new Error('applyPatch only works with a single input.');
    }

    uniDiff = uniDiff[0];
  }

  // Apply the diff to the input
  var lines = source.split('\n'),
      hunks = uniDiff.hunks,
      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) /*istanbul ignore start*/{
    return (/*istanbul ignore end*/line === patchContent
    );
  },
      errorCount = 0,
      fuzzFactor = options.fuzzFactor || 0,
      minLine = 0,
      offset = 0,
      removeEOFNL = /*istanbul ignore start*/void 0 /*istanbul ignore end*/,
      addEOFNL = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;

  /**
   * Checks if the hunk exactly fits on the provided location
   */
  function hunkFits(hunk, toPos) {
    for (var j = 0; j < hunk.lines.length; j++) {
      var line = hunk.lines[j],
          operation = line[0],
          content = line.substr(1);

      if (operation === ' ' || operation === '-') {
        // Context sanity check
        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
          errorCount++;

          if (errorCount > fuzzFactor) {
            return false;
          }
        }
        toPos++;
      }
    }

    return true;
  }

  // Search best fit offsets for each hunk based on the previous ones
  for (var i = 0; i < hunks.length; i++) {
    var hunk = hunks[i],
        maxLine = lines.length - hunk.oldLines,
        localOffset = 0,
        toPos = offset + hunk.oldStart - 1;

    var iterator = /*istanbul ignore start*/(0, _distanceIterator2.default) /*istanbul ignore end*/(toPos, minLine, maxLine);

    for (; localOffset !== undefined; localOffset = iterator()) {
      if (hunkFits(hunk, toPos + localOffset)) {
        hunk.offset = offset += localOffset;
        break;
      }
    }

    if (localOffset === undefined) {
      return false;
    }

    // Set lower text limit to end of the current hunk, so next ones don't try
    // to fit over already patched text
    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
  }

  // Apply patch hunks
  for (var _i = 0; _i < hunks.length; _i++) {
    var _hunk = hunks[_i],
        _toPos = _hunk.offset + _hunk.newStart - 1;
    if (_hunk.newLines == 0) {
      _toPos++;
    }

    for (var j = 0; j < _hunk.lines.length; j++) {
      var line = _hunk.lines[j],
          operation = line[0],
          content = line.substr(1);

      if (operation === ' ') {
        _toPos++;
      } else if (operation === '-') {
        lines.splice(_toPos, 1);
        /* istanbul ignore else */
      } else if (operation === '+') {
          lines.splice(_toPos, 0, content);
          _toPos++;
        } else if (operation === '\\') {
          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;
          if (previousOperation === '+') {
            removeEOFNL = true;
          } else if (previousOperation === '-') {
            addEOFNL = true;
          }
        }
    }
  }

  // Handle EOFNL insertion/removal
  if (removeEOFNL) {
    while (!lines[lines.length - 1]) {
      lines.pop();
    }
  } else if (addEOFNL) {
    lines.push('');
  }
  return lines.join('\n');
}

// Wrapper that supports multiple file patches via callbacks.
function applyPatches(uniDiff, options) {
  if (typeof uniDiff === 'string') {
    uniDiff = /*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(uniDiff);
  }

  var currentIndex = 0;
  function processIndex() {
    var index = uniDiff[currentIndex++];
    if (!index) {
      return options.complete();
    }

    options.loadFile(index, function (err, data) {
      if (err) {
        return options.complete(err);
      }

      var updatedContent = applyPatch(data, index, options);
      options.patched(index, updatedContent);

      setTimeout(processIndex, 0);
    });
  }
  processIndex();
}


},{"../util/distance-iterator":16,"./parse":15}],14:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports. /*istanbul ignore end*/structuredPatch = structuredPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/createTwoFilesPatch = createTwoFilesPatch;
/*istanbul ignore start*/exports. /*istanbul ignore end*/createPatch = createPatch;

var /*istanbul ignore start*/_line = require('../diff/line') /*istanbul ignore end*/;

/*istanbul ignore start*/
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*istanbul ignore end*/function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
  if (!options) {
    options = { context: 4 };
  }

  var diff = /*istanbul ignore start*/(0, _line.diffLines) /*istanbul ignore end*/(oldStr, newStr);
  diff.push({ value: '', lines: [] }); // Append an empty value to make cleanup easier

  function contextLines(lines) {
    return lines.map(function (entry) {
      return ' ' + entry;
    });
  }

  var hunks = [];
  var oldRangeStart = 0,
      newRangeStart = 0,
      curRange = [],
      oldLine = 1,
      newLine = 1;
  /*istanbul ignore start*/
  var _loop = function _loop( /*istanbul ignore end*/i) {
    var current = diff[i],
        lines = current.lines || current.value.replace(/\n$/, '').split('\n');
    current.lines = lines;

    if (current.added || current.removed) {
      /*istanbul ignore start*/
      var _curRange;

      /*istanbul ignore end*/
      // If we have previous context, start with that
      if (!oldRangeStart) {
        var prev = diff[i - 1];
        oldRangeStart = oldLine;
        newRangeStart = newLine;

        if (prev) {
          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
          oldRangeStart -= curRange.length;
          newRangeStart -= curRange.length;
        }
      }

      // Output our changes
      /*istanbul ignore start*/(_curRange = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/lines.map(function (entry) {
        return (current.added ? '+' : '-') + entry;
      })));

      // Track the updated file position
      if (current.added) {
        newLine += lines.length;
      } else {
        oldLine += lines.length;
      }
    } else {
      // Identical context lines. Track line changes
      if (oldRangeStart) {
        // Close out any changes that have been output (or join overlapping)
        if (lines.length <= options.context * 2 && i < diff.length - 2) {
          /*istanbul ignore start*/
          var _curRange2;

          /*istanbul ignore end*/
          // Overlapping
          /*istanbul ignore start*/(_curRange2 = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange2 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/contextLines(lines)));
        } else {
          /*istanbul ignore start*/
          var _curRange3;

          /*istanbul ignore end*/
          // end the range and output
          var contextSize = Math.min(lines.length, options.context);
          /*istanbul ignore start*/(_curRange3 = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange3 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/contextLines(lines.slice(0, contextSize))));

          var hunk = {
            oldStart: oldRangeStart,
            oldLines: oldLine - oldRangeStart + contextSize,
            newStart: newRangeStart,
            newLines: newLine - newRangeStart + contextSize,
            lines: curRange
          };
          if (i >= diff.length - 2 && lines.length <= options.context) {
            // EOF is inside this hunk
            var oldEOFNewline = /\n$/.test(oldStr);
            var newEOFNewline = /\n$/.test(newStr);
            if (lines.length == 0 && !oldEOFNewline) {
              // special case: old has no eol and no trailing context; no-nl can end up before adds
              curRange.splice(hunk.oldLines, 0, '\\ No newline at end of file');
            } else if (!oldEOFNewline || !newEOFNewline) {
              curRange.push('\\ No newline at end of file');
            }
          }
          hunks.push(hunk);

          oldRangeStart = 0;
          newRangeStart = 0;
          curRange = [];
        }
      }
      oldLine += lines.length;
      newLine += lines.length;
    }
  };

  for (var i = 0; i < diff.length; i++) {
    /*istanbul ignore start*/
    _loop( /*istanbul ignore end*/i);
  }

  return {
    oldFileName: oldFileName, newFileName: newFileName,
    oldHeader: oldHeader, newHeader: newHeader,
    hunks: hunks
  };
}

function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
  var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);

  var ret = [];
  if (oldFileName == newFileName) {
    ret.push('Index: ' + oldFileName);
  }
  ret.push('===================================================================');
  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\t' + diff.oldHeader));
  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\t' + diff.newHeader));

  for (var i = 0; i < diff.hunks.length; i++) {
    var hunk = diff.hunks[i];
    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');
    ret.push.apply(ret, hunk.lines);
  }

  return ret.join('\n') + '\n';
}

function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
}


},{"../diff/line":9}],15:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports. /*istanbul ignore end*/parsePatch = parsePatch;
function parsePatch(uniDiff) {
  /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var diffstr = uniDiff.split('\n'),
      list = [],
      i = 0;

  function parseIndex() {
    var index = {};
    list.push(index);

    // Parse diff metadata
    while (i < diffstr.length) {
      var line = diffstr[i];

      // File header found, end parsing diff metadata
      if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
        break;
      }

      // Diff index
      var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
      if (header) {
        index.index = header[1];
      }

      i++;
    }

    // Parse file headers if they are defined. Unified diff requires them, but
    // there's no technical issues to have an isolated hunk without file header
    parseFileHeader(index);
    parseFileHeader(index);

    // Parse hunks
    index.hunks = [];

    while (i < diffstr.length) {
      var _line = diffstr[i];

      if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
        break;
      } else if (/^@@/.test(_line)) {
        index.hunks.push(parseHunk());
      } else if (_line && options.strict) {
        // Ignore unexpected content unless in strict mode
        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));
      } else {
        i++;
      }
    }
  }

  // Parses the --- and +++ headers, if none are found, no lines
  // are consumed.
  function parseFileHeader(index) {
    var fileHeader = /^(\-\-\-|\+\+\+)\s+(\S*)\s?(.*?)\s*$/.exec(diffstr[i]);
    if (fileHeader) {
      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';
      index[keyPrefix + 'FileName'] = fileHeader[2];
      index[keyPrefix + 'Header'] = fileHeader[3];

      i++;
    }
  }

  // Parses a hunk
  // This assumes that we are at the start of a hunk.
  function parseHunk() {
    var chunkHeaderIndex = i,
        chunkHeaderLine = diffstr[i++],
        chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);

    var hunk = {
      oldStart: +chunkHeader[1],
      oldLines: +chunkHeader[2] || 1,
      newStart: +chunkHeader[3],
      newLines: +chunkHeader[4] || 1,
      lines: []
    };

    var addCount = 0,
        removeCount = 0;
    for (; i < diffstr.length; i++) {
      var operation = diffstr[i][0];

      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\') {
        hunk.lines.push(diffstr[i]);

        if (operation === '+') {
          addCount++;
        } else if (operation === '-') {
          removeCount++;
        } else if (operation === ' ') {
          addCount++;
          removeCount++;
        }
      } else {
        break;
      }
    }

    // Handle the empty block count case
    if (!addCount && hunk.newLines === 1) {
      hunk.newLines = 0;
    }
    if (!removeCount && hunk.oldLines === 1) {
      hunk.oldLines = 0;
    }

    // Perform optional sanity checking
    if (options.strict) {
      if (addCount !== hunk.newLines) {
        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
      }
      if (removeCount !== hunk.oldLines) {
        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
      }
    }

    return hunk;
  }

  while (i < diffstr.length) {
    parseIndex();
  }

  return list;
}


},{}],16:[function(require,module,exports){
/*istanbul ignore start*/"use strict";

exports.__esModule = true;

exports.default = /*istanbul ignore end*/function (start, minLine, maxLine) {
  var wantForward = true,
      backwardExhausted = false,
      forwardExhausted = false,
      localOffset = 1;

  return function iterator() {
    if (wantForward && !forwardExhausted) {
      if (backwardExhausted) {
        localOffset++;
      } else {
        wantForward = false;
      }

      // Check if trying to fit beyond text length, and if not, check it fits
      // after offset location (or desired location on first iteration)
      if (start + localOffset <= maxLine) {
        return localOffset;
      }

      forwardExhausted = true;
    }

    if (!backwardExhausted) {
      if (!forwardExhausted) {
        wantForward = true;
      }

      // Check if trying to fit before text beginning, and if not, check it fits
      // before offset location
      if (minLine <= start - localOffset) {
        return - localOffset++;
      }

      backwardExhausted = true;
      return iterator();
    }

    // We tried to fit hunk before text beginning and beyond text lenght, then
    // hunk can't fit on the text. Return undefined
  };
};


},{}],17:[function(require,module,exports){
/*istanbul ignore start*/'use strict';

exports.__esModule = true;
exports. /*istanbul ignore end*/generateOptions = generateOptions;
function generateOptions(options, defaults) {
  if (typeof options === 'function') {
    defaults.callback = options;
  } else if (options) {
    for (var name in options) {
      /* istanbul ignore else */
      if (options.hasOwnProperty(name)) {
        defaults[name] = options[name];
      }
    }
  }
  return defaults;
}


},{}],18:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],19:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],20:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

var lcs = require('./lib/lcs');
var array = require('./lib/array');
var patch = require('./lib/jsonPatch');
var inverse = require('./lib/inverse');
var jsonPointer = require('./lib/jsonPointer');
var encodeSegment = jsonPointer.encodeSegment;

exports.diff = diff;
exports.patch = patch.apply;
exports.patchInPlace = patch.applyInPlace;
exports.inverse = inverse;
exports.clone = patch.clone;

// Errors
exports.InvalidPatchOperationError = require('./lib/InvalidPatchOperationError');
exports.TestFailedError = require('./lib/TestFailedError');
exports.PatchNotInvertibleError = require('./lib/PatchNotInvertibleError');

var isValidObject = patch.isValidObject;
var defaultHash = patch.defaultHash;

/**
 * Compute a JSON Patch representing the differences between a and b.
 * @param {object|array|string|number|null} a
 * @param {object|array|string|number|null} b
 * @param {?function|?object} options if a function, see options.hash
 * @param {?function(x:*):String|Number} options.hash used to hash array items
 *  in order to recognize identical objects, defaults to JSON.stringify
 * @param {?function(index:Number, array:Array):object} options.makeContext
 *  used to generate patch context. If not provided, context will not be generated
 * @returns {array} JSON Patch such that patch(diff(a, b), a) ~ b
 */
function diff(a, b, options) {
	return appendChanges(a, b, '', initState(options, [])).patch;
}

/**
 * Create initial diff state from the provided options
 * @param {?function|?object} options @see diff options above
 * @param {array} patch an empty or existing JSON Patch array into which
 *  the diff should generate new patch operations
 * @returns {object} initialized diff state
 */
function initState(options, patch) {
	if(typeof options === 'object') {
		return {
			patch: patch,
			hash: orElse(isFunction, options.hash, defaultHash),
			makeContext: orElse(isFunction, options.makeContext, defaultContext),
			invertible: !(options.invertible === false)
		};
	} else {
		return {
			patch: patch,
			hash: orElse(isFunction, options, defaultHash),
			makeContext: defaultContext,
			invertible: true
		};
	}
}

/**
 * Given two JSON values (object, array, number, string, etc.), find their
 * differences and append them to the diff state
 * @param {object|array|string|number|null} a
 * @param {object|array|string|number|null} b
 * @param {string} path
 * @param {object} state
 * @returns {Object} updated diff state
 */
function appendChanges(a, b, path, state) {
	if(Array.isArray(a) && Array.isArray(b)) {
		return appendArrayChanges(a, b, path, state);
	}

	if(isValidObject(a) && isValidObject(b)) {
		return appendObjectChanges(a, b, path, state);
	}

	return appendValueChanges(a, b, path, state);
}

/**
 * Given two objects, find their differences and append them to the diff state
 * @param {object} o1
 * @param {object} o2
 * @param {string} path
 * @param {object} state
 * @returns {Object} updated diff state
 */
function appendObjectChanges(o1, o2, path, state) {
	var keys = Object.keys(o2);
	var patch = state.patch;
	var i, key;

	for(i=keys.length-1; i>=0; --i) {
		key = keys[i];
		var keyPath = path + '/' + encodeSegment(key);
		if(o1[key] !== void 0) {
			appendChanges(o1[key], o2[key], keyPath, state);
		} else {
			patch.push({ op: 'add', path: keyPath, value: o2[key] });
		}
	}

	keys = Object.keys(o1);
	for(i=keys.length-1; i>=0; --i) {
		key = keys[i];
		if(o2[key] === void 0) {
			var p = path + '/' + encodeSegment(key);
			if(state.invertible) {
				patch.push({ op: 'test', path: p, value: o1[key] });
			}
			patch.push({ op: 'remove', path: p });
		}
	}

	return state;
}

/**
 * Given two arrays, find their differences and append them to the diff state
 * @param {array} a1
 * @param {array} a2
 * @param {string} path
 * @param {object} state
 * @returns {Object} updated diff state
 */
function appendArrayChanges(a1, a2, path, state) {
	var a1hash = array.map(state.hash, a1);
	var a2hash = array.map(state.hash, a2);

	var lcsMatrix = lcs.compare(a1hash, a2hash);

	return lcsToJsonPatch(a1, a2, path, state, lcsMatrix);
}

/**
 * Transform an lcsMatrix into JSON Patch operations and append
 * them to state.patch, recursing into array elements as necessary
 * @param {array} a1
 * @param {array} a2
 * @param {string} path
 * @param {object} state
 * @param {object} lcsMatrix
 * @returns {object} new state with JSON Patch operations added based
 *  on the provided lcsMatrix
 */
function lcsToJsonPatch(a1, a2, path, state, lcsMatrix) {
	var offset = 0;
	return lcs.reduce(function(state, op, i, j) {
		var last, context;
		var patch = state.patch;
		var p = path + '/' + (j + offset);

		if (op === lcs.REMOVE) {
			// Coalesce adjacent remove + add into replace
			last = patch[patch.length-1];
			context = state.makeContext(j, a1);

			if(state.invertible) {
				patch.push({ op: 'test', path: p, value: a1[j], context: context });
			}

			if(last !== void 0 && last.op === 'add' && last.path === p) {
				last.op = 'replace';
				last.context = context;
			} else {
				patch.push({ op: 'remove', path: p, context: context });
			}

			offset -= 1;

		} else if (op === lcs.ADD) {
			// See https://tools.ietf.org/html/rfc6902#section-4.1
			// May use either index===length *or* '-' to indicate appending to array
			patch.push({ op: 'add', path: p, value: a2[i],
				context: state.makeContext(j, a1)
			});

			offset += 1;

		} else {
			appendChanges(a1[j], a2[i], p, state);
		}

		return state;

	}, state, lcsMatrix);
}

/**
 * Given two number|string|null values, if they differ, append to diff state
 * @param {string|number|null} a
 * @param {string|number|null} b
 * @param {string} path
 * @param {object} state
 * @returns {object} updated diff state
 */
function appendValueChanges(a, b, path, state) {
	if(a !== b) {
		if(state.invertible) {
			state.patch.push({ op: 'test', path: path, value: a });
		}

		state.patch.push({ op: 'replace', path: path, value: b });
	}

	return state;
}

/**
 * @param {function} predicate
 * @param {*} x
 * @param {*} y
 * @returns {*} x if predicate(x) is truthy, otherwise y
 */
function orElse(predicate, x, y) {
	return predicate(x) ? x : y;
}

/**
 * Default patch context generator
 * @returns {undefined} undefined context
 */
function defaultContext() {
	return void 0;
}

/**
 * @param {*} x
 * @returns {boolean} true if x is a function, false otherwise
 */
function isFunction(x) {
	return typeof x === 'function';
}

},{"./lib/InvalidPatchOperationError":21,"./lib/PatchNotInvertibleError":22,"./lib/TestFailedError":23,"./lib/array":24,"./lib/inverse":28,"./lib/jsonPatch":29,"./lib/jsonPointer":30,"./lib/lcs":32}],21:[function(require,module,exports){
module.exports = InvalidPatchOperationError;

function InvalidPatchOperationError(message) {
	Error.call(this);
	this.name = this.constructor.name;
	this.message = message;
	if(typeof Error.captureStackTrace === 'function') {
		Error.captureStackTrace(this, this.constructor);
	}
}

InvalidPatchOperationError.prototype = Object.create(Error.prototype);
InvalidPatchOperationError.prototype.constructor = InvalidPatchOperationError;
},{}],22:[function(require,module,exports){
module.exports = PatchNotInvertibleError;

function PatchNotInvertibleError(message) {
	Error.call(this);
	this.name = this.constructor.name;
	this.message = message;
	if(typeof Error.captureStackTrace === 'function') {
		Error.captureStackTrace(this, this.constructor);
	}
}

PatchNotInvertibleError.prototype = Object.create(Error.prototype);
PatchNotInvertibleError.prototype.constructor = PatchNotInvertibleError;
},{}],23:[function(require,module,exports){
module.exports = TestFailedError;

function TestFailedError(message) {
	Error.call(this);
	this.name = this.constructor.name;
	this.message = message;
	if(typeof Error.captureStackTrace === 'function') {
		Error.captureStackTrace(this, this.constructor);
	}
}

TestFailedError.prototype = Object.create(Error.prototype);
TestFailedError.prototype.constructor = TestFailedError;
},{}],24:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

exports.cons = cons;
exports.tail = tail;
exports.map = map;

/**
 * Prepend x to a, without mutating a. Faster than a.unshift(x)
 * @param {*} x
 * @param {Array} a array-like
 * @returns {Array} new Array with x prepended
 */
function cons(x, a) {
	var l = a.length;
	var b = new Array(l+1);
	b[0] = x;
	for(var i=0; i<l; ++i) {
		b[i+1] = a[i];
	}

	return b;
}

/**
 * Create a new Array containing all elements in a, except the first.
 *  Faster than a.slice(1)
 * @param {Array} a array-like
 * @returns {Array} new Array, the equivalent of a.slice(1)
 */
function tail(a) {
	var l = a.length-1;
	var b = new Array(l);
	for(var i=0; i<l; ++i) {
		b[i] = a[i+1];
	}

	return b;
}

/**
 * Map any array-like. Faster than Array.prototype.map
 * @param {function} f
 * @param {Array} a array-like
 * @returns {Array} new Array mapped by f
 */
function map(f, a) {
	var b = new Array(a.length);
	for(var i=0; i< a.length; ++i) {
		b[i] = f(a[i]);
	}
	return b;
}
},{}],25:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/**
 * Create a deep copy of x which must be a legal JSON object/array/value
 * @param {object|array|string|number|null} x object/array/value to clone
 * @returns {object|array|string|number|null} clone of x
 */
module.exports = clone;

function clone(x) {
	if(x == null || typeof x !== 'object') {
		return x;
	}

	if(Array.isArray(x)) {
		return cloneArray(x);
	}

	return cloneObject(x);
}

function cloneArray (x) {
	var l = x.length;
	var y = new Array(l);

	for (var i = 0; i < l; ++i) {
		y[i] = clone(x[i]);
	}

	return y;
}

function cloneObject (x) {
	var keys = Object.keys(x);
	var y = {};

	for (var k, i = 0, l = keys.length; i < l; ++i) {
		k = keys[i];
		y[k] = clone(x[k]);
	}

	return y;
}

},{}],26:[function(require,module,exports){
var jsonPointer = require('./jsonPointer');

/**
 * commute the patch sequence a,b to b,a
 * @param {object} a patch operation
 * @param {object} b patch operation
 */
module.exports = function commutePaths(a, b) {
	// TODO: cases for special paths: '' and '/'
	var left = jsonPointer.parse(a.path);
	var right = jsonPointer.parse(b.path);
	var prefix = getCommonPathPrefix(left, right);
	var isArray = isArrayPath(left, right, prefix.length);

	// Never mutate the originals
	var ac = copyPatch(a);
	var bc = copyPatch(b);

	if(prefix.length === 0 && !isArray) {
		// Paths share no common ancestor, simple swap
		return [bc, ac];
	}

	if(isArray) {
		return commuteArrayPaths(ac, left, bc, right);
	} else {
		return commuteTreePaths(ac, left, bc, right);
	}
};

function commuteTreePaths(a, left, b, right) {
	if(a.path === b.path) {
		throw new TypeError('cannot commute ' + a.op + ',' + b.op + ' with identical object paths');
	}
	// FIXME: Implement tree path commutation
	return [b, a];
}

/**
 * Commute two patches whose common ancestor (which may be the immediate parent)
 * is an array
 * @param a
 * @param left
 * @param b
 * @param right
 * @returns {*}
 */
function commuteArrayPaths(a, left, b, right) {
	if(left.length === right.length) {
		return commuteArraySiblings(a, left, b, right);
	}

	if (left.length > right.length) {
		// left is longer, commute by "moving" it to the right
		left = commuteArrayAncestor(b, right, a, left, -1);
		a.path = jsonPointer.absolute(jsonPointer.join(left));
	} else {
		// right is longer, commute by "moving" it to the left
		right = commuteArrayAncestor(a, left, b, right, 1);
		b.path = jsonPointer.absolute(jsonPointer.join(right));
	}

	return [b, a];
}

function isArrayPath(left, right, index) {
	return jsonPointer.isValidArrayIndex(left[index])
		&& jsonPointer.isValidArrayIndex(right[index]);
}

/**
 * Commute two patches referring to items in the same array
 * @param l
 * @param lpath
 * @param r
 * @param rpath
 * @returns {*[]}
 */
function commuteArraySiblings(l, lpath, r, rpath) {

	var target = lpath.length-1;
	var lindex = +lpath[target];
	var rindex = +rpath[target];

	var commuted;

	if(lindex < rindex) {
		// Adjust right path
		if(l.op === 'add' || l.op === 'copy') {
			commuted = rpath.slice();
			commuted[target] = Math.max(0, rindex - 1);
			r.path = jsonPointer.absolute(jsonPointer.join(commuted));
		} else if(l.op === 'remove') {
			commuted = rpath.slice();
			commuted[target] = rindex + 1;
			r.path = jsonPointer.absolute(jsonPointer.join(commuted));
		}
	} else if(r.op === 'add' || r.op === 'copy') {
		// Adjust left path
		commuted = lpath.slice();
		commuted[target] = lindex + 1;
		l.path = jsonPointer.absolute(jsonPointer.join(commuted));
	} else if (lindex > rindex && r.op === 'remove') {
		// Adjust left path only if remove was at a (strictly) lower index
		commuted = lpath.slice();
		commuted[target] = Math.max(0, lindex - 1);
		l.path = jsonPointer.absolute(jsonPointer.join(commuted));
	}

	return [r, l];
}

/**
 * Commute two patches with a common array ancestor
 * @param l
 * @param lpath
 * @param r
 * @param rpath
 * @param direction
 * @returns {*}
 */
function commuteArrayAncestor(l, lpath, r, rpath, direction) {
	// rpath is longer or same length

	var target = lpath.length-1;
	var lindex = +lpath[target];
	var rindex = +rpath[target];

	// Copy rpath, then adjust its array index
	var rc = rpath.slice();

	if(lindex > rindex) {
		return rc;
	}

	if(l.op === 'add' || l.op === 'copy') {
		rc[target] = Math.max(0, rindex - direction);
	} else if(l.op === 'remove') {
		rc[target] = Math.max(0, rindex + direction);
	}

	return rc;
}

function getCommonPathPrefix(p1, p2) {
	var p1l = p1.length;
	var p2l = p2.length;
	if(p1l === 0 || p2l === 0 || (p1l < 2 && p2l < 2)) {
		return [];
	}

	// If paths are same length, the last segment cannot be part
	// of a common prefix.  If not the same length, the prefix cannot
	// be longer than the shorter path.
	var l = p1l === p2l
		? p1l - 1
		: Math.min(p1l, p2l);

	var i = 0;
	while(i < l && p1[i] === p2[i]) {
		++i
	}

	return p1.slice(0, i);
}

function copyPatch(p) {
	if(p.op === 'remove') {
		return { op: p.op, path: p.path };
	}

	if(p.op === 'copy' || p.op === 'move') {
		return { op: p.op, path: p.path, from: p.from };
	}

	// test, add, replace
	return { op: p.op, path: p.path, value: p.value };
}
},{"./jsonPointer":30}],27:[function(require,module,exports){
module.exports = deepEquals;

/**
 * Compare 2 JSON values, or recursively compare 2 JSON objects or arrays
 * @param {object|array|string|number|boolean|null} a
 * @param {object|array|string|number|boolean|null} b
 * @returns {boolean} true iff a and b are recursively equal
 */
function deepEquals(a, b) {
	if(a === b) {
		return true;
	}

	if(Array.isArray(a) && Array.isArray(b)) {
		return compareArrays(a, b);
	}

	if(typeof a === 'object' && typeof b === 'object') {
		return compareObjects(a, b);
	}

	return false;
}

function compareArrays(a, b) {
	if(a.length !== b.length) {
		return false;
	}

	for(var i = 0; i<a.length; ++i) {
		if(!deepEquals(a[i], b[i])) {
			return false;
		}
	}

	return true;
}

function compareObjects(a, b) {
	if((a === null && b !== null) || (a !== null && b === null)) {
		return false;
	}

	var akeys = Object.keys(a);
	var bkeys = Object.keys(b);

	if(akeys.length !== bkeys.length) {
		return false;
	}

	for(var i = 0, k; i<akeys.length; ++i) {
		k = akeys[i];
		if(!(k in b && deepEquals(a[k], b[k]))) {
			return false;
		}
	}

	return true;
}
},{}],28:[function(require,module,exports){
var patches = require('./patches');

module.exports = function inverse(p) {
	var pr = [];
	var i, skip;
	for(i = p.length-1; i>= 0; i -= skip) {
		skip = invertOp(pr, p[i], i, p);
	}

	return pr;
};

function invertOp(patch, c, i, context) {
	var op = patches[c.op];
	return op !== void 0 && typeof op.inverse === 'function'
		? op.inverse(patch, c, i, context)
		: 1;
}

},{"./patches":33}],29:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

var patches = require('./patches');
var clone = require('./clone');
var InvalidPatchOperationError = require('./InvalidPatchOperationError');

exports.apply = patch;
exports.applyInPlace = patchInPlace;
exports.clone = clone;
exports.isValidObject = isValidObject;
exports.defaultHash = defaultHash;

var defaultOptions = {};

/**
 * Apply the supplied JSON Patch to x
 * @param {array} changes JSON Patch
 * @param {object|array|string|number} x object/array/value to patch
 * @param {object} options
 * @param {function(index:Number, array:Array, context:object):Number} options.findContext
 *  function used adjust array indexes for smarty/fuzzy patching, for
 *  patches containing context
 * @returns {object|array|string|number} patched version of x. If x is
 *  an array or object, it will be mutated and returned. Otherwise, if
 *  x is a value, the new value will be returned.
 */
function patch(changes, x, options) {
	return patchInPlace(changes, clone(x), options);
}

function patchInPlace(changes, x, options) {
	if(!options) {
		options = defaultOptions;
	}

	// TODO: Consider throwing if changes is not an array
	if(!Array.isArray(changes)) {
		return x;
	}

	var patch, p;
	for(var i=0; i<changes.length; ++i) {
		p = changes[i];
		patch = patches[p.op];

		if(patch === void 0) {
			throw new InvalidPatchOperationError('invalid op ' + JSON.stringify(p));
		}

		x = patch.apply(x, p, options);
	}

	return x;
}

function defaultHash(x) {
	return isValidObject(x) || isArray(x) ? JSON.stringify(x) : x;
}

function isValidObject (x) {
	return x !== null && Object.prototype.toString.call(x) === '[object Object]';
}

function isArray (x) {
	return Object.prototype.toString.call(x) === '[object Array]';
}

},{"./InvalidPatchOperationError":21,"./clone":25,"./patches":33}],30:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

var _parse = require('./jsonPointerParse');

exports.find = find;
exports.join = join;
exports.absolute = absolute;
exports.parse = parse;
exports.contains = contains;
exports.encodeSegment = encodeSegment;
exports.decodeSegment = decodeSegment;
exports.parseArrayIndex = parseArrayIndex;
exports.isValidArrayIndex = isValidArrayIndex;

// http://tools.ietf.org/html/rfc6901#page-2
var separator = '/';
var separatorRx = /\//g;
var encodedSeparator = '~1';
var encodedSeparatorRx = /~1/g;

var escapeChar = '~';
var escapeRx = /~/g;
var encodedEscape = '~0';
var encodedEscapeRx = /~0/g;

/**
 * Find the parent of the specified path in x and return a descriptor
 * containing the parent and a key.  If the parent does not exist in x,
 * return undefined, instead.
 * @param {object|array} x object or array in which to search
 * @param {string} path JSON Pointer string (encoded)
 * @param {?function(index:Number, array:Array, context:object):Number} findContext
 *  optional function used adjust array indexes for smarty/fuzzy patching, for
 *  patches containing context.  If provided, context MUST also be provided.
 * @param {?{before:Array, after:Array}} context optional patch context for
 *  findContext to use to adjust array indices.  If provided, findContext MUST
 *  also be provided.
 * @returns {{target:object|array|number|string, key:string}|undefined}
 */
function find(x, path, findContext, context) {
	if(typeof path !== 'string') {
		return;
	}

	if(path === '') {
		// whole document
		return { target: x, key: void 0 };
	}

	if(path === separator) {
		return { target: x, key: '' };
	}

	var parent = x, key;
	var hasContext = context !== void 0;

	_parse(path, function(segment) {
		// hm... this seems like it should be if(typeof x === 'undefined')
		if(x == null) {
			// Signal that we prematurely hit the end of the path hierarchy.
			parent = null;
			return false;
		}

		if(Array.isArray(x)) {
			key = hasContext
				? findIndex(findContext, parseArrayIndex(segment), x, context)
				: segment === '-' ? segment : parseArrayIndex(segment);
		} else {
			key = segment;
		}

		parent = x;
		x = x[key];
	});

	return parent === null
		? void 0
		: { target: parent, key: key };
}

function absolute(path) {
	return path[0] === separator ? path : separator + path;
}

function join(segments) {
	return segments.join(separator);
}

function parse(path) {
	var segments = [];
	_parse(path, segments.push.bind(segments));
	return segments;
}

function contains(a, b) {
	return b.indexOf(a) === 0 && b[a.length] === separator;
}

/**
 * Decode a JSON Pointer path segment
 * @see http://tools.ietf.org/html/rfc6901#page-3
 * @param {string} s encoded segment
 * @returns {string} decoded segment
 */
function decodeSegment(s) {
	// See: http://tools.ietf.org/html/rfc6901#page-3
	return s.replace(encodedSeparatorRx, separator).replace(encodedEscapeRx, escapeChar);
}

/**
 * Encode a JSON Pointer path segment
 * @see http://tools.ietf.org/html/rfc6901#page-3
 * @param {string} s decoded segment
 * @returns {string} encoded segment
 */
function encodeSegment(s) {
	return s.replace(escapeRx, encodedEscape).replace(separatorRx, encodedSeparator);
}

var arrayIndexRx = /^(0|[1-9]\d*)$/;

/**
 * Return true if s is a valid JSON Pointer array index
 * @param {String} s
 * @returns {boolean}
 */
function isValidArrayIndex(s) {
	return arrayIndexRx.test(s);
}

/**
 * Safely parse a string into a number >= 0. Does not check for decimal numbers
 * @param {string} s numeric string
 * @returns {number} number >= 0
 */
function parseArrayIndex (s) {
	if(isValidArrayIndex(s)) {
		return +s;
	}

	throw new SyntaxError('invalid array index ' + s);
}

function findIndex (findContext, start, array, context) {
	var index = start;

	if(index < 0) {
		throw new Error('array index out of bounds ' + index);
	}

	if(context !== void 0 && typeof findContext === 'function') {
		index = findContext(start, array, context);
		if(index < 0) {
			throw new Error('could not find patch context ' + context);
		}
	}

	return index;
}
},{"./jsonPointerParse":31}],31:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = jsonPointerParse;

var parseRx = /\/|~1|~0/g;
var separator = '/';
var escapeChar = '~';
var encodedSeparator = '~1';

/**
 * Parse through an encoded JSON Pointer string, decoding each path segment
 * and passing it to an onSegment callback function.
 * @see https://tools.ietf.org/html/rfc6901#section-4
 * @param {string} path encoded JSON Pointer string
 * @param {{function(segment:string):boolean}} onSegment callback function
 * @returns {string} original path
 */
function jsonPointerParse(path, onSegment) {
	var pos, accum, matches, match;

	pos = path.charAt(0) === separator ? 1 : 0;
	accum = '';
	parseRx.lastIndex = pos;

	while(matches = parseRx.exec(path)) {

		match = matches[0];
		accum += path.slice(pos, parseRx.lastIndex - match.length);
		pos = parseRx.lastIndex;

		if(match === separator) {
			if (onSegment(accum) === false) return path;
			accum = '';
		} else {
			accum += match === encodedSeparator ? separator : escapeChar;
		}
	}

	accum += path.slice(pos);
	onSegment(accum);

	return path;
}

},{}],32:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

exports.compare = compare;
exports.reduce = reduce;

var REMOVE, RIGHT, ADD, DOWN, SKIP;

exports.REMOVE = REMOVE = RIGHT = -1;
exports.ADD    = ADD    = DOWN  =  1;
exports.EQUAL  = SKIP   = 0;

/**
 * Create an lcs comparison matrix describing the differences
 * between two array-like sequences
 * @param {array} a array-like
 * @param {array} b array-like
 * @returns {object} lcs descriptor, suitable for passing to reduce()
 */
function compare(a, b) {
	var cols = a.length;
	var rows = b.length;

	var prefix = findPrefix(a, b);
	var suffix = prefix < cols && prefix < rows
		? findSuffix(a, b, prefix)
		: 0;

	var remove = suffix + prefix - 1;
	cols -= remove;
	rows -= remove;
	var matrix = createMatrix(cols, rows);

	for (var j = cols - 1; j >= 0; --j) {
		for (var i = rows - 1; i >= 0; --i) {
			matrix[i][j] = backtrack(matrix, a, b, prefix, j, i);
		}
	}

	return {
		prefix: prefix,
		matrix: matrix,
		suffix: suffix
	};
}

/**
 * Reduce a set of lcs changes previously created using compare
 * @param {function(result:*, type:number, i:number, j:number)} f
 *  reducer function, where:
 *  - result is the current reduce value,
 *  - type is the type of change: ADD, REMOVE, or SKIP
 *  - i is the index of the change location in b
 *  - j is the index of the change location in a
 * @param {*} r initial value
 * @param {object} lcs results returned by compare()
 * @returns {*} the final reduced value
 */
function reduce(f, r, lcs) {
	var i, j, k, op;

	var m = lcs.matrix;

	// Reduce shared prefix
	var l = lcs.prefix;
	for(i = 0;i < l; ++i) {
		r = f(r, SKIP, i, i);
	}

	// Reduce longest change span
	k = i;
	l = m.length;
	i = 0;
	j = 0;
	while(i < l) {
		op = m[i][j].type;
		r = f(r, op, i+k, j+k);

		switch(op) {
			case SKIP:  ++i; ++j; break;
			case RIGHT: ++j; break;
			case DOWN:  ++i; break;
		}
	}

	// Reduce shared suffix
	i += k;
	j += k;
	l = lcs.suffix;
	for(k = 0;k < l; ++k) {
		r = f(r, SKIP, i+k, j+k);
	}

	return r;
}

function findPrefix(a, b) {
	var i = 0;
	var l = Math.min(a.length, b.length);
	while(i < l && a[i] === b[i]) {
		++i;
	}
	return i;
}

function findSuffix(a, b) {
	var al = a.length - 1;
	var bl = b.length - 1;
	var l = Math.min(al, bl);
	var i = 0;
	while(i < l && a[al-i] === b[bl-i]) {
		++i;
	}
	return i;
}

function backtrack(matrix, a, b, start, j, i) {
	if (a[j+start] === b[i+start]) {
		return { value: matrix[i + 1][j + 1].value, type: SKIP };
	}
	if (matrix[i][j + 1].value < matrix[i + 1][j].value) {
		return { value: matrix[i][j + 1].value + 1, type: RIGHT };
	}

	return { value: matrix[i + 1][j].value + 1, type: DOWN };
}

function createMatrix (cols, rows) {
	var m = [], i, j, lastrow;

	// Fill the last row
	lastrow = m[rows] = [];
	for (j = 0; j<cols; ++j) {
		lastrow[j] = { value: cols - j, type: RIGHT };
	}

	// Fill the last col
	for (i = 0; i<rows; ++i) {
		m[i] = [];
		m[i][cols] = { value: rows - i, type: DOWN };
	}

	// Fill the last cell
	m[rows][cols] = { value: 0, type: SKIP };

	return m;
}

},{}],33:[function(require,module,exports){
var jsonPointer = require('./jsonPointer');
var clone = require('./clone');
var deepEquals = require('./deepEquals');
var commutePaths = require('./commutePaths');

var array = require('./array');

var TestFailedError = require('./TestFailedError');
var InvalidPatchOperationError = require('./InvalidPatchOperationError');
var PatchNotInvertibleError = require('./PatchNotInvertibleError');

var find = jsonPointer.find;
var parseArrayIndex = jsonPointer.parseArrayIndex;

exports.test = {
	apply: applyTest,
	inverse: invertTest,
	commute: commuteTest
};

exports.add = {
	apply: applyAdd,
	inverse: invertAdd,
	commute: commuteAddOrCopy
};

exports.remove = {
	apply: applyRemove,
	inverse: invertRemove,
	commute: commuteRemove
};

exports.replace = {
	apply: applyReplace,
	inverse: invertReplace,
	commute: commuteReplace
};

exports.move = {
	apply: applyMove,
	inverse: invertMove,
	commute: commuteMove
};

exports.copy = {
	apply: applyCopy,
	inverse: notInvertible,
	commute: commuteAddOrCopy
};

/**
 * Apply a test operation to x
 * @param {object|array} x
 * @param {object} test test operation
 * @throws {TestFailedError} if the test operation fails
 */

function applyTest(x, test, options) {
	var pointer = find(x, test.path, options.findContext, test.context);
	var target = pointer.target;
	var index, value;

	if(Array.isArray(target)) {
		index = parseArrayIndex(pointer.key);
		//index = findIndex(options.findContext, index, target, test.context);
		value = target[index];
	} else {
		value = pointer.key === void 0 ? pointer.target : pointer.target[pointer.key];
	}

	if(!deepEquals(value, test.value)) {
		throw new TestFailedError('test failed ' + JSON.stringify(test));
	}

	return x;
}

/**
 * Invert the provided test and add it to the inverted patch sequence
 * @param pr
 * @param test
 * @returns {number}
 */
function invertTest(pr, test) {
	pr.push(test);
	return 1;
}

function commuteTest(test, b) {
	if(test.path === b.path && b.op === 'remove') {
		throw new TypeError('Can\'t commute test,remove -> remove,test for same path');
	}

	if(b.op === 'test' || b.op === 'replace') {
		return [b, test];
	}

	return commutePaths(test, b);
}

/**
 * Apply an add operation to x
 * @param {object|array} x
 * @param {object} change add operation
 */
function applyAdd(x, change, options) {
	var pointer = find(x, change.path, options.findContext, change.context);

	if(notFound(pointer)) {
		throw new InvalidPatchOperationError('path does not exist ' + change.path);
	}

	if(change.value === void 0) {
		throw new InvalidPatchOperationError('missing value');
	}

	var val = clone(change.value);

	// If pointer refers to whole document, replace whole document
	if(pointer.key === void 0) {
		return val;
	}

	_add(pointer, val);
	return x;
}

function _add(pointer, value) {
	var target = pointer.target;

	if(Array.isArray(target)) {
		// '-' indicates 'append' to array
		if(pointer.key === '-') {
			target.push(value);
		} else if (pointer.key > target.length) {
			throw new InvalidPatchOperationError('target of add outside of array bounds')
		} else {
			target.splice(pointer.key, 0, value);
		}
	} else if(isValidObject(target)) {
		target[pointer.key] = value;
	} else {
		throw new InvalidPatchOperationError('target of add must be an object or array ' + pointer.key);
	}
}

function invertAdd(pr, add) {
	var context = add.context;
	if(context !== void 0) {
		context = {
			before: context.before,
			after: array.cons(add.value, context.after)
		}
	}
	pr.push({ op: 'test', path: add.path, value: add.value, context: context });
	pr.push({ op: 'remove', path: add.path, context: context });
	return 1;
}

function commuteAddOrCopy(add, b) {
	if(add.path === b.path && b.op === 'remove') {
		throw new TypeError('Can\'t commute add,remove -> remove,add for same path');
	}

	return commutePaths(add, b);
}

/**
 * Apply a replace operation to x
 * @param {object|array} x
 * @param {object} change replace operation
 */
function applyReplace(x, change, options) {
	var pointer = find(x, change.path, options.findContext, change.context);

	if(notFound(pointer) || missingValue(pointer)) {
		throw new InvalidPatchOperationError('path does not exist ' + change.path);
	}

	if(change.value === void 0) {
		throw new InvalidPatchOperationError('missing value');
	}

	var value = clone(change.value);

	// If pointer refers to whole document, replace whole document
	if(pointer.key === void 0) {
		return value;
	}

	var target = pointer.target;

	if(Array.isArray(target)) {
		target[parseArrayIndex(pointer.key)] = value;
	} else {
		target[pointer.key] = value;
	}

	return x;
}

function invertReplace(pr, c, i, patch) {
	var prev = patch[i-1];
	if(prev === void 0 || prev.op !== 'test' || prev.path !== c.path) {
		throw new PatchNotInvertibleError('cannot invert replace w/o test');
	}

	var context = prev.context;
	if(context !== void 0) {
		context = {
			before: context.before,
			after: array.cons(prev.value, array.tail(context.after))
		}
	}

	pr.push({ op: 'test', path: prev.path, value: c.value });
	pr.push({ op: 'replace', path: prev.path, value: prev.value });
	return 2;
}

function commuteReplace(replace, b) {
	if(replace.path === b.path && b.op === 'remove') {
		throw new TypeError('Can\'t commute replace,remove -> remove,replace for same path');
	}

	if(b.op === 'test' || b.op === 'replace') {
		return [b, replace];
	}

	return commutePaths(replace, b);
}

/**
 * Apply a remove operation to x
 * @param {object|array} x
 * @param {object} change remove operation
 */
function applyRemove(x, change, options) {
	var pointer = find(x, change.path, options.findContext, change.context);

	// key must exist for remove
	if(notFound(pointer) || pointer.target[pointer.key] === void 0) {
		throw new InvalidPatchOperationError('path does not exist ' + change.path);
	}

	_remove(pointer);
	return x;
}

function _remove (pointer) {
	var target = pointer.target;

	var removed;
	if (Array.isArray(target)) {
		removed = target.splice(parseArrayIndex(pointer.key), 1);
		return removed[0];

	} else if (isValidObject(target)) {
		removed = target[pointer.key];
		delete target[pointer.key];
		return removed;

	} else {
		throw new InvalidPatchOperationError('target of remove must be an object or array');
	}
}

function invertRemove(pr, c, i, patch) {
	var prev = patch[i-1];
	if(prev === void 0 || prev.op !== 'test' || prev.path !== c.path) {
		throw new PatchNotInvertibleError('cannot invert remove w/o test');
	}

	var context = prev.context;
	if(context !== void 0) {
		context = {
			before: context.before,
			after: array.tail(context.after)
		}
	}

	pr.push({ op: 'add', path: prev.path, value: prev.value, context: context });
	return 2;
}

function commuteRemove(remove, b) {
	if(remove.path === b.path && b.op === 'remove') {
		return [b, remove];
	}

	return commutePaths(remove, b);
}

/**
 * Apply a move operation to x
 * @param {object|array} x
 * @param {object} change move operation
 */
function applyMove(x, change, options) {
	if(jsonPointer.contains(change.path, change.from)) {
		throw new InvalidPatchOperationError('move.from cannot be ancestor of move.path');
	}

	var pto = find(x, change.path, options.findContext, change.context);
	var pfrom = find(x, change.from, options.findContext, change.fromContext);

	_add(pto, _remove(pfrom));
	return x;
}

function invertMove(pr, c) {
	pr.push({ op: 'move',
		path: c.from, context: c.fromContext,
		from: c.path, fromContext: c.context });
	return 1;
}

function commuteMove(move, b) {
	if(move.path === b.path && b.op === 'remove') {
		throw new TypeError('Can\'t commute move,remove -> move,replace for same path');
	}

	return commutePaths(move, b);
}

/**
 * Apply a copy operation to x
 * @param {object|array} x
 * @param {object} change copy operation
 */
function applyCopy(x, change, options) {
	var pto = find(x, change.path, options.findContext, change.context);
	var pfrom = find(x, change.from, options.findContext, change.fromContext);

	if(notFound(pfrom) || missingValue(pfrom)) {
		throw new InvalidPatchOperationError('copy.from must exist');
	}

	var target = pfrom.target;
	var value;

	if(Array.isArray(target)) {
		value = target[parseArrayIndex(pfrom.key)];
	} else {
		value = target[pfrom.key];
	}

	_add(pto, clone(value));
	return x;
}

// NOTE: Copy is not invertible
// See https://github.com/cujojs/jiff/issues/9
// This needs more thought. We may have to extend/amend JSON Patch.
// At first glance, this seems like it should just be a remove.
// However, that's not correct.  It violates the involution:
// invert(invert(p)) ~= p.  For example:
// invert(copy) -> remove
// invert(remove) -> add
// thus: invert(invert(copy)) -> add (DOH! this should be copy!)

function notInvertible(_, c) {
	throw new PatchNotInvertibleError('cannot invert ' + c.op);
}

function notFound (pointer) {
	return pointer === void 0 || (pointer.target == null && pointer.key !== void 0);
}

function missingValue(pointer) {
	return pointer.key !== void 0 && pointer.target[pointer.key] === void 0;
}

/**
 * Return true if x is a non-null object
 * @param {*} x
 * @returns {boolean}
 */
function isValidObject (x) {
	return x !== null && typeof x === 'object';
}

},{"./InvalidPatchOperationError":21,"./PatchNotInvertibleError":22,"./TestFailedError":23,"./array":24,"./clone":25,"./commutePaths":26,"./deepEquals":27,"./jsonPointer":30}],34:[function(require,module,exports){
/*
 * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $
 *
 *  Licensed under the MIT license.
 *    http://opensource.org/licenses/mit-license
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */

(function(global) {
    'use strict';
    // existing version for noConflict()
    var _Base64 = global.Base64;
    var version = "2.1.9";
    // if node.js, we use Buffer
    var buffer;
    if (typeof module !== 'undefined' && module.exports) {
        try {
            buffer = require('buffer').Buffer;
        } catch (err) {}
    }
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                   + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa ? function(b) {
        return global.btoa(b);
    } : function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = buffer ? function (u) {
        return (u.constructor === buffer.constructor ? u : new buffer(u))
        .toString('base64')
    }
    : function (u) { return btoa(utob(u)) }
    ;
    var encode = function(u, urisafe) {
        return !urisafe
            ? _encode(String(u))
            : _encode(String(u)).replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
    };
    var encodeURI = function(u) { return encode(u, true) };
    // decoder stuff
    var re_btou = new RegExp([
        '[\xC0-\xDF][\x80-\xBF]',
        '[\xE0-\xEF][\x80-\xBF]{2}',
        '[\xF0-\xF7][\x80-\xBF]{3}'
    ].join('|'), 'g');
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var atob = global.atob ? function(a) {
        return global.atob(a);
    } : function(a){
        return a.replace(/[\s\S]{1,4}/g, cb_decode);
    };
    var _decode = buffer ? function(a) {
        return (a.constructor === buffer.constructor
                ? a : new buffer(a, 'base64')).toString();
    }
    : function(a) { return btou(atob(a)) };
    var decode = function(a){
        return _decode(
            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
                .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };
    var noConflict = function() {
        var Base64 = global.Base64;
        global.Base64 = _Base64;
        return Base64;
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode,
        noConflict: noConflict
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    // that's it!
    if (global['Meteor']) {
       Base64 = global.Base64; // for normal export in Meteor.js
    }
})(this);

},{"buffer":2}],35:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":36,"./lib/inflate":37,"./lib/utils/common":38,"./lib/zlib/constants":41}],36:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":38,"./utils/strings":39,"./zlib/deflate":43,"./zlib/messages":48,"./zlib/zstream":50}],37:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":38,"./utils/strings":39,"./zlib/constants":41,"./zlib/gzheader":44,"./zlib/inflate":46,"./zlib/messages":48,"./zlib/zstream":50}],38:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],39:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":38}],40:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],41:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],42:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],43:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":38,"./adler32":40,"./crc32":42,"./messages":48,"./trees":49}],44:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],45:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],46:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":38,"./adler32":40,"./crc32":42,"./inffast":45,"./inftrees":47}],47:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":38}],48:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],49:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":38}],50:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],51:[function(require,module,exports){
module.exports={
  "fivehundredpix": {
    "icon": "M42.9,27.6c-2.1,0-3.6,1-5.8,3.5c-1.9-2.5-3.8-3.5-5.8-3.5c-1.7,0-3.7,0.7-4.7,3.2 c-1-2-2.7-2.6-4.1-2.6c-1,0-2,0.2-2.9,1.1l0.6-3.3h6.2v-2.5h-8.4l-1.5,8v0.2h2.7c0.6-1,1.5-1.2,2.3-1.2c1.2,0,2.3,0.6,2.6,2.4v0.7 c-0.2,1.6-1.3,2.6-2.6,2.6c-1.1,0-2.3-0.6-2.4-2.2h-3v0.7c0,0.3,0.5,1.5,0.5,1.6c1.3,2.1,3.4,2.5,5,2.5c1.8,0,3.9-0.7,5.1-3.2 c1.1,2.4,3,3.1,4.8,3.1c2.1,0,3.5-0.9,5.7-3.3c1.9,2.3,3.7,3.3,5.7,3.3c3.4,0,5.1-2.6,5.1-5.6C48,30,46.2,27.6,42.9,27.6z  M34.7,33.7c-0.4,0.4-1,0.9-1.4,1.1c-0.7,0.4-1.3,0.6-1.9,0.6c-0.6,0-1.7-0.4-2.1-1.3c-0.1-0.2-0.2-0.6-0.2-0.7v-0.9 c0.3-1.5,1.1-2.1,2.2-2.1c0.1,0,0.6,0,0.9,0.1c0.4,0.1,0.7,0.3,1.1,0.6c0.4,0.3,2,1.6,2,1.8C35.3,33.2,34.9,33.5,34.7,33.7z  M42.9,35.5c-1.3,0-2.6-0.9-3.9-2.3c1.4-1.5,2.5-2.6,3.8-2.6c1.5,0,2.3,1.1,2.3,2.5C45.2,34.4,44.4,35.5,42.9,35.5z",
    "mask": "M33.3,31.3c-0.4-0.2-0.7-0.4-1.1-0.6c-0.3-0.1-0.8-0.1-0.9-0.1c-1.1,0-1.9,0.6-2.2,2.1v0.9c0,0.1,0.1,0.4,0.2,0.7 c0.3,0.9,1.4,1.3,2.1,1.3s1.2-0.2,1.9-0.6c0.5-0.3,1-0.7,1.4-1.1c0.2-0.2,0.5-0.5,0.5-0.6C35.3,32.8,33.7,31.6,33.3,31.3z  M42.8,30.6c-1.3,0-2.4,1-3.8,2.6c1.3,1.5,2.6,2.3,3.9,2.3c1.5,0,2.2-1.1,2.2-2.4C45.2,31.7,44.3,30.6,42.8,30.6z M0,0v64h64V0H0z  M42.9,38.5c-2,0-3.8-1-5.7-3.3c-2.2,2.4-3.7,3.3-5.7,3.3c-1.8,0-3.7-0.7-4.8-3.1c-1.2,2.5-3.3,3.2-5.1,3.2c-1.6,0-3.8-0.4-5-2.5 C16.5,36,16,34.8,16,34.5v-0.7h3c0.1,1.6,1.3,2.2,2.4,2.2c1.3,0,2.4-0.9,2.6-2.6v-0.7c-0.2-1.8-1.3-2.4-2.6-2.4 c-0.8,0-1.6,0.2-2.3,1.2h-2.7v-0.2l1.5-8h8.4v2.5h-6.2l-0.6,3.3c1-0.9,2-1.1,2.9-1.1c1.4,0,3.2,0.6,4.1,2.6c1-2.4,3-3.2,4.7-3.2 c2,0,3.9,1,5.8,3.5c2.1-2.6,3.7-3.5,5.8-3.5c3.3,0,5.1,2.4,5.1,5.4C48,35.9,46.2,38.5,42.9,38.5z",
    "color": "#222222"
  },
  "bandsintown": {
    "icon": "M25.8,39.3h13.4v1.1H24.7V18h-5.6v28h25.8V33.7h-19V39.3z M31.4,24.7h-5.6v7.8h5.6V24.7z M38.2,24.7h-5.6v7.8h5.6V24.7z M39.3,18v14.6h5.6V18H39.3z",
    "mask": "M0,0v64h64V0H0z M32.6,24.7h5.6v7.8h-5.6V24.7z M25.8,24.7h5.6v7.8h-5.6V24.7z M44.9,46H19.1V18h5.6v22.4h14.6 v-1.1H25.8v-5.6h19V46z M44.9,32.6h-5.6V18h5.6V32.6z",
    "color": "#1B8793"
  },
  "behance": {
    "icon": "M29.1,31c0.8-0.4,1.5-0.9,1.9-1.5c0.4-0.6,0.6-1.4,0.6-2.3c0-0.9-0.1-1.6-0.4-2.2 c-0.3-0.6-0.7-1.1-1.2-1.4c-0.5-0.4-1.1-0.6-1.9-0.8c-0.7-0.2-1.5-0.2-2.4-0.2H17v18.5h8.9c0.8,0,1.6-0.1,2.4-0.3 c0.8-0.2,1.5-0.5,2.1-1c0.6-0.4,1.1-1,1.5-1.7c0.4-0.7,0.5-1.5,0.5-2.4c0-1.2-0.3-2.1-0.8-3C31.1,31.9,30.2,31.3,29.1,31z  M21.1,25.7h3.8c0.4,0,0.7,0,1,0.1c0.3,0.1,0.6,0.2,0.9,0.3c0.3,0.2,0.5,0.4,0.6,0.6c0.2,0.3,0.2,0.6,0.2,1.1c0,0.8-0.2,1.3-0.7,1.7 c-0.5,0.3-1.1,0.5-1.8,0.5h-4.1V25.7z M28.2,36.7c-0.2,0.3-0.4,0.6-0.7,0.7c-0.3,0.2-0.6,0.3-1,0.4c-0.4,0.1-0.7,0.1-1.1,0.1h-4.3 v-5.1h4.4c0.9,0,1.6,0.2,2.1,0.6c0.5,0.4,0.8,1.1,0.8,2C28.4,36,28.3,36.4,28.2,36.7z M46.7,32.3c-0.2-0.9-0.6-1.8-1.2-2.5 C45,29,44.3,28.4,43.5,28c-0.8-0.4-1.8-0.7-3-0.7c-1,0-1.9,0.2-2.8,0.5c-0.8,0.4-1.6,0.9-2.2,1.5c-0.6,0.6-1.1,1.4-1.4,2.2 c-0.3,0.9-0.5,1.8-0.5,2.8c0,1,0.2,2,0.5,2.8c0.3,0.9,0.8,1.6,1.4,2.2c0.6,0.6,1.3,1.1,2.2,1.4c0.9,0.3,1.8,0.5,2.9,0.5 c1.5,0,2.8-0.3,3.9-1c1.1-0.7,1.9-1.8,2.4-3.4h-3.2c-0.1,0.4-0.4,0.8-1,1.2c-0.5,0.4-1.2,0.6-1.9,0.6c-1,0-1.8-0.3-2.4-0.8 c-0.6-0.5-0.9-1.5-0.9-2.6H47C47,34.2,47,33.2,46.7,32.3z M37.3,32.9c0-0.3,0.1-0.6,0.2-0.9c0.1-0.3,0.3-0.6,0.5-0.9 c0.2-0.3,0.5-0.5,0.9-0.7c0.4-0.2,0.9-0.3,1.5-0.3c0.9,0,1.6,0.3,2.1,0.7c0.4,0.5,0.8,1.2,0.8,2.1H37.3z M44.1,23.8h-7.5v1.8h7.5 V23.8z",
    "mask": "M40.4,30.1c-0.6,0-1.1,0.1-1.5,0.3c-0.4,0.2-0.7,0.4-0.9,0.7c-0.2,0.3-0.4,0.6-0.5,0.9c-0.1,0.3-0.2,0.6-0.2,0.9 h6c-0.1-0.9-0.4-1.6-0.8-2.1C42,30.3,41.3,30.1,40.4,30.1z M25.5,32.8h-4.4v5.1h4.3c0.4,0,0.8,0,1.1-0.1c0.4-0.1,0.7-0.2,1-0.4 c0.3-0.2,0.5-0.4,0.7-0.7c0.2-0.3,0.2-0.7,0.2-1.2c0-1-0.3-1.6-0.8-2C27.1,33,26.4,32.8,25.5,32.8z M27,29.5 c0.5-0.3,0.7-0.9,0.7-1.7c0-0.4-0.1-0.8-0.2-1.1c-0.2-0.3-0.4-0.5-0.6-0.6c-0.3-0.2-0.6-0.3-0.9-0.3c-0.3-0.1-0.7-0.1-1-0.1h-3.8 v4.3h4.1C25.9,30.1,26.5,29.9,27,29.5z M0,0v64h64V0H0z M36.6,23.8h7.5v1.8h-7.5V23.8z M31.9,38.1c-0.4,0.7-0.9,1.2-1.5,1.7 c-0.6,0.4-1.3,0.8-2.1,1c-0.8,0.2-1.6,0.3-2.4,0.3H17V22.6h8.7c0.9,0,1.7,0.1,2.4,0.2c0.7,0.2,1.3,0.4,1.9,0.8 c0.5,0.4,0.9,0.8,1.2,1.4c0.3,0.6,0.4,1.3,0.4,2.2c0,0.9-0.2,1.7-0.6,2.3c-0.4,0.6-1,1.1-1.9,1.5c1.1,0.3,2,0.9,2.5,1.7 c0.6,0.8,0.8,1.8,0.8,3C32.5,36.6,32.3,37.4,31.9,38.1z M47,35.3h-9.6c0,1.1,0.4,2.1,0.9,2.6c0.5,0.5,1.3,0.8,2.4,0.8 c0.7,0,1.4-0.2,1.9-0.6c0.5-0.4,0.9-0.8,1-1.2h3.2c-0.5,1.6-1.3,2.8-2.4,3.4c-1.1,0.7-2.4,1-3.9,1c-1.1,0-2-0.2-2.9-0.5 c-0.8-0.3-1.6-0.8-2.2-1.4c-0.6-0.6-1-1.4-1.4-2.2c-0.3-0.9-0.5-1.8-0.5-2.8c0-1,0.2-1.9,0.5-2.8c0.3-0.9,0.8-1.6,1.4-2.2 c0.6-0.6,1.3-1.1,2.2-1.5c0.8-0.4,1.8-0.5,2.8-0.5c1.1,0,2.1,0.2,3,0.7c0.8,0.4,1.5,1,2.1,1.8c0.5,0.7,0.9,1.6,1.2,2.5 C47,33.2,47,34.2,47,35.3z",
    "color": "#007CFF"
  },
  "codepen": {
    "icon": "M24.4,35l6.8,4.5v-4L27.4,33L24.4,35z M23.8,30.6v2.7l2.1-1.4L23.8,30.6z M31.2,28.5v-4L24.4,29 l3,2L31.2,28.5z M39.6,29l-6.8-4.5v4l3.7,2.5L39.6,29z M32,30l-3,2l3,2l3-2L32,30z M32,16c-8.8,0-16,7.2-16,16c0,8.8,7.2,16,16,16 s16-7.2,16-16C48,23.2,40.8,16,32,16z M41.9,35.1c0,0.3-0.1,0.6-0.4,0.7l-9.1,5.9c-0.3,0.2-0.6,0.2-0.9,0l-9.1-5.9 c-0.2-0.2-0.4-0.4-0.4-0.7v-6.2c0-0.3,0.1-0.6,0.4-0.7l9.1-5.9c0.3-0.2,0.6-0.2,0.9,0l9.1,5.9c0.2,0.2,0.4,0.4,0.4,0.7V35.1z  M32.8,35.5v4l6.8-4.5l-3-2L32.8,35.5z M40.2,33.4v-2.7L38.1,32L40.2,33.4z",
    "mask": "M0,0v64h64V0H0z M32,48c-8.8,0-16-7.2-16-16c0-8.8,7.2-16,16-16s16,7.2,16,16C48,40.8,40.8,48,32,48z M32.5,22.3 c-0.3-0.2-0.6-0.2-0.9,0l-9.1,5.9c-0.2,0.2-0.4,0.4-0.4,0.7v6.2c0,0.3,0.1,0.6,0.4,0.7l9.1,5.9c0.3,0.2,0.6,0.2,0.9,0l9.1-5.9 c0.2-0.2,0.4-0.4,0.4-0.7v-6.2c0-0.3-0.1-0.6-0.4-0.7L32.5,22.3z M32.8,24.5l6.8,4.5l-3,2l-3.7-2.5V24.5z M31.2,24.5v4L27.4,31l-3-2 L31.2,24.5z M23.8,30.6l2.1,1.4l-2.1,1.4V30.6z M31.2,39.5L24.4,35l3-2l3.7,2.5V39.5z M32,34l-3-2l3-2l3,2L32,34z M32.8,39.5v-4 l3.7-2.5l3,2L32.8,39.5z M40.2,33.4L38.1,32l2.1-1.4V33.4z",
    "color": "##151515"
  },
  "dribbble": {
    "icon": "M32,48c-8.8,0-16-7.2-16-16s7.2-16,16-16 s16,7.2,16,16S40.8,48,32,48z M45.5,34.2C45,34,41.3,32.9,37,33.6c1.8,4.9,2.5,8.9,2.7,9.7C42.7,41.3,44.9,38,45.5,34.2z M37.3,44.6 c-0.2-1.2-1-5.4-2.9-10.4c0,0-0.1,0-0.1,0c-7.7,2.7-10.5,8-10.7,8.5c2.3,1.8,5.2,2.9,8.4,2.9C33.9,45.7,35.7,45.3,37.3,44.6z  M21.8,41.2c0.3-0.5,4.1-6.7,11.1-9c0.2-0.1,0.4-0.1,0.5-0.2c-0.3-0.8-0.7-1.6-1.1-2.3c-6.8,2-13.4,2-14,1.9c0,0.1,0,0.3,0,0.4 C18.3,35.5,19.7,38.7,21.8,41.2z M18.6,29.2c0.6,0,6.2,0,12.6-1.7c-2.3-4-4.7-7.4-5.1-7.9C22.4,21.5,19.5,25,18.6,29.2z M28.8,18.7 c0.4,0.5,2.9,3.9,5.1,8c4.9-1.8,6.9-4.6,7.2-4.9c-2.4-2.1-5.6-3.4-9.1-3.4C30.9,18.4,29.8,18.5,28.8,18.7z M42.6,23.4 c-0.3,0.4-2.6,3.3-7.6,5.4c0.3,0.7,0.6,1.3,0.9,2c0.1,0.2,0.2,0.5,0.3,0.7c4.5-0.6,9.1,0.3,9.5,0.4C45.6,28.7,44.5,25.7,42.6,23.4z",
    "mask": "M34.3,34.3c-7.7,2.7-10.5,8-10.7,8.5c2.3,1.8,5.2,2.9,8.4,2.9c1.9,0,3.7-0.4,5.3-1.1 C37.1,43.4,36.3,39.2,34.3,34.3C34.4,34.2,34.4,34.3,34.3,34.3z M31.3,27.6c-2.3-4-4.7-7.4-5.1-7.9c-3.8,1.8-6.7,5.3-7.6,9.6 C19.2,29.2,24.9,29.3,31.3,27.6z M33,32.1c0.2-0.1,0.4-0.1,0.5-0.2c-0.3-0.8-0.7-1.6-1.1-2.3c-6.8,2-13.4,2-14,1.9 c0,0.1,0,0.3,0,0.4c0,3.5,1.3,6.7,3.5,9.1C22.2,40.6,25.9,34.4,33,32.1z M41.1,21.8c-2.4-2.1-5.6-3.4-9.1-3.4 c-1.1,0-2.2,0.1-3.2,0.4c0.4,0.5,2.9,3.9,5.1,8C38.8,24.9,40.8,22.1,41.1,21.8z M34.9,28.8c0.3,0.7,0.6,1.3,0.9,2 c0.1,0.2,0.2,0.5,0.3,0.7c4.5-0.6,9.1,0.3,9.5,0.4c0-3.2-1.2-6.2-3.1-8.5C42.3,23.8,40,26.7,34.9,28.8z M37,33.6 c1.8,4.9,2.5,8.9,2.7,9.7c3.1-2.1,5.2-5.4,5.9-9.2C45,34,41.3,32.9,37,33.6z M0,0v64h64V0H0z M32,48c-8.8,0-16-7.2-16-16 s7.2-16,16-16s16,7.2,16,16S40.8,48,32,48z",
    "color": "#ea4c89"
  },
  "dropbox": {
    "icon": "M25.4,17.1L16,23.3l6.5,5.2l9.5-5.9L25.4,17.1z M16,33.7l9.4,6.1l6.6-5.5l-9.5-5.9L16,33.7z  M32,34.3l6.6,5.5l9.4-6.1l-6.5-5.2L32,34.3z M48,23.3l-9.4-6.1L32,22.6l9.5,5.9L48,23.3z M32,35.5L25.4,41l-2.8-1.8v2.1l9.4,5.7 l9.4-5.7v-2.1L38.6,41L32,35.5z",
    "mask": "M0,0v64h64V0H0z M41.5,41.2L32,46.9l-9.4-5.7v-2.1l2.8,1.8l6.6-5.5l6.6,5.5l2.8-1.8V41.2z M48,33.7l-9.4,6.1 L32,34.3l-6.6,5.5L16,33.7l6.5-5.2L16,23.3l9.4-6.1l6.6,5.5l6.6-5.5l9.4,6.1l-6.5,5.2L48,33.7z M22.5,28.5l9.5,5.9l9.5-5.9L32,22.6 L22.5,28.5z",
    "color": "#1081DE"
  },
  "email": {
    "icon": "M17,22v20h30V22H17z M41.1,25L32,32.1L22.9,25H41.1z M20,39V26.6l12,9.3l12-9.3V39H20z",
    "mask": "M41.1,25H22.9l9.1,7.1L41.1,25z M44,26.6l-12,9.3l-12-9.3V39h24V26.6z M0,0v64h64V0H0z M47,42H17V22h30V42z",
    "color": "#7f7f7f"
  },
  "facebook": {
    "icon": "M34.1,47V33.3h4.6l0.7-5.3h-5.3v-3.4c0-1.5,0.4-2.6,2.6-2.6l2.8,0v-4.8c-0.5-0.1-2.2-0.2-4.1-0.2 c-4.1,0-6.9,2.5-6.9,7V28H24v5.3h4.6V47H34.1z",
    "mask": "M0,0v64h64V0H0z M39.6,22l-2.8,0c-2.2,0-2.6,1.1-2.6,2.6V28h5.3l-0.7,5.3h-4.6V47h-5.5V33.3H24V28h4.6V24 c0-4.6,2.8-7,6.9-7c2,0,3.6,0.1,4.1,0.2V22z",
    "color": "#3b5998"
  },
  "flickr": {
    "icon": "M32,16c-8.8,0-16,7.2-16,16s7.2,16,16,16s16-7.2,16-16S40.8,16,32,16z M26,37c-2.8,0-5-2.2-5-5 s2.2-5,5-5s5,2.2,5,5S28.8,37,26,37z M38,37c-2.8,0-5-2.2-5-5s2.2-5,5-5s5,2.2,5,5S40.8,37,38,37z",
    "mask": "M38,27c-2.8,0-5,2.2-5,5s2.2,5,5,5s5-2.2,5-5S40.8,27,38,27z M0,0v64h64V0H0z M32,48c-8.8,0-16-7.2-16-16 s7.2-16,16-16s16,7.2,16,16S40.8,48,32,48z M26,27c-2.8,0-5,2.2-5,5s2.2,5,5,5s5-2.2,5-5S28.8,27,26,27z",
    "color": "#0063db"
  },
  "foursquare": {
    "icon": "M41.5,17c0,0-14.3,0-16.5,0c-2.3,0-3,1.7-3,2.8c0,1.1,0,26.3,0,26.3c0,1.2,0.7,1.7,1,1.8 c0.4,0.1,1.4,0.3,2-0.4c0,0,7.8-9.1,7.9-9.2c0.2-0.2,0.2-0.2,0.4-0.2c0.4,0,3.4,0,5.1,0c2.1,0,2.5-1.5,2.7-2.4 c0.2-0.7,2.3-11.3,2.9-14.7C44.6,18.4,43.9,17,41.5,17z M41.1,35.7c0.2-0.7,2.3-11.3,2.9-14.7 M40.5,21.5l-0.7,3.6 c-0.1,0.4-0.6,0.8-1,0.8c-0.5,0-6.4,0-6.4,0c-0.7,0-1.2,0.5-1.2,1.2v0.8c0,0.7,0.5,1.2,1.2,1.2c0,0,5,0,5.5,0c0.5,0,1,0.6,0.9,1.1 c-0.1,0.5-0.6,3.3-0.7,3.6c-0.1,0.3-0.4,0.8-1,0.8c-0.5,0-4.5,0-4.5,0c-0.8,0-1.1,0.1-1.6,0.8c-0.5,0.7-5.4,6.5-5.4,6.5 c0,0.1-0.1,0-0.1,0V21.4c0-0.5,0.4-1,1-1c0,0,12.8,0,13.3,0C40.2,20.4,40.6,20.9,40.5,21.5z",
    "mask": "M39.7,20.4c-0.5,0-13.3,0-13.3,0c-0.6,0-1,0.5-1,1v20.5c0,0.1,0,0.1,0.1,0c0,0,4.9-5.9,5.4-6.5 c0.5-0.7,0.8-0.8,1.6-0.8c0,0,3.9,0,4.5,0c0.6,0,1-0.5,1-0.8c0.1-0.3,0.6-3,0.7-3.6c0.1-0.5-0.4-1.1-0.9-1.1c-0.5,0-5.5,0-5.5,0 c-0.7,0-1.2-0.5-1.2-1.2v-0.8c0-0.7,0.5-1.2,1.2-1.2c0,0,6,0,6.4,0c0.5,0,0.9-0.4,1-0.8l0.7-3.6C40.6,20.9,40.2,20.4,39.7,20.4z  M0,0v64h64V0H0z M44,20.9l-1,5.2c-0.8,4.2-1.8,9-1.9,9.5c-0.2,0.9-0.6,2.4-2.7,2.4h-5.1c-0.2,0-0.2,0-0.4,0.2 c-0.1,0.1-7.9,9.2-7.9,9.2c-0.6,0.7-1.6,0.6-2,0.4c-0.4-0.1-1-0.6-1-1.8c0,0,0-25.2,0-26.3c0-1.1,0.7-2.8,3-2.8c2.3,0,16.5,0,16.5,0 C43.9,17,44.6,18.4,44,20.9z",
    "color": "#0072b1"
  },
  "github": {
    "icon": "M32,16c-8.8,0-16,7.2-16,16c0,7.1,4.6,13.1,10.9,15.2 c0.8,0.1,1.1-0.3,1.1-0.8c0-0.4,0-1.4,0-2.7c-4.5,1-5.4-2.1-5.4-2.1c-0.7-1.8-1.8-2.3-1.8-2.3c-1.5-1,0.1-1,0.1-1 c1.6,0.1,2.5,1.6,2.5,1.6c1.4,2.4,3.7,1.7,4.7,1.3c0.1-1,0.6-1.7,1-2.1c-3.6-0.4-7.3-1.8-7.3-7.9c0-1.7,0.6-3.2,1.6-4.3 c-0.2-0.4-0.7-2,0.2-4.2c0,0,1.3-0.4,4.4,1.6c1.3-0.4,2.6-0.5,4-0.5c1.4,0,2.7,0.2,4,0.5c3.1-2.1,4.4-1.6,4.4-1.6 c0.9,2.2,0.3,3.8,0.2,4.2c1,1.1,1.6,2.5,1.6,4.3c0,6.1-3.7,7.5-7.3,7.9c0.6,0.5,1.1,1.5,1.1,3c0,2.1,0,3.9,0,4.4 c0,0.4,0.3,0.9,1.1,0.8C43.4,45.1,48,39.1,48,32C48,23.2,40.8,16,32,16z",
    "mask": "M0,0v64h64V0H0z M37.1,47.2c-0.8,0.2-1.1-0.3-1.1-0.8c0-0.5,0-2.3,0-4.4c0-1.5-0.5-2.5-1.1-3 c3.6-0.4,7.3-1.7,7.3-7.9c0-1.7-0.6-3.2-1.6-4.3c0.2-0.4,0.7-2-0.2-4.2c0,0-1.3-0.4-4.4,1.6c-1.3-0.4-2.6-0.5-4-0.5 c-1.4,0-2.7,0.2-4,0.5c-3.1-2.1-4.4-1.6-4.4-1.6c-0.9,2.2-0.3,3.8-0.2,4.2c-1,1.1-1.6,2.5-1.6,4.3c0,6.1,3.7,7.5,7.3,7.9 c-0.5,0.4-0.9,1.1-1,2.1c-0.9,0.4-3.2,1.1-4.7-1.3c0,0-0.8-1.5-2.5-1.6c0,0-1.6,0-0.1,1c0,0,1,0.5,1.8,2.3c0,0,0.9,3.1,5.4,2.1 c0,1.3,0,2.3,0,2.7c0,0.4-0.3,0.9-1.1,0.8C20.6,45.1,16,39.1,16,32c0-8.8,7.2-16,16-16c8.8,0,16,7.2,16,16 C48,39.1,43.4,45.1,37.1,47.2z",
    "color": "#4183c4"
  },
  "google_play": {
    "icon": "M24.4,45.6l16-8.8l-3.6-3.6L24.4,45.6z M22.2,18.5c-0.1,0.2-0.2,0.5-0.2,0.9v25.1 c0,0.4,0.1,0.6,0.2,0.9L35.6,32L22.2,18.5z M47.1,30.8L42.1,28L38.1,32l4,4l5-2.8C48.3,32.5,48.3,31.4,47.1,30.8z M40.4,27.1 l-15.9-8.8l12.3,12.3L40.4,27.1z",
    "mask": "M0,0v64h64V0H0z M40.4,27.1l-3.6,3.6L24.5,18.4L40.4,27.1z M22,44.5V19.4c0-0.4,0.1-0.7,0.2-0.9L35.6,32 L22.2,45.4C22.1,45.2,22,44.9,22,44.5z M24.4,45.6l12.4-12.4l3.6,3.6L24.4,45.6z M47.1,33.2l-5,2.8l-4-4l3.9-3.9l5.1,2.8 C48.3,31.4,48.3,32.5,47.1,33.2z",
    "color": "#40BBC1"
  },
  "google": {
    "icon": "M35.4,17h-8c-1.1,0-2.2,0.1-3.4,0.4 c-1.2,0.3-2.4,0.9-3.5,1.8c-1.7,1.6-2.5,3.4-2.5,5.4c0,1.6,0.6,3.1,1.8,4.3c1.1,1.3,2.7,2,4.9,2c0.4,0,0.8,0,1.3-0.1 c-0.1,0.2-0.2,0.4-0.2,0.7c-0.1,0.2-0.2,0.5-0.2,0.9c0,0.6,0.1,1.1,0.4,1.5c0.2,0.4,0.5,0.8,0.8,1.2c-0.9,0-2.1,0.1-3.5,0.4 c-1.4,0.2-2.8,0.7-4.1,1.5c-1.2,0.7-1.9,1.5-2.4,2.4c-0.5,0.9-0.7,1.7-0.7,2.5c0,1.5,0.7,2.8,2.1,3.9c1.4,1.2,3.5,1.8,6.3,1.8 c3.3-0.1,5.9-0.9,7.7-2.4c1.7-1.5,2.6-3.2,2.6-5.2c0-1.4-0.3-2.5-0.9-3.3c-0.6-0.8-1.4-1.6-2.2-2.3l-1.4-1.1 c-0.2-0.2-0.4-0.4-0.6-0.7c-0.2-0.3-0.4-0.6-0.4-1c0-0.4,0.1-0.8,0.4-1.1c0.2-0.3,0.4-0.6,0.7-0.8c0.4-0.4,0.8-0.7,1.2-1.1 c0.3-0.4,0.6-0.7,0.9-1.2c0.6-0.9,0.9-2,0.9-3.4c0-0.8-0.1-1.5-0.3-2.1c-0.2-0.6-0.5-1.1-0.7-1.5c-0.3-0.5-0.6-0.8-0.9-1.2 c-0.3-0.3-0.6-0.5-0.8-0.7H33L35.4,17z M31,38.9c0.7,0.8,1,1.6,1,2.7c0,1.3-0.5,2.3-1.5,3.1c-1,0.8-2.4,1.2-4.3,1.3 c-2.1,0-3.8-0.5-5-1.4c-1.3-0.9-1.9-2.1-1.9-3.5c0-0.7,0.1-1.3,0.4-1.8c0.3-0.5,0.6-0.9,0.9-1.2c0.4-0.3,0.8-0.6,1.1-0.7 c0.4-0.2,0.7-0.3,0.9-0.4c0.9-0.3,1.7-0.5,2.5-0.6c0.8-0.1,1.4-0.1,1.6-0.1c0.3,0,0.6,0,0.9,0C29.2,37.3,30.3,38.2,31,38.9z  M29.7,27.1c-0.1,0.5-0.3,1.1-0.7,1.6c-0.7,0.7-1.6,1.1-2.6,1.1c-0.8,0-1.6-0.3-2.2-0.8c-0.6-0.5-1.2-1.1-1.6-1.9 c-0.8-1.6-1.3-3.1-1.3-4.5c0-1.1,0.3-2.1,0.9-3c0.7-0.9,1.6-1.3,2.7-1.3c0.8,0,1.5,0.3,2.2,0.7c0.6,0.5,1.1,1.1,1.5,1.9 c0.8,1.6,1.2,3.2,1.2,4.8C29.8,26.1,29.8,26.5,29.7,27.1z M43.7,29.5v-4.3h-2.5v4.3H37V32h4.2v4.2h2.5V32H48v-2.5H43.7z",
    "mask": "M0,0v64h64V0H0z M31.3,19.1c0.3,0.3,0.6,0.7,0.9,1.2c0.3,0.4,0.5,0.9,0.7,1.5c0.2,0.6,0.3,1.3,0.3,2.1 c0,1.4-0.3,2.6-0.9,3.4c-0.3,0.4-0.6,0.8-0.9,1.2c-0.4,0.4-0.8,0.7-1.2,1.1c-0.2,0.2-0.5,0.5-0.7,0.8c-0.2,0.3-0.4,0.7-0.4,1.1 c0,0.4,0.1,0.8,0.4,1c0.2,0.3,0.4,0.5,0.6,0.7l1.4,1.1c0.8,0.7,1.6,1.5,2.2,2.3c0.6,0.8,0.9,2,0.9,3.3c0,1.9-0.9,3.7-2.6,5.2 c-1.8,1.6-4.3,2.4-7.7,2.4c-2.8,0-4.9-0.6-6.3-1.8c-1.4-1.1-2.1-2.4-2.1-3.9c0-0.7,0.2-1.6,0.7-2.5c0.4-0.9,1.2-1.7,2.4-2.4 c1.3-0.7,2.7-1.2,4.1-1.5c1.4-0.2,2.6-0.3,3.5-0.4c-0.3-0.4-0.5-0.8-0.8-1.2c-0.3-0.4-0.4-0.9-0.4-1.5c0-0.4,0-0.6,0.2-0.9 c0.1-0.2,0.2-0.5,0.2-0.7c-0.5,0.1-0.9,0.1-1.3,0.1c-2.1,0-3.8-0.7-4.9-2c-1.2-1.2-1.8-2.7-1.8-4.3c0-2,0.8-3.8,2.5-5.4 c1.1-0.9,2.3-1.6,3.5-1.8c1.2-0.2,2.3-0.4,3.4-0.4h8L33,18.4h-2.5C30.7,18.6,31,18.8,31.3,19.1z M48,32h-4.3v4.2h-2.5V32H37v-2.5 h4.2v-4.3h2.5v4.3H48V32z M27.1,19.1c-0.6-0.5-1.4-0.7-2.2-0.7c-1.1,0-2,0.5-2.7,1.3c-0.6,0.9-0.9,1.9-0.9,3c0,1.5,0.4,3,1.3,4.5 c0.4,0.7,0.9,1.4,1.6,1.9c0.6,0.5,1.4,0.8,2.2,0.8c1.1,0,1.9-0.4,2.6-1.1c0.3-0.5,0.6-1,0.7-1.6c0.1-0.5,0.1-1,0.1-1.4 c0-1.6-0.4-3.2-1.2-4.8C28.2,20.2,27.7,19.5,27.1,19.1z M26.9,36.2c-0.2,0-0.7,0-1.6,0.1c-0.8,0.1-1.7,0.3-2.5,0.6 c-0.2,0.1-0.5,0.2-0.9,0.4c-0.4,0.2-0.7,0.4-1.1,0.7c-0.4,0.3-0.7,0.7-0.9,1.2c-0.3,0.5-0.4,1.1-0.4,1.8c0,1.4,0.6,2.6,1.9,3.5 c1.2,0.9,2.9,1.4,5,1.4c1.9,0,3.3-0.4,4.3-1.3c1-0.8,1.5-1.8,1.5-3.1c0-1-0.3-1.9-1-2.7c-0.7-0.7-1.8-1.6-3.3-2.6 C27.5,36.2,27.2,36.2,26.9,36.2z",
    "color": "#dd4b39"
  },
  "instagram": {
    "icon": "M43.5,29.7h-2.6c0.2,0.7,0.3,1.5,0.3,2.3 c0,5.1-4.1,9.2-9.2,9.2c-5.1,0-9.2-4.1-9.2-9.2c0-0.8,0.1-1.6,0.3-2.3h-2.6v12.7c0,0.6,0.5,1.2,1.2,1.2h20.8c0.6,0,1.2-0.5,1.2-1.2 V29.7z M43.5,21.6c0-0.6-0.5-1.2-1.2-1.2h-3.5c-0.6,0-1.2,0.5-1.2,1.2v3.5c0,0.6,0.5,1.2,1.2,1.2h3.5c0.6,0,1.2-0.5,1.2-1.2V21.6z  M32,26.2c-3.2,0-5.8,2.6-5.8,5.8c0,3.2,2.6,5.8,5.8,5.8s5.8-2.6,5.8-5.8C37.8,28.8,35.2,26.2,32,26.2 M43.5,47H20.5 c-1.9,0-3.5-1.6-3.5-3.5V20.5c0-1.9,1.5-3.5,3.5-3.5h23.1c1.9,0,3.5,1.5,3.5,3.5v23.1C47,45.4,45.5,47,43.5,47",
    "mask": "M41.2,32c0,5.1-4.1,9.2-9.2,9.2c-5.1,0-9.2-4.1-9.2-9.2c0-0.8,0.1-1.6,0.3-2.3h-2.6v12.7c0,0.6,0.5,1.2,1.2,1.2 h20.8c0.6,0,1.2-0.5,1.2-1.2V29.7h-2.6C41.1,30.4,41.2,31.2,41.2,32z M32,37.8c3.2,0,5.8-2.6,5.8-5.8c0-3.2-2.6-5.8-5.8-5.8 c-3.2,0-5.8,2.6-5.8,5.8C26.2,35.2,28.8,37.8,32,37.8z M42.4,20.5h-3.5c-0.6,0-1.2,0.5-1.2,1.2v3.5c0,0.6,0.5,1.2,1.2,1.2h3.5 c0.6,0,1.2-0.5,1.2-1.2v-3.5C43.5,21,43,20.5,42.4,20.5z M0,0v64h64V0H0z M47,43.5c0,1.9-1.5,3.5-3.5,3.5H20.5 c-1.9,0-3.5-1.6-3.5-3.5V20.5c0-1.9,1.5-3.5,3.5-3.5h23.1c1.9,0,3.5,1.5,3.5,3.5V43.5z",
    "color": "#3f729b"
  },
  "itunes": {
    "icon": "M41.1,17c-0.1,0-0.2,0-0.3,0l-14.7,3c-0.6,0.1-1.1,0.7-1.1,1.4v17.6c0,0.8-0.6,1.4-1.4,1.4 h-2.8c-1.9,0-3.4,1.5-3.4,3.4c0,1.9,1.5,3.4,3.4,3.4h2c2.2,0,4-1.8,4-4V27.4c0-0.4,0.3-0.8,0.7-0.9l12.1-2.4c0.1,0,0.1,0,0.2,0 c0.5,0,0.9,0.4,0.9,0.9v11c0,0.8-0.6,1.4-1.4,1.4h-2.8c-1.9,0-3.4,1.5-3.4,3.4c0,1.9,1.5,3.4,3.4,3.4h2c2.2,0,4-1.8,4-4V18.4 C42.5,17.6,41.9,17,41.1,17z",
    "mask": "M0,0v64h64V0H0z M42.5,40c0,2.2-1.8,4-4,4h-2c-1.9,0-3.4-1.5-3.4-3.4s1.5-3.4,3.4-3.4h2.8c0.8,0,1.4-0.6,1.4-1.4 v-11c0-0.5-0.4-0.9-0.9-0.9c-0.1,0-0.1,0-0.2,0l-12.1,2.4c-0.4,0.1-0.7,0.4-0.7,0.9V43c0,2.2-1.8,4-4,4h-2c-1.9,0-3.4-1.5-3.4-3.4 c0-1.9,1.5-3.4,3.4-3.4h2.8c0.8,0,1.4-0.6,1.4-1.4V21.3c0-0.7,0.5-1.2,1.1-1.4l14.7-3c0.1,0,0.2,0,0.3,0c0.8,0,1.4,0.6,1.4,1.4V40z",
    "color": "#E049D1"
  },
  "linkedin": {
    "icon": "M20.4,44h5.4V26.6h-5.4V44z M23.1,18c-1.7,0-3.1,1.4-3.1,3.1c0,1.7,1.4,3.1,3.1,3.1 c1.7,0,3.1-1.4,3.1-3.1C26.2,19.4,24.8,18,23.1,18z M39.5,26.2c-2.6,0-4.4,1.4-5.1,2.8h-0.1v-2.4h-5.2V44h5.4v-8.6 c0-2.3,0.4-4.5,3.2-4.5c2.8,0,2.8,2.6,2.8,4.6V44H46v-9.5C46,29.8,45,26.2,39.5,26.2z",
    "mask": "M0,0v64h64V0H0z M25.8,44h-5.4V26.6h5.4V44z M23.1,24.3c-1.7,0-3.1-1.4-3.1-3.1c0-1.7,1.4-3.1,3.1-3.1 c1.7,0,3.1,1.4,3.1,3.1C26.2,22.9,24.8,24.3,23.1,24.3z M46,44h-5.4v-8.4c0-2,0-4.6-2.8-4.6c-2.8,0-3.2,2.2-3.2,4.5V44h-5.4V26.6 h5.2V29h0.1c0.7-1.4,2.5-2.8,5.1-2.8c5.5,0,6.5,3.6,6.5,8.3V44z",
    "color": "#007fb1"
  },
  "medium": {
    "icon": "M47,23.7h-1.2c-0.4,0-0.9,0.6-0.9,1v14.7c0,0.4,0.5,1,0.9,1H47v3.4H36.4v-3.4h2.1V24.9h-0.1 l-5.3,18.9h-4.1l-5.2-18.9h-0.1v15.5H26v3.4h-9v-3.4h1.2c0.5,0,1-0.6,1-1V24.7c0-0.4-0.5-1-1-1H17v-3.6h11.3l3.7,13.8h0.1l3.7-13.8 H47V23.7z",
    "mask": "M0,0v64h64V0H0z M47,23.7h-1.2c-0.4,0-0.9,0.6-0.9,1v14.7c0,0.4,0.5,1,0.9,1H47v3.4H36.4v-3.4h2.1V24.9h-0.1 l-5.3,18.9h-4.1l-5.2-18.9h-0.1v15.5H26v3.4h-9v-3.4h1.2c0.5,0,1-0.6,1-1V24.7c0-0.4-0.5-1-1-1H17v-3.6h11.3l3.7,13.8h0.1l3.7-13.8 H47V23.7z",
    "color": "#333332"
  },
  "meetup": {
    "icon": "M30.8,33.4c0-6.3,1.9-11.9,3.5-15.3c0.5-1.1,0.9-1.4,1.9-1.4c1.3,0,2.9,0.2,4.1,0.4 c1.1,0.2,1.5,1.6,1.7,2.5c1.2,4.5,4.7,18.7,5.5,22.4c0.2,0.8,0.6,2,0.1,2.3c-0.4,0.2-2.5,0.9-3.9,1c-0.6,0.1-1.1-0.6-1.4-1.5 c-1.5-4.6-3.5-11.8-5.2-16.6c0,3.7-0.3,10.8-0.4,12c-0.1,1.7-0.4,3.7-1.8,3.9c-1.1,0.2-2.4,0.4-4,0.4c-1.3,0-1.8-0.9-2.4-1.8 c-1-1.4-3.1-4.8-4.1-6.9c0.3,2.3,0.7,4.7,0.9,5.8c0.1,0.8,0,1.5-0.6,1.9c-1,0.7-3.2,1.4-4.1,1.4c-0.8,0-1.5-0.8-1.6-1.6 c-0.7-3.4-1.2-8-1.1-11.1c0-2.8,0-5.9,0.2-8.3c0-0.7,0.3-1.1,0.9-1.4c1.2-0.5,3-0.6,4.7-0.3c0.8,0.1,1,0.8,1.4,1.4 C26.9,25.5,28.9,29.5,30.8,33.4z",
    "mask": "M0,0v64h64V0H0z M47.8,44.3c-0.4,0.2-2.5,0.9-3.9,1c-0.6,0.1-1.1-0.6-1.4-1.5c-1.5-4.6-3.5-11.8-5.2-16.6 c0,3.7-0.3,10.8-0.4,12c-0.1,1.7-0.4,3.7-1.8,3.9c-1.1,0.2-2.4,0.4-4,0.4c-1.3,0-1.8-0.9-2.4-1.8c-1-1.4-3.1-4.8-4.1-6.9 c0.3,2.3,0.7,4.7,0.9,5.8c0.1,0.8,0,1.5-0.6,1.9c-1,0.7-3.2,1.4-4.1,1.4c-0.8,0-1.5-0.8-1.6-1.6c-0.7-3.4-1.2-8-1.1-11.1 c0-2.8,0-5.9,0.2-8.3c0-0.7,0.3-1.1,0.9-1.4c1.2-0.5,3-0.6,4.7-0.3c0.8,0.1,1,0.8,1.4,1.4c1.7,2.8,3.8,6.7,5.7,10.6 c0-6.3,1.9-11.9,3.5-15.3c0.5-1.1,0.9-1.4,1.9-1.4c1.3,0,2.9,0.2,4.1,0.4c1.1,0.2,1.5,1.6,1.7,2.5c1.2,4.5,4.7,18.7,5.5,22.4 C47.8,42.8,48.3,44,47.8,44.3z",
    "color": "#E51937"
  },
  "npm": {
    "icon": "M18.9,20v25.6H32V25.5h7.5V46h5.6V20H18.9z",
    "mask": "M68,0v68H0V0H68z M18.9,20v25.6H32V25.5h7.5V46h5.6V20H18.9z",
    "color": "#cb3837"
  },
  "pinterest": {
    "icon": "M32,16c-8.8,0-16,7.2-16,16c0,6.6,3.9,12.2,9.6,14.7c0-1.1,0-2.5,0.3-3.7 c0.3-1.3,2.1-8.7,2.1-8.7s-0.5-1-0.5-2.5c0-2.4,1.4-4.1,3.1-4.1c1.5,0,2.2,1.1,2.2,2.4c0,1.5-0.9,3.7-1.4,5.7 c-0.4,1.7,0.9,3.1,2.5,3.1c3,0,5.1-3.9,5.1-8.5c0-3.5-2.4-6.1-6.7-6.1c-4.9,0-7.9,3.6-7.9,7.7c0,1.4,0.4,2.4,1.1,3.1 c0.3,0.3,0.3,0.5,0.2,0.9c-0.1,0.3-0.3,1-0.3,1.3c-0.1,0.4-0.4,0.6-0.8,0.4c-2.2-0.9-3.3-3.4-3.3-6.1c0-4.5,3.8-10,11.4-10 c6.1,0,10.1,4.4,10.1,9.2c0,6.3-3.5,11-8.6,11c-1.7,0-3.4-0.9-3.9-2c0,0-0.9,3.7-1.1,4.4c-0.3,1.2-1,2.5-1.6,3.4 c1.4,0.4,3,0.7,4.5,0.7c8.8,0,16-7.2,16-16C48,23.2,40.8,16,32,16z",
    "mask": "M0,0v64h64V0H0z M32,48c-1.6,0-3.1-0.2-4.5-0.7c0.6-1,1.3-2.2,1.6-3.4c0.2-0.7,1.1-4.4,1.1-4.4 c0.6,1.1,2.2,2,3.9,2c5.1,0,8.6-4.7,8.6-11c0-4.7-4-9.2-10.1-9.2c-7.6,0-11.4,5.5-11.4,10c0,2.8,1,5.2,3.3,6.1 c0.4,0.1,0.7,0,0.8-0.4c0.1-0.3,0.2-1,0.3-1.3c0.1-0.4,0.1-0.5-0.2-0.9c-0.6-0.8-1.1-1.7-1.1-3.1c0-4,3-7.7,7.9-7.7 c4.3,0,6.7,2.6,6.7,6.1c0,4.6-2,8.5-5.1,8.5c-1.7,0-2.9-1.4-2.5-3.1c0.5-2,1.4-4.2,1.4-5.7c0-1.3-0.7-2.4-2.2-2.4 c-1.7,0-3.1,1.8-3.1,4.1c0,1.5,0.5,2.5,0.5,2.5s-1.8,7.4-2.1,8.7c-0.3,1.2-0.3,2.6-0.3,3.7C19.9,44.2,16,38.6,16,32 c0-8.8,7.2-16,16-16c8.8,0,16,7.2,16,16C48,40.8,40.8,48,32,48z",
    "color": "#cb2128"
  },
  "rdio": {
    "icon": "M47.3,25.7c-3.2,0.1-7.1-2.4-8.7-3.4c-0.1-0.1-0.3-0.2-0.4-0.2c-0.2-0.1-0.3-0.2-0.5-0.3v9.3h0 c0,0.8-0.2,1.7-0.8,2.6l0,0.1c-1.5,2.4-4.7,3.9-7.7,2.9c-2.9-1-3.7-3.8-2.1-6.3l0-0.1c1.5-2.4,4.7-3.9,7.7-2.9 c0.2,0.1,0.4,0.2,0.6,0.3v-6.8c-1.1-0.3-2.2-0.5-3.4-0.5c-6.9,0-12,5.2-12,11.6v0.1c0,6.4,5.1,11.5,12,11.5c6.9,0,12-5.2,12-11.6 v-0.1c0-0.5,0-1-0.1-1.5C47.5,29.5,49,25.8,47.3,25.7z",
    "mask": "M0,0v64h64V0H0z M43.9,30.5c0.1,0.5,0.1,1,0.1,1.5V32c0,6.4-5.1,11.6-12,11.6c-6.9,0-12-5.1-12-11.5V32 c0-6.4,5.1-11.6,12-11.6c1.2,0,2.3,0.2,3.4,0.5v6.8c-0.2-0.1-0.4-0.2-0.6-0.3c-3-1-6.2,0.4-7.7,2.9l0,0.1c-1.5,2.5-0.8,5.3,2.1,6.3 c3,1,6.2-0.4,7.7-2.9l0-0.1c0.5-0.8,0.8-1.7,0.8-2.6h0v-9.3c0.2,0.1,0.3,0.2,0.5,0.3c0.1,0.1,0.3,0.2,0.4,0.2c1.5,1,5.4,3.5,8.7,3.4 C49,25.8,47.5,29.5,43.9,30.5z",
    "color": "#0475C5"
  },
  "rss": {
    "icon": "M24,36c-2.2,0-4,1.8-4,4c0,2.2,1.8,4,4,4s4-1.8,4-4C28,37.8,26.2,36,24,36z M23,18 c-1.1,0-2,0.9-2,2s0.9,2,2,2c10.5,0,19,8.5,19,19c0,1.1,0.9,2,2,2s2-0.9,2-2C46,28.3,35.7,18,23,18z M23,27c-1.1,0-2,0.9-2,2 s0.9,2,2,2c5.5,0,10,4.5,10,10c0,1.1,0.9,2,2,2s2-0.9,2-2C37,33.3,30.7,27,23,27z",
    "mask": "M0,0v64h64V0H0z M24,44c-2.2,0-4-1.8-4-4c0-2.2,1.8-4,4-4s4,1.8,4,4C28,42.2,26.2,44,24,44z M35,43 c-1.1,0-2-0.9-2-2c0-5.5-4.5-10-10-10c-1.1,0-2-0.9-2-2s0.9-2,2-2c7.7,0,14,6.3,14,14C37,42.1,36.1,43,35,43z M44,43 c-1.1,0-2-0.9-2-2c0-10.5-8.5-19-19-19c-1.1,0-2-0.9-2-2s0.9-2,2-2c12.7,0,23,10.3,23,23C46,42.1,45.1,43,44,43z",
    "color": "#EF8733"
  },
  "sharethis": {
    "icon": "M28.3875,32.0001C28.3875,32.0843 28.3683,32.1632 28.3633,32.2471L37.1647,36.6464C37.9182,36.0083 38.8823,35.61 39.9474,35.61C42.3418,35.6105 44.2821,37.5509 44.2821,39.945C44.2821,42.3418 42.3417,44.2821 39.9474,44.2821C37.551,44.2821 35.6127,42.3417 35.6127,39.945C35.6127,39.8587 35.6319,39.7816 35.6367,39.698L26.8353,35.2984C26.0795,35.9341 25.1177,36.3324 24.0526,36.3324C21.6584,36.3324 19.7179,34.3941 19.7179,32.0001C19.7179,29.6036 21.6584,27.6628 24.0526,27.6628C25.1176,27.6628 26.0798,28.0635 26.8353,28.6992L35.6367,24.2997C35.6319,24.2156 35.6127,24.1365 35.6127,24.0502C35.6127,21.6584 37.551,19.7179 39.9474,19.7179C42.3418,19.7179 44.2821,21.6584 44.2821,24.0502C44.2821,26.4466 42.3417,28.3875 39.9474,28.3875C38.88,28.3875 37.9178,27.9868 37.1647,27.3487L28.3633,31.7506C28.368,31.8347 28.3875,31.9138 28.3875,32.0001Z",
    "mask": "M0,0L64,0L64,64L0,64L0,0ZM28.3875,32.0001C28.3875,32.0843 28.3683,32.1632 28.3633,32.2471L37.1647,36.6464C37.9182,36.0083 38.8823,35.61 39.9474,35.61C42.3418,35.6105 44.2821,37.5509 44.2821,39.945C44.2821,42.3418 42.3417,44.2821 39.9474,44.2821C37.551,44.2821 35.6127,42.3417 35.6127,39.945C35.6127,39.8587 35.6319,39.7816 35.6367,39.698L26.8353,35.2984C26.0795,35.9341 25.1177,36.3324 24.0526,36.3324C21.6584,36.3324 19.7179,34.3941 19.7179,32.0001C19.7179,29.6036 21.6584,27.6628 24.0526,27.6628C25.1176,27.6628 26.0798,28.0635 26.8353,28.6992L35.6367,24.2997C35.6319,24.2156 35.6127,24.1365 35.6127,24.0502C35.6127,21.6584 37.551,19.7179 39.9474,19.7179C42.3418,19.7179 44.2821,21.6584 44.2821,24.0502C44.2821,26.4466 42.3417,28.3875 39.9474,28.3875C38.88,28.3875 37.9178,27.9868 37.1647,27.3487L28.3633,31.7506C28.368,31.8347 28.3875,31.9138 28.3875,32.0001Z",
    "color": "#00BF00"
  },
  "smugmug": {
    "icon": "M25.4,22.9c2.8,0,4.1-1.7,3.9-3.1 c-0.1-1.2-1.3-2.4-3.6-2.4c-1.9,0-3.1,1.4-3.3,2.8C22.3,21.6,23.1,23,25.4,22.9z M39.2,22.6c2.6-0.1,3.8-1.5,3.8-2.8 c0-1.5-1.4-3-3.8-2.8c-1.9,0.2-3,1.5-3.2,2.8C35.9,21.3,36.9,22.7,39.2,22.6z M40.9,28.5c-6.6,0.7-6.9,0.7-19,1 c-5.1,0-4,17.5,6.9,17.5C39.2,47,51.7,27.4,40.9,28.5z M29,43.9c-9.5,0-8.2-11.3-6.6-11.4c11.1-0.4,13.9-0.9,17.8-0.9 C44.3,31.6,36.6,43.9,29,43.9z",
    "mask": "M0,0v64h64V0H0z M36.1,19.8c0.2-1.3,1.3-2.6,3.2-2.8c2.4-0.2,3.8,1.3,3.8,2.8c0,1.3-1.2,2.6-3.8,2.8 C36.9,22.7,35.9,21.3,36.1,19.8z M22.5,20.2c0.2-1.4,1.4-2.8,3.3-2.8c2.3,0,3.5,1.1,3.6,2.4c0.2,1.5-1.1,3.1-3.9,3.1 C23.1,23,22.3,21.6,22.5,20.2z M28.8,47c-10.9,0-12-17.5-6.9-17.5c12.1-0.3,12.5-0.3,19-1C51.7,27.4,39.2,47,28.8,47z M40.3,31.6 c-3.9,0-6.8,0.5-17.8,0.9c-1.6,0.1-2.9,11.4,6.6,11.4C36.6,43.9,44.3,31.6,40.3,31.6z",
    "color": "#8cca1e"
  },
  "soundcloud": {
    "icon": "M43.6,30c-0.6,0-1.2,0.1-1.7,0.3c-0.3-4-3.7-7.1-7.7-7.1c-1,0-2,0.2-2.8,0.5 C31.1,23.9,31,24,31,24.3v13.9c0,0.3,0.2,0.5,0.5,0.5c0,0,12.2,0,12.2,0c2.4,0,4.4-1.9,4.4-4.4C48,31.9,46,30,43.6,30z M27.2,25.1 c-0.7,0-1.2,0.5-1.2,1.1v11.3c0,0.7,0.6,1.2,1.2,1.2c0.7,0,1.2-0.6,1.2-1.2V26.2C28.4,25.6,27.8,25.1,27.2,25.1z M22.2,27.8 c-0.7,0-1.2,0.5-1.2,1.1v8.5c0,0.7,0.6,1.2,1.2,1.2s1.2-0.6,1.2-1.2V29C23.4,28.3,22.9,27.8,22.2,27.8z M17.2,30.2 c-0.7,0-1.2,0.5-1.2,1.1v4.9c0,0.7,0.6,1.2,1.2,1.2c0.7,0,1.2-0.6,1.2-1.2v-4.9C18.5,30.7,17.9,30.2,17.2,30.2z",
    "mask": "M0,0v64h64V0H0z M18.5,36.3c0,0.7-0.6,1.2-1.2,1.2c-0.7,0-1.2-0.6-1.2-1.2v-4.9c0-0.6,0.6-1.1,1.2-1.1 c0.7,0,1.2,0.5,1.2,1.1V36.3z M23.4,37.5c0,0.7-0.6,1.2-1.2,1.2S21,38.2,21,37.5V29c0-0.6,0.6-1.1,1.2-1.1s1.2,0.5,1.2,1.1V37.5z  M28.4,37.5c0,0.7-0.6,1.2-1.2,1.2c-0.7,0-1.2-0.6-1.2-1.2V26.2c0-0.6,0.6-1.1,1.2-1.1c0.7,0,1.2,0.5,1.2,1.1V37.5z M43.6,38.7 c0,0-12.1,0-12.2,0c-0.3,0-0.5-0.2-0.5-0.5V24.3c0-0.3,0.1-0.4,0.4-0.5c0.9-0.3,1.8-0.5,2.8-0.5c4,0,7.4,3.1,7.7,7.1 c0.5-0.2,1.1-0.3,1.7-0.3c2.4,0,4.4,2,4.4,4.4C48,36.8,46,38.7,43.6,38.7z",
    "color": "#FF5700"
  },
  "spotify": {
    "icon": "M32,16c-8.8,0-16,7.2-16,16c0,8.8,7.2,16,16,16c8.8,0,16-7.2,16-16C48,23.2,40.8,16,32,16 M39.3,39.1c-0.3,0.5-0.9,0.6-1.4,0.3c-3.8-2.3-8.5-2.8-14.1-1.5c-0.5,0.1-1.1-0.2-1.2-0.7c-0.1-0.5,0.2-1.1,0.8-1.2 c6.1-1.4,11.3-0.8,15.5,1.8C39.5,38,39.6,38.6,39.3,39.1 M41.3,34.7c-0.4,0.6-1.1,0.8-1.7,0.4c-4.3-2.6-10.9-3.4-15.9-1.9 c-0.7,0.2-1.4-0.2-1.6-0.8c-0.2-0.7,0.2-1.4,0.8-1.6c5.8-1.8,13-0.9,18,2.1C41.5,33.4,41.7,34.1,41.3,34.7 M41.5,30.2 c-5.2-3.1-13.7-3.3-18.6-1.9c-0.8,0.2-1.6-0.2-1.9-1c-0.2-0.8,0.2-1.6,1-1.9c5.7-1.7,15-1.4,21,2.1c0.7,0.4,0.9,1.3,0.5,2.1 C43.1,30.4,42.2,30.6,41.5,30.2",
    "mask": "M39,37.7c-4.2-2.6-9.4-3.2-15.5-1.8c-0.5,0.1-0.9,0.7-0.8,1.2c0.1,0.5,0.7,0.9,1.2,0.7c5.6-1.3,10.3-0.8,14.1,1.5 c0.5,0.3,1.1,0.1,1.4-0.3C39.6,38.6,39.5,38,39,37.7z M40.9,33c-4.9-3-12.2-3.9-18-2.1c-0.7,0.2-1,0.9-0.8,1.6 c0.2,0.7,0.9,1,1.6,0.8c5.1-1.5,11.6-0.8,15.9,1.9c0.6,0.4,1.4,0.2,1.7-0.4C41.7,34.1,41.5,33.4,40.9,33z M0,0v64h64V0H0z M32,48 c-8.8,0-16-7.2-16-16c0-8.8,7.2-16,16-16c8.8,0,16,7.2,16,16C48,40.8,40.8,48,32,48z M43,27.6c-5.9-3.5-15.3-3.9-21-2.1 c-0.8,0.2-1.2,1.1-1,1.9c0.2,0.8,1.1,1.2,1.9,1c4.9-1.5,13.4-1.2,18.6,1.9c0.7,0.4,1.6,0.2,2.1-0.5C43.9,29,43.7,28,43,27.6z",
    "color": "#2EBD59"
  },
  "squarespace": {
    "icon": "M46.2,27.6c-2.4-2.4-6.3-2.4-8.7,0l-9.8,9.8c-0.6,0.6-0.6,1.6,0,2.2c0.6,0.6,1.6,0.6,2.2,0 l9.8-9.8c1.2-1.2,3.2-1.2,4.4,0c1.2,1.2,1.2,3.2,0,4.4l-9.6,9.6c1.2,1.2,3.2,1.2,4.4,0l7.5-7.5C48.6,34,48.6,30,46.2,27.6z  M42.9,30.9c-0.6-0.6-1.6-0.6-2.2,0l-9.8,9.8c-1.2,1.2-3.2,1.2-4.4,0c-0.6-0.6-1.6-0.6-2.2,0c-0.6,0.6-0.6,1.6,0,2.2 c2.4,2.4,6.3,2.4,8.7,0l9.8-9.8C43.5,32.5,43.5,31.5,42.9,30.9z M39.6,21.1c-2.4-2.4-6.3-2.4-8.7,0l-9.8,9.8c-0.6,0.6-0.6,1.6,0,2.2 c0.6,0.6,1.6,0.6,2.2,0l9.8-9.8c1.2-1.2,3.2-1.2,4.4,0c0.6,0.6,1.6,0.6,2.2,0C40.2,22.7,40.2,21.7,39.6,21.1z M36.4,24.4 c-0.6-0.6-1.6-0.6-2.2,0l-9.8,9.8c-1.2,1.2-3.2,1.2-4.4,0c-1.2-1.2-1.2-3.2,0-4.4l9.6-9.6c-1.2-1.2-3.2-1.2-4.4,0l-7.5,7.5 c-2.4,2.4-2.4,6.3,0,8.7c2.4,2.4,6.3,2.4,8.7,0l9.8-9.8C37,25.9,37,25,36.4,24.4z",
    "mask": "M0,0v64h64V0H0z M39.6,21.1c0.6,0.6,0.6,1.6,0,2.2c-0.6,0.6-1.6,0.6-2.2,0c-1.2-1.2-3.2-1.2-4.4,0l-9.8,9.8 c-0.6,0.6-1.6,0.6-2.2,0c-0.6-0.6-0.6-1.6,0-2.2l9.8-9.8C33.3,18.7,37.2,18.7,39.6,21.1z M17.8,36.4c-2.4-2.4-2.4-6.3,0-8.7l7.5-7.5 c1.2-1.2,3.2-1.2,4.4,0L20,29.8c-1.2,1.2-1.2,3.2,0,4.4c1.2,1.2,3.2,1.2,4.4,0l9.8-9.8c0.6-0.6,1.6-0.6,2.2,0c0.6,0.6,0.6,1.6,0,2.2 l-9.8,9.8C24.1,38.8,20.2,38.8,17.8,36.4z M24.4,42.9c-0.6-0.6-0.6-1.6,0-2.2c0.6-0.6,1.6-0.6,2.2,0c1.2,1.2,3.2,1.2,4.4,0l9.8-9.8 c0.6-0.6,1.6-0.6,2.2,0c0.6,0.6,0.6,1.6,0,2.2l-9.8,9.8C30.7,45.3,26.8,45.3,24.4,42.9z M46.2,36.4l-7.5,7.5c-1.2,1.2-3.2,1.2-4.4,0 l9.6-9.6c1.2-1.2,1.2-3.2,0-4.4c-1.2-1.2-3.2-1.2-4.4,0l-9.8,9.8c-0.6,0.6-1.6,0.6-2.2,0c-0.6-0.6-0.6-1.6,0-2.2l9.8-9.8 c2.4-2.4,6.3-2.4,8.7,0C48.6,30,48.6,34,46.2,36.4z",
    "color": "#1C1C1C"
  },
  "tumblr": {
    "icon": "M39.2,41c-0.6,0.3-1.6,0.5-2.4,0.5c-2.4,0.1-2.9-1.7-2.9-3v-9.3h6v-4.5h-6V17c0,0-4.3,0-4.4,0 c-0.1,0-0.2,0.1-0.2,0.2c-0.3,2.3-1.4,6.4-5.9,8.1v3.9h3V39c0,3.4,2.5,8.1,9,8c2.2,0,4.7-1,5.2-1.8L39.2,41z",
    "mask": "M0,0v64h64V0H0z M35.4,47c-6.5,0.1-9-4.7-9-8v-9.8h-3v-3.9c4.6-1.6,5.6-5.7,5.9-8.1c0-0.2,0.1-0.2,0.2-0.2 c0.1,0,4.4,0,4.4,0v7.6h6v4.5h-6v9.3c0,1.3,0.5,3,2.9,3c0.8,0,1.9-0.3,2.4-0.5l1.4,4.3C40.1,46,37.6,47,35.4,47z",
    "color": "#2c4762"
  },
  "twitch": {
    "icon": "M40,25.6h-2.5v7.6H40V25.6z M33,25.6h-2.5v7.6H33V25.6z M20.9,18L19,23.1v20.4h7v3.8h3.8l3.8-3.8h5.7l7.6-7.6V18H20.9z M44.5,34.5L40,39h-7l-3.8,3.8V39h-5.7V20.5h21V34.5z",
    "mask": "M0,0v64h64V0H0z M47,35.8l-7.6,7.6h-5.7l-3.8,3.8H26v-3.8h-7V23.1l1.9-5.1H47V35.8z M29.2,42.8L33,39h7l4.5-4.5 v-14h-21V39h5.7V42.8z M37.5,25.6H40v7.6h-2.5V25.6z M30.5,25.6H33v7.6h-2.5V25.6z",
    "color": "#6441A5"
  },
  "twitter": {
    "icon": "M48,22.1c-1.2,0.5-2.4,0.9-3.8,1c1.4-0.8,2.4-2.1,2.9-3.6c-1.3,0.8-2.7,1.3-4.2,1.6 C41.7,19.8,40,19,38.2,19c-3.6,0-6.6,2.9-6.6,6.6c0,0.5,0.1,1,0.2,1.5c-5.5-0.3-10.3-2.9-13.5-6.9c-0.6,1-0.9,2.1-0.9,3.3 c0,2.3,1.2,4.3,2.9,5.5c-1.1,0-2.1-0.3-3-0.8c0,0,0,0.1,0,0.1c0,3.2,2.3,5.8,5.3,6.4c-0.6,0.1-1.1,0.2-1.7,0.2c-0.4,0-0.8,0-1.2-0.1 c0.8,2.6,3.3,4.5,6.1,4.6c-2.2,1.8-5.1,2.8-8.2,2.8c-0.5,0-1.1,0-1.6-0.1c2.9,1.9,6.4,2.9,10.1,2.9c12.1,0,18.7-10,18.7-18.7 c0-0.3,0-0.6,0-0.8C46,24.5,47.1,23.4,48,22.1z",
    "mask": "M0,0v64h64V0H0z M44.7,25.5c0,0.3,0,0.6,0,0.8C44.7,35,38.1,45,26.1,45c-3.7,0-7.2-1.1-10.1-2.9 c0.5,0.1,1,0.1,1.6,0.1c3.1,0,5.9-1,8.2-2.8c-2.9-0.1-5.3-2-6.1-4.6c0.4,0.1,0.8,0.1,1.2,0.1c0.6,0,1.2-0.1,1.7-0.2 c-3-0.6-5.3-3.3-5.3-6.4c0,0,0-0.1,0-0.1c0.9,0.5,1.9,0.8,3,0.8c-1.8-1.2-2.9-3.2-2.9-5.5c0-1.2,0.3-2.3,0.9-3.3 c3.2,4,8.1,6.6,13.5,6.9c-0.1-0.5-0.2-1-0.2-1.5c0-3.6,2.9-6.6,6.6-6.6c1.9,0,3.6,0.8,4.8,2.1c1.5-0.3,2.9-0.8,4.2-1.6 c-0.5,1.5-1.5,2.8-2.9,3.6c1.3-0.2,2.6-0.5,3.8-1C47.1,23.4,46,24.5,44.7,25.5z",
    "color": "#00aced"
  },
  "vevo": {
    "icon": "M43,21c-4.5,0-5.4,2.7-6.8,4.6c0,0-3.7,5.6-5.1,7.7l-3-12.3H20l5.1,20.6c1.1,3.7,4.1,3.4,4.1,3.4 c2.1,0,3.6-1.1,5-3.1L48,21C48,21,43.2,21,43,21z",
    "mask": "M0,0v64h64V0H0z M34.2,41.9c-1.4,2.1-2.9,3.1-5,3.1c0,0-3,0.2-4.1-3.4L20,21h8.1l3,12.3c1.4-2.1,5.1-7.7,5.1-7.7 c1.4-1.9,2.2-4.6,6.8-4.6c0.2,0,5,0,5,0L34.2,41.9z",
    "color": "#ED1A3B"
  },
  "vimeo": {
    "icon": "M47,25c-0.1,2.9-2.2,6.9-6.1,12c-4.1,5.3-7.5,8-10.4,8c-1.7,0-3.2-1.6-4.4-4.8 c-0.8-3-1.6-5.9-2.4-8.9c-0.9-3.2-1.9-4.8-2.9-4.8c-0.2,0-1,0.5-2.4,1.4L17,26c1.5-1.3,2.9-2.6,4.4-3.9c2-1.7,3.5-2.6,4.4-2.7 c2.3-0.2,3.8,1.4,4.3,4.8c0.6,3.7,1,6,1.2,6.9c0.7,3.1,1.4,4.6,2.2,4.6c0.6,0,1.6-1,2.8-3c1.3-2,1.9-3.5,2-4.5 c0.2-1.7-0.5-2.6-2-2.6c-0.7,0-1.5,0.2-2.2,0.5c1.5-4.8,4.3-7.2,8.4-7C45.7,19.1,47.2,21.1,47,25z",
    "mask": "M0,0v64h64V0H0z M40.9,37c-4.1,5.3-7.5,8-10.4,8c-1.7,0-3.2-1.6-4.4-4.8c-0.8-3-1.6-5.9-2.4-8.9 c-0.9-3.2-1.9-4.8-2.9-4.8c-0.2,0-1,0.5-2.4,1.4L17,26c1.5-1.3,2.9-2.6,4.4-3.9c2-1.7,3.5-2.6,4.4-2.7c2.3-0.2,3.8,1.4,4.3,4.8 c0.6,3.7,1,6,1.2,6.9c0.7,3.1,1.4,4.6,2.2,4.6c0.6,0,1.6-1,2.8-3c1.3-2,1.9-3.5,2-4.5c0.2-1.7-0.5-2.6-2-2.6c-0.7,0-1.5,0.2-2.2,0.5 c1.5-4.8,4.3-7.2,8.4-7c3.1,0.1,4.5,2.1,4.4,6C46.9,27.9,44.8,31.9,40.9,37z",
    "color": "#1ab7ea"
  },
  "vine": {
    "icon": "M45.2,31.9c-0.8,0.2-1.5,0.3-2.2,0.3c-3.8,0-6.7-2.6-6.7-7.2c0-2.3,0.9-3.4,2.1-3.4 c1.2,0,2,1.1,2,3.2c0,1.2-0.3,2.5-0.6,3.3c0,0,1.2,2,4.4,1.4c0.7-1.5,1-3.5,1-5.2c0-4.6-2.3-7.3-6.6-7.3c-4.4,0-7,3.4-7,7.9 c0,4.4,2.1,8.2,5.5,10c-1.4,2.9-3.3,5.4-5.2,7.3c-3.5-4.2-6.6-9.8-7.9-20.7h-5.1c2.4,18.1,9.4,23.9,11.2,25c1.1,0.6,2,0.6,2.9,0.1 c1.5-0.9,6-5.4,8.6-10.7c1.1,0,2.3-0.1,3.6-0.4V31.9z",
    "mask": "M0,0v64h64V0H0z M38.4,21.5c-1.2,0-2.1,1.2-2.1,3.4c0,4.6,2.9,7.2,6.7,7.2c0.7,0,1.4-0.1,2.2-0.3v3.6 c-1.3,0.3-2.5,0.4-3.6,0.4c-2.5,5.3-7,9.8-8.6,10.7c-1,0.5-1.9,0.6-2.9-0.1c-1.9-1.1-8.9-6.9-11.2-25H24c1.3,10.9,4.4,16.5,7.9,20.7 c1.9-1.9,3.7-4.4,5.2-7.3c-3.4-1.7-5.5-5.5-5.5-10c0-4.5,2.6-7.9,7-7.9c4.3,0,6.6,2.7,6.6,7.3c0,1.7-0.4,3.7-1,5.2 c-3.2,0.6-4.4-1.4-4.4-1.4c0.2-0.8,0.6-2.1,0.6-3.3C40.3,22.6,39.5,21.5,38.4,21.5z",
    "color": "#00BF8F"
  },
  "vsco": {
    "icon": "M32,16c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C34.5,17.1,33.4,16,32,16z M18.5,29.5c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C20.9,30.6,19.8,29.5,18.5,29.5z M25.2,22.8c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C27.7,23.9,26.6,22.8,25.2,22.8z M38.7,27.6c1.4,0,2.5-1.1,2.5-2.5c0-1.4-1.1-2.5-2.5-2.5c-1.4,0-2.5,1.1-2.5,2.5 C36.2,26.5,37.3,27.6,38.7,27.6z M25.1,36.2c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C27.6,37.3,26.5,36.2,25.1,36.2z M31.9,34.4c1.4,0,2.5-1.1,2.5-2.5c0-1.4-1.1-2.5-2.5-2.5c-1.4,0-2.5,1.1-2.5,2.5 C29.5,33.3,30.6,34.4,31.9,34.4z M45.5,29.5c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C48,30.6,46.9,29.5,45.5,29.5z M32,43.1c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C34.5,44.2,33.4,43.1,32,43.1z M38.8,36.3c-1.4,0-2.5,1.1-2.5,2.5c0,1.4,1.1,2.5,2.5,2.5c1.4,0,2.5-1.1,2.5-2.5 C41.2,37.4,40.1,36.3,38.8,36.3z",
    "mask": "M0,0v64h64V0H0z M18.5,34.5c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C20.9,33.4,19.8,34.5,18.5,34.5z M25.1,41.1c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C27.6,40,26.5,41.1,25.1,41.1z M25.2,27.7c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C27.7,26.6,26.6,27.7,25.2,27.7z M32,48c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C34.5,46.9,33.4,48,32,48z M29.5,31.9c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5c0,1.4-1.1,2.5-2.5,2.5 C30.6,34.4,29.5,33.3,29.5,31.9z M32,20.9c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C34.5,19.8,33.4,20.9,32,20.9z M38.7,22.7c1.4,0,2.5,1.1,2.5,2.5c0,1.4-1.1,2.5-2.5,2.5c-1.4,0-2.5-1.1-2.5-2.5 C36.2,23.8,37.3,22.7,38.7,22.7z M38.8,41.2c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C41.2,40.1,40.1,41.2,38.8,41.2z M45.5,34.5c-1.4,0-2.5-1.1-2.5-2.5c0-1.4,1.1-2.5,2.5-2.5c1.4,0,2.5,1.1,2.5,2.5 C48,33.4,46.9,34.5,45.5,34.5z",
    "color": "#83878A"
  },
  "yelp": {
    "icon": "M29.5,35.7c0.5-0.1,0.9-0.6,0.9-1.2c0-0.6-0.3-1.2-0.8-1.4c0,0-1.5-0.6-1.5-0.6 c-5-2.1-5.2-2.1-5.5-2.1c-0.4,0-0.7,0.2-1,0.6c-0.5,0.8-0.7,3.3-0.5,5c0.1,0.6,0.2,1,0.3,1.3c0.2,0.4,0.5,0.6,0.9,0.6 c0.2,0,0.4,0,5.1-1.5C27.5,36.4,29.5,35.7,29.5,35.7z M32.2,37.6c-0.6-0.2-1.2-0.1-1.5,0.4c0,0-1,1.2-1,1.2 c-3.5,4.1-3.7,4.3-3.7,4.5c-0.1,0.1-0.1,0.3-0.1,0.4c0,0.2,0.1,0.4,0.3,0.6c0.8,1,4.7,2.4,6,2.2c0.4-0.1,0.7-0.3,0.9-0.7 C33,46.1,33,45.9,33,41c0,0,0-2.2,0-2.2C33.1,38.3,32.7,37.8,32.2,37.6z M32.3,16.8c-0.1-0.4-0.4-0.7-0.9-0.8 c-1.3-0.3-6.5,1.1-7.5,2.1c-0.3,0.3-0.4,0.7-0.3,1.1c0.2,0.3,6.5,10.4,6.5,10.4c0.9,1.5,1.7,1.3,2,1.2c0.3-0.1,1-0.3,0.9-2.1 C33,26.6,32.4,17.3,32.3,16.8z M36.9,33.4C36.9,33.4,36.8,33.5,36.9,33.4c0.2-0.1,0.7-0.2,1.5-0.4c5.3-1.3,5.5-1.3,5.7-1.5 c0.3-0.2,0.5-0.6,0.5-1c0,0,0,0,0,0c-0.1-1.3-2.4-4.7-3.5-5.2c-0.4-0.2-0.8-0.2-1.1,0c-0.2,0.1-0.4,0.3-3.2,4.2c0,0-1.3,1.7-1.3,1.8 c-0.3,0.4-0.3,1,0,1.5C35.8,33.3,36.3,33.6,36.9,33.4z M44.4,38.6c-0.2-0.1-0.3-0.2-5-1.7c0,0-2-0.7-2.1-0.7c-0.5-0.2-1.1,0-1.4,0.5 c-0.4,0.5-0.5,1.1-0.1,1.6l0.8,1.3c2.8,4.5,3,4.8,3.2,5c0.3,0.2,0.7,0.3,1.1,0.1c1.2-0.5,3.7-3.7,3.9-5 C44.8,39.2,44.7,38.8,44.4,38.6z",
    "mask": "M0,0v64h64V0H0z M22.4,37.9c-0.4,0-0.7-0.2-0.9-0.6c-0.1-0.3-0.2-0.7-0.3-1.3c-0.2-1.7,0-4.2,0.5-5 c0.2-0.4,0.6-0.6,1-0.6c0.3,0,0.5,0.1,5.5,2.1c0,0,1.5,0.6,1.5,0.6c0.5,0.2,0.9,0.7,0.8,1.4c0,0.6-0.4,1.1-0.9,1.2 c0,0-2.1,0.7-2.1,0.7C22.8,37.9,22.7,37.9,22.4,37.9z M33,41c0,4.9,0,5-0.1,5.3c-0.1,0.4-0.4,0.6-0.9,0.7c-1.2,0.2-5.1-1.2-6-2.2 c-0.2-0.2-0.3-0.4-0.3-0.6c0-0.2,0-0.3,0.1-0.4c0.1-0.2,0.2-0.4,3.7-4.5c0,0,1-1.2,1-1.2c0.3-0.4,1-0.6,1.5-0.4 c0.6,0.2,0.9,0.7,0.9,1.2C33,38.8,33,41,33,41z M32.2,30.8c-0.3,0.1-1,0.3-2-1.2c0,0-6.4-10.1-6.5-10.4c-0.1-0.3,0-0.7,0.3-1.1 c1-1,6.1-2.4,7.5-2.1c0.4,0.1,0.7,0.4,0.9,0.8c0.1,0.4,0.7,9.8,0.8,11.9C33.2,30.5,32.4,30.7,32.2,30.8z M35.4,31.3 c0,0,1.3-1.8,1.3-1.8c2.8-3.9,3-4.1,3.2-4.2c0.3-0.2,0.7-0.2,1.1,0c1.1,0.5,3.4,3.9,3.5,5.2c0,0,0,0,0,0c0,0.4-0.1,0.8-0.5,1 c-0.2,0.1-0.4,0.2-5.7,1.5c-0.8,0.2-1.3,0.3-1.6,0.4c0,0,0,0,0,0c-0.5,0.1-1.1-0.1-1.4-0.6C35.1,32.3,35.1,31.7,35.4,31.3z  M44.7,39.6c-0.2,1.3-2.7,4.5-3.9,5c-0.4,0.2-0.8,0.1-1.1-0.1c-0.2-0.2-0.4-0.5-3.2-5l-0.8-1.3c-0.3-0.5-0.3-1.1,0.1-1.6 c0.4-0.5,0.9-0.6,1.4-0.5c0,0,2.1,0.7,2.1,0.7c4.6,1.5,4.8,1.6,5,1.7C44.7,38.8,44.8,39.2,44.7,39.6z",
    "color": "#B90C04"
  },
  "youtube": {
    "icon": "M46.7,26c0,0-0.3-2.1-1.2-3c-1.1-1.2-2.4-1.2-3-1.3C38.3,21.4,32,21.4,32,21.4h0 c0,0-6.3,0-10.5,0.3c-0.6,0.1-1.9,0.1-3,1.3c-0.9,0.9-1.2,3-1.2,3S17,28.4,17,30.9v2.3c0,2.4,0.3,4.9,0.3,4.9s0.3,2.1,1.2,3 c1.1,1.2,2.6,1.2,3.3,1.3c2.4,0.2,10.2,0.3,10.2,0.3s6.3,0,10.5-0.3c0.6-0.1,1.9-0.1,3-1.3c0.9-0.9,1.2-3,1.2-3s0.3-2.4,0.3-4.9 v-2.3C47,28.4,46.7,26,46.7,26z M28.9,35.9l0-8.4l8.1,4.2L28.9,35.9z",
    "mask": "M0,0v64h64V0H0z M47,33.1c0,2.4-0.3,4.9-0.3,4.9s-0.3,2.1-1.2,3c-1.1,1.2-2.4,1.2-3,1.3 C38.3,42.5,32,42.6,32,42.6s-7.8-0.1-10.2-0.3c-0.7-0.1-2.2-0.1-3.3-1.3c-0.9-0.9-1.2-3-1.2-3S17,35.6,17,33.1v-2.3 c0-2.4,0.3-4.9,0.3-4.9s0.3-2.1,1.2-3c1.1-1.2,2.4-1.2,3-1.3c4.2-0.3,10.5-0.3,10.5-0.3h0c0,0,6.3,0,10.5,0.3c0.6,0.1,1.9,0.1,3,1.3 c0.9,0.9,1.2,3,1.2,3s0.3,2.4,0.3,4.9V33.1z M28.9,35.9l8.1-4.2l-8.1-4.2L28.9,35.9z",
    "color": "#ff3333"
  }
}

},{}],52:[function(require,module,exports){
module.exports={
  "version": "0.0.1"
}
},{}],53:[function(require,module,exports){
var AppView, CloudFileManager, CloudFileManagerClient, CloudFileManagerUIMenu, getHashParam;

AppView = React.createFactory(require('./views/app-view'));

CloudFileManagerUIMenu = (require('./ui')).CloudFileManagerUIMenu;

CloudFileManagerClient = (require('./client')).CloudFileManagerClient;

getHashParam = require('./utils/get-hash-param');

CloudFileManager = (function() {
  function CloudFileManager(options) {
    this.DefaultMenu = CloudFileManagerUIMenu.DefaultMenu;
    this.client = new CloudFileManagerClient();
    this.appOptions = {};
  }

  CloudFileManager.prototype.init = function(appOptions) {
    this.appOptions = appOptions;
    this.appOptions.hashParams = {
      sharedContentId: getHashParam("shared"),
      fileParams: getHashParam("file"),
      copyParams: getHashParam("copy"),
      newInFolderParams: getHashParam("newInFolder")
    };
    return this.client.setAppOptions(this.appOptions);
  };

  CloudFileManager.prototype.createFrame = function(appOptions, appElemId, eventCallback) {
    this.appOptions = appOptions;
    if (eventCallback == null) {
      eventCallback = null;
    }
    this.appOptions.usingIframe = true;
    this.appOptions.appOrMenuElemId = appElemId;
    this.init(this.appOptions);
    this.client.listen(eventCallback);
    return this._renderApp(document.getElementById(appElemId));
  };

  CloudFileManager.prototype.clientConnect = function(eventCallback) {
    if (this.appOptions.appOrMenuElemId != null) {
      this._renderApp(document.getElementById(this.appOptions.appOrMenuElemId));
    } else {
      this._createHiddenApp();
    }
    this.client.listen(eventCallback);
    this.client.connect();
    return this.client.processUrlParams();
  };

  CloudFileManager.prototype._createHiddenApp = function() {
    var anchor;
    anchor = document.createElement("div");
    document.body.appendChild(anchor);
    return this._renderApp(anchor);
  };

  CloudFileManager.prototype._renderApp = function(anchor) {
    this.appOptions.client = this.client;
    return ReactDOM.render(AppView(this.appOptions), anchor);
  };

  return CloudFileManager;

})();

module.exports = new CloudFileManager();


},{"./client":54,"./ui":68,"./utils/get-hash-param":69,"./views/app-view":82}],54:[function(require,module,exports){
var CloudContent, CloudFileManagerClient, CloudFileManagerClientEvent, CloudFileManagerUI, CloudMetadata, DocumentStoreProvider, DocumentStoreShareProvider, GoogleDriveProvider, LaraProvider, LocalFileProvider, LocalStorageProvider, PostMessageProvider, ProviderInterface, ReadOnlyProvider, URLProvider, base64Array, cloudContentFactory, getQueryParam, isString, tr,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  hasProp = {}.hasOwnProperty;

tr = require('./utils/translate');

isString = require('./utils/is-string');

base64Array = require('base64-js');

getQueryParam = require('./utils/get-query-param');

CloudFileManagerUI = (require('./ui')).CloudFileManagerUI;

LocalStorageProvider = require('./providers/localstorage-provider');

ReadOnlyProvider = require('./providers/readonly-provider');

GoogleDriveProvider = require('./providers/google-drive-provider');

LaraProvider = require('./providers/lara-provider');

DocumentStoreProvider = require('./providers/document-store-provider');

DocumentStoreShareProvider = require('./providers/document-store-share-provider');

LocalFileProvider = require('./providers/local-file-provider');

PostMessageProvider = require('./providers/post-message-provider');

URLProvider = require('./providers/url-provider');

ProviderInterface = (require('./providers/provider-interface')).ProviderInterface;

cloudContentFactory = (require('./providers/provider-interface')).cloudContentFactory;

CloudContent = (require('./providers/provider-interface')).CloudContent;

CloudMetadata = (require('./providers/provider-interface')).CloudMetadata;

CloudFileManagerClientEvent = (function() {
  function CloudFileManagerClientEvent(type1, data1, callback1, state1) {
    this.type = type1;
    this.data = data1 != null ? data1 : {};
    this.callback = callback1 != null ? callback1 : null;
    this.state = state1 != null ? state1 : {};
  }

  return CloudFileManagerClientEvent;

})();

CloudFileManagerClient = (function() {
  function CloudFileManagerClient(options) {
    this.shouldAutoSave = bind(this.shouldAutoSave, this);
    this.state = {
      availableProviders: []
    };
    this._listeners = [];
    this._resetState();
    this._ui = new CloudFileManagerUI(this);
    this.providers = {};
    this.urlProvider = new URLProvider();
  }

  CloudFileManagerClient.prototype.setAppOptions = function(appOptions1) {
    var Provider, allProviders, availableProviders, base, base1, base2, base3, i, j, len, len1, provider, providerList, providerName, providerOptions, providerSpec, readableMimetypes, ref, ref1, requestedProviders, shareProvider;
    this.appOptions = appOptions1 != null ? appOptions1 : {};
    if ((base = this.appOptions).wrapFileContent == null) {
      base.wrapFileContent = true;
    }
    CloudContent.wrapFileContent = this.appOptions.wrapFileContent;
    allProviders = {};
    providerList = [LocalStorageProvider, ReadOnlyProvider, GoogleDriveProvider, LaraProvider, DocumentStoreProvider, LocalFileProvider, PostMessageProvider];
    for (i = 0, len = providerList.length; i < len; i++) {
      Provider = providerList[i];
      if (Provider.Available()) {
        allProviders[Provider.Name] = Provider;
      }
    }
    if (!this.appOptions.providers) {
      this.appOptions.providers = [];
      for (providerName in allProviders) {
        if (!hasProp.call(allProviders, providerName)) continue;
        appOptions.providers.push(providerName);
      }
    }
    CloudMetadata.Extension = this.appOptions.extension;
    CloudMetadata.ReadableExtensions = this.appOptions.readableExtensions || [];
    if (CloudMetadata.Extension) {
      CloudMetadata.ReadableExtensions.push(CloudMetadata.Extension);
    }
    readableMimetypes = this.appOptions.readableMimeTypes || [];
    readableMimetypes.push(this.appOptions.mimeType);
    requestedProviders = this.appOptions.providers.slice();
    if (getQueryParam("saveSecondaryFileViaPostMessage")) {
      requestedProviders.push('postMessage');
    }
    availableProviders = [];
    shareProvider = null;
    for (j = 0, len1 = requestedProviders.length; j < len1; j++) {
      providerSpec = requestedProviders[j];
      ref = isString(providerSpec) ? [providerSpec, {}] : [providerSpec.name, providerSpec], providerName = ref[0], providerOptions = ref[1];
      if (providerOptions.mimeType == null) {
        providerOptions.mimeType = this.appOptions.mimeType;
      }
      providerOptions.readableMimetypes = readableMimetypes;
      if (!providerName) {
        this.alert("Invalid provider spec - must either be string or object with name property");
      } else {
        if (providerSpec.createProvider) {
          allProviders[providerName] = providerSpec.createProvider(ProviderInterface);
        }
        if (allProviders[providerName]) {
          Provider = allProviders[providerName];
          provider = new Provider(providerOptions, this);
          this.providers[providerName] = provider;
          if (providerName === DocumentStoreProvider.Name) {
            shareProvider = new DocumentStoreShareProvider(this, provider);
          }
          if (provider.urlDisplayName) {
            this.providers[provider.urlDisplayName] = provider;
          }
          availableProviders.push(provider);
        } else {
          this.alert("Unknown provider: " + providerName);
        }
      }
    }
    this._setState({
      availableProviders: availableProviders,
      shareProvider: shareProvider
    });
    (base1 = this.appOptions).ui || (base1.ui = {});
    (base2 = this.appOptions.ui).windowTitleSuffix || (base2.windowTitleSuffix = document.title);
    (base3 = this.appOptions.ui).windowTitleSeparator || (base3.windowTitleSeparator = ' - ');
    this._setWindowTitle();
    this._ui.init(this.appOptions.ui);
    if (this.appOptions.autoSaveInterval) {
      this.autoSave(this.appOptions.autoSaveInterval);
    }
    cloudContentFactory.setEnvelopeMetadata({
      cfmVersion: '0.0.1',
      appName: this.appOptions.appName || "",
      appVersion: this.appOptions.appVersion || "",
      appBuildNum: this.appOptions.appBuildNum || ""
    });
    this.newFileOpensInNewTab = ((ref1 = this.appOptions.ui) != null ? ref1.hasOwnProperty('newFileOpensInNewTab') : void 0) ? this.appOptions.ui.newFileOpensInNewTab : true;
    return this._startPostMessageListener();
  };

  CloudFileManagerClient.prototype.setProviderOptions = function(name, newOptions) {
    var i, key, len, provider, ref, results;
    ref = this.state.availableProviders;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      provider = ref[i];
      if (provider.name === name) {
        if (provider.options == null) {
          provider.options = {};
        }
        for (key in newOptions) {
          provider.options[key] = newOptions[key];
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  CloudFileManagerClient.prototype.connect = function() {
    return this._event('connected', {
      client: this
    });
  };

  CloudFileManagerClient.prototype.processUrlParams = function() {
    var folder, hashParams, i, len, provider, providerName, providerParams, ref, ref1, ref2;
    hashParams = this.appOptions.hashParams;
    if (hashParams.sharedContentId) {
      return this.openSharedContent(hashParams.sharedContentId);
    } else if (hashParams.fileParams) {
      if (hashParams.fileParams.indexOf("http") === 0) {
        return this.openUrlFile(hashParams.fileParams);
      } else {
        ref = hashParams.fileParams.split(':'), providerName = ref[0], providerParams = ref[1];
        return this.openProviderFile(providerName, providerParams);
      }
    } else if (hashParams.copyParams) {
      return this.openCopiedFile(hashParams.copyParams);
    } else if (hashParams.newInFolderParams) {
      ref1 = hashParams.newInFolderParams.split(':'), providerName = ref1[0], folder = ref1[1];
      return this.createNewInFolder(providerName, folder);
    } else {
      ref2 = this.state.availableProviders;
      for (i = 0, len = ref2.length; i < len; i++) {
        provider = ref2[i];
        if (provider.handleUrlParams()) {
          return;
        }
      }
      return this.ready();
    }
  };

  CloudFileManagerClient.prototype.ready = function() {
    return this._event('ready');
  };

  CloudFileManagerClient.prototype.listen = function(listener) {
    if (listener) {
      return this._listeners.push(listener);
    }
  };

  CloudFileManagerClient.prototype.log = function(event, eventData) {
    if (this.appOptions.log) {
      return this.appOptions.log(event, eventData);
    }
  };

  CloudFileManagerClient.prototype.autoProvider = function(capability) {
    var i, len, provider, ref;
    ref = this.state.availableProviders;
    for (i = 0, len = ref.length; i < len; i++) {
      provider = ref[i];
      if (provider.canAuto(capability)) {
        return provider;
      }
    }
  };

  CloudFileManagerClient.prototype.appendMenuItem = function(item) {
    this._ui.appendMenuItem(item);
    return this;
  };

  CloudFileManagerClient.prototype.prependMenuItem = function(item) {
    this._ui.prependMenuItem(item);
    return this;
  };

  CloudFileManagerClient.prototype.replaceMenuItem = function(key, item) {
    this._ui.replaceMenuItem(key, item);
    return this;
  };

  CloudFileManagerClient.prototype.insertMenuItemBefore = function(key, item) {
    this._ui.insertMenuItemBefore(key, item);
    return this;
  };

  CloudFileManagerClient.prototype.insertMenuItemAfter = function(key, item) {
    this._ui.insertMenuItemAfter(key, item);
    return this;
  };

  CloudFileManagerClient.prototype.setMenuBarInfo = function(info) {
    return this._ui.setMenuBarInfo(info);
  };

  CloudFileManagerClient.prototype.newFile = function(callback) {
    if (callback == null) {
      callback = null;
    }
    this._closeCurrentFile();
    this._resetState();
    window.location.hash = "";
    return this._event('newedFile', {
      content: ""
    });
  };

  CloudFileManagerClient.prototype.newFileDialog = function(callback) {
    if (callback == null) {
      callback = null;
    }
    if (this.newFileOpensInNewTab) {
      return window.open(this.getCurrentUrl(), '_blank');
    } else if (this.state.dirty) {
      if (this._autoSaveInterval && this.state.metadata) {
        this.save();
        return this.newFile();
      } else {
        return this.confirm(tr('~CONFIRM.NEW_FILE'), (function(_this) {
          return function() {
            return _this.newFile();
          };
        })(this));
      }
    } else {
      return this.newFile();
    }
  };

  CloudFileManagerClient.prototype.openFile = function(metadata, callback) {
    var ref;
    if (callback == null) {
      callback = null;
    }
    if (metadata != null ? (ref = metadata.provider) != null ? ref.can('load', metadata) : void 0 : void 0) {
      this._event('willOpenFile', {
        op: "openFile"
      });
      return metadata.provider.load(metadata, (function(_this) {
        return function(err, content) {
          if (err) {
            return _this.alert(err, function() {
              return _this.ready();
            });
          }
          _this._closeCurrentFile();
          _this._fileOpened(content, metadata, {
            openedContent: content.clone()
          }, _this._getHashParams(metadata));
          if (typeof callback === "function") {
            callback(content, metadata);
          }
          return metadata.provider.fileOpened(content, metadata);
        };
      })(this));
    } else {
      return this.openFileDialog(callback);
    }
  };

  CloudFileManagerClient.prototype.openFileDialog = function(callback) {
    var showDialog;
    if (callback == null) {
      callback = null;
    }
    showDialog = (function(_this) {
      return function() {
        return _this._ui.openFileDialog(function(metadata) {
          return _this.openFile(metadata, callback);
        });
      };
    })(this);
    if (!this.state.dirty) {
      return showDialog();
    } else {
      return this.confirm(tr('~CONFIRM.OPEN_FILE'), showDialog);
    }
  };

  CloudFileManagerClient.prototype.closeFile = function(callback) {
    if (callback == null) {
      callback = null;
    }
    this._closeCurrentFile();
    this._resetState();
    window.location.hash = "";
    this._event('closedFile', {
      content: ""
    });
    return typeof callback === "function" ? callback() : void 0;
  };

  CloudFileManagerClient.prototype.closeFileDialog = function(callback) {
    if (callback == null) {
      callback = null;
    }
    if (!this.state.dirty) {
      return this.closeFile(callback);
    } else {
      return this.confirm(tr('~CONFIRM.CLOSE_FILE'), (function(_this) {
        return function() {
          return _this.closeFile(callback);
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.importData = function(data, callback) {
    if (callback == null) {
      callback = null;
    }
    this._event('importedData', data);
    return typeof callback === "function" ? callback(data) : void 0;
  };

  CloudFileManagerClient.prototype.importDataDialog = function(callback) {
    if (callback == null) {
      callback = null;
    }
    return this._ui.importDataDialog((function(_this) {
      return function(data) {
        return _this.importData(data, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.readLocalFile = function(file, callback) {
    var reader;
    if (callback == null) {
      callback = null;
    }
    reader = new FileReader();
    reader.onload = function(loaded) {
      return typeof callback === "function" ? callback({
        name: file.name,
        content: loaded.target.result
      }) : void 0;
    };
    return reader.readAsText(file);
  };

  CloudFileManagerClient.prototype.openLocalFile = function(file, callback) {
    if (callback == null) {
      callback = null;
    }
    this._event('willOpenFile', {
      op: "openLocalFile"
    });
    return this.readLocalFile(file, (function(_this) {
      return function(data) {
        var content, metadata;
        content = cloudContentFactory.createEnvelopedCloudContent(data.content);
        metadata = new CloudMetadata({
          name: data.name,
          type: CloudMetadata.File
        });
        _this._fileOpened(content, metadata, {
          openedContent: content.clone()
        });
        return typeof callback === "function" ? callback(content, metadata) : void 0;
      };
    })(this));
  };

  CloudFileManagerClient.prototype.importLocalFile = function(file, callback) {
    if (callback == null) {
      callback = null;
    }
    return this.readLocalFile(file, (function(_this) {
      return function(data) {
        return _this.importData(data, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.openSharedContent = function(id) {
    var ref;
    this._event('willOpenFile', {
      op: "openSharedContent"
    });
    return (ref = this.state.shareProvider) != null ? ref.loadSharedContent(id, (function(_this) {
      return function(err, content, metadata) {
        if (err) {
          return _this.alert(err, function() {
            return _this.ready();
          });
        }
        return _this._fileOpened(content, metadata, {
          overwritable: false,
          openedContent: content.clone()
        });
      };
    })(this)) : void 0;
  };

  CloudFileManagerClient.prototype.parseUrlAuthorizeAndOpen = function() {
    var provider, providerName, providerParams, ref, ref1;
    if (((ref = this.appOptions.hashParams) != null ? ref.fileParams : void 0) != null) {
      ref1 = this.appOptions.hashParams.fileParams.split(':'), providerName = ref1[0], providerParams = ref1[1];
      provider = this.providers[providerName];
      if (provider) {
        return provider.authorize((function(_this) {
          return function() {
            return _this.openProviderFile(providerName(providerParams));
          };
        })(this));
      }
    }
  };

  CloudFileManagerClient.prototype.confirmAuthorizeAndOpen = function(provider, providerParams) {
    return this.confirm(tr("~CONFIRM.AUTHORIZE_OPEN"), (function(_this) {
      return function() {
        return provider.authorize(function() {
          _this._event('willOpenFile', {
            op: "confirmAuthorizeAndOpen"
          });
          return provider.openSaved(providerParams, function(err, content, metadata) {
            if (err) {
              return _this.alert(err);
            }
            _this._fileOpened(content, metadata, {
              openedContent: content.clone()
            }, _this._getHashParams(metadata));
            return provider.fileOpened(content, metadata);
          });
        });
      };
    })(this));
  };

  CloudFileManagerClient.prototype.openProviderFile = function(providerName, providerParams) {
    var provider;
    provider = this.providers[providerName];
    if (provider) {
      return provider.authorized((function(_this) {
        return function(authorized) {
          if (authorized || !provider.isAuthorizationRequired()) {
            _this._event('willOpenFile', {
              op: "openProviderFile"
            });
            return provider.openSaved(providerParams, function(err, content, metadata) {
              if (err) {
                return _this.alert(err, function() {
                  return _this.ready();
                });
              }
              _this._fileOpened(content, metadata, {
                openedContent: content.clone()
              }, _this._getHashParams(metadata));
              return provider.fileOpened(content, metadata);
            });
          } else {
            return _this.confirmAuthorizeAndOpen(provider, providerParams);
          }
        };
      })(this));
    } else {
      return this.alert(tr("~ALERT.NO_PROVIDER"), (function(_this) {
        return function() {
          return _this.ready();
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.openUrlFile = function(url) {
    return this.urlProvider.openFileFromUrl(url, (function(_this) {
      return function(err, content, metadata) {
        _this._event('willOpenFile', {
          op: "openUrlFile"
        });
        if (err) {
          return _this.alert(err, function() {
            return _this.ready();
          });
        }
        return _this._fileOpened(content, metadata, {
          openedContent: content.clone()
        }, _this._getHashParams(metadata));
      };
    })(this));
  };

  CloudFileManagerClient.prototype.createNewInFolder = function(providerName, folder) {
    var provider;
    provider = this.providers[providerName];
    if (provider && provider.can('setFolder', this.state.metadata)) {
      if (this.state.metadata == null) {
        this.state.metadata = new CloudMetadata({
          type: CloudMetadata.File,
          provider: provider
        });
      }
      this.state.metadata.parent = new CloudMetadata({
        type: CloudMetadata.Folder,
        providerData: {
          id: folder
        }
      });
      this._ui.editInitialFilename();
    }
    return this._event('newedFile', {
      content: ""
    });
  };

  CloudFileManagerClient.prototype.setInitialFilename = function(filename) {
    this.state.metadata.rename(filename);
    return this.save();
  };

  CloudFileManagerClient.prototype.isSaveInProgress = function() {
    return this.state.saving != null;
  };

  CloudFileManagerClient.prototype.confirmAuthorizeAndSave = function(stringContent, callback) {
    return this.confirm(tr("~CONFIRM.AUTHORIZE_SAVE"), (function(_this) {
      return function() {
        return _this.state.metadata.provider.authorize(function() {
          return _this.saveFile(stringContent, _this.state.metadata, callback);
        });
      };
    })(this));
  };

  CloudFileManagerClient.prototype.save = function(callback) {
    if (callback == null) {
      callback = null;
    }
    return this._event('getContent', {
      shared: this._sharedMetadata()
    }, (function(_this) {
      return function(stringContent) {
        return _this.saveContent(stringContent, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.saveContent = function(stringContent, callback) {
    var provider, ref;
    if (callback == null) {
      callback = null;
    }
    provider = ((ref = this.state.metadata) != null ? ref.provider : void 0) || this.autoProvider('save');
    if (provider != null) {
      return provider.authorized((function(_this) {
        return function(isAuthorized) {
          if (isAuthorized || !provider.isAuthorizationRequired()) {
            return _this.saveFile(stringContent, _this.state.metadata, callback);
          } else {
            return _this.confirmAuthorizeAndSave(stringContent, callback);
          }
        };
      })(this));
    } else {
      return this.saveFileDialog(stringContent, callback);
    }
  };

  CloudFileManagerClient.prototype.saveFile = function(stringContent, metadata, callback) {
    var ref;
    if (callback == null) {
      callback = null;
    }
    if (metadata != null ? (ref = metadata.provider) != null ? ref.can('resave', metadata) : void 0 : void 0) {
      return this.saveFileNoDialog(stringContent, metadata, callback);
    } else {
      return this.saveFileDialog(stringContent, callback);
    }
  };

  CloudFileManagerClient.prototype.saveFileNoDialog = function(stringContent, metadata, callback) {
    var currentContent;
    if (callback == null) {
      callback = null;
    }
    this._setState({
      saving: metadata
    });
    currentContent = this._createOrUpdateCurrentContent(stringContent, metadata);
    return metadata.provider.save(currentContent, metadata, (function(_this) {
      return function(err, statusCode) {
        if (err) {
          metadata.autoSaveDisabled = true;
          _this._setState({
            metadata: metadata,
            saving: null
          });
          if (statusCode === 403) {
            return _this.confirmAuthorizeAndSave(stringContent, callback);
          } else {
            return _this.alert(err);
          }
        }
        if (_this.state.metadata !== metadata) {
          _this._closeCurrentFile();
        }
        if (metadata.autoSaveDisabled != null) {
          delete metadata.autoSaveDisabled;
        }
        _this._fileChanged('savedFile', currentContent, metadata, {
          saved: true
        }, _this._getHashParams(metadata));
        return typeof callback === "function" ? callback(currentContent, metadata) : void 0;
      };
    })(this));
  };

  CloudFileManagerClient.prototype.saveFileDialog = function(stringContent, callback) {
    if (stringContent == null) {
      stringContent = null;
    }
    if (callback == null) {
      callback = null;
    }
    return this._ui.saveFileDialog((function(_this) {
      return function(metadata) {
        return _this._dialogSave(stringContent, metadata, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.saveFileAsDialog = function(stringContent, callback) {
    if (stringContent == null) {
      stringContent = null;
    }
    if (callback == null) {
      callback = null;
    }
    return this._ui.saveFileAsDialog((function(_this) {
      return function(metadata) {
        return _this._dialogSave(stringContent, metadata, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.createCopy = function(stringContent, callback) {
    var saveAndOpenCopy;
    if (stringContent == null) {
      stringContent = null;
    }
    if (callback == null) {
      callback = null;
    }
    saveAndOpenCopy = (function(_this) {
      return function(stringContent) {
        var ref;
        return _this.saveCopiedFile(stringContent, (ref = _this.state.metadata) != null ? ref.name : void 0, function(err, copyParams) {
          if (err) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          window.open(_this.getCurrentUrl("#copy=" + copyParams));
          return typeof callback === "function" ? callback(copyParams) : void 0;
        });
      };
    })(this);
    if (stringContent === null) {
      return this._event('getContent', {}, function(stringContent) {
        return saveAndOpenCopy(stringContent);
      });
    } else {
      return saveAndOpenCopy(stringContent);
    }
  };

  CloudFileManagerClient.prototype.saveCopiedFile = function(stringContent, name, callback) {
    var copyNumber, e, key, maxCopyNumber, prefix, ref, value;
    try {
      prefix = 'cfm-copy::';
      maxCopyNumber = 0;
      ref = window.localStorage;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        if (key.substr(0, prefix.length) === prefix) {
          copyNumber = parseInt(key.substr(prefix.length), 10);
          maxCopyNumber = Math.max(maxCopyNumber, copyNumber);
        }
      }
      maxCopyNumber++;
      value = JSON.stringify({
        name: (name != null ? name.length : void 0) > 0 ? "Copy of " + name : "Copy of Untitled Document",
        stringContent: stringContent
      });
      window.localStorage.setItem("" + prefix + maxCopyNumber, value);
      return typeof callback === "function" ? callback(null, maxCopyNumber) : void 0;
    } catch (error) {
      e = error;
      return callback("Unable to temporarily save copied file");
    }
  };

  CloudFileManagerClient.prototype.openCopiedFile = function(copyParams) {
    var content, copied, e, key, metadata;
    this._event('willOpenFile', {
      op: "openCopiedFile"
    });
    try {
      key = "cfm-copy::" + copyParams;
      copied = JSON.parse(window.localStorage.getItem(key));
      content = cloudContentFactory.createEnvelopedCloudContent(copied.stringContent);
      metadata = new CloudMetadata({
        name: copied.name,
        type: CloudMetadata.File
      });
      window.location.hash = "";
      this._fileOpened(content, metadata, {
        dirty: true,
        openedContent: content.clone()
      });
      return window.localStorage.removeItem(key);
    } catch (error) {
      e = error;
      return callback("Unable to load copied file");
    }
  };

  CloudFileManagerClient.prototype._sharedMetadata = function() {
    var ref;
    return ((ref = this.state.currentContent) != null ? ref.getSharedMetadata() : void 0) || {};
  };

  CloudFileManagerClient.prototype.shareGetLink = function() {
    return this._ui.shareDialog(this);
  };

  CloudFileManagerClient.prototype.shareUpdate = function() {
    return this.share((function(_this) {
      return function() {
        return _this.alert(tr("~SHARE_UPDATE.MESSAGE"), tr("~SHARE_UPDATE.TITLE"));
      };
    })(this));
  };

  CloudFileManagerClient.prototype.toggleShare = function(callback) {
    if (this.isShared()) {
      return this.unshare(callback);
    } else {
      return this.share(callback);
    }
  };

  CloudFileManagerClient.prototype.isShared = function() {
    var ref, ref1;
    return ((ref = this.state.currentContent) != null ? ref.get("sharedDocumentId") : void 0) && !((ref1 = this.state.currentContent) != null ? ref1.get("isUnshared") : void 0);
  };

  CloudFileManagerClient.prototype.canEditShared = function() {
    var accessKeys, ref, ref1, ref2, shareEditKey;
    accessKeys = ((ref = this.state.currentContent) != null ? ref.get("accessKeys") : void 0) || {};
    shareEditKey = (ref1 = this.state.currentContent) != null ? ref1.get("shareEditKey") : void 0;
    return (shareEditKey || accessKeys.readWrite) && !((ref2 = this.state.currentContent) != null ? ref2.get("isUnshared") : void 0);
  };

  CloudFileManagerClient.prototype.setShareState = function(shared, callback) {
    var sharingMetadata;
    if (this.state.shareProvider) {
      sharingMetadata = this.state.shareProvider.getSharingMetadata(shared);
      return this._event('getContent', {
        shared: sharingMetadata
      }, (function(_this) {
        return function(stringContent) {
          var currentContent, sharedContent;
          _this._setState({
            sharing: shared
          });
          sharedContent = cloudContentFactory.createEnvelopedCloudContent(stringContent);
          sharedContent.addMetadata(sharingMetadata);
          currentContent = _this._createOrUpdateCurrentContent(stringContent, _this.state.metadata);
          sharedContent.set('docName', currentContent.get('docName'));
          if (shared) {
            currentContent.remove('isUnshared');
          } else {
            currentContent.set('isUnshared', true);
          }
          return _this.state.shareProvider.share(shared, currentContent, sharedContent, _this.state.metadata, function(err, sharedContentId) {
            if (err) {
              return _this.alert(err);
            }
            return typeof callback === "function" ? callback(null, sharedContentId, currentContent) : void 0;
          });
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.share = function(callback) {
    return this.setShareState(true, (function(_this) {
      return function(err, sharedContentId, currentContent) {
        _this._fileChanged('sharedFile', currentContent, _this.state.metadata);
        return typeof callback === "function" ? callback(null, sharedContentId) : void 0;
      };
    })(this));
  };

  CloudFileManagerClient.prototype.unshare = function(callback) {
    return this.setShareState(false, (function(_this) {
      return function(err, sharedContentId, currentContent) {
        _this._fileChanged('unsharedFile', currentContent, _this.state.metadata);
        return typeof callback === "function" ? callback(null) : void 0;
      };
    })(this));
  };

  CloudFileManagerClient.prototype.revertToShared = function(callback) {
    var id, ref;
    if (callback == null) {
      callback = null;
    }
    id = (ref = this.state.currentContent) != null ? ref.get("sharedDocumentId") : void 0;
    if (id && (this.state.shareProvider != null)) {
      return this.state.shareProvider.loadSharedContent(id, (function(_this) {
        return function(err, content, metadata) {
          var docName;
          if (err) {
            return _this.alert(err);
          }
          _this.state.currentContent.copyMetadataTo(content);
          if (!metadata.name && (docName = content.get('docName'))) {
            metadata.name = docName;
          }
          _this._fileOpened(content, metadata, {
            dirty: true,
            openedContent: content.clone()
          });
          return typeof callback === "function" ? callback(null) : void 0;
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.revertToSharedDialog = function(callback) {
    var ref;
    if (callback == null) {
      callback = null;
    }
    if (((ref = this.state.currentContent) != null ? ref.get("sharedDocumentId") : void 0) && (this.state.shareProvider != null)) {
      return this.confirm(tr("~CONFIRM.REVERT_TO_SHARED_VIEW"), (function(_this) {
        return function() {
          return _this.revertToShared(callback);
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.downloadDialog = function(callback) {
    if (callback == null) {
      callback = null;
    }
    return this._event('getContent', {
      shared: this._sharedMetadata()
    }, (function(_this) {
      return function(content) {
        var envelopedContent, ref, ref1;
        envelopedContent = cloudContentFactory.createEnvelopedCloudContent(content);
        if ((ref = _this.state.currentContent) != null) {
          ref.copyMetadataTo(envelopedContent);
        }
        return _this._ui.downloadDialog((ref1 = _this.state.metadata) != null ? ref1.name : void 0, envelopedContent, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.getDownloadBlob = function(content, includeShareInfo, mimeType) {
    var contentToSave, json, ref;
    if (mimeType == null) {
      mimeType = 'text/plain';
    }
    if (typeof content === "string") {
      if (mimeType.indexOf("image") >= 0) {
        contentToSave = base64Array.toByteArray(content);
      } else {
        contentToSave = content;
      }
    } else if (includeShareInfo) {
      contentToSave = JSON.stringify(content.getContent());
    } else {
      json = content.clone().getContent();
      delete json.sharedDocumentId;
      delete json.shareEditKey;
      delete json.isUnshared;
      delete json.accessKeys;
      if (((ref = json.metadata) != null ? ref.shared : void 0) != null) {
        delete json.metadata.shared;
      }
      contentToSave = JSON.stringify(json);
    }
    return new Blob([contentToSave], {
      type: mimeType
    });
  };

  CloudFileManagerClient.prototype.getDownloadUrl = function(content, includeShareInfo, mimeType) {
    var wURL;
    if (mimeType == null) {
      mimeType = 'text/plain';
    }
    wURL = window.URL || window.webkitURL;
    if (wURL) {
      return wURL.createObjectURL(this.getDownloadBlob(content, includeShareInfo, mimeType));
    }
  };

  CloudFileManagerClient.prototype.rename = function(metadata, newName, callback) {
    var _rename, dirty, ref, ref1, ref2;
    dirty = this.state.dirty;
    _rename = (function(_this) {
      return function(metadata) {
        var ref;
        if ((ref = _this.state.currentContent) != null) {
          ref.addMetadata({
            docName: metadata.name
          });
        }
        _this._fileChanged('renamedFile', _this.state.currentContent, metadata, {
          dirty: dirty
        }, _this._getHashParams(metadata));
        return typeof callback === "function" ? callback(newName) : void 0;
      };
    })(this);
    if (newName !== ((ref = this.state.metadata) != null ? ref.name : void 0)) {
      if ((ref1 = this.state.metadata) != null ? (ref2 = ref1.provider) != null ? ref2.can('rename', metadata) : void 0 : void 0) {
        return this.state.metadata.provider.rename(this.state.metadata, newName, (function(_this) {
          return function(err, metadata) {
            if (err) {
              return _this.alert(err);
            }
            return _rename(metadata);
          };
        })(this));
      } else {
        if (metadata) {
          metadata.name = newName;
          metadata.filename = newName;
        } else {
          metadata = new CloudMetadata({
            name: newName,
            type: CloudMetadata.File
          });
        }
        return _rename(metadata);
      }
    }
  };

  CloudFileManagerClient.prototype.renameDialog = function(callback) {
    var ref;
    if (callback == null) {
      callback = null;
    }
    return this._ui.renameDialog((ref = this.state.metadata) != null ? ref.name : void 0, (function(_this) {
      return function(newName) {
        return _this.rename(_this.state.metadata, newName, callback);
      };
    })(this));
  };

  CloudFileManagerClient.prototype.revertToLastOpened = function(callback) {
    if (callback == null) {
      callback = null;
    }
    this._event('willOpenFile', {
      op: "revertToLastOpened"
    });
    if ((this.state.openedContent != null) && this.state.metadata) {
      return this._fileOpened(this.state.openedContent, this.state.metadata, {
        openedContent: this.state.openedContent.clone()
      });
    }
  };

  CloudFileManagerClient.prototype.revertToLastOpenedDialog = function(callback) {
    if (callback == null) {
      callback = null;
    }
    if ((this.state.openedContent != null) && this.state.metadata) {
      return this.confirm(tr('~CONFIRM.REVERT_TO_LAST_OPENED'), (function(_this) {
        return function() {
          return _this.revertToLastOpened(callback);
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback('No initial opened version was found for the currently active file') : void 0;
    }
  };

  CloudFileManagerClient.prototype.saveSecondaryFileAsDialog = function(stringContent, extension, mimeType, callback) {
    var data, metadata, provider;
    if ((provider = this.autoProvider('export'))) {
      metadata = {
        provider: provider,
        extension: extension,
        mimeType: mimeType
      };
      return this.saveSecondaryFile(stringContent, metadata, callback);
    } else {
      data = {
        content: stringContent,
        extension: extension,
        mimeType: mimeType
      };
      return this._ui.saveSecondaryFileAsDialog(data, (function(_this) {
        return function(metadata) {
          if (extension) {
            metadata.filename = CloudMetadata.newExtension(metadata.filename, extension);
          }
          if (mimeType) {
            metadata.mimeType = mimeType;
          }
          return _this.saveSecondaryFile(stringContent, metadata, callback);
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.saveSecondaryFile = function(stringContent, metadata, callback) {
    var ref;
    if (callback == null) {
      callback = null;
    }
    if (metadata != null ? (ref = metadata.provider) != null ? ref.can('export', metadata) : void 0 : void 0) {
      return metadata.provider.saveAsExport(stringContent, metadata, (function(_this) {
        return function(err, statusCode) {
          if (err) {
            return _this.alert(err);
          }
          return typeof callback === "function" ? callback(stringContent, metadata) : void 0;
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype.dirty = function(isDirty) {
    if (isDirty == null) {
      isDirty = true;
    }
    return this._setState({
      dirty: isDirty,
      saved: this.state.saved && !isDirty
    });
  };

  CloudFileManagerClient.prototype.shouldAutoSave = function() {
    var ref, ref1, ref2;
    return this.state.dirty && !((ref = this.state.metadata) != null ? ref.autoSaveDisabled : void 0) && !this.isSaveInProgress() && ((ref1 = this.state.metadata) != null ? (ref2 = ref1.provider) != null ? ref2.can('resave', this.state.metadata) : void 0 : void 0);
  };

  CloudFileManagerClient.prototype.autoSave = function(interval) {
    if (this._autoSaveInterval) {
      clearInterval(this._autoSaveInterval);
    }
    if (interval > 1000) {
      interval = Math.round(interval / 1000);
    }
    if (interval > 0) {
      return this._autoSaveInterval = setInterval(((function(_this) {
        return function() {
          if (_this.shouldAutoSave()) {
            return _this.save();
          }
        };
      })(this)), interval * 1000);
    }
  };

  CloudFileManagerClient.prototype.isAutoSaving = function() {
    return this._autoSaveInterval != null;
  };

  CloudFileManagerClient.prototype.showBlockingModal = function(modalProps) {
    return this._ui.showBlockingModal(modalProps);
  };

  CloudFileManagerClient.prototype.hideBlockingModal = function() {
    return this._ui.hideBlockingModal();
  };

  CloudFileManagerClient.prototype.getCurrentUrl = function(queryString) {
    var suffix;
    if (queryString == null) {
      queryString = null;
    }
    suffix = queryString != null ? "?" + queryString : "";
    return "" + document.location.origin + document.location.pathname + suffix;
  };

  CloudFileManagerClient.prototype.removeQueryParams = function(params) {
    var hash, i, key, len, re, url;
    url = window.location.href;
    hash = url.split('#');
    for (i = 0, len = params.length; i < len; i++) {
      key = params[i];
      re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "g");
      if (re.test(url)) {
        hash[0] = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
      }
    }
    url = hash[0] + (hash[1] != null ? '#' + hash[1] : '');
    if (url !== window.location.href) {
      return history.pushState({
        originalUrl: window.location.href
      }, '', url);
    }
  };

  CloudFileManagerClient.prototype.confirm = function(message, callback) {
    return this.confirmDialog({
      message: message,
      callback: callback
    });
  };

  CloudFileManagerClient.prototype.confirmDialog = function(params) {
    return this._ui.confirmDialog(params);
  };

  CloudFileManagerClient.prototype.alert = function(message, titleOrCallback, callback) {
    if (_.isFunction(titleOrCallback)) {
      callback = titleOrCallback;
      titleOrCallback = null;
    }
    return this._ui.alertDialog(message, titleOrCallback || tr("~CLIENT_ERROR.TITLE"), callback);
  };

  CloudFileManagerClient.prototype._dialogSave = function(stringContent, metadata, callback) {
    if (stringContent !== null) {
      return this.saveFileNoDialog(stringContent, metadata, callback);
    } else {
      return this._event('getContent', {
        shared: this._sharedMetadata()
      }, (function(_this) {
        return function(stringContent) {
          return _this.saveFileNoDialog(stringContent, metadata, callback);
        };
      })(this));
    }
  };

  CloudFileManagerClient.prototype._fileChanged = function(type, content, metadata, additionalState, hashParams) {
    if (additionalState == null) {
      additionalState = {};
    }
    if (hashParams == null) {
      hashParams = null;
    }
    if (metadata != null) {
      if (metadata.overwritable == null) {
        metadata.overwritable = true;
      }
    }
    this._updateState(content, metadata, additionalState, hashParams);
    return this._event(type, {
      content: content != null ? content.getClientContent() : void 0,
      shared: this._sharedMetadata()
    });
  };

  CloudFileManagerClient.prototype._fileOpened = function(content, metadata, additionalState, hashParams) {
    if (additionalState == null) {
      additionalState = {};
    }
    if (hashParams == null) {
      hashParams = null;
    }
    return this._event('openedFile', {
      content: content != null ? content.getClientContent() : void 0
    }, (function(_this) {
      return function(iError, iSharedMetadata) {
        if (iError) {
          return _this.alert(iError, function() {
            return _this.ready();
          });
        }
        if (metadata != null) {
          if (metadata.overwritable == null) {
            metadata.overwritable = true;
          }
        }
        if (!_this.appOptions.wrapFileContent) {
          content.addMetadata(iSharedMetadata);
        }
        _this._updateState(content, metadata, additionalState, hashParams);
        return _this.ready();
      };
    })(this));
  };

  CloudFileManagerClient.prototype._updateState = function(content, metadata, additionalState, hashParams) {
    var key, state, value;
    if (additionalState == null) {
      additionalState = {};
    }
    if (hashParams == null) {
      hashParams = null;
    }
    state = {
      currentContent: content,
      metadata: metadata,
      saving: null,
      saved: false,
      dirty: !additionalState.saved && (content != null ? content.requiresConversion() : void 0)
    };
    for (key in additionalState) {
      if (!hasProp.call(additionalState, key)) continue;
      value = additionalState[key];
      state[key] = value;
    }
    this._setWindowTitle(metadata != null ? metadata.name : void 0);
    if (hashParams !== null) {
      window.location.hash = hashParams;
    }
    return this._setState(state);
  };

  CloudFileManagerClient.prototype._event = function(type, data, eventCallback) {
    var event, i, len, listener, ref, results;
    if (data == null) {
      data = {};
    }
    if (eventCallback == null) {
      eventCallback = null;
    }
    event = new CloudFileManagerClientEvent(type, data, eventCallback, this.state);
    ref = this._listeners;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      listener = ref[i];
      results.push(listener(event));
    }
    return results;
  };

  CloudFileManagerClient.prototype._setState = function(options) {
    var key, value;
    for (key in options) {
      if (!hasProp.call(options, key)) continue;
      value = options[key];
      this.state[key] = value;
    }
    return this._event('stateChanged');
  };

  CloudFileManagerClient.prototype._resetState = function() {
    return this._setState({
      openedContent: null,
      currentContent: null,
      metadata: null,
      dirty: false,
      saving: null,
      saved: false
    });
  };

  CloudFileManagerClient.prototype._closeCurrentFile = function() {
    var ref, ref1;
    if ((ref = this.state.metadata) != null ? (ref1 = ref.provider) != null ? ref1.can('close', this.state.metadata) : void 0 : void 0) {
      return this.state.metadata.provider.close(this.state.metadata);
    }
  };

  CloudFileManagerClient.prototype._createOrUpdateCurrentContent = function(stringContent, metadata) {
    var currentContent;
    if (metadata == null) {
      metadata = null;
    }
    if (this.state.currentContent != null) {
      currentContent = this.state.currentContent;
      currentContent.setText(stringContent);
    } else {
      currentContent = cloudContentFactory.createEnvelopedCloudContent(stringContent);
    }
    if (metadata != null) {
      currentContent.addMetadata({
        docName: metadata.name
      });
    }
    return currentContent;
  };

  CloudFileManagerClient.prototype._setWindowTitle = function(name) {
    var ref, ref1;
    if ((ref = this.appOptions) != null ? (ref1 = ref.ui) != null ? ref1.windowTitleSuffix : void 0 : void 0) {
      return document.title = "" + ((name != null ? name.length : void 0) > 0 ? name : tr("~MENUBAR.UNTITLED_DOCUMENT")) + this.appOptions.ui.windowTitleSeparator + this.appOptions.ui.windowTitleSuffix;
    }
  };

  CloudFileManagerClient.prototype._getHashParams = function(metadata) {
    var openSavedParams, ref, ref1;
    if ((metadata != null ? (ref = metadata.provider) != null ? ref.canOpenSaved() : void 0 : void 0) && ((openSavedParams = metadata != null ? (ref1 = metadata.provider) != null ? ref1.getOpenSavedParams(metadata) : void 0 : void 0) != null)) {
      return "#file=" + (metadata.provider.urlDisplayName || metadata.provider.name) + ":" + (encodeURIComponent(openSavedParams));
    } else if ((metadata != null ? metadata.provider : void 0) instanceof URLProvider && window.location.hash.indexOf("#file=http") === 0) {
      return window.location.hash;
    } else {
      return "";
    }
  };

  CloudFileManagerClient.prototype._startPostMessageListener = function() {
    return $(window).on('message', (function(_this) {
      return function(e) {
        var oe, ref, reply;
        oe = e.originalEvent;
        reply = function(type, params) {
          var message;
          if (params == null) {
            params = {};
          }
          message = _.merge({}, params, {
            type: type
          });
          return oe.source.postMessage(message, oe.origin);
        };
        switch ((ref = oe.data) != null ? ref.type : void 0) {
          case 'cfm::getCommands':
            return reply('cfm::commands', {
              commands: ['cfm::autosave']
            });
          case 'cfm::autosave':
            if (_this.shouldAutoSave()) {
              return _this.save(function() {
                return reply('cfm::autosaved', {
                  saved: true
                });
              });
            } else {
              return reply('cfm::autosaved', {
                saved: false
              });
            }
        }
      };
    })(this));
  };

  return CloudFileManagerClient;

})();

module.exports = {
  CloudFileManagerClientEvent: CloudFileManagerClientEvent,
  CloudFileManagerClient: CloudFileManagerClient
};


},{"./providers/document-store-provider":56,"./providers/document-store-share-provider":57,"./providers/google-drive-provider":59,"./providers/lara-provider":60,"./providers/local-file-provider":61,"./providers/localstorage-provider":62,"./providers/post-message-provider":64,"./providers/provider-interface":65,"./providers/readonly-provider":66,"./providers/url-provider":67,"./ui":68,"./utils/get-query-param":70,"./utils/is-string":72,"./utils/translate":79,"base64-js":1}],55:[function(require,module,exports){
/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = "download" in save_link
		, click = function(node) {
			var event = new MouseEvent("click");
			node.dispatchEvent(event);
		}
		, is_safari = /constructor/i.test(view.HTMLElement) || view.safari
		, is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent)
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
		, arbitrary_revoke_timeout = 1000 * 40 // in ms
		, revoke = function(file) {
			var revoker = function() {
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			};
			setTimeout(revoker, arbitrary_revoke_timeout);
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, auto_bom = function(blob) {
			// prepend BOM for UTF-8 XML and text/* types (including HTML)
			// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
				return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});
			}
			return blob;
		}
		, FileSaver = function(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, force = true  // [CC 2016-12-05] type === force_saveable_type
				, object_url
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
						// Safari doesn't allow downloading of blob urls
						var reader = new FileReader();
						reader.onloadend = function() {
							var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
							var popup = view.open(url, '_blank');
							if(!popup) view.location.href = url;
							url=undefined; // release reference before dispatching
							filesaver.readyState = filesaver.DONE;
							dispatch_all();
						};
						reader.readAsDataURL(blob);
						filesaver.readyState = filesaver.INIT;
						return;
					}
					// don't create more object URLs than needed
					if (!object_url) {
						object_url = get_URL().createObjectURL(blob);
					}
					if (force) {
						view.location.href = object_url;
					} else {
						var opened = view.open(object_url, "_blank");
						if (!opened) {
							// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
							view.location.href = object_url;
						}
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
					revoke(object_url);
				}
			;
			filesaver.readyState = filesaver.INIT;

			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				setTimeout(function() {
					save_link.href = object_url;
					save_link.download = name;
					click(save_link);
					dispatch_all();
					revoke(object_url);
					filesaver.readyState = filesaver.DONE;
				});
				return;
			}

			fs_error();
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name, no_auto_bom) {
			return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
		}
	;
	// IE 10+ (native saveAs)
	if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
		return function(blob, name, no_auto_bom) {
			name = name || blob.name || "download";

			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			return navigator.msSaveOrOpenBlob(blob, name);
		};
	}

	FS_proto.abort = function(){};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module.exports) {
  module.exports.saveAs = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd !== null)) {
  define("FileSaver.js", function() {
    return saveAs;
  });
}

},{}],56:[function(require,module,exports){
var CloudMetadata, DocumentStoreAuthorizationDialog, DocumentStoreProvider, DocumentStoreUrl, PatchableContent, ProviderInterface, button, cloudContentFactory, div, getHashParam, getQueryParam, isString, jiff, pako, ref, span, tr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = React.DOM, div = ref.div, button = ref.button, span = ref.span;

getQueryParam = require('../utils/get-query-param');

getHashParam = require('../utils/get-hash-param');

tr = require('../utils/translate');

isString = require('../utils/is-string');

jiff = require('jiff');

pako = require('pako');

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

DocumentStoreUrl = require('./document-store-url');

PatchableContent = require('./patchable-content');

DocumentStoreAuthorizationDialog = React.createFactory(React.createClass({
  displayName: 'DocumentStoreAuthorizationDialog',
  getInitialState: function() {
    return {
      docStoreAvailable: false
    };
  },
  componentWillMount: function() {
    return this.props.provider._onDocStoreLoaded((function(_this) {
      return function() {
        return _this.setState({
          docStoreAvailable: true
        });
      };
    })(this));
  },
  authenticate: function() {
    return this.props.provider.authorize();
  },
  render: function() {
    return div({
      className: 'document-store-auth'
    }, div({
      className: 'document-store-concord-logo'
    }, ''), div({
      className: 'document-store-footer'
    }, this.state.docStoreAvailable ? button({
      onClick: this.authenticate
    }, 'Login to Concord') : 'Trying to log into Concord...'));
  }
}));

DocumentStoreProvider = (function(superClass) {
  extend(DocumentStoreProvider, superClass);

  function DocumentStoreProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    this.options.deprecationPhase = 3;
    DocumentStoreProvider.__super__.constructor.call(this, {
      name: DocumentStoreProvider.Name,
      displayName: this.options.displayName || (tr('~PROVIDER.DOCUMENT_STORE')),
      urlDisplayName: this.options.urlDisplayName,
      capabilities: {
        save: this.isNotDeprecated('save'),
        resave: this.isNotDeprecated('save'),
        "export": false,
        load: this.isNotDeprecated('load'),
        list: this.isNotDeprecated('list'),
        remove: this.isNotDeprecated('remove'),
        rename: this.isNotDeprecated('rename'),
        close: false
      }
    });
    this.urlParams = {
      documentServer: getQueryParam("documentServer"),
      recordid: getQueryParam("recordid"),
      runKey: getQueryParam("runKey"),
      docName: getQueryParam("doc"),
      docOwner: getQueryParam("owner")
    };
    this.removableQueryParams = ['recordid', 'doc', 'owner'];
    this.docStoreUrl = new DocumentStoreUrl(this.urlParams.documentServer);
    this.user = null;
    this.savedContent = new PatchableContent(this.options.patchObjectHash);
  }

  DocumentStoreProvider.Name = 'documentStore';

  DocumentStoreProvider.prototype.can = function(capability, metadata) {
    var ref1;
    if (((capability === 'save') || (capability === 'resave')) && (metadata != null ? (ref1 = metadata.providerData) != null ? ref1.owner : void 0 : void 0)) {
      return false;
    }
    return DocumentStoreProvider.__super__.can.call(this, capability, metadata);
  };

  DocumentStoreProvider.prototype.isAuthorizationRequired = function() {
    return !(this.urlParams.runKey || (this.urlParams.docName && this.urlParams.docOwner));
  };

  DocumentStoreProvider.prototype.authorized = function(authCallback) {
    this.authCallback = authCallback;
    if (this.authCallback) {
      if (this.user) {
        return this.authCallback(true);
      } else {
        return this._checkLogin();
      }
    } else {
      return this.user !== null;
    }
  };

  DocumentStoreProvider.prototype.authorize = function(completionCallback) {
    return this._showLoginWindow(completionCallback);
  };

  DocumentStoreProvider.prototype._onDocStoreLoaded = function(docStoreLoadedCallback) {
    this.docStoreLoadedCallback = docStoreLoadedCallback;
    if (this._docStoreLoaded) {
      return this.docStoreLoadedCallback();
    }
  };

  DocumentStoreProvider.prototype._checkLogin = function() {
    var loggedIn;
    loggedIn = (function(_this) {
      return function(user) {
        var ref1;
        _this.user = user;
        _this._docStoreLoaded = true;
        if (typeof _this.docStoreLoadedCallback === "function") {
          _this.docStoreLoadedCallback();
        }
        if (user) {
          if ((ref1 = _this._loginWindow) != null) {
            ref1.close();
          }
        }
        if (_this.authCallback) {
          return _this.authCallback(user !== null);
        }
      };
    })(this);
    return $.ajax({
      dataType: 'json',
      url: this.docStoreUrl.checkLogin(),
      xhrFields: {
        withCredentials: true
      },
      success: function(data) {
        return loggedIn(data);
      },
      error: function() {
        return loggedIn(null);
      }
    });
  };

  DocumentStoreProvider.prototype._loginWindow = null;

  DocumentStoreProvider.prototype._showLoginWindow = function(completionCallback) {
    var computeScreenLocation, height, poll, pollAction, position, width, windowFeatures;
    if (this._loginWindow && !this._loginWindow.closed) {
      this._loginWindow.focus();
    } else {
      computeScreenLocation = function(w, h) {
        var height, left, screenLeft, screenTop, top, width;
        screenLeft = window.screenLeft || screen.left;
        screenTop = window.screenTop || screen.top;
        width = window.innerWidth || document.documentElement.clientWidth || screen.width;
        height = window.innerHeight || document.documentElement.clientHeight || screen.height;
        left = ((width / 2) - (w / 2)) + screenLeft;
        top = ((height / 2) - (h / 2)) + screenTop;
        return {
          left: left,
          top: top
        };
      };
      width = 1000;
      height = 480;
      position = computeScreenLocation(width, height);
      windowFeatures = ['width=' + width, 'height=' + height, 'top=' + position.top || 200, 'left=' + position.left || 200, 'dependent=yes', 'resizable=no', 'location=no', 'dialog=yes', 'menubar=no'];
      this._loginWindow = window.open(this.docStoreUrl.authorize(), 'auth', windowFeatures.join());
      if (this._loginWindow) {
        pollAction = (function(_this) {
          return function() {
            var e;
            try {
              if (_this._loginWindow.location.host === window.location.host) {
                clearInterval(poll);
                _this._loginWindow.close();
                _this._checkLogin();
                if (completionCallback) {
                  return completionCallback();
                }
              }
            } catch (error) {
              e = error;
            }
          };
        })(this);
        poll = setInterval(pollAction, 200);
      }
    }
    return this._loginWindow;
  };

  DocumentStoreProvider.prototype.renderAuthorizationDialog = function() {
    return DocumentStoreAuthorizationDialog({
      provider: this,
      authCallback: this.authCallback
    });
  };

  DocumentStoreProvider.prototype.renderUser = function() {
    if (this.user) {
      return span({}, span({
        className: 'document-store-icon'
      }), this.user.name);
    } else {
      return null;
    }
  };

  DocumentStoreProvider.prototype.filterTabComponent = function(capability, defaultComponent) {
    if (capability === 'save' && this.disableForNextSave) {
      this.disableForNextSave = false;
      return null;
    } else {
      return defaultComponent;
    }
  };

  DocumentStoreProvider.prototype.isNotDeprecated = function(capability) {
    if (capability === 'save') {
      return this.options.deprecationPhase < 2;
    } else {
      return this.options.deprecationPhase < 3;
    }
  };

  DocumentStoreProvider.prototype.deprecationMessage = function() {
    return "<div style=\"text-align: left\">\n  <p style=\"margin: 10px 0;\">\n    <strong>" + (tr(~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE)) + "</strong>\n  </p>\n  <p style=\"margin: 10px 0;\">\n    " + (tr(~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE)) + "\n  </p>\n</div>";
  };

  DocumentStoreProvider.prototype.onProviderTabSelected = function(capability) {
    if (capability === 'save' && this.deprecationMessage()) {
      return this.client.alert(this.deprecationMessage(), tr('~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE'));
    }
  };

  DocumentStoreProvider.prototype.handleUrlParams = function() {
    if (this.urlParams.recordid) {
      this.client.openProviderFile(this.name, {
        id: this.urlParams.recordid
      });
      return true;
    } else if (this.urlParams.docName && this.urlParams.docOwner) {
      this.client.openProviderFile(this.name, {
        name: this.urlParams.docName,
        owner: this.urlParams.docOwner
      });
      return true;
    } else {
      return false;
    }
  };

  DocumentStoreProvider.prototype.list = function(metadata, callback) {
    return $.ajax({
      dataType: 'json',
      url: this.docStoreUrl.listDocuments(),
      context: this,
      xhrFields: {
        withCredentials: true
      },
      success: function(data) {
        var file, key, list;
        list = [];
        for (key in data) {
          if (!hasProp.call(data, key)) continue;
          file = data[key];
          if (this.matchesExtension(file.name)) {
            list.push(new CloudMetadata({
              name: file.name,
              providerData: {
                id: file.id
              },
              type: CloudMetadata.File,
              provider: this
            }));
          }
        }
        return callback(null, list);
      },
      error: function() {
        return callback(null, []);
      },
      statusCode: {
        403: (function(_this) {
          return function() {
            _this.user = null;
            return _this.authCallback(false);
          };
        })(this)
      }
    });
  };

  DocumentStoreProvider.prototype.load = function(metadata, callback) {
    var recordid, ref1, ref2, ref3, ref4, ref5, requestData, withCredentials;
    withCredentials = !metadata.sharedContentId ? true : false;
    recordid = ((ref1 = metadata.providerData) != null ? ref1.id : void 0) || metadata.sharedContentId;
    requestData = {};
    if (recordid) {
      requestData.recordid = recordid;
    }
    if (this.urlParams.runKey) {
      requestData.runKey = this.urlParams.runKey;
    }
    if (!recordid) {
      if ((ref2 = metadata.providerData) != null ? ref2.name : void 0) {
        requestData.recordname = (ref3 = metadata.providerData) != null ? ref3.name : void 0;
      }
      if ((ref4 = metadata.providerData) != null ? ref4.owner : void 0) {
        requestData.owner = (ref5 = metadata.providerData) != null ? ref5.owner : void 0;
      }
    }
    return $.ajax({
      url: this.docStoreUrl.loadDocument(),
      dataType: 'json',
      data: requestData,
      context: this,
      xhrFields: {
        withCredentials: withCredentials
      },
      success: function(data) {
        var content, ref6;
        content = cloudContentFactory.createEnvelopedCloudContent(data);
        metadata.rename(metadata.name || metadata.providerData.name || data.docName || data.name || ((ref6 = data.content) != null ? ref6.name : void 0));
        if (metadata.name) {
          content.addMetadata({
            docName: metadata.filename
          });
        }
        return callback(null, content);
      },
      statusCode: {
        403: (function(_this) {
          return function() {
            _this.user = null;
            return callback(tr("~DOCSTORE.LOAD_403_ERROR", {
              filename: metadata.name || 'the file'
            }), 403);
          };
        })(this)
      },
      error: function(jqXHR) {
        var message, ref6;
        if (jqXHR.status === 403) {
          return;
        }
        message = metadata.sharedContentId ? tr("~DOCSTORE.LOAD_SHARED_404_ERROR") : tr("~DOCSTORE.LOAD_404_ERROR", {
          filename: metadata.name || ((ref6 = metadata.providerData) != null ? ref6.id : void 0) || 'the file'
        });
        return callback(message);
      }
    });
  };

  DocumentStoreProvider.prototype.save = function(cloudContent, metadata, callback) {
    var content, logData, method, params, patchResults, url;
    content = cloudContent.getContent();
    patchResults = this.savedContent.createPatch(content, this.options.patch && metadata.overwritable);
    if (patchResults.shouldPatch && !patchResults.diffLength) {
      callback(null);
      return;
    }
    params = {};
    if (metadata.providerData.id) {
      params.recordid = metadata.providerData.id;
    }
    if (!patchResults.shouldPatch && metadata.filename) {
      params.recordname = metadata.filename;
    }
    if (this.urlParams.runKey) {
      params.runKey = this.urlParams.runKey;
    }
    method = 'POST';
    url = patchResults.shouldPatch ? this.docStoreUrl.patchDocument(params) : this.docStoreUrl.saveDocument(params);
    logData = {
      operation: 'save',
      provider: 'DocumentStoreProvider',
      shouldPatch: patchResults.shouldPatch,
      method: method,
      url: url,
      params: JSON.stringify(params),
      content: patchResults.sendContent.substr(0, 512)
    };
    this.client.log('save', logData);
    return $.ajax({
      dataType: 'json',
      type: method,
      url: url,
      data: pako.deflate(patchResults.sendContent),
      contentType: patchResults.mimeType,
      processData: false,
      beforeSend: function(xhr) {
        return xhr.setRequestHeader('Content-Encoding', 'deflate');
      },
      context: this,
      xhrFields: {
        withCredentials: true
      },
      success: function(data) {
        this.savedContent.updateContent(this.options.patch ? _.cloneDeep(content) : null);
        if (data.id) {
          metadata.providerData.id = data.id;
        }
        return callback(null, data);
      },
      statusCode: {
        403: (function(_this) {
          return function() {
            _this.user = null;
            return callback(tr("~DOCSTORE.SAVE_403_ERROR", {
              filename: metadata.name
            }), 403);
          };
        })(this)
      },
      error: function(jqXHR) {
        var responseJson;
        try {
          if (jqXHR.status === 403) {
            return;
          }
          responseJson = JSON.parse(jqXHR.responseText);
          if (responseJson.message === 'error.duplicate') {
            return callback(tr("~DOCSTORE.SAVE_DUPLICATE_ERROR", {
              filename: metadata.name
            }));
          } else {
            return callback(tr("~DOCSTORE.SAVE_ERROR_WITH_MESSAGE", {
              filename: metadata.name,
              message: responseJson.message
            }));
          }
        } catch (error) {
          return callback(tr("~DOCSTORE.SAVE_ERROR", {
            filename: metadata.name
          }));
        }
      }
    });
  };

  DocumentStoreProvider.prototype.remove = function(metadata, callback) {
    return $.ajax({
      url: this.docStoreUrl.deleteDocument(),
      data: {
        recordname: metadata.filename
      },
      context: this,
      xhrFields: {
        withCredentials: true
      },
      success: function(data) {
        return callback(null, data);
      },
      statusCode: {
        403: (function(_this) {
          return function() {
            _this.user = null;
            return callback(tr("~DOCSTORE.REMOVE_403_ERROR", {
              filename: metadata.name
            }), 403);
          };
        })(this)
      },
      error: function(jqXHR) {
        if (jqXHR.status === 403) {
          return;
        }
        return callback(tr("~DOCSTORE.REMOVE_ERROR", {
          filename: metadata.name
        }));
      }
    });
  };

  DocumentStoreProvider.prototype.rename = function(metadata, newName, callback) {
    return $.ajax({
      url: this.docStoreUrl.renameDocument(),
      data: {
        recordid: metadata.providerData.id,
        newRecordname: CloudMetadata.withExtension(newName)
      },
      context: this,
      xhrFields: {
        withCredentials: true
      },
      success: function(data) {
        metadata.rename(newName);
        return callback(null, metadata);
      },
      statusCode: {
        403: (function(_this) {
          return function() {
            _this.user = null;
            return callback(tr("~DOCSTORE.RENAME_403_ERROR", {
              filename: metadata.name
            }), 403);
          };
        })(this)
      },
      error: function(jqXHR) {
        if (jqXHR.status === 403) {
          return;
        }
        return callback(tr("~DOCSTORE.RENAME_ERROR", {
          filename: metadata.name
        }));
      }
    });
  };

  DocumentStoreProvider.prototype.canOpenSaved = function() {
    return true;
  };

  DocumentStoreProvider.prototype.openSaved = function(openSavedParams, callback) {
    var metadata, providerData;
    providerData = typeof openSavedParams === "object" ? openSavedParams : {
      id: openSavedParams
    };
    metadata = new CloudMetadata({
      type: CloudMetadata.File,
      provider: this,
      providerData: providerData
    });
    return this.load(metadata, (function(_this) {
      return function(err, content) {
        _this.client.removeQueryParams(_this.removableQueryParams);
        return callback(err, content, metadata);
      };
    })(this));
  };

  DocumentStoreProvider.prototype.getOpenSavedParams = function(metadata) {
    return metadata.providerData.id;
  };

  DocumentStoreProvider.prototype.fileOpened = function(content, metadata) {
    var deprecationPhase, fromLara;
    deprecationPhase = this.options.deprecationPhase || 0;
    fromLara = !!getQueryParam("launchFromLara") || !!getHashParam("lara");
    if (!deprecationPhase || fromLara) {
      return;
    }
    return this.client.confirmDialog({
      title: tr('~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE'),
      message: this.deprecationMessage(),
      yesTitle: tr('~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE'),
      noTitle: tr('~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER'),
      hideNoButton: deprecationPhase >= 3,
      callback: (function(_this) {
        return function() {
          _this.disableForNextSave = true;
          return _this.client.saveFileAsDialog();
        };
      })(this),
      rejectCallback: (function(_this) {
        return function() {
          if (deprecationPhase > 1) {
            return _this.client.appOptions.autoSaveInterval = null;
          }
        };
      })(this)
    });
  };

  return DocumentStoreProvider;

})(ProviderInterface);

module.exports = DocumentStoreProvider;


},{"../utils/get-hash-param":69,"../utils/get-query-param":70,"../utils/is-string":72,"../utils/translate":79,"./document-store-url":58,"./patchable-content":63,"./provider-interface":65,"jiff":20,"pako":35}],57:[function(require,module,exports){
var CloudMetadata, DocumentStoreShareProvider, DocumentStoreUrl, pako;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

DocumentStoreUrl = require('./document-store-url');

pako = require('pako');

DocumentStoreShareProvider = (function() {
  function DocumentStoreShareProvider(client, provider) {
    this.client = client;
    this.provider = provider;
    this.docStoreUrl = this.provider.docStoreUrl;
  }

  DocumentStoreShareProvider.prototype.loadSharedContent = function(id, callback) {
    var sharedMetadata;
    sharedMetadata = new CloudMetadata({
      sharedContentId: id,
      type: CloudMetadata.File,
      overwritable: false
    });
    return this.provider.load(sharedMetadata, function(err, content) {
      return callback(err, content, sharedMetadata);
    });
  };

  DocumentStoreShareProvider.prototype.getSharingMetadata = function(shared) {
    return {
      _permissions: shared ? 1 : 0
    };
  };

  DocumentStoreShareProvider.prototype.share = function(shared, masterContent, sharedContent, metadata, callback) {
    var accessKey, accessKeys, documentID, method, params, ref, ref1, runKey, url;
    documentID = masterContent.get('sharedDocumentId');
    accessKeys = masterContent.get('accessKeys');
    runKey = masterContent.get('shareEditKey');
    accessKey = (accessKeys != null ? accessKeys.readWrite : void 0) || runKey;
    params = {
      shared: shared
    };
    if (accessKey) {
      params.accessKey = 'RW::' + accessKey;
    }
    if (documentID && accessKey) {
      ref = this.docStoreUrl.v2SaveDocument(documentID, params), method = ref.method, url = ref.url;
      return $.ajax({
        dataType: 'json',
        type: method,
        url: url,
        contentType: 'application/json',
        data: pako.deflate(sharedContent.getContentAsJSON()),
        processData: false,
        beforeSend: function(xhr) {
          return xhr.setRequestHeader('Content-Encoding', 'deflate');
        },
        context: this,
        xhrFields: {
          withCredentials: true
        },
        success: function(data) {
          if (runKey && (accessKeys == null)) {
            masterContent.addMetadata({
              accessKeys: {
                readWrite: runKey
              }
            });
          }
          return callback(null, data.id);
        },
        error: function(jqXHR) {
          var docName;
          docName = (metadata != null ? metadata.filename : void 0) || 'document';
          return callback("Unable to update shared '" + docName + "'");
        }
      });
    } else if (shared) {
      params.shared = true;
      ref1 = this.docStoreUrl.v2CreateDocument(params), method = ref1.method, url = ref1.url;
      return $.ajax({
        dataType: 'json',
        type: method,
        url: url,
        contentType: 'application/json',
        data: pako.deflate(sharedContent.getContentAsJSON()),
        processData: false,
        beforeSend: function(xhr) {
          return xhr.setRequestHeader('Content-Encoding', 'deflate');
        },
        context: this,
        xhrFields: {
          withCredentials: true
        },
        success: function(data) {
          masterContent.addMetadata({
            sharedDocumentId: data.id,
            accessKeys: {
              readOnly: data.readAccessKey,
              readWrite: data.readWriteAccessKey
            }
          });
          return callback(null, data.id);
        },
        error: function(jqXHR) {
          var docName;
          docName = (metadata != null ? metadata.filename : void 0) || 'document';
          return callback("Unable to share '" + docName + "'");
        }
      });
    } else {
      return callback("Unable to unshare '" + docName + "'");
    }
  };

  return DocumentStoreShareProvider;

})();

module.exports = DocumentStoreShareProvider;


},{"./document-store-url":58,"./provider-interface":65,"pako":35}],58:[function(require,module,exports){
var DocumentStoreUrl, defaultDocStoreUrl;

defaultDocStoreUrl = "//document-store.concord.org";

DocumentStoreUrl = (function() {
  function DocumentStoreUrl(docStoreUrl) {
    this.docStoreUrl = docStoreUrl || defaultDocStoreUrl;
    this.docStoreUrl = this.docStoreUrl.replace(/\/+$/, '');
  }

  DocumentStoreUrl.prototype.addParams = function(url, params) {
    var key, kvp, value;
    if (!params) {
      return url;
    }
    kvp = [];
    for (key in params) {
      value = params[key];
      kvp.push([key, value].map(encodeURI).join("="));
    }
    return url + "?" + kvp.join("&");
  };

  DocumentStoreUrl.prototype.authorize = function(params) {
    return this.addParams(this.docStoreUrl + "/user/authenticate", params);
  };

  DocumentStoreUrl.prototype.checkLogin = function(params) {
    return this.addParams(this.docStoreUrl + "/user/info", params);
  };

  DocumentStoreUrl.prototype.listDocuments = function(params) {
    return this.addParams(this.docStoreUrl + "/document/all", params);
  };

  DocumentStoreUrl.prototype.loadDocument = function(params) {
    return this.addParams(this.docStoreUrl + "/document/open", params);
  };

  DocumentStoreUrl.prototype.saveDocument = function(params) {
    return this.addParams(this.docStoreUrl + "/document/save", params);
  };

  DocumentStoreUrl.prototype.patchDocument = function(params) {
    return this.addParams(this.docStoreUrl + "/document/patch", params);
  };

  DocumentStoreUrl.prototype.deleteDocument = function(params) {
    return this.addParams(this.docStoreUrl + "/document/delete", params);
  };

  DocumentStoreUrl.prototype.renameDocument = function(params) {
    return this.addParams(this.docStoreUrl + "/document/rename", params);
  };

  DocumentStoreUrl.prototype.v2Document = function(id, params) {
    return this.addParams(this.docStoreUrl + "/v2/documents/" + id, params);
  };

  DocumentStoreUrl.prototype.v2CreateDocument = function(params) {
    return {
      method: 'POST',
      url: this.v2Document('', params)
    };
  };

  DocumentStoreUrl.prototype.v2LoadDocument = function(id, params) {
    return {
      method: 'GET',
      url: this.v2Document(id, params)
    };
  };

  DocumentStoreUrl.prototype.v2SaveDocument = function(id, params) {
    return {
      method: 'PUT',
      url: this.v2Document(id, params)
    };
  };

  DocumentStoreUrl.prototype.v2PatchDocument = function(id, params) {
    return {
      method: 'PATCH',
      url: this.v2Document(id, params)
    };
  };

  return DocumentStoreUrl;

})();

module.exports = DocumentStoreUrl;


},{}],59:[function(require,module,exports){
var CloudMetadata, GoogleDriveAuthorizationDialog, GoogleDriveProvider, ProviderInterface, button, cloudContentFactory, div, isString, jsdiff, ref, span, tr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = React.DOM, div = ref.div, button = ref.button, span = ref.span;

tr = require('../utils/translate');

isString = require('../utils/is-string');

jsdiff = require('diff');

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

GoogleDriveAuthorizationDialog = React.createFactory(React.createClass({
  displayName: 'GoogleDriveAuthorizationDialog',
  getInitialState: function() {
    return {
      loadedGAPI: window._LoadedGAPIClients
    };
  },
  componentWillMount: function() {
    return this.props.provider._loadedGAPI((function(_this) {
      return function() {
        if (_this._isMounted) {
          return _this.setState({
            loadedGAPI: true
          });
        }
      };
    })(this));
  },
  componentDidMount: function() {
    this._isMounted = true;
    if (this.state.loadedGAPI !== window._LoadedGAPIClients) {
      return this.setState({
        loadedGAPI: window._LoadedGAPIClients
      });
    }
  },
  componentWillUnmount: function() {
    return this._isMounted = false;
  },
  authenticate: function() {
    return this.props.provider.authorize(GoogleDriveProvider.SHOW_POPUP);
  },
  render: function() {
    return div({
      className: 'google-drive-auth'
    }, div({
      className: 'google-drive-concord-logo'
    }, ''), div({
      className: 'google-drive-footer'
    }, window._LoadedGAPIClients || this.state.loadedGAPI ? button({
      onClick: this.authenticate
    }, tr("~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL")) : tr("~GOOGLE_DRIVE.CONNECTING_MESSAGE")));
  }
}));

GoogleDriveProvider = (function(superClass) {
  extend(GoogleDriveProvider, superClass);

  function GoogleDriveProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    GoogleDriveProvider.__super__.constructor.call(this, {
      name: GoogleDriveProvider.Name,
      displayName: this.options.displayName || (tr('~PROVIDER.GOOGLE_DRIVE')),
      urlDisplayName: this.options.urlDisplayName,
      capabilities: {
        save: true,
        resave: true,
        "export": true,
        load: true,
        list: true,
        remove: false,
        rename: true,
        close: true,
        setFolder: true
      }
    });
    this.authToken = null;
    this.user = null;
    this.clientId = this.options.clientId;
    if (!this.clientId) {
      throw new Error(tr("~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID"));
    }
    this.mimeType = this.options.mimeType || "text/plain";
    this.readableMimetypes = this.options.readableMimetypes;
    this.useRealTimeAPI = this.options.useRealTimeAPI || false;
    if (this.useRealTimeAPI) {
      this.mimeType += '+cfm_realtime';
    }
    this._loadGAPI();
  }

  GoogleDriveProvider.Name = 'googleDrive';

  GoogleDriveProvider.IMMEDIATE = true;

  GoogleDriveProvider.SHOW_POPUP = false;

  GoogleDriveProvider.prototype.authorized = function(authCallback) {
    if (!(authCallback == null)) {
      this.authCallback = authCallback;
    }
    if (authCallback) {
      if (this.authToken) {
        return authCallback(true);
      } else {
        return this.authorize(GoogleDriveProvider.IMMEDIATE);
      }
    } else {
      return this.authToken !== null;
    }
  };

  GoogleDriveProvider.prototype.authorize = function(immediate) {
    return this._loadedGAPI((function(_this) {
      return function() {
        var args;
        args = {
          client_id: _this.clientId,
          scope: ['https://www.googleapis.com/auth/drive.readonly', 'https://www.googleapis.com/auth/drive.install', 'https://www.googleapis.com/auth/drive.file', 'https://www.googleapis.com/auth/userinfo.profile'],
          immediate: immediate
        };
        return gapi.auth.authorize(args, function(authToken) {
          _this.authToken = authToken && !authToken.error ? authToken : null;
          _this.user = null;
          _this.autoRenewToken(_this.authToken);
          if (_this.authToken) {
            gapi.client.oauth2.userinfo.get().execute(function(user) {
              return _this.user = user;
            });
          }
          return typeof _this.authCallback === "function" ? _this.authCallback(_this.authToken !== null) : void 0;
        });
      };
    })(this));
  };

  GoogleDriveProvider.prototype.autoRenewToken = function(authToken) {
    if (this._autoRenewTimeout) {
      clearTimeout(this._autoRenewTimeout);
    }
    if (authToken && !authToken.error) {
      return this._autoRenewTimeout = setTimeout(((function(_this) {
        return function() {
          return _this.authorize(GoogleDriveProvider.IMMEDIATE);
        };
      })(this)), (parseInt(authToken.expires_in, 10) * 0.75) * 1000);
    }
  };

  GoogleDriveProvider.prototype.renderAuthorizationDialog = function() {
    return GoogleDriveAuthorizationDialog({
      provider: this
    });
  };

  GoogleDriveProvider.prototype.renderUser = function() {
    if (this.user) {
      return span({}, span({
        className: 'gdrive-icon'
      }), this.user.name);
    } else {
      return null;
    }
  };

  GoogleDriveProvider.prototype.save = function(content, metadata, callback) {
    return this._loadedGAPI((function(_this) {
      return function() {
        if (_this.useRealTimeAPI) {
          return _this._saveRealTimeFile(content, metadata, callback);
        } else {
          return _this._saveFile(content, metadata, callback);
        }
      };
    })(this));
  };

  GoogleDriveProvider.prototype.load = function(metadata, callback) {
    return this._loadedGAPI((function(_this) {
      return function() {
        if (_this.useRealTimeAPI) {
          return _this._loadOrCreateRealTimeFile(metadata, callback);
        } else {
          return _this._loadFile(metadata, callback);
        }
      };
    })(this));
  };

  GoogleDriveProvider.prototype.list = function(metadata, callback) {
    return this._loadedGAPI((function(_this) {
      return function() {
        var mimeType, mimeTypesQuery, query, request;
        mimeTypesQuery = ((function() {
          var i, len, ref1, results;
          ref1 = this.readableMimetypes;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            mimeType = ref1[i];
            results.push("mimeType = '" + mimeType + "'");
          }
          return results;
        }).call(_this)).join(" or ");
        request = gapi.client.drive.files.list({
          q: query = "trashed = false and (" + mimeTypesQuery + " or mimeType = 'application/vnd.google-apps.folder') and '" + (metadata ? metadata.providerData.id : 'root') + "' in parents"
        });
        return request.execute(function(result) {
          var i, item, len, list, ref1, type;
          if (!result || result.error) {
            return callback(_this._apiError(result, 'Unable to list files'));
          }
          list = [];
          ref1 = result != null ? result.items : void 0;
          for (i = 0, len = ref1.length; i < len; i++) {
            item = ref1[i];
            type = item.mimeType === 'application/vnd.google-apps.folder' ? CloudMetadata.Folder : CloudMetadata.File;
            if (type === CloudMetadata.Folder || _this.matchesExtension(item.title)) {
              list.push(new CloudMetadata({
                name: item.title,
                type: type,
                parent: metadata,
                overwritable: item.editable,
                provider: _this,
                providerData: {
                  id: item.id
                }
              }));
            }
          }
          list.sort(function(a, b) {
            var lowerA, lowerB;
            lowerA = a.name.toLowerCase();
            lowerB = b.name.toLowerCase();
            if (lowerA < lowerB) {
              return -1;
            }
            if (lowerA > lowerB) {
              return 1;
            }
            return 0;
          });
          return callback(null, list);
        });
      };
    })(this));
  };

  GoogleDriveProvider.prototype.remove = function(metadata, callback) {
    return this._loadedGAPI(function() {
      var request;
      request = gapi.client.drive.files["delete"]({
        fileId: metadata.providerData.id
      });
      return request.execute(function(result) {
        return typeof callback === "function" ? callback((result != null ? result.error : void 0) || null) : void 0;
      });
    });
  };

  GoogleDriveProvider.prototype.rename = function(metadata, newName, callback) {
    return this._loadedGAPI(function() {
      var request;
      request = gapi.client.drive.files.patch({
        fileId: metadata.providerData.id,
        resource: {
          title: CloudMetadata.withExtension(newName)
        }
      });
      return request.execute(function(result) {
        if (result != null ? result.error : void 0) {
          return typeof callback === "function" ? callback(result.error) : void 0;
        } else {
          metadata.rename(newName);
          return callback(null, metadata);
        }
      });
    });
  };

  GoogleDriveProvider.prototype.close = function(metadata, callback) {
    var ref1, ref2;
    if (((ref1 = metadata.providerData) != null ? (ref2 = ref1.realTime) != null ? ref2.doc : void 0 : void 0) != null) {
      return metadata.providerData.realTime.doc.close();
    }
  };

  GoogleDriveProvider.prototype.canOpenSaved = function() {
    return true;
  };

  GoogleDriveProvider.prototype.openSaved = function(openSavedParams, callback) {
    var metadata;
    metadata = new CloudMetadata({
      type: CloudMetadata.File,
      provider: this,
      providerData: {
        id: openSavedParams
      }
    });
    return this.load(metadata, function(err, content) {
      return callback(err, content, metadata);
    });
  };

  GoogleDriveProvider.prototype.getOpenSavedParams = function(metadata) {
    return metadata.providerData.id;
  };

  GoogleDriveProvider.prototype.isAuthorizationRequired = function() {
    return true;
  };

  GoogleDriveProvider.prototype._loadGAPI = function() {
    var script;
    if (!window._LoadingGAPI) {
      window._LoadingGAPI = true;
      window._GAPIOnLoad = (function(_this) {
        return function() {
          window._LoadedGAPI = true;
          return _this._loadedGAPI(function() {});
        };
      })(this);
      script = document.createElement('script');
      script.src = 'https://apis.google.com/js/client.js?onload=_GAPIOnLoad';
      return document.head.appendChild(script);
    }
  };

  GoogleDriveProvider.prototype._loadedGAPI = function(callback) {
    var check, self;
    if (window._LoadedGAPIClients) {
      return callback();
    } else {
      self = this;
      check = function() {
        if (window._LoadedGAPI) {
          return gapi.client.load('drive', 'v2', function() {
            return gapi.client.load('oauth2', 'v2', function() {
              return gapi.load('drive-realtime', function() {
                window._LoadedGAPIClients = true;
                return callback.call(self);
              });
            });
          });
        } else {
          return setTimeout(check, 10);
        }
      };
      return setTimeout(check, 10);
    }
  };

  GoogleDriveProvider.prototype._loadFile = function(metadata, callback) {
    var request;
    request = gapi.client.drive.files.get({
      fileId: metadata.providerData.id
    });
    return request.execute((function(_this) {
      return function(file) {
        var ref1, url, xhr;
        if (file != null ? file.downloadUrl : void 0) {
          metadata.rename(file.title);
          metadata.overwritable = file.editable;
          metadata.providerData = {
            id: file.id
          };
          if ((metadata.parent == null) && ((ref1 = file.parents) != null ? ref1.length : void 0) > 0) {
            metadata.parent = new CloudMetadata({
              type: CloudMetadata.Folder,
              provider: _this,
              providerData: {
                id: file.parents[0].id
              }
            });
          }
          url = file.downloadUrl;
          url += (url.indexOf("?") === -1 ? "?" : "&") + "access_token=" + (encodeURIComponent(_this.authToken.access_token));
          xhr = new XMLHttpRequest();
          xhr.open('GET', url);
          xhr.onload = function() {
            return callback(null, cloudContentFactory.createEnvelopedCloudContent(xhr.responseText));
          };
          xhr.onerror = function() {
            return callback("Unable to download file content");
          };
          return xhr.send();
        } else {
          return callback(_this._apiError(file, 'Unable to get download url'));
        }
      };
    })(this));
  };

  GoogleDriveProvider.prototype._saveFile = function(content, metadata, callback) {
    var body, boundary, header, method, mimeType, path, ref1, ref2, ref3, ref4, request, transferEncoding;
    boundary = '-------314159265358979323846';
    mimeType = metadata.mimeType || this.mimeType;
    header = JSON.stringify({
      title: metadata.filename,
      mimeType: mimeType,
      parents: [
        {
          id: ((ref1 = metadata.parent) != null ? (ref2 = ref1.providerData) != null ? ref2.id : void 0 : void 0) != null ? metadata.parent.providerData.id : 'root'
        }
      ]
    });
    ref4 = ((ref3 = metadata.providerData) != null ? ref3.id : void 0) ? ['PUT', "/upload/drive/v2/files/" + metadata.providerData.id] : ['POST', '/upload/drive/v2/files'], method = ref4[0], path = ref4[1];
    transferEncoding = "";
    if (mimeType.indexOf("image/") === 0) {
      transferEncoding = "\r\nContent-Transfer-Encoding: base64";
    }
    body = ["\r\n--" + boundary + "\r\nContent-Type: application/json\r\n\r\n" + header, "\r\n--" + boundary + "\r\nContent-Type: " + mimeType + transferEncoding + "\r\n\r\n" + ((typeof content.getContentAsJSON === "function" ? content.getContentAsJSON() : void 0) || content), "\r\n--" + boundary + "--"].join('');
    request = gapi.client.request({
      path: path,
      method: method,
      params: {
        uploadType: 'multipart'
      },
      headers: {
        'Content-Type': 'multipart/related; boundary="' + boundary + '"'
      },
      body: body
    });
    return request.execute((function(_this) {
      return function(file) {
        if (callback) {
          if (file != null ? file.error : void 0) {
            return callback("Unabled to upload file: " + file.error.message);
          } else if (file) {
            metadata.providerData = {
              id: file.id
            };
            return callback(null, file);
          } else {
            return callback(_this._apiError(file, 'Unabled to upload file'));
          }
        }
      };
    })(this));
  };

  GoogleDriveProvider.prototype._loadOrCreateRealTimeFile = function(metadata, callback) {
    var error, fileLoaded, init, ref1, ref2, ref3, request, self;
    self = this;
    fileLoaded = function(doc) {
      var collaborator, content, i, len, ref1, sessionId, throwError;
      content = doc.getModel().getRoot().get('content');
      if (metadata.overwritable) {
        throwError = function(e) {
          if (!e.isLocal && e.sessionId !== metadata.providerData.realTime.sessionId) {
            return self.client.showBlockingModal({
              title: 'Concurrent Edit Lock',
              message: 'An edit was made to this file from another browser window. This app is now locked for input.'
            });
          }
        };
        content.addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, throwError);
        content.addEventListener(gapi.drive.realtime.EventType.TEXT_DELETED, throwError);
      }
      ref1 = doc.getCollaborators();
      for (i = 0, len = ref1.length; i < len; i++) {
        collaborator = ref1[i];
        if (collaborator.isMe) {
          sessionId = collaborator.sessionId;
        }
      }
      metadata.providerData.realTime = {
        doc: doc,
        content: content,
        sessionId: sessionId
      };
      return callback(null, cloudContentFactory.createEnvelopedCloudContent(content.getText()));
    };
    init = function(model) {
      var content;
      content = model.createString('');
      return model.getRoot().set('content', content);
    };
    error = (function(_this) {
      return function(err) {
        if (err.type === 'TOKEN_REFRESH_REQUIRED') {
          return _this.authorize(GoogleDriveProvider.IMMEDIATE);
        } else {
          return _this.client.alert(err.message);
        }
      };
    })(this);
    if ((ref1 = metadata.providerData) != null ? ref1.id : void 0) {
      request = gapi.client.drive.files.get({
        fileId: metadata.providerData.id
      });
    } else {
      request = gapi.client.drive.files.insert({
        title: metadata.filename,
        mimeType: this.mimeType,
        parents: [
          {
            id: ((ref2 = metadata.parent) != null ? (ref3 = ref2.providerData) != null ? ref3.id : void 0 : void 0) != null ? metadata.parent.providerData.id : 'root'
          }
        ]
      });
    }
    return request.execute((function(_this) {
      return function(file) {
        if (file != null ? file.id : void 0) {
          metadata.rename(file.title);
          metadata.overwritable = file.editable;
          metadata.providerData = {
            id: file.id
          };
          return gapi.drive.realtime.load(file.id, fileLoaded, init, error);
        } else {
          return callback(_this._apiError(file, 'Unable to load file'));
        }
      };
    })(this));
  };

  GoogleDriveProvider.prototype._saveRealTimeFile = function(content, metadata, callback) {
    var ref1;
    if ((ref1 = metadata.providerData) != null ? ref1.model : void 0) {
      return this._diffAndUpdateRealTimeModel(content, metadata, callback);
    } else {
      return this._loadOrCreateRealTimeFile(metadata, (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return _this._diffAndUpdateRealTimeModel(content, metadata, callback);
        };
      })(this));
    }
  };

  GoogleDriveProvider.prototype._diffAndUpdateRealTimeModel = function(content, metadata, callback) {
    var diff, diffs, i, index, len, realTimeContent;
    index = 0;
    realTimeContent = metadata.providerData.realTime.content;
    diffs = jsdiff.diffChars(realTimeContent.getText(), content.getContentAsJSON());
    for (i = 0, len = diffs.length; i < len; i++) {
      diff = diffs[i];
      if (diff.removed) {
        realTimeContent.removeRange(index, index + diff.value.length);
      } else {
        if (diff.added) {
          realTimeContent.insertString(index, diff.value);
        }
        index += diff.count;
      }
    }
    return callback(null);
  };

  GoogleDriveProvider.prototype._apiError = function(result, prefix) {
    if ((result != null ? result.message : void 0) != null) {
      return prefix + ": " + result.message;
    } else {
      return prefix;
    }
  };

  return GoogleDriveProvider;

})(ProviderInterface);

module.exports = GoogleDriveProvider;


},{"../utils/is-string":72,"../utils/translate":79,"./provider-interface":65,"diff":12}],60:[function(require,module,exports){
var CloudMetadata, DocumentStoreUrl, LaraProvider, PatchableContent, ProviderInterface, base64, cloudContentFactory, getQueryParam, pako,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

DocumentStoreUrl = require('./document-store-url');

PatchableContent = require('./patchable-content');

getQueryParam = require('../utils/get-query-param');

base64 = (require('js-base64')).Base64;

pako = require('pako');

LaraProvider = (function(superClass) {
  extend(LaraProvider, superClass);

  LaraProvider.Name = 'lara';

  function LaraProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    LaraProvider.__super__.constructor.call(this, {
      name: LaraProvider.Name,
      capabilities: {
        save: true,
        resave: true,
        "export": false,
        load: true,
        list: false,
        remove: false,
        rename: false,
        close: false
      }
    });
    this.urlParams = {
      documentServer: getQueryParam("documentServer"),
      launchFromLara: getQueryParam("launchFromLara")
    };
    this.removableQueryParams = ['launchFromLara', 'runAsGuest'];
    this.laraParams = this.urlParams.launchFromLara ? this.decodeParams(this.urlParams.launchFromLara) : null;
    this.openSavedParams = null;
    this.collaboratorUrls = [];
    this.docStoreUrl = new DocumentStoreUrl(this.urlParams.documentServer);
    this.savedContent = new PatchableContent(this.options.patchObjectHash);
  }

  LaraProvider.prototype.encodeParams = function(params) {
    return base64.encodeURI(JSON.stringify(params));
  };

  LaraProvider.prototype.decodeParams = function(params) {
    var decoded, e;
    try {
      decoded = JSON.parse(base64.decode(params));
    } catch (error1) {
      e = error1;
      decoded = null;
    }
    return decoded;
  };

  LaraProvider.prototype.handleUrlParams = function() {
    if (this.laraParams) {
      this.client.openProviderFile(this.name, this.laraParams);
      return true;
    } else {
      return false;
    }
  };

  LaraProvider.prototype.logLaraData = function(laraData) {
    var ref;
    if ((ref = this.collaboratorUrls) != null ? ref.length : void 0) {
      laraData.collaboratorUrls = this.collaboratorUrls;
    }
    if (this.options.logLaraData) {
      this.options.logLaraData(laraData);
    }
    return this.client.log('logLaraData', laraData);
  };

  LaraProvider.prototype.filterTabComponent = function(capability, defaultComponent) {
    return null;
  };

  LaraProvider.prototype.extractRawDataFromRunState = function(runState) {
    var e, rawData;
    rawData = (runState != null ? runState.raw_data : void 0) || {};
    if (typeof rawData === "string") {
      try {
        rawData = JSON.parse(rawData);
      } catch (error1) {
        e = error1;
        rawData = {};
      }
    }
    return rawData;
  };

  LaraProvider.prototype.can = function(capability, metadata) {
    var hasReadOnlyAccess, ref, ref1, ref2, ref3, requiresWriteAccess;
    hasReadOnlyAccess = ((metadata != null ? (ref = metadata.providerData) != null ? (ref1 = ref.accessKeys) != null ? ref1.readOnly : void 0 : void 0 : void 0) != null) && ((metadata != null ? (ref2 = metadata.providerData) != null ? (ref3 = ref2.accessKeys) != null ? ref3.readWrite : void 0 : void 0 : void 0) == null);
    requiresWriteAccess = ['save', 'resave', 'remove', 'rename'].indexOf(capability) >= 0;
    return LaraProvider.__super__.can.call(this, capability, metadata) && !(requiresWriteAccess && hasReadOnlyAccess);
  };

  LaraProvider.prototype.load = function(metadata, callback) {
    var accessKey, method, ref, ref1, ref2, ref3, ref4, ref5, url;
    ref1 = this.docStoreUrl.v2LoadDocument((ref = metadata.providerData) != null ? ref.recordid : void 0), method = ref1.method, url = ref1.url;
    if ((ref2 = metadata.providerData) != null ? (ref3 = ref2.accessKeys) != null ? ref3.readOnly : void 0 : void 0) {
      accessKey = 'RO::' + metadata.providerData.accessKeys.readOnly;
    } else if ((ref4 = metadata.providerData) != null ? (ref5 = ref4.accessKeys) != null ? ref5.readWrite : void 0 : void 0) {
      accessKey = 'RW::' + metadata.providerData.accessKeys.readWrite;
    }
    return $.ajax({
      type: method,
      url: url,
      dataType: 'json',
      data: {
        accessKey: accessKey
      },
      context: this,
      success: (function(_this) {
        return function(data) {
          var content, ref6, ref7;
          _this.logLaraData({
            operation: 'open',
            documentID: (ref6 = metadata.providerData) != null ? ref6.recordid : void 0,
            documentUrl: url
          });
          content = cloudContentFactory.createEnvelopedCloudContent(data);
          metadata.rename(metadata.name || data.docName || data.name || ((ref7 = data.content) != null ? ref7.name : void 0));
          if (metadata.name) {
            content.addMetadata({
              docName: metadata.filename
            });
          }
          return callback(null, content);
        };
      })(this),
      error: function(jqXHR) {
        var ref6;
        return callback("Unable to load " + (metadata.name || ((ref6 = metadata.providerData) != null ? ref6.recordid : void 0) || 'file'));
      }
    });
  };

  LaraProvider.prototype.save = function(cloudContent, metadata, callback, disablePatch) {
    var canPatch, content, logData, method, params, patchResults, ref, ref1, ref2, url;
    content = cloudContent.getContent();
    canPatch = this.options.patch && metadata.overwritable && !disablePatch;
    patchResults = this.savedContent.createPatch(content, canPatch);
    if (patchResults.shouldPatch && !patchResults.diffLength) {
      callback(null);
      return;
    }
    params = {};
    if (!patchResults.shouldPatch && metadata.filename) {
      params.recordname = metadata.filename;
    }
    if (((metadata != null ? (ref = metadata.providerData) != null ? (ref1 = ref.accessKeys) != null ? ref1.readWrite : void 0 : void 0 : void 0) != null)) {
      params.accessKey = 'RW::' + metadata.providerData.accessKeys.readWrite;
    }
    ref2 = patchResults.shouldPatch ? this.docStoreUrl.v2PatchDocument(metadata.providerData.recordid, params) : this.docStoreUrl.v2SaveDocument(metadata.providerData.recordid, params), method = ref2.method, url = ref2.url;
    logData = {
      operation: 'save',
      provider: 'LaraProvider',
      shouldPatch: patchResults.shouldPatch,
      method: method,
      url: url.substr(0, url.indexOf('accessKey') + 16) + '...',
      params: JSON.stringify({
        recordname: params.recordname
      }),
      content: patchResults.sendContent.substr(0, 512)
    };
    this.client.log('save', logData);
    return $.ajax({
      dataType: 'json',
      type: method,
      url: url,
      data: pako.deflate(patchResults.sendContent),
      contentType: patchResults.mimeType,
      processData: false,
      beforeSend: function(xhr) {
        return xhr.setRequestHeader('Content-Encoding', 'deflate');
      },
      context: this,
      success: function(data) {
        this.savedContent.updateContent(this.options.patch ? _.cloneDeep(content) : null);
        if (data.recordid) {
          metadata.providerData.recordid = data.recordid;
        }
        return callback(null, data);
      },
      error: function(jqXHR) {
        var responseJson;
        if (patchResults.shouldPatch) {
          return this.save(cloudContent, metadata, callback, true);
        } else {
          try {
            responseJson = JSON.parse(jqXHR.responseText);
            if (responseJson.message === 'error.duplicate') {
              return callback("Unable to create " + metadata.name + ". File already exists.");
            } else {
              return callback("Unable to save " + metadata.name + ": [" + responseJson.message + "]");
            }
          } catch (error1) {
            return callback("Unable to save " + metadata.name);
          }
        }
      }
    });
  };

  LaraProvider.prototype.canOpenSaved = function() {
    return true;
  };

  LaraProvider.prototype.openSaved = function(openSavedParams, callback) {
    var loadProviderFile, metadata, processInitialRunState, ref;
    metadata = new CloudMetadata({
      type: CloudMetadata.File,
      provider: this
    });
    if (typeof openSavedParams === "string") {
      openSavedParams = this.decodeParams(openSavedParams);
    }
    this.openSavedParams = openSavedParams;
    this.collaboratorUrls = (openSavedParams != null ? (ref = openSavedParams.collaboratorUrls) != null ? ref.length : void 0 : void 0) > 0 ? openSavedParams.collaboratorUrls : [];
    loadProviderFile = (function(_this) {
      return function(providerData, callback) {
        metadata.providerData = providerData;
        return _this.load(metadata, function(err, content) {
          _this.client.removeQueryParams(_this.removableQueryParams);
          return callback(err, content, metadata);
        });
      };
    })(this);
    if (openSavedParams != null ? openSavedParams.recordid : void 0) {
      return loadProviderFile(openSavedParams, callback);
    }
    processInitialRunState = (function(_this) {
      return function(runStateUrl, sourceID, readOnlyKey, runState) {
        var becomeLeader, cloneDoc, createParams, docStore, existingRunState, finished, haveCollaborators, method, processCreateResponse, ref1, ref2, ref3, removeCollaborator, setFollowers, updateInteractiveRunStates, url;
        existingRunState = _this.extractRawDataFromRunState(runState);
        docStore = existingRunState.docStore;
        haveCollaborators = _this.collaboratorUrls.length > 0;
        updateInteractiveRunStates = function(urls, newDocStore, callback) {
          var learnerParam, learnerUrl, newRunState, processQueue, rawData, updateRunState, urlQueue;
          newRunState = _.cloneDeep(existingRunState);
          newRunState.docStore = newDocStore;
          rawData = JSON.stringify(newRunState);
          learnerUrl = (newRunState.learner_url != null) && typeof newRunState.learner_url === "string" ? newRunState.learner_url : null;
          learnerParam = learnerUrl ? "&learner_url=" + (encodeURIComponent(learnerUrl)) : "";
          updateRunState = function(url, done) {
            return $.ajax({
              type: 'PUT',
              url: url + "?raw_data=" + (encodeURIComponent(rawData)) + learnerParam,
              dataType: 'json',
              xhrFields: {
                withCredentials: true
              }
            }).done(function(data, status, jqXHR) {
              if ((data != null ? data.success : void 0) === false) {
                return done("Could not open the specified document because an error occurred [updateState] (" + data.message + ")");
              } else {
                return done(null);
              }
            }).fail(function(jqXHR, status, error) {
              return done("Could not open the specified document because an error occurred [updateState]");
            });
          };
          urlQueue = urls.slice();
          processQueue = function() {
            var url;
            if (urlQueue.length === 0) {
              return callback(null);
            } else {
              url = urlQueue.shift();
              return updateRunState(url, function(err) {
                if (err) {
                  return callback(err);
                } else {
                  return processQueue();
                }
              });
            }
          };
          return processQueue();
        };
        processCreateResponse = function(createResponse) {
          var codapUrl, encodedLaraParams, reportUrlLaraParams;
          docStore = {
            recordid: createResponse.id,
            accessKeys: {
              readOnly: createResponse.readAccessKey,
              readWrite: createResponse.readWriteAccessKey
            }
          };
          codapUrl = window.location.origin ? "" + window.location.origin + window.location.pathname : window.location.protocol + "//" + window.location.host + window.location.pathname;
          reportUrlLaraParams = {
            recordid: createResponse.id,
            accessKeys: {
              readOnly: createResponse.readAccessKey
            }
          };
          encodedLaraParams = _this.encodeParams(reportUrlLaraParams);
          if (existingRunState.lara_options == null) {
            existingRunState.lara_options = {};
          }
          return existingRunState.lara_options.reporting_url = codapUrl + "?launchFromLara=" + encodedLaraParams;
        };
        if (((docStore != null ? docStore.recordid : void 0) != null) && ((((ref1 = docStore.accessKeys) != null ? ref1.readOnly : void 0) != null) || (((ref2 = docStore.accessKeys) != null ? ref2.readWrite : void 0) != null))) {
          cloneDoc = function(callback) {
            var createParams, method, ref3, url;
            createParams = {
              source: docStore.recordid,
              accessKey: "RO::" + docStore.accessKeys.readOnly
            };
            ref3 = _this.docStoreUrl.v2CreateDocument(createParams), method = ref3.method, url = ref3.url;
            return $.ajax({
              type: method,
              url: url,
              dataType: 'json'
            }).done(function(createResponse, status, jqXHR) {
              var laraData;
              laraData = {
                operation: 'clone',
                documentID: docStore.recordid,
                documentUrl: url
              };
              if ((existingRunState != null ? existingRunState.run_remote_endpoint : void 0) != null) {
                laraData.run_remote_endpoint = existingRunState.run_remote_endpoint;
              }
              _this.logLaraData(laraData);
              processCreateResponse(createResponse);
              return callback(null);
            }).fail(function(jqXHR, status, error) {
              return callback("Could not open the specified document because an error occurred [createCopy]");
            });
          };
          setFollowers = function(err, callback) {
            var collaboratorParams;
            if (err) {
              return callback(err);
            } else {
              collaboratorParams = _.cloneDeep(docStore);
              collaboratorParams.collaborator = 'follower';
              return updateInteractiveRunStates(_this.collaboratorUrls, collaboratorParams, callback);
            }
          };
          becomeLeader = function(err, callback) {
            if (err) {
              return callback(err);
            } else {
              docStore.collaborator = 'leader';
              return updateInteractiveRunStates([runStateUrl], docStore, callback);
            }
          };
          removeCollaborator = function(err, callback) {
            if (err) {
              return callback(err);
            } else {
              delete docStore.collaborator;
              return updateInteractiveRunStates([runStateUrl], docStore, callback);
            }
          };
          finished = function(err) {
            if (err) {
              return callback(err);
            } else {
              return loadProviderFile(_.cloneDeep(docStore), callback);
            }
          };
          if (docStore.collaborator) {
            if (docStore.collaborator === 'leader') {
              if (haveCollaborators) {
                return setFollowers(null, finished);
              } else {
                return cloneDoc(function(err) {
                  return removeCollaborator(err, finished);
                });
              }
            } else {
              if (haveCollaborators) {
                return cloneDoc(function(err) {
                  return becomeLeader(err, (function(err) {
                    return setFollowers(err, finished);
                  }));
                });
              } else {
                return cloneDoc(function(err) {
                  return removeCollaborator(err, finished);
                });
              }
            }
          } else {
            if (haveCollaborators) {
              return becomeLeader(null, function(err) {
                return setFollowers(err, finished);
              });
            } else {
              return finished();
            }
          }
        }
        if (!sourceID) {
          callback("Could not open the specified document because an error occurred [noSource]");
          return;
        }
        createParams = {
          source: sourceID
        };
        if (readOnlyKey) {
          createParams.accessKey = "RO::" + readOnlyKey;
        }
        ref3 = _this.docStoreUrl.v2CreateDocument(createParams), method = ref3.method, url = ref3.url;
        return $.ajax({
          type: method,
          url: url,
          dataType: 'json'
        }).done(function(createResponse, status, jqXHR) {
          var providerData, updateFinished;
          processCreateResponse(createResponse);
          if (haveCollaborators) {
            docStore.collaborator = 'leader';
          }
          providerData = _.merge({}, docStore, {
            url: runStateUrl
          });
          updateFinished = function() {
            return loadProviderFile(providerData, callback);
          };
          return updateInteractiveRunStates([runStateUrl], docStore, function(err) {
            if (err) {
              return callback(err);
            } else if (haveCollaborators) {
              docStore.collaborator = 'follower';
              return updateInteractiveRunStates(_this.collaboratorUrls, docStore, function(err) {
                if (err) {
                  return callback(err);
                } else {
                  return updateFinished();
                }
              });
            } else {
              return updateFinished();
            }
          });
        }).fail(function(jqXHR, status, error) {
          return callback("Could not open the specified document because an error occurred [createCopy]");
        });
      };
    })(this);
    if (openSavedParams && openSavedParams.url) {
      $.ajax({
        type: 'GET',
        url: openSavedParams.url,
        dataType: 'json',
        xhrFields: {
          withCredentials: true
        }
      }).done((function(_this) {
        return function(data, status, jqXHR) {
          var laraData;
          laraData = {
            operation: 'open',
            runStateUrl: openSavedParams.url,
            documentID: openSavedParams.source
          };
          if ((data != null ? data.run_remote_endpoint : void 0) != null) {
            laraData.run_remote_endpoint = data.run_remote_endpoint;
          }
          _this.logLaraData(laraData);
          return processInitialRunState(openSavedParams.url, openSavedParams.source, openSavedParams.readOnlyKey, data);
        };
      })(this)).fail(function(jqXHR, status, error) {
        return callback("Could not open the specified document because an error occurred [getState]");
      });
      return;
    }
    return callback("Cannot open the specified document");
  };

  LaraProvider.prototype.getOpenSavedParams = function(metadata) {
    var params;
    params = this.openSavedParams ? this.openSavedParams : this.laraParams ? {
      url: this.laraParams.url,
      source: this.laraParams.source
    } : metadata;
    return this.encodeParams(params);
  };

  return LaraProvider;

})(ProviderInterface);

module.exports = LaraProvider;


},{"../utils/get-query-param":70,"./document-store-url":58,"./patchable-content":63,"./provider-interface":65,"js-base64":34,"pako":35}],61:[function(require,module,exports){
var LocalFileListTab, LocalFileProvider, LocalFileSaveTab, ProviderInterface, button, cloudContentFactory, div, input, ref, tr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = React.DOM, div = ref.div, input = ref.input, button = ref.button;

tr = require('../utils/translate');

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

LocalFileListTab = React.createFactory(require('../views/local-file-tab-list-view'));

LocalFileSaveTab = React.createFactory(require('../views/local-file-tab-save-view'));

LocalFileProvider = (function(superClass) {
  extend(LocalFileProvider, superClass);

  function LocalFileProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    LocalFileProvider.__super__.constructor.call(this, {
      name: LocalFileProvider.Name,
      displayName: this.options.displayName || (tr('~PROVIDER.LOCAL_FILE')),
      capabilities: {
        save: true,
        resave: false,
        "export": true,
        load: true,
        list: true,
        remove: false,
        rename: false,
        close: false
      }
    });
  }

  LocalFileProvider.Name = 'localFile';

  LocalFileProvider.prototype.filterTabComponent = function(capability, defaultComponent) {
    if (capability === 'list') {
      return LocalFileListTab;
    } else if ((capability === 'save') || (capability === 'export')) {
      return LocalFileSaveTab;
    } else {
      return defaultComponent;
    }
  };

  LocalFileProvider.prototype.list = function(metadata, callback) {};

  LocalFileProvider.prototype.save = function(content, metadata, callback) {
    return typeof callback === "function" ? callback(null) : void 0;
  };

  LocalFileProvider.prototype.load = function(metadata, callback) {
    var reader;
    reader = new FileReader();
    reader.onload = function(loaded) {
      return callback(null, cloudContentFactory.createEnvelopedCloudContent(loaded.target.result));
    };
    return reader.readAsText(metadata.providerData.file);
  };

  LocalFileProvider.prototype.canOpenSaved = function() {
    return false;
  };

  return LocalFileProvider;

})(ProviderInterface);

module.exports = LocalFileProvider;


},{"../utils/translate":79,"../views/local-file-tab-list-view":90,"../views/local-file-tab-save-view":91,"./provider-interface":65}],62:[function(require,module,exports){
var CloudMetadata, LocalStorageProvider, ProviderInterface, cloudContentFactory, tr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

tr = require('../utils/translate');

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

LocalStorageProvider = (function(superClass) {
  extend(LocalStorageProvider, superClass);

  function LocalStorageProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    LocalStorageProvider.__super__.constructor.call(this, {
      name: LocalStorageProvider.Name,
      displayName: this.options.displayName || (tr('~PROVIDER.LOCAL_STORAGE')),
      urlDisplayName: this.options.urlDisplayName,
      capabilities: {
        save: true,
        resave: true,
        "export": true,
        load: true,
        list: true,
        remove: true,
        rename: true,
        close: false
      }
    });
  }

  LocalStorageProvider.Name = 'localStorage';

  LocalStorageProvider.Available = function() {
    var result, test;
    return result = (function() {
      try {
        test = 'LocalStorageProvider::auth';
        window.localStorage.setItem(test, test);
        window.localStorage.removeItem(test);
        return true;
      } catch (error) {
        return false;
      }
    })();
  };

  LocalStorageProvider.prototype.save = function(content, metadata, callback) {
    var e, fileKey;
    try {
      fileKey = this._getKey(metadata.filename);
      window.localStorage.setItem(fileKey, (typeof content.getContentAsJSON === "function" ? content.getContentAsJSON() : void 0) || content);
      return typeof callback === "function" ? callback(null) : void 0;
    } catch (error) {
      e = error;
      return callback("Unable to save: " + e.message);
    }
  };

  LocalStorageProvider.prototype.load = function(metadata, callback) {
    var content, e;
    try {
      content = window.localStorage.getItem(this._getKey(metadata.filename));
      return callback(null, cloudContentFactory.createEnvelopedCloudContent(content));
    } catch (error) {
      e = error;
      return callback("Unable to load '" + metadata.name + "': " + e.message);
    }
  };

  LocalStorageProvider.prototype.list = function(metadata, callback) {
    var filename, key, list, name, prefix, ref, ref1, remainder;
    list = [];
    prefix = this._getKey(((metadata != null ? metadata.path() : void 0) || []).join('/'));
    ref = window.localStorage;
    for (key in ref) {
      if (!hasProp.call(ref, key)) continue;
      if (key.substr(0, prefix.length) === prefix) {
        ref1 = key.substr(prefix.length).split('/'), filename = ref1[0], remainder = 2 <= ref1.length ? slice.call(ref1, 1) : [];
        name = key.substr(prefix.length);
        if (this.matchesExtension(name)) {
          list.push(new CloudMetadata({
            name: name,
            type: remainder.length > 0 ? CloudMetadata.Folder : CloudMetadata.File,
            parent: metadata,
            provider: this
          }));
        }
      }
    }
    return callback(null, list);
  };

  LocalStorageProvider.prototype.remove = function(metadata, callback) {
    try {
      window.localStorage.removeItem(this._getKey(metadata.filename));
      return typeof callback === "function" ? callback(null) : void 0;
    } catch (error) {
      return typeof callback === "function" ? callback('Unable to delete') : void 0;
    }
  };

  LocalStorageProvider.prototype.rename = function(metadata, newName, callback) {
    var content;
    try {
      content = window.localStorage.getItem(this._getKey(metadata.filename));
      window.localStorage.setItem(this._getKey(CloudMetadata.withExtension(newName)), content);
      window.localStorage.removeItem(this._getKey(metadata.filename));
      metadata.rename(newName);
      return callback(null, metadata);
    } catch (error) {
      return typeof callback === "function" ? callback('Unable to rename') : void 0;
    }
  };

  LocalStorageProvider.prototype.canOpenSaved = function() {
    return true;
  };

  LocalStorageProvider.prototype.openSaved = function(openSavedParams, callback) {
    var metadata;
    metadata = new CloudMetadata({
      name: openSavedParams,
      type: CloudMetadata.File,
      parent: null,
      provider: this
    });
    return this.load(metadata, function(err, content) {
      return callback(err, content, metadata);
    });
  };

  LocalStorageProvider.prototype.getOpenSavedParams = function(metadata) {
    return metadata.name;
  };

  LocalStorageProvider.prototype._getKey = function(name) {
    if (name == null) {
      name = '';
    }
    return "cfm::" + (name.replace(/\t/g, ' '));
  };

  return LocalStorageProvider;

})(ProviderInterface);

module.exports = LocalStorageProvider;


},{"../utils/translate":79,"./provider-interface":65}],63:[function(require,module,exports){
var PatchableContent, jiff;

jiff = require('jiff');

PatchableContent = (function() {
  function PatchableContent(patchObjectHash, savedContent) {
    this.patchObjectHash = patchObjectHash;
    this.savedContent = savedContent;
  }

  PatchableContent.prototype.createPatch = function(content, canPatch) {
    var diff, result;
    diff = canPatch && this.savedContent ? this._createDiff(this.savedContent, content) : void 0;
    result = {
      shouldPatch: false,
      mimeType: 'application/json',
      contentJson: JSON.stringify(content),
      diffLength: diff && diff.length,
      diffJson: diff && JSON.stringify(diff)
    };
    if (canPatch && (result.diffJson != null) && result.diffJson.length < result.contentJson.length) {
      result.shouldPatch = true;
      result.sendContent = result.diffJson;
      result.mimeType = 'application/json-patch+json';
    } else {
      result.sendContent = result.contentJson;
    }
    return result;
  };

  PatchableContent.prototype.updateContent = function(content) {
    return this.savedContent = content;
  };

  PatchableContent.prototype._createDiff = function(obj1, obj2) {
    var cleanedObj1, cleanedObj2, diff, opts;
    try {
      opts = {
        hash: typeof this.patchObjectHash === "function" ? this.patchObjectHash : void 0,
        invertible: false
      };
      cleanedObj1 = JSON.parse(JSON.stringify(obj1));
      cleanedObj2 = JSON.parse(JSON.stringify(obj2));
      diff = jiff.diff(cleanedObj1, cleanedObj2, opts);
      return diff;
    } catch (error) {
      return null;
    }
  };

  return PatchableContent;

})();

module.exports = PatchableContent;


},{"jiff":20}],64:[function(require,module,exports){
var PostMessageProvider, ProviderInterface, getQueryParam,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ProviderInterface = (require('./provider-interface')).ProviderInterface;

getQueryParam = require('../utils/get-query-param');

PostMessageProvider = (function(superClass) {
  extend(PostMessageProvider, superClass);

  PostMessageProvider.Name = 'postMessage';

  function PostMessageProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    PostMessageProvider.__super__.constructor.call(this, {
      capabilities: {
        save: false,
        resave: false,
        "export": getQueryParam("saveSecondaryFileViaPostMessage") ? 'auto' : false,
        load: false,
        list: false,
        remove: false,
        rename: false,
        close: false
      }
    });
  }

  PostMessageProvider.prototype.canOpenSaved = function() {
    return false;
  };

  PostMessageProvider.prototype.saveAsExport = function(content, metadata, callback) {
    window.parent.postMessage({
      action: "saveSecondaryFile",
      extension: metadata.extension,
      mimeType: metadata.mimeType,
      content: content
    }, "*");
    return typeof callback === "function" ? callback(null) : void 0;
  };

  return PostMessageProvider;

})(ProviderInterface);

module.exports = PostMessageProvider;


},{"../utils/get-query-param":70,"./provider-interface":65}],65:[function(require,module,exports){
var CloudContent, CloudContentFactory, CloudFile, CloudMetadata, ProviderInterface, div, isString,
  hasProp = {}.hasOwnProperty;

div = React.DOM.div;

isString = require('../utils/is-string');

CloudFile = (function() {
  function CloudFile(options) {
    this.content = options.content, this.metadata = options.metadata;
  }

  return CloudFile;

})();

CloudMetadata = (function() {
  function CloudMetadata(options) {
    var ref, ref1, ref2;
    this.name = options.name, this.type = options.type, this.description = options.description, this.content = options.content, this.url = options.url, this.provider = (ref = options.provider) != null ? ref : null, this.parent = (ref1 = options.parent) != null ? ref1 : null, this.providerData = (ref2 = options.providerData) != null ? ref2 : {}, this.overwritable = options.overwritable, this.sharedContentId = options.sharedContentId, this.sharedContentSecretKey = options.sharedContentSecretKey, this.mimeType = options.mimeType;
    this._updateFilename();
  }

  CloudMetadata.Folder = 'folder';

  CloudMetadata.File = 'file';

  CloudMetadata.Label = 'label';

  CloudMetadata.Extension = null;

  CloudMetadata.mapTypeToCloudMetadataType = function(iType) {
    return iType || this.File;
  };

  CloudMetadata.withExtension = function(name, defaultExtension, keepOriginalExtension) {
    var extension;
    if (keepOriginalExtension && ~name.indexOf(".")) {
      return name;
    }
    extension = CloudMetadata.Extension || defaultExtension;
    if (extension) {
      return this.newExtension(name, extension);
    } else {
      return name;
    }
  };

  CloudMetadata.newExtension = function(name, extension) {
    name = name.substr(0, name.lastIndexOf('.')) || name;
    return name + "." + extension;
  };

  CloudMetadata.prototype.path = function() {
    var _path, parent;
    _path = [];
    parent = this.parent;
    while (parent !== null) {
      _path.unshift(parent);
      parent = parent.parent;
    }
    return _path;
  };

  CloudMetadata.prototype.rename = function(newName) {
    this.name = newName;
    return this._updateFilename();
  };

  CloudMetadata.prototype._updateFilename = function() {
    var extLen, ref;
    this.filename = this.name;
    if ((((ref = this.name) != null ? ref.substr : void 0) != null) && (CloudMetadata.Extension != null) && this.type === CloudMetadata.File) {
      extLen = CloudMetadata.Extension.length;
      if (this.name.substr(-extLen + 1) === ("." + CloudMetadata.Extension)) {
        this.name = this.name.substr(0, this.name.length - (extLen + 1));
      }
      return this.filename = CloudMetadata.withExtension(this.name, null, true);
    }
  };

  return CloudMetadata;

})();

CloudContentFactory = (function() {
  function CloudContentFactory() {
    this.envelopeMetadata = {};
  }

  CloudContentFactory.prototype.setEnvelopeMetadata = function(envelopeMetadata) {
    var key, results;
    results = [];
    for (key in envelopeMetadata) {
      results.push(this.envelopeMetadata[key] = envelopeMetadata[key]);
    }
    return results;
  };

  CloudContentFactory.prototype.createEnvelopedCloudContent = function(content) {
    return new CloudContent(this.envelopContent(content), this._identifyContentFormat(content));
  };

  CloudContentFactory.prototype.envelopContent = function(content) {
    var envelopedCloudContent, key;
    envelopedCloudContent = this._wrapIfNeeded(content);
    for (key in this.envelopeMetadata) {
      if (envelopedCloudContent[key] == null) {
        envelopedCloudContent[key] = this.envelopeMetadata[key];
      }
    }
    return envelopedCloudContent;
  };

  CloudContentFactory.prototype._identifyContentFormat = function(content) {
    var result;
    if (content == null) {
      return;
    }
    result = {
      isCfmWrapped: false,
      isPreCfmFormat: false
    };
    if (isString(content)) {
      try {
        content = JSON.parse(content);
      } catch (error) {}
    }
    if (content.metadata) {
      return result;
    }
    if ((content.cfmVersion != null) || (content.content != null)) {
      result.isCfmWrapped = true;
    } else {
      result.isPreCfmFormat = true;
    }
    return result;
  };

  CloudContentFactory.prototype._wrapIfNeeded = function(content) {
    if (isString(content)) {
      try {
        content = JSON.parse(content);
      } catch (error) {}
    }
    if (content.content != null) {
      return content;
    } else {
      return {
        content: content
      };
    }
  };

  return CloudContentFactory;

})();

CloudContent = (function() {
  CloudContent.wrapFileContent = true;

  function CloudContent(_1, _contentFormat) {
    this._ = _1 != null ? _1 : {};
    this._contentFormat = _contentFormat;
  }

  CloudContent.prototype.getContent = function() {
    if (CloudContent.wrapFileContent) {
      return this._;
    } else {
      return this._.content;
    }
  };

  CloudContent.prototype.getContentAsJSON = function() {
    return JSON.stringify(CloudContent.wrapFileContent ? this._ : this._.content);
  };

  CloudContent.prototype.getClientContent = function() {
    return this._.content;
  };

  CloudContent.prototype.requiresConversion = function() {
    var ref, ref1;
    return (CloudContent.wrapFileContent !== ((ref = this._contentFormat) != null ? ref.isCfmWrapped : void 0)) || ((ref1 = this._contentFormat) != null ? ref1.isPreCfmFormat : void 0);
  };

  CloudContent.prototype.clone = function() {
    return new CloudContent(_.cloneDeep(this._), _.cloneDeep(this._contentFormat));
  };

  CloudContent.prototype.setText = function(text) {
    return this._.content = text;
  };

  CloudContent.prototype.getText = function() {
    if (this._.content === null) {
      return '';
    } else if (isString(this._.content)) {
      return this._.content;
    } else {
      return JSON.stringify(this._.content);
    }
  };

  CloudContent.prototype.addMetadata = function(metadata) {
    var key, results;
    results = [];
    for (key in metadata) {
      results.push(this._[key] = metadata[key]);
    }
    return results;
  };

  CloudContent.prototype.get = function(prop) {
    return this._[prop];
  };

  CloudContent.prototype.set = function(prop, value) {
    return this._[prop] = value;
  };

  CloudContent.prototype.remove = function(prop) {
    return delete this._[prop];
  };

  CloudContent.prototype.getSharedMetadata = function() {
    var shared;
    shared = {};
    if (this._._permissions != null) {
      shared._permissions = this._._permissions;
    }
    if (this._.shareEditKey != null) {
      shared.shareEditKey = this._.shareEditKey;
    }
    if (this._.sharedDocumentId != null) {
      shared.sharedDocumentId = this._.sharedDocumentId;
    }
    if (this._.accessKeys != null) {
      shared.accessKeys = this._.accessKeys;
    }
    return shared;
  };

  CloudContent.prototype.copyMetadataTo = function(to) {
    var key, metadata, ref, value;
    metadata = {};
    ref = this._;
    for (key in ref) {
      if (!hasProp.call(ref, key)) continue;
      value = ref[key];
      if (key !== 'content') {
        metadata[key] = value;
      }
    }
    return to.addMetadata(metadata);
  };

  return CloudContent;

})();

ProviderInterface = (function() {
  function ProviderInterface(options) {
    this.name = options.name, this.displayName = options.displayName, this.urlDisplayName = options.urlDisplayName, this.capabilities = options.capabilities;
  }

  ProviderInterface.Available = function() {
    return true;
  };

  ProviderInterface.prototype.can = function(capability) {
    return !!this.capabilities[capability];
  };

  ProviderInterface.prototype.canAuto = function(capability) {
    return this.capabilities[capability] === 'auto';
  };

  ProviderInterface.prototype.isAuthorizationRequired = function() {
    return false;
  };

  ProviderInterface.prototype.authorized = function(callback) {
    if (callback) {
      return callback(true);
    } else {
      return true;
    }
  };

  ProviderInterface.prototype.renderAuthorizationDialog = function() {
    return AuthorizationNotImplementedDialog({
      provider: this
    });
  };

  ProviderInterface.prototype.renderUser = function() {
    return null;
  };

  ProviderInterface.prototype.filterTabComponent = function(capability, defaultComponent) {
    return defaultComponent;
  };

  ProviderInterface.prototype.matchesExtension = function(name) {
    var extension, i, len, ref;
    if (!name) {
      return false;
    }
    if ((CloudMetadata.ReadableExtensions != null) && CloudMetadata.ReadableExtensions.length > 0) {
      ref = CloudMetadata.ReadableExtensions;
      for (i = 0, len = ref.length; i < len; i++) {
        extension = ref[i];
        if (name.substr(-extension.length) === extension) {
          return true;
        }
        if (extension === "") {
          if (!~name.indexOf(".")) {
            return true;
          }
        }
      }
      return false;
    } else {
      return true;
    }
  };

  ProviderInterface.prototype.handleUrlParams = function() {
    return false;
  };

  ProviderInterface.prototype.dialog = function(callback) {
    return this._notImplemented('dialog');
  };

  ProviderInterface.prototype.save = function(content, metadata, callback) {
    return this._notImplemented('save');
  };

  ProviderInterface.prototype.saveAsExport = function(content, metadata, callback) {
    if (this.can('save', metadata)) {
      return this.save(content, metadata, callback);
    } else {
      return this._notImplemented('saveAsExport');
    }
  };

  ProviderInterface.prototype.load = function(callback) {
    return this._notImplemented('load');
  };

  ProviderInterface.prototype.list = function(metadata, callback) {
    return this._notImplemented('list');
  };

  ProviderInterface.prototype.remove = function(metadata, callback) {
    return this._notImplemented('remove');
  };

  ProviderInterface.prototype.rename = function(metadata, newName, callback) {
    return this._notImplemented('rename');
  };

  ProviderInterface.prototype.close = function(metadata, callback) {
    return this._notImplemented('close');
  };

  ProviderInterface.prototype.setFolder = function(metadata) {
    return this._notImplemented('setFolder');
  };

  ProviderInterface.prototype.canOpenSaved = function() {
    return false;
  };

  ProviderInterface.prototype.openSaved = function(openSavedParams, callback) {
    return this._notImplemented('openSaved');
  };

  ProviderInterface.prototype.getOpenSavedParams = function(metadata) {
    return this._notImplemented('getOpenSavedParams');
  };

  ProviderInterface.prototype.fileOpened = function() {};

  ProviderInterface.prototype._notImplemented = function(methodName) {
    return alert(methodName + " not implemented for " + this.name + " provider");
  };

  return ProviderInterface;

})();

module.exports = {
  CloudFile: CloudFile,
  CloudMetadata: CloudMetadata,
  CloudContent: CloudContent,
  cloudContentFactory: new CloudContentFactory(),
  ProviderInterface: ProviderInterface
};


},{"../utils/is-string":72}],66:[function(require,module,exports){
var CloudMetadata, ProviderInterface, ReadOnlyProvider, cloudContentFactory, isArray, isString, tr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

tr = require('../utils/translate');

isString = require('../utils/is-string');

isArray = require('../utils/is-array');

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

ReadOnlyProvider = (function(superClass) {
  extend(ReadOnlyProvider, superClass);

  function ReadOnlyProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    ReadOnlyProvider.__super__.constructor.call(this, {
      name: ReadOnlyProvider.Name,
      displayName: this.options.displayName || (tr('~PROVIDER.READ_ONLY')),
      urlDisplayName: this.options.urlDisplayName,
      capabilities: {
        save: false,
        resave: false,
        "export": false,
        load: true,
        list: true,
        remove: false,
        rename: false,
        close: false
      }
    });
    this.tree = null;
    this.promises = [];
  }

  ReadOnlyProvider.Name = 'readOnly';

  ReadOnlyProvider.prototype.load = function(metadata, callback) {
    if (metadata && !isArray(metadata && metadata.type === CloudMetadata.File)) {
      if (metadata.content != null) {
        callback(null, metadata.content);
      } else if (metadata.url != null) {
        $.ajax({
          dataType: 'json',
          url: metadata.url,
          success: function(data) {
            return callback(null, cloudContentFactory.createEnvelopedCloudContent(data));
          },
          error: function() {
            return callback("Unable to load '" + metadata.name + "'");
          }
        });
      } else if ((metadata != null ? metadata.name : void 0) != null) {
        return this._loadTree((function(_this) {
          return function(err, tree) {
            var file;
            if (err) {
              return callback(err);
            }
            file = _this._findFile(tree, metadata.name);
            if (file != null) {
              _this.load(file, callback);
            } else {
              callback("Unable to load '" + metadata.name + "'");
            }
          };
        })(this));
      }
    } else {
      return callback("Unable to load specified content");
    }
  };

  ReadOnlyProvider.prototype.list = function(metadata, callback) {
    return this._loadTree((function(_this) {
      return function(err, tree) {
        var items;
        if (err) {
          return callback(err);
        }
        items = (metadata != null ? metadata.type : void 0) === CloudMetadata.Folder ? metadata.providerData.children : _this.tree;
        return callback(null, _.map(items, function(metadataItem) {
          return new CloudMetadata(metadataItem);
        }));
      };
    })(this));
  };

  ReadOnlyProvider.prototype.canOpenSaved = function() {
    return true;
  };

  ReadOnlyProvider.prototype.openSaved = function(openSavedParams, callback) {
    var metadata;
    metadata = new CloudMetadata({
      name: unescape(openSavedParams),
      type: CloudMetadata.File,
      parent: null,
      provider: this
    });
    return this.load(metadata, function(err, content) {
      return callback(err, content, metadata);
    });
  };

  ReadOnlyProvider.prototype.getOpenSavedParams = function(metadata) {
    return metadata.name;
  };

  ReadOnlyProvider.prototype._loadTree = function(callback) {
    var complete;
    complete = (function(_this) {
      return function(iTree) {
        return Promise.all(_this.promises).then((function() {
          if (iTree != null) {
            return callback(null, iTree);
          } else {
            if (typeof console.error === "function") {
              console.error("No contents found for " + this.displayName + " provider");
            }
            return callback(null, {});
          }
        }), (function() {
          return callback("No contents found for " + this.displayName + " provider");
        }));
      };
    })(this);
    if (this.tree !== null) {
      return complete(this.tree);
    } else if (this.options.json) {
      this.tree = this._convertJSONToMetadataTree(this.options.json);
      return complete(this.tree);
    } else if (this.options.jsonCallback) {
      return this.options.jsonCallback((function(_this) {
        return function(err, json) {
          if (err) {
            return callback(err);
          } else {
            _this.tree = _this._convertJSONToMetadataTree(_this.options.json);
            return complete(_this.tree);
          }
        };
      })(this));
    } else if (this.options.src) {
      return $.ajax({
        dataType: 'json',
        url: this.options.src,
        success: (function(_this) {
          return function(iResponse) {
            _this.tree = _this._convertJSONToMetadataTree(iResponse);
            if (_this.options.alphabetize) {
              _this.tree.sort(function(iMeta1, iMeta2) {
                if (iMeta1.name < iMeta2.name) {
                  return -1;
                }
                if (iMeta1.name > iMeta2.name) {
                  return 1;
                }
                return 0;
              });
            }
            return complete(_this.tree);
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            var errorMetadata;
            errorMetadata = _this._createErrorMetadata(null);
            _this.tree = [errorMetadata];
            return complete(_this.tree);
          };
        })(this)
      });
    } else {
      return complete(null);
    }
  };

  ReadOnlyProvider.prototype._convertJSONToMetadataTree = function(json, parent) {
    var filename, i, item, itemContent, len, metadata, newFolderPromise, tree, type;
    if (parent == null) {
      parent = null;
    }
    tree = [];
    if (isArray(json)) {
      for (i = 0, len = json.length; i < len; i++) {
        item = json[i];
        type = CloudMetadata.mapTypeToCloudMetadataType(item.type);
        metadata = new CloudMetadata({
          name: item.name,
          type: type,
          description: item.description,
          content: item.content != null ? cloudContentFactory.createEnvelopedCloudContent(item.content) : void 0,
          url: item.url || item.location,
          parent: parent,
          provider: this,
          providerData: {
            children: null
          }
        });
        if (type === CloudMetadata.Folder) {
          newFolderPromise = (function(_this) {
            return function(iItem, iMetadata) {
              return new Promise(function(resolve, reject) {
                if (iItem.children != null) {
                  iMetadata.providerData.children = _this._convertJSONToMetadataTree(iItem.children, iMetadata);
                  return resolve(iMetadata);
                } else if (iItem.url != null) {
                  return $.ajax({
                    dataType: 'json',
                    url: iItem.url,
                    success: function(iResponse) {
                      iMetadata.providerData.children = _this._convertJSONToMetadataTree(iResponse, iMetadata);
                      if (_this.options.alphabetize || iItem.alphabetize) {
                        iMetadata.providerData.children.sort(function(iMeta1, iMeta2) {
                          if (iMeta1.name < iMeta2.name) {
                            return -1;
                          }
                          if (iMeta1.name > iMeta2.name) {
                            return 1;
                          }
                          return 0;
                        });
                      }
                      return resolve(iMetadata);
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                      var errorMetadata;
                      errorMetadata = _this._createErrorMetadata(iMetadata);
                      iMetadata.providerData.children = [errorMetadata];
                      return resolve(iMetadata);
                    }
                  });
                }
              });
            };
          })(this);
          this.promises.push(newFolderPromise(item, metadata));
        }
        tree.push(metadata);
      }
    } else {
      for (filename in json) {
        if (!hasProp.call(json, filename)) continue;
        itemContent = json[filename];
        type = isString(itemContent) ? CloudMetadata.File : CloudMetadata.Folder;
        metadata = new CloudMetadata({
          name: filename,
          type: type,
          content: cloudContentFactory.createEnvelopedCloudContent(itemContent),
          parent: parent,
          provider: this,
          providerData: {
            children: null
          }
        });
        if (type === CloudMetadata.Folder) {
          metadata.providerData.children = this._convertJSONToMetadataTree(itemContent, metadata);
        }
        tree.push(metadata);
      }
    }
    return tree;
  };

  ReadOnlyProvider.prototype._findFile = function(arr, filename) {
    var foundChild, i, item, len, ref, ref1;
    for (i = 0, len = arr.length; i < len; i++) {
      item = arr[i];
      if (item.type === CloudMetadata.File) {
        if ((item != null ? item.name : void 0) === filename) {
          return item;
        }
      } else if ((ref = item.providerData) != null ? (ref1 = ref.children) != null ? ref1.length : void 0 : void 0) {
        foundChild = this._findFile(item.providerData.children, filename);
        if (foundChild != null) {
          return foundChild;
        }
      }
    }
    return null;
  };

  ReadOnlyProvider.prototype._createErrorMetadata = function(iParent) {
    return new CloudMetadata({
      name: tr("~FILE_DIALOG.LOAD_FOLDER_ERROR"),
      type: CloudMetadata.Label,
      content: "",
      parent: iParent,
      provider: this,
      providerData: {
        children: null
      }
    });
  };

  return ReadOnlyProvider;

})(ProviderInterface);

module.exports = ReadOnlyProvider;


},{"../utils/is-array":71,"../utils/is-string":72,"../utils/translate":79,"./provider-interface":65}],67:[function(require,module,exports){
var CloudMetadata, ProviderInterface, URLProvider, cloudContentFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ProviderInterface = (require('./provider-interface')).ProviderInterface;

cloudContentFactory = (require('./provider-interface')).cloudContentFactory;

CloudMetadata = (require('./provider-interface')).CloudMetadata;

URLProvider = (function(superClass) {
  extend(URLProvider, superClass);

  function URLProvider(options, client) {
    this.options = options != null ? options : {};
    this.client = client;
    URLProvider.__super__.constructor.call(this, {
      capabilities: {
        save: false,
        resave: false,
        "export": false,
        load: false,
        list: false,
        remove: false,
        rename: false,
        close: false
      }
    });
  }

  URLProvider.prototype.canOpenSaved = function() {
    return false;
  };

  URLProvider.prototype.openFileFromUrl = function(url, callback) {
    var metadata;
    metadata = new CloudMetadata({
      type: CloudMetadata.File,
      url: url,
      parent: null,
      provider: this
    });
    return $.ajax({
      dataType: 'json',
      url: metadata.url,
      success: function(data) {
        return callback(null, cloudContentFactory.createEnvelopedCloudContent(data), metadata);
      },
      error: function() {
        return callback("Unable to load document from '" + metadata.url + "'");
      }
    });
  };

  return URLProvider;

})(ProviderInterface);

module.exports = URLProvider;


},{"./provider-interface":65}],68:[function(require,module,exports){
var CloudFileManagerUI, CloudFileManagerUIEvent, CloudFileManagerUIMenu, isString, tr;

tr = require('./utils/translate');

isString = require('./utils/is-string');

CloudFileManagerUIEvent = (function() {
  function CloudFileManagerUIEvent(type, data1) {
    this.type = type;
    this.data = data1 != null ? data1 : {};
  }

  return CloudFileManagerUIEvent;

})();

CloudFileManagerUIMenu = (function() {
  CloudFileManagerUIMenu.DefaultMenu = ['newFileDialog', 'openFileDialog', 'revertSubMenu', 'separator', 'save', 'createCopy', 'shareSubMenu', 'renameDialog'];

  function CloudFileManagerUIMenu(options, client) {
    this.options = options;
    this.items = this.parseMenuItems(options.menu, client);
  }

  CloudFileManagerUIMenu.prototype.parseMenuItems = function(menuItems, client) {
    var getItems, i, item, items, j, len, menuItem, names, ref, setAction, setEnabled, subMenus;
    setAction = function(action) {
      var ref;
      return ((ref = client[action]) != null ? ref.bind(client) : void 0) || (function() {
        return client.alert("No " + action + " action is available in the client");
      });
    };
    setEnabled = function(action) {
      switch (action) {
        case 'revertSubMenu':
          return function() {
            return ((client.state.openedContent != null) && (client.state.metadata != null)) || client.canEditShared();
          };
        case 'revertToLastOpenedDialog':
          return function() {
            return (client.state.openedContent != null) && (client.state.metadata != null);
          };
        case 'shareGetLink':
        case 'shareSubMenu':
          return function() {
            return client.state.shareProvider != null;
          };
        case 'revertToSharedDialog':
          return function() {
            return client.isShared();
          };
        case 'shareUpdate':
          return function() {
            return client.canEditShared();
          };
        default:
          return true;
      }
    };
    getItems = (function(_this) {
      return function(subMenuItems) {
        if (subMenuItems) {
          return _this.parseMenuItems(subMenuItems, client);
        } else {
          return null;
        }
      };
    })(this);
    names = {
      newFileDialog: tr("~MENU.NEW"),
      openFileDialog: tr("~MENU.OPEN"),
      closeFileDialog: tr("~MENU.CLOSE"),
      revertToLastOpenedDialog: tr("~MENU.REVERT_TO_LAST_OPENED"),
      revertToSharedDialog: tr("~MENU.REVERT_TO_SHARED_VIEW"),
      save: tr("~MENU.SAVE"),
      saveFileAsDialog: tr("~MENU.SAVE_AS"),
      saveSecondaryFileAsDialog: tr("~MENU.EXPORT_AS"),
      createCopy: tr("~MENU.CREATE_COPY"),
      shareGetLink: tr("~MENU.SHARE_GET_LINK"),
      shareUpdate: tr("~MENU.SHARE_UPDATE"),
      downloadDialog: tr("~MENU.DOWNLOAD"),
      renameDialog: tr("~MENU.RENAME"),
      revertSubMenu: tr("~MENU.REVERT_TO"),
      shareSubMenu: tr("~MENU.SHARE")
    };
    subMenus = {
      revertSubMenu: ['revertToLastOpenedDialog', 'revertToSharedDialog'],
      shareSubMenu: ['shareGetLink', 'shareUpdate']
    };
    items = [];
    for (i = j = 0, len = menuItems.length; j < len; i = ++j) {
      item = menuItems[i];
      if (item === 'separator') {
        menuItem = {
          key: "seperator" + i,
          separator: true
        };
      } else if (isString(item)) {
        menuItem = {
          key: item,
          name: ((ref = this.options.menuNames) != null ? ref[item] : void 0) || names[item] || ("Unknown item: " + item),
          enabled: setEnabled(item),
          items: getItems(subMenus[item]),
          action: setAction(item)
        };
      } else {
        menuItem = item;
        if (isString(item.action)) {
          menuItem.key = item.action;
          menuItem.enabled = setEnabled(item.action);
          menuItem.action = setAction(item.action);
        } else {
          menuItem.enabled || (menuItem.enabled = true);
        }
        if (item.items) {
          menuItem.items = getItems(item.items);
        }
      }
      items.push(menuItem);
    }
    return items;
  };

  return CloudFileManagerUIMenu;

})();

CloudFileManagerUI = (function() {
  function CloudFileManagerUI(client1) {
    this.client = client1;
    this.menu = null;
    this.listenerCallbacks = [];
  }

  CloudFileManagerUI.prototype.init = function(options) {
    options = options || {};
    if (options.menu !== null) {
      if (typeof options.menu === 'undefined') {
        options.menu = CloudFileManagerUIMenu.DefaultMenu;
      }
      return this.menu = new CloudFileManagerUIMenu(options, this.client);
    }
  };

  CloudFileManagerUI.prototype.listen = function(callback) {
    return this.listenerCallbacks.push(callback);
  };

  CloudFileManagerUI.prototype.listenerCallback = function(evt) {
    var callback, j, len, ref, results;
    ref = this.listenerCallbacks;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      callback = ref[j];
      results.push(callback(evt));
    }
    return results;
  };

  CloudFileManagerUI.prototype.appendMenuItem = function(item) {
    return this.listenerCallback(new CloudFileManagerUIEvent('appendMenuItem', item));
  };

  CloudFileManagerUI.prototype.prependMenuItem = function(item) {
    return this.listenerCallback(new CloudFileManagerUIEvent('prependMenuItem', item));
  };

  CloudFileManagerUI.prototype.replaceMenuItem = function(key, item) {
    return this.listenerCallback(new CloudFileManagerUIEvent('replaceMenuItem', {
      key: key,
      item: item
    }));
  };

  CloudFileManagerUI.prototype.insertMenuItemBefore = function(key, item) {
    return this.listenerCallback(new CloudFileManagerUIEvent('insertMenuItemBefore', {
      key: key,
      item: item
    }));
  };

  CloudFileManagerUI.prototype.insertMenuItemAfter = function(key, item) {
    return this.listenerCallback(new CloudFileManagerUIEvent('insertMenuItemAfter', {
      key: key,
      item: item
    }));
  };

  CloudFileManagerUI.prototype.setMenuBarInfo = function(info) {
    return this.listenerCallback(new CloudFileManagerUIEvent('setMenuBarInfo', info));
  };

  CloudFileManagerUI.prototype.saveFileDialog = function(callback) {
    return this._showProviderDialog('saveFile', tr('~DIALOG.SAVE'), callback);
  };

  CloudFileManagerUI.prototype.saveFileAsDialog = function(callback) {
    return this._showProviderDialog('saveFileAs', tr('~DIALOG.SAVE_AS'), callback);
  };

  CloudFileManagerUI.prototype.saveSecondaryFileAsDialog = function(data, callback) {
    return this._showProviderDialog('saveSecondaryFileAs', tr('~DIALOG.EXPORT_AS'), callback, data);
  };

  CloudFileManagerUI.prototype.openFileDialog = function(callback) {
    return this._showProviderDialog('openFile', tr('~DIALOG.OPEN'), callback);
  };

  CloudFileManagerUI.prototype.importDataDialog = function(callback) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showImportDialog', {
      callback: callback
    }));
  };

  CloudFileManagerUI.prototype.downloadDialog = function(filename, content, callback) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showDownloadDialog', {
      filename: filename,
      content: content,
      callback: callback
    }));
  };

  CloudFileManagerUI.prototype.renameDialog = function(filename, callback) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showRenameDialog', {
      filename: filename,
      callback: callback
    }));
  };

  CloudFileManagerUI.prototype.shareDialog = function(client, enableLaraSharing) {
    if (enableLaraSharing == null) {
      enableLaraSharing = false;
    }
    return this.listenerCallback(new CloudFileManagerUIEvent('showShareDialog', {
      client: client,
      enableLaraSharing: enableLaraSharing
    }));
  };

  CloudFileManagerUI.prototype.showBlockingModal = function(modalProps) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showBlockingModal', modalProps));
  };

  CloudFileManagerUI.prototype.hideBlockingModal = function() {
    return this.listenerCallback(new CloudFileManagerUIEvent('hideBlockingModal'));
  };

  CloudFileManagerUI.prototype.editInitialFilename = function() {
    return this.listenerCallback(new CloudFileManagerUIEvent('editInitialFilename'));
  };

  CloudFileManagerUI.prototype.alertDialog = function(message, title, callback) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showAlertDialog', {
      title: title,
      message: message,
      callback: callback
    }));
  };

  CloudFileManagerUI.prototype.confirmDialog = function(params) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showConfirmDialog', params));
  };

  CloudFileManagerUI.prototype._showProviderDialog = function(action, title, callback, data) {
    return this.listenerCallback(new CloudFileManagerUIEvent('showProviderDialog', {
      action: action,
      title: title,
      callback: callback,
      data: data
    }));
  };

  return CloudFileManagerUI;

})();

module.exports = {
  CloudFileManagerUIEvent: CloudFileManagerUIEvent,
  CloudFileManagerUI: CloudFileManagerUI,
  CloudFileManagerUIMenu: CloudFileManagerUIMenu
};


},{"./utils/is-string":72,"./utils/translate":79}],69:[function(require,module,exports){
module.exports = function(param) {
  var ret;
  ret = null;
  location.hash.substr(1).split("&").some(function(pair) {
    var key, value;
    key = pair.split("=")[0];
    if (key === param) {
      value = pair.split("=")[1];
      while (true) {
        value = decodeURIComponent(value);
        if (!/%20|%25/.test(value)) {
          break;
        }
      }
      return ret = value;
    }
  });
  return ret;
};


},{}],70:[function(require,module,exports){
module.exports = function(param) {
  var regex, regexS, results;
  param = param.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  regexS = "[\\?&]" + param + "=([^&#]*)";
  regex = new RegExp(regexS);
  results = regex.exec(window.location.href);
  if ((results != null ? results.length : void 0) > 1) {
    return decodeURIComponent(results[1]);
  } else {
    return null;
  }
};


},{}],71:[function(require,module,exports){
module.exports = function(value) {
  return Array.isArray(value || {}.toString.call(value === '[object Array]'));
};


},{}],72:[function(require,module,exports){
module.exports = function(param) {
  return Object.prototype.toString.call(param) === '[object String]';
};


},{}],73:[function(require,module,exports){
module.exports={
    "~MENUBAR.UNTITLED_DOCUMENT": "Dokument1",
    "~MENU.NEW": "Neu",
    "~MENU.OPEN": "Öffnen",
    "~MENU.CLOSE": "Schließen",
    "~MENU.IMPORT_DATA": "Daten importieren ...",
    "~MENU.SAVE": "Speichern",
    "~MENU.SAVE_AS": "Speichern unter ...",
    "~MENU.EXPORT_AS": "Datei exportieren als ...",
    "~MENU.CREATE_COPY": "Kopie erstellen",
    "~MENU.SHARE": "Teilen ...",
    "~MENU.SHARE_GET_LINK": "Link erhalten für geteilte Ansicht",
    "~MENU.SHARE_UPDATE": "Geteilte Ansicht aktualisieren",
    "~MENU.DOWNLOAD": "Download",
    "~MENU.RENAME": "Umbenennen",
    "~MENU.REVERT_TO": "Zurückkehren ...",
    "~MENU.REVERT_TO_LAST_OPENED": "Kürzlich geöffnete Fassung",
    "~MENU.REVERT_TO_SHARED_VIEW": "Geteilte Ansicht",
    "~DIALOG.SAVE": "Speichern",
    "~DIALOG.SAVE_AS": "Speichern unter ...",
    "~DIALOG.EXPORT_AS": "Datei exportieren als ...",
    "~DIALOG.CREATE_COPY": "Kopie erstellen ...",
    "~DIALOG.OPEN": "Öffnen",
    "~DIALOG.DOWNLOAD": "Download",
    "~DIALOG.RENAME": "Umbenennen",
    "~DIALOG.SHARED": "Teilen",
    "~DIALOG.IMPORT_DATA": "Daten importieren",
    "~PROVIDER.LOCAL_STORAGE": "Local Storage",
    "~PROVIDER.READ_ONLY": "Leseansicht",
    "~PROVIDER.GOOGLE_DRIVE": "Google Drive",
    "~PROVIDER.DOCUMENT_STORE": "Concord Cloud",
    "~PROVIDER.LOCAL_FILE": "Lokale Datei",
    "~FILE_STATUS.SAVING": "Speichern",
    "~FILE_STATUS.SAVED": "Gespeichert",
    "~FILE_STATUS.SAVED_TO_PROVIDER": "All changes saved to %{providerName}",
    "~FILE_STATUS.UNSAVED": "Ungespeichert",
    "~FILE_DIALOG.FILENAME": "Dateiname",
    "~FILE_DIALOG.OPEN": "Öffnen",
    "~FILE_DIALOG.SAVE": "Speichern",
    "~FILE_DIALOG.CANCEL": "Abbrechen",
    "~FILE_DIALOG.REMOVE": "Löschen",
    "~FILE_DIALOG.REMOVE_CONFIRM": "Sind Sie sicher, dass %{filename} gelöscht werden soll?",
    "~FILE_DIALOG.REMOVED_TITLE": "Datei löschen",
    "~FILE_DIALOG.REMOVED_MESSAGE": "%{filename} wurde gelöscht",
    "~FILE_DIALOG.LOADING": "Laden...",
    "~FILE_DIALOG.LOAD_FOLDER_ERROR": "*** Fehler beim Laden der Ordnerinhalte ***",
    "~FILE_DIALOG.DOWNLOAD": "Download",
    "~FILE_DIALOG.DOWNLOAD_NOTE": "Achtung: Bei Safari könnte diese Datei \"unbekannt\" heißen und sollte manuell mit der .codap Erweiterung versehen werden.",
    "~DOWNLOAD_DIALOG.DOWNLOAD": "Download",
    "~DOWNLOAD_DIALOG.CANCEL": "Abbrechen",
    "~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO": "Include sharing information in downloaded file",
    "~RENAME_DIALOG.RENAME": "Umbenennen",
    "~RENAME_DIALOG.CANCEL": "Abbrechen",
    "~SHARE_DIALOG.COPY": "Kopieren",
    "~SHARE_DIALOG.VIEW": "View",
    "~SHARE_DIALOG.CLOSE": "Schließen",
    "~SHARE_DIALOG.COPY_SUCCESS": "The info has been copied to the clipboard.",
    "~SHARE_DIALOG.COPY_ERROR": "Sorry, the info was not able to be copied to the clipboard.",
    "~SHARE_DIALOG.COPY_TITLE": "Copy Result",
    "~SHARE_DIALOG.LONGEVITY_WARNING": "The shared copy of this document will be retained until it has not been accessed for over a year.",
    "~SHARE_UPDATE.TITLE": "Shared View Updated",
    "~SHARE_UPDATE.MESSAGE": "The shared view was updated successfully.",
    "~CONFIRM.OPEN_FILE": "You have unsaved changes. Are you sure you want to open a new document?",
    "~CONFIRM.NEW_FILE": "You have unsaved changes. Are you sure you want to create a new document?",
    "~CONFIRM.AUTHORIZE_OPEN": "Authorization is required to open the document. Would you like to proceed with authorization?",
    "~CONFIRM.AUTHORIZE_SAVE": "Authorization is required to save the document. Would you like to proceed with authorization?",
    "~CONFIRM.CLOSE_FILE": "You have unsaved changes. Are you sure you want to close the document?",
    "~CONFIRM.REVERT_TO_LAST_OPENED": "Are you sure you want to revert the document to its most recently opened state?",
    "~CONFIRM.REVERT_TO_SHARED_VIEW": "Are you sure you want to revert the document to its most recently shared state?",
    "~CONFIRM_DIALOG.TITLE": "Are you sure?",
    "~CONFIRM_DIALOG.YES": "Ja",
    "~CONFIRM_DIALOG.NO": "Nein",
    "~LOCAL_FILE_DIALOG.DROP_FILE_HERE": "Drop file here or click here to select a file.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED": "Sorry, you can choose only one file to open.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED": "Sorry, you can't drop more than one file.",
    "~IMPORT.LOCAL_FILE": "Local File",
    "~IMPORT.URL": "URL",
    "~IMPORT_URL.MULTIPLE_URLS_DROPPED": "Sorry, you can choose only one url to open.",
    "~IMPORT_URL.PLEASE_ENTER_URL": "Please enter a url to import.",
    "~URL_TAB.DROP_URL_HERE": "Drop URL here or enter URL below",
    "~URL_TAB.IMPORT": "Import",
    "~CLIENT_ERROR.TITLE": "Error",
    "~ALERT_DIALOG.TITLE": "Alert",
    "~ALERT_DIALOG.CLOSE": "Close",
    "~ALERT.NO_PROVIDER": "Could not open the specified document because an appropriate provider is not available.",
    "~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL": "Login to Google",
    "~GOOGLE_DRIVE.CONNECTING_MESSAGE": "Connecting to Google...",
    "~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID": "Missing required clientId in googleDrive provider options",
    "~DOCSTORE.LOAD_403_ERROR": "You don't have permission to load %{filename}.<br><br>If you are using some else's shared document it may have been unshared.",
    "~DOCSTORE.LOAD_SHARED_404_ERROR": "Unable to load the requested shared document.<br><br>Perhaps the file was not shared?",
    "~DOCSTORE.LOAD_404_ERROR": "Unable to load %{filename}",
    "~DOCSTORE.SAVE_403_ERROR": "You don't have permission to save '%{filename}'.<br><br>You may need to log in again.",
    "~DOCSTORE.SAVE_DUPLICATE_ERROR": "Unable to create %{filename}.  File already exists.",
    "~DOCSTORE.SAVE_ERROR_WITH_MESSAGE": "Unable to save %{filename}: [%{message}]",
    "~DOCSTORE.SAVE_ERROR": "Unable to save %{filename}",
    "~DOCSTORE.REMOVE_403_ERROR": "You don't have permission to remove %{filename}.<br><br>You may need to log in again.",
    "~DOCSTORE.REMOVE_ERROR": "Unable to remove %{filename}",
    "~DOCSTORE.RENAME_403_ERROR": "You don't have permission to rename %{filename}.<br><br>You may need to log in again.",
    "~DOCSTORE.RENAME_ERROR": "Unable to rename %{filename}",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE": "Concord Cloud Alert",
    "~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE": "Concord Cloud Alert",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE": "Save Elsewhere",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER": "I'll do it later",
    "~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE": "The Concord Cloud has been shut down!",
    "~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE": "Please save your documents to another location."
}

},{}],74:[function(require,module,exports){
module.exports={
  "~MENUBAR.UNTITLED_DOCUMENT": "Untitled Document",

  "~MENU.NEW": "New",
  "~MENU.OPEN": "Open ...",
  "~MENU.CLOSE": "Close",
  "~MENU.IMPORT_DATA": "Import data...",
  "~MENU.SAVE": "Save",
  "~MENU.SAVE_AS": "Save As ...",
  "~MENU.EXPORT_AS": "Export File As ...",
  "~MENU.CREATE_COPY": "Create a copy",
  "~MENU.SHARE": "Share...",
  "~MENU.SHARE_GET_LINK": "Get link to shared view",
  "~MENU.SHARE_UPDATE": "Update shared view",
  "~MENU.DOWNLOAD": "Download",
  "~MENU.RENAME": "Rename",
  "~MENU.REVERT_TO": "Revert to...",
  "~MENU.REVERT_TO_LAST_OPENED": "Recently opened state",
  "~MENU.REVERT_TO_SHARED_VIEW": "Shared view",

  "~DIALOG.SAVE": "Save",
  "~DIALOG.SAVE_AS": "Save As ...",
  "~DIALOG.EXPORT_AS": "Export File As ...",
  "~DIALOG.CREATE_COPY": "Create A Copy ...",
  "~DIALOG.OPEN": "Open",
  "~DIALOG.DOWNLOAD": "Download",
  "~DIALOG.RENAME": "Rename",
  "~DIALOG.SHARED": "Share",
  "~DIALOG.IMPORT_DATA": "Import Data",

  "~PROVIDER.LOCAL_STORAGE": "Local Storage",
  "~PROVIDER.READ_ONLY": "Read Only",
  "~PROVIDER.GOOGLE_DRIVE": "Google Drive",
  "~PROVIDER.DOCUMENT_STORE": "Concord Cloud",
  "~PROVIDER.LOCAL_FILE": "Local File",

  "~FILE_STATUS.SAVING": "Saving...",
  "~FILE_STATUS.SAVED": "All changes saved",
  "~FILE_STATUS.SAVED_TO_PROVIDER": "All changes saved to %{providerName}",
  "~FILE_STATUS.UNSAVED": "Unsaved",

  "~FILE_DIALOG.FILENAME": "Filename",
  "~FILE_DIALOG.OPEN": "Open",
  "~FILE_DIALOG.SAVE": "Save",
  "~FILE_DIALOG.CANCEL": "Cancel",
  "~FILE_DIALOG.REMOVE": "Delete",
  "~FILE_DIALOG.REMOVE_CONFIRM": "Are you sure you want to delete %{filename}?",
  "~FILE_DIALOG.REMOVED_TITLE": "Deleted File",
  "~FILE_DIALOG.REMOVED_MESSAGE": "%{filename} was deleted",
  "~FILE_DIALOG.LOADING": "Loading...",
  "~FILE_DIALOG.LOAD_FOLDER_ERROR": "*** Error loading folder contents ***",
  "~FILE_DIALOG.DOWNLOAD": "Download",
  "~FILE_DIALOG.DOWNLOAD_NOTE": "NOTE: On Safari file may be \"Unknown\" and should be manually renamed with a .codap extension.",


  "~DOWNLOAD_DIALOG.DOWNLOAD": "Download",
  "~DOWNLOAD_DIALOG.CANCEL": "Cancel",
  "~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO": "Include sharing information in downloaded file",

  "~RENAME_DIALOG.RENAME": "Rename",
  "~RENAME_DIALOG.CANCEL": "Cancel",

  "~SHARE_DIALOG.COPY": "Copy",
  "~SHARE_DIALOG.VIEW": "View",
  "~SHARE_DIALOG.CLOSE": "Close",
  "~SHARE_DIALOG.COPY_SUCCESS": "The info has been copied to the clipboard.",
  "~SHARE_DIALOG.COPY_ERROR": "Sorry, the info was not able to be copied to the clipboard.",
  "~SHARE_DIALOG.COPY_TITLE": "Copy Result",
  "~SHARE_DIALOG.LONGEVITY_WARNING": "The shared copy of this document will be retained until it has not been accessed for over a year.",

  "~SHARE_UPDATE.TITLE": "Shared View Updated",
  "~SHARE_UPDATE.MESSAGE": "The shared view was updated successfully.",

  "~CONFIRM.OPEN_FILE": "You have unsaved changes. Are you sure you want to open a new document?",
  "~CONFIRM.NEW_FILE": "You have unsaved changes. Are you sure you want to create a new document?",
  "~CONFIRM.AUTHORIZE_OPEN": "Authorization is required to open the document. Would you like to proceed with authorization?",
  "~CONFIRM.AUTHORIZE_SAVE": "Authorization is required to save the document. Would you like to proceed with authorization?",
  "~CONFIRM.CLOSE_FILE": "You have unsaved changes. Are you sure you want to close the document?",
  "~CONFIRM.REVERT_TO_LAST_OPENED": "Are you sure you want to revert the document to its most recently opened state?",
  "~CONFIRM.REVERT_TO_SHARED_VIEW": "Are you sure you want to revert the document to its most recently shared state?",

  "~CONFIRM_DIALOG.TITLE": "Are you sure?",
  "~CONFIRM_DIALOG.YES": "Yes",
  "~CONFIRM_DIALOG.NO": "No",

  "~LOCAL_FILE_DIALOG.DROP_FILE_HERE": "Drop file here or click here to select a file.",
  "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED": "Sorry, you can choose only one file to open.",
  "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED": "Sorry, you can't drop more than one file.",

  "~IMPORT.LOCAL_FILE": "Local File",
  "~IMPORT.URL": "URL",

  "~IMPORT_URL.MULTIPLE_URLS_DROPPED": "Sorry, you can choose only one url to open.",
  "~IMPORT_URL.PLEASE_ENTER_URL": "Please enter a url to import.",

  "~URL_TAB.DROP_URL_HERE": "Drop URL here or enter URL below",
  "~URL_TAB.IMPORT": "Import",

  "~CLIENT_ERROR.TITLE": "Error",

  "~ALERT_DIALOG.TITLE": "Alert",
  "~ALERT_DIALOG.CLOSE": "Close",

  "~ALERT.NO_PROVIDER": "Could not open the specified document because an appropriate provider is not available.",

  "~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL": "Login to Google",
  "~GOOGLE_DRIVE.CONNECTING_MESSAGE": "Connecting to Google...",
  "~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID": "Missing required clientId in googleDrive provider options",

  "~DOCSTORE.LOAD_403_ERROR": "You don't have permission to load %{filename}.<br><br>If you are using some else's shared document it may have been unshared.",
  "~DOCSTORE.LOAD_SHARED_404_ERROR": "Unable to load the requested shared document.<br><br>Perhaps the file was not shared?",
  "~DOCSTORE.LOAD_404_ERROR": "Unable to load %{filename}",
  "~DOCSTORE.SAVE_403_ERROR": "You don't have permission to save '%{filename}'.<br><br>You may need to log in again.",
  "~DOCSTORE.SAVE_DUPLICATE_ERROR": "Unable to create %{filename}.  File already exists.",
  "~DOCSTORE.SAVE_ERROR_WITH_MESSAGE": "Unable to save %{filename}: [%{message}]",
  "~DOCSTORE.SAVE_ERROR": "Unable to save %{filename}",
  "~DOCSTORE.REMOVE_403_ERROR": "You don't have permission to remove %{filename}.<br><br>You may need to log in again.",
  "~DOCSTORE.REMOVE_ERROR": "Unable to remove %{filename}",
  "~DOCSTORE.RENAME_403_ERROR": "You don't have permission to rename %{filename}.<br><br>You may need to log in again.",
  "~DOCSTORE.RENAME_ERROR": "Unable to rename %{filename}",

  "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE": "Concord Cloud Alert",
  "~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE": "Concord Cloud Alert",
  "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE": "Save Elsewhere",
  "~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER": "I'll do it later",
  "~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE": "The Concord Cloud has been shut down!",
  "~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE": "Please save your documents to another location."
}


},{}],75:[function(require,module,exports){
module.exports={
    "~MENUBAR.UNTITLED_DOCUMENT": "Documento sin título",
    "~MENU.NEW": "Nuevo",
    "~MENU.OPEN": "Abrir ...",
    "~MENU.CLOSE": "Cerrar",
    "~MENU.IMPORT_DATA": "Importar datos...",
    "~MENU.SAVE": "Guardar",
    "~MENU.SAVE_AS": "Guardar como ...",
    "~MENU.EXPORT_AS": "Exportar archivo como ...",
    "~MENU.CREATE_COPY": "Crear una copia",
    "~MENU.SHARE": "Compartir...",
    "~MENU.SHARE_GET_LINK": "Obtener enlace de la vista compartida",
    "~MENU.SHARE_UPDATE": "Actualizar vista compartida",
    "~MENU.DOWNLOAD": "Bajar",
    "~MENU.RENAME": "Renombrar",
    "~MENU.REVERT_TO": "Revertir a...",
    "~MENU.REVERT_TO_LAST_OPENED": "Estado recientemente abierto",
    "~MENU.REVERT_TO_SHARED_VIEW": "Vista compartida",
    "~DIALOG.SAVE": "Guardar",
    "~DIALOG.SAVE_AS": "Guardar como ...",
    "~DIALOG.EXPORT_AS": "Exportar archivo como ...",
    "~DIALOG.CREATE_COPY": "Crear una copia ...",
    "~DIALOG.OPEN": "Abrir",
    "~DIALOG.DOWNLOAD": "Bajar",
    "~DIALOG.RENAME": "Renombrar",
    "~DIALOG.SHARED": "Compartir",
    "~DIALOG.IMPORT_DATA": "Importar datos",
    "~PROVIDER.LOCAL_STORAGE": "Almacenamiento local",
    "~PROVIDER.READ_ONLY": "Sólo lectura",
    "~PROVIDER.GOOGLE_DRIVE": "Google Drive",
    "~PROVIDER.DOCUMENT_STORE": "Concord Cloud",
    "~PROVIDER.LOCAL_FILE": "Archivo local",
    "~FILE_STATUS.SAVING": "Guardando...",
    "~FILE_STATUS.SAVED": "Se guardaron todos los cambios",
    "~FILE_STATUS.SAVED_TO_PROVIDER": "Se guardaron todos los cambios en %{providerName}",
    "~FILE_STATUS.UNSAVED": "Sin guardar",
    "~FILE_DIALOG.FILENAME": "Nombre de archivo",
    "~FILE_DIALOG.OPEN": "Abrir",
    "~FILE_DIALOG.SAVE": "Guardar",
    "~FILE_DIALOG.CANCEL": "Cancelar",
    "~FILE_DIALOG.REMOVE": "Eliminar",
    "~FILE_DIALOG.REMOVE_CONFIRM": "¿Confirma eliminar el archivo %{filename}?",
    "~FILE_DIALOG.REMOVED_TITLE": "Archivo eliminado",
    "~FILE_DIALOG.REMOVED_MESSAGE": "%{filename} fue eliminado",
    "~FILE_DIALOG.LOADING": "Cargando...",
    "~FILE_DIALOG.LOAD_FOLDER_ERROR": "*** Error al cargar contenido de la carpeta ***",
    "~FILE_DIALOG.DOWNLOAD": "Bajar",
    "~FILE_DIALOG.DOWNLOAD_NOTE": "NOTA: En Safari el archivo puede ser \"Desconocido\" y deben ser renombrado de manera manual con extensión .codap",
    "~DOWNLOAD_DIALOG.DOWNLOAD": "Bajar",
    "~DOWNLOAD_DIALOG.CANCEL": "Cancelar",
    "~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO": "Incluir información para compartir en archivo bajado",
    "~RENAME_DIALOG.RENAME": "Renombrar",
    "~RENAME_DIALOG.CANCEL": "Cancelar",
    "~SHARE_DIALOG.COPY": "Copiar",
    "~SHARE_DIALOG.VIEW": "Ver",
    "~SHARE_DIALOG.CLOSE": "Cerrar",
    "~SHARE_DIALOG.COPY_SUCCESS": "La información ha sido copiada al portapapeles",
    "~SHARE_DIALOG.COPY_ERROR": "Disculpas, la información no pudo copiarse al portapapeles",
    "~SHARE_DIALOG.COPY_TITLE": "Resultado de la copia",
    "~SHARE_DIALOG.LONGEVITY_WARNING": "La copia compartida de este documento será retenida hasta que no sea accedida a lo largo de un año.",
    "~SHARE_UPDATE.TITLE": "Se actualizó la vista compartida",
    "~SHARE_UPDATE.MESSAGE": "La vista compartida fue actualizada exitosamente.",
    "~CONFIRM.OPEN_FILE": "Hay cambios sin guardar. ¿Desea igual abrir un nuevo documento?",
    "~CONFIRM.NEW_FILE": "Hay cambios sin guardar. ¿Desea igual crear un nuevo documento?",
    "~CONFIRM.AUTHORIZE_OPEN": "Se requiere autorización para abrir el documento. ¿Desea proceder con la autorización?",
    "~CONFIRM.AUTHORIZE_SAVE": "Se requiere autorización para guardar el documento. ¿Desea proceder con la autorización?",
    "~CONFIRM.CLOSE_FILE": "Hay cambios sin guardar. ¿Desea igual cerrar el documento?",
    "~CONFIRM.REVERT_TO_LAST_OPENED": "¿Confirma que quiere revertir el documento a su estado abierto más reciente?",
    "~CONFIRM.REVERT_TO_SHARED_VIEW": "¿Confirma que quiere revertir el documento a su estado compartido más reciente?",
    "~CONFIRM_DIALOG.TITLE": "¿Confirma?",
    "~CONFIRM_DIALOG.YES": "Sí",
    "~CONFIRM_DIALOG.NO": "No",
    "~LOCAL_FILE_DIALOG.DROP_FILE_HERE": "Arrastrar archivo acá o clic acá para seleccionar un archivo.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED": "Disculpas, sólo se puede elegir un archivo para abrir.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED": "Disculpas, no se pueden soltar más de un archivo.",
    "~IMPORT.LOCAL_FILE": "Archivo local",
    "~IMPORT.URL": "URL",
    "~IMPORT_URL.MULTIPLE_URLS_DROPPED": "Disculpas, sólo se puede elegir una URL para abrir",
    "~IMPORT_URL.PLEASE_ENTER_URL": "Por favor ingresar una URL para importar.",
    "~URL_TAB.DROP_URL_HERE": "Arrastrar URL acá or ingresar URL debajo",
    "~URL_TAB.IMPORT": "Importar",
    "~CLIENT_ERROR.TITLE": "Error",
    "~ALERT_DIALOG.TITLE": "Alerta",
    "~ALERT_DIALOG.CLOSE": "Cerrar",
    "~ALERT.NO_PROVIDER": "No se pudo abrir el documento especificado porque no hay disponible un proveedor apropiado.",
    "~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL": "Loguearse en Google",
    "~GOOGLE_DRIVE.CONNECTING_MESSAGE": "Conectando con Google...",
    "~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID": "Falta el id de cliente requerido en las opciones de proveedor de GoogleDrive",
    "~DOCSTORE.LOAD_403_ERROR": "No tiene permiso para cargar el archivo %{filename}.<br><br>Si está usando un documento compartido por otro quizás no esté más compartido.",
    "~DOCSTORE.LOAD_SHARED_404_ERROR": "No se pudo cargar el documento compartido requerido.<br><br>Quizás el archivo no haya sido compartido de modo adecuado",
    "~DOCSTORE.LOAD_404_ERROR": "No se pudo cargar el archivo %{filename}",
    "~DOCSTORE.SAVE_403_ERROR": "No tiene permiso para guardar el archivo '%{filename}'.<br><br>Necesita loguearse de nuevo.\n",
    "~DOCSTORE.SAVE_DUPLICATE_ERROR": "No se pudo crear %{filename}. Ya existe un archivo con ese nombre.\n",
    "~DOCSTORE.SAVE_ERROR_WITH_MESSAGE": "No se pudo guardar %{filename}: [%{message}]",
    "~DOCSTORE.SAVE_ERROR": "No se pudo guardar %{filename}",
    "~DOCSTORE.REMOVE_403_ERROR": "No tiene permiso para quitar el archivo %{filename}.<br><br>Necesita loguearse de nuevo.",
    "~DOCSTORE.REMOVE_ERROR": "No se pudo remover %{filename}",
    "~DOCSTORE.RENAME_403_ERROR": "No tiene permiso para renombrar el archivo %{filename}.<br><br>Necesita loguearse de nuevo.",
    "~DOCSTORE.RENAME_ERROR": "No se pudo renombrar %{filename}",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE": "Alerta de Concord Cloud",
    "~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE": "Alerta de Concord Cloud",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE": "Guardar en cualquier lugar",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER": "Lo haré más tarde",
    "~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE": "Concord Cloud ha sido cerrado",
    "~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE": "Por favor guardar sus documentos en otra ubicación."
}

},{}],76:[function(require,module,exports){
module.exports={
    "~MENUBAR.UNTITLED_DOCUMENT": "מסמך לא שמור",
    "~MENU.NEW": "חדש",
    "~MENU.OPEN": "פתח",
    "~MENU.CLOSE": "סגור",
    "~MENU.IMPORT_DATA": "יבא נתונים",
    "~MENU.SAVE": "שמור",
    "~MENU.SAVE_AS": "שמור בשם",
    "~MENU.EXPORT_AS": "יצא קובץ",
    "~MENU.CREATE_COPY": "צור עותק",
    "~MENU.SHARE": "שתף",
    "~MENU.SHARE_GET_LINK": "קבל קישור לצפיה שיתופית",
    "~MENU.SHARE_UPDATE": "עדכן צפיה שיתופית",
    "~MENU.DOWNLOAD": "הורד",
    "~MENU.RENAME": "שנה שם",
    "~MENU.REVERT_TO": "החזר ל",
    "~MENU.REVERT_TO_LAST_OPENED": "מצב פתוח לאחרונה",
    "~MENU.REVERT_TO_SHARED_VIEW": "צפיה שיתופית",
    "~DIALOG.SAVE": "שמור",
    "~DIALOG.SAVE_AS": "שמור בשם",
    "~DIALOG.EXPORT_AS": "יצא קובץ כ",
    "~DIALOG.CREATE_COPY": "צור עותק...",
    "~DIALOG.OPEN": "פתח",
    "~DIALOG.DOWNLOAD": "הורד",
    "~DIALOG.RENAME": "שנה שם",
    "~DIALOG.SHARED": "שתף",
    "~DIALOG.IMPORT_DATA": "יבא נתונים",
    "~PROVIDER.LOCAL_STORAGE": "אחסון מקומי",
    "~PROVIDER.READ_ONLY": "קריאה בלבד",
    "~PROVIDER.GOOGLE_DRIVE": "שרת GOOGLE",
    "~PROVIDER.DOCUMENT_STORE": "ענן CONCORD",
    "~PROVIDER.LOCAL_FILE": "קובץ מקומי",
    "~FILE_STATUS.SAVING": "שומר...",
    "~FILE_STATUS.SAVED": "כל השינויים נשמרו",
    "~FILE_STATUS.SAVED_TO_PROVIDER": "כל השינויים נשמרו ל %{providerName}",
    "~FILE_STATUS.UNSAVED": "לא שמור",
    "~FILE_DIALOG.FILENAME": "שם קובץ",
    "~FILE_DIALOG.OPEN": "פתח",
    "~FILE_DIALOG.SAVE": "שמור",
    "~FILE_DIALOG.CANCEL": "בטל",
    "~FILE_DIALOG.REMOVE": "מחק",
    "~FILE_DIALOG.REMOVE_CONFIRM": "האם אתם בטוחים שברצונכם למחוק את %{filename}",
    "~FILE_DIALOG.REMOVED_TITLE": "קובץ מחוק",
    "~FILE_DIALOG.REMOVED_MESSAGE": "%{filename} נמחק",
    "~FILE_DIALOG.LOADING": "טוען...",
    "~FILE_DIALOG.LOAD_FOLDER_ERROR": "*** טעות בעת טעינת תוכן הקובץ ***",
    "~FILE_DIALOG.DOWNLOAD": "הורד",
    "~FILE_DIALOG.DOWNLOAD_NOTE": "שים לב: הקובץ נשמר כ'לא ידוע' וצריך לשנות את השם ידנית עם תוספת .CODAP",
    "~DOWNLOAD_DIALOG.DOWNLOAD": "הורד",
    "~DOWNLOAD_DIALOG.CANCEL": "בטל",
    "~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO": "צרף נתוני שיתוף בקובץ שהורד",
    "~RENAME_DIALOG.RENAME": "שנה שם",
    "~RENAME_DIALOG.CANCEL": "בטל",
    "~SHARE_DIALOG.COPY": "העתק",
    "~SHARE_DIALOG.VIEW": "צפה",
    "~SHARE_DIALOG.CLOSE": "סגור",
    "~SHARE_DIALOG.COPY_SUCCESS": "המידע הועתק ללוח",
    "~SHARE_DIALOG.COPY_ERROR": "סליחה, המידע לא ניתן להעתקה ללוח",
    "~SHARE_DIALOG.COPY_TITLE": "העתק תוצאה",
    "~SHARE_DIALOG.LONGEVITY_WARNING": "העותק השיתופי של מסמך זה ישמר עד שנה ללא שימוש",
    "~SHARE_UPDATE.TITLE": "צפיה שיתופית עודכנה",
    "~SHARE_UPDATE.MESSAGE": "הצפיה השיתופית עודכנה בהצלחה",
    "~CONFIRM.OPEN_FILE": "ישנם שינויים לא שמורים. האם אתם בטוחים שברצונכם לפתוח מסמך חדש?",
    "~CONFIRM.NEW_FILE": "ישנם שינויים לא שמורים. האם אתם בטוחים שברצונכם ליצור מסמך חדש?",
    "~CONFIRM.AUTHORIZE_OPEN": "נדרש אישור לפתיחת המסמך. להמשיך עם אישור?",
    "~CONFIRM.AUTHORIZE_SAVE": "נדרש אישור לשמירת המסמך. להמשיך עם אישור?",
    "~CONFIRM.CLOSE_FILE": "ישנם שינויים לא שמורים. לסגור את המסמך?",
    "~CONFIRM.REVERT_TO_LAST_OPENED": "בטוח שברצונכם להחזיר את המסמך למצב הפתוח האחרון?",
    "~CONFIRM.REVERT_TO_SHARED_VIEW": "בטוח שברצונכם להחזיר את המסמך למצב השיתופי האחרון?",
    "~CONFIRM_DIALOG.TITLE": "בטוח?",
    "~CONFIRM_DIALOG.YES": "כן",
    "~CONFIRM_DIALOG.NO": "לא",
    "~LOCAL_FILE_DIALOG.DROP_FILE_HERE": "שחרר קובץ כאן או הקלק לבחירת קובץ",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED": "סליחה, ניתן לבחור רק קובץ אחד לפתיחה.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED": "סליחה, לא ניתן לשחרר יותר מקובץ אחד.",
    "~IMPORT.LOCAL_FILE": "קובץ מקומי",
    "~IMPORT.URL": "URL",
    "~IMPORT_URL.MULTIPLE_URLS_DROPPED": "סליחה, ניתן לפתוח רק קישור אחד",
    "~IMPORT_URL.PLEASE_ENTER_URL": "הקלידו URL ליבוא",
    "~URL_TAB.DROP_URL_HERE": "שחרר URL פה או הקלד URL מתחת",
    "~URL_TAB.IMPORT": "יבא",
    "~CLIENT_ERROR.TITLE": "טעות",
    "~ALERT_DIALOG.TITLE": "אזהרה",
    "~ALERT_DIALOG.CLOSE": "סגור",
    "~ALERT.NO_PROVIDER": "לא ניתן לפתוח את המסמך מפני שהשרת אינו זמין",
    "~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL": "הכנס לGOOGLE",
    "~GOOGLE_DRIVE.CONNECTING_MESSAGE": "מתחבר לGOOGLE",
    "~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID": "חסרים פרטי לקוח בGOOGLE",
    "~DOCSTORE.LOAD_403_ERROR": "אין אישור לפתוח את %. אם אתם משתמשים במסמך שיתופי של מישהו אחר ייתכן שהקובץ לא נשמר.",
    "~DOCSTORE.LOAD_SHARED_404_ERROR": "לא ניתן להעלות את המסמך השיתופי המבוקש. אולי הקובץ לא שותף?",
    "~DOCSTORE.LOAD_404_ERROR": "לא ניתן להעלות את %",
    "~DOCSTORE.SAVE_403_ERROR": "אין אישור לשמירת '%{filename}'.<br><br> ייתכן שתצטרכו להכנס שוב.",
    "~DOCSTORE.SAVE_DUPLICATE_ERROR": "לא ניתן ליצור את %{filename} הקובץ כבר קיים.",
    "~DOCSTORE.SAVE_ERROR_WITH_MESSAGE": "לא ניתן לשמור את %{filename}: [%{message}]",
    "~DOCSTORE.SAVE_ERROR": "לא ניתן לשמור את %{filename}",
    "~DOCSTORE.REMOVE_403_ERROR": "אין אישור להסרת %{filename}.<br><br> יש צורך להכנס שוב.",
    "~DOCSTORE.REMOVE_ERROR": "לא ניתן להסיר את %{filename}",
    "~DOCSTORE.RENAME_403_ERROR": "אין אישור לשינוי שם %{filename}.<br><br> יש צורך להכנס שוב.",
    "~DOCSTORE.RENAME_ERROR": "לא ניתן לשנות את שם %{filename}",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE": "אזהרת ענן CONCORD",
    "~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE": "אזהרת ענן CONCORD",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE": "שמור במקום אחר",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER": "יותר מאוחר",
    "~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE": "ענן CONCORD נסגר!",
    "~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE": "שמור מסמך במיקום אחר."
}

},{}],77:[function(require,module,exports){
module.exports={
    "~MENUBAR.UNTITLED_DOCUMENT": "İsimsiz Dosya",
    "~MENU.NEW": "Yeni",
    "~MENU.OPEN": "Aç",
    "~MENU.CLOSE": "Kapat",
    "~MENU.IMPORT_DATA": "Verileri aktar...",
    "~MENU.SAVE": "Kaydet",
    "~MENU.SAVE_AS": "Farklı kaydet...",
    "~MENU.EXPORT_AS": "Dosyayı dışa aktar ...",
    "~MENU.CREATE_COPY": "Yeni bir kopya oluştur",
    "~MENU.SHARE": "Paylaş...",
    "~MENU.SHARE_GET_LINK": "Paylaşılabilir Bağlantıyı Al",
    "~MENU.SHARE_UPDATE": "Paylaşımı Güncelle",
    "~MENU.DOWNLOAD": "İndir",
    "~MENU.RENAME": "Yeniden Adlandır",
    "~MENU.REVERT_TO": "Dönüştür",
    "~MENU.REVERT_TO_LAST_OPENED": "Son Açılan Versiyon",
    "~MENU.REVERT_TO_SHARED_VIEW": "Paylaşımlı görünüm",
    "~DIALOG.SAVE": "Kaydet",
    "~DIALOG.SAVE_AS": "Farklı kaydet",
    "~DIALOG.EXPORT_AS": "Dosyayı Dışa Aktar...",
    "~DIALOG.CREATE_COPY": "Kopyasını Oluştur...",
    "~DIALOG.OPEN": "Aç",
    "~DIALOG.DOWNLOAD": "İndir",
    "~DIALOG.RENAME": "Yeniden Adlandır",
    "~DIALOG.SHARED": "Paylaş",
    "~DIALOG.IMPORT_DATA": "Verileri Aktar",
    "~PROVIDER.LOCAL_STORAGE": "Yerel Depolama",
    "~PROVIDER.READ_ONLY": "Yalnızca Okunabilir",
    "~PROVIDER.GOOGLE_DRIVE": "Google Drive",
    "~PROVIDER.DOCUMENT_STORE": "Concord Bulut Depolama",
    "~PROVIDER.LOCAL_FILE": "Yerel Dosyalar",
    "~FILE_STATUS.SAVING": "Kaydediliyor...",
    "~FILE_STATUS.SAVED": "Tüm değişiklikler kaydedildi",
    "~FILE_STATUS.SAVED_TO_PROVIDER": "Tüm Değişiklikler %{providerName} Olarak Kaydedildi",
    "~FILE_STATUS.UNSAVED": "Kaydedilmemiş",
    "~FILE_DIALOG.FILENAME": "Dosya Adı",
    "~FILE_DIALOG.OPEN": "Aç",
    "~FILE_DIALOG.SAVE": "Kaydet",
    "~FILE_DIALOG.CANCEL": "İptal",
    "~FILE_DIALOG.REMOVE": "Sil",
    "~FILE_DIALOG.REMOVE_CONFIRM": "%{filename} dosyasını silmek istediğinize emin misiniz?",
    "~FILE_DIALOG.REMOVED_TITLE": "Dosya Silindi",
    "~FILE_DIALOG.REMOVED_MESSAGE": "%{filename} dosyası silindi",
    "~FILE_DIALOG.LOADING": "Yükleniyor...",
    "~FILE_DIALOG.LOAD_FOLDER_ERROR": "İçerik yüklenirken hata oluştu.",
    "~FILE_DIALOG.DOWNLOAD": "İndir",
    "~FILE_DIALOG.DOWNLOAD_NOTE": "NOT: Safari ile çalışırken dosya \"Bilinmeyen\" olarak görülebilir ve .codap uzantısı olarak el ile yeniden adlandırılması gerekebilir.",
    "~DOWNLOAD_DIALOG.DOWNLOAD": "İndir",
    "~DOWNLOAD_DIALOG.CANCEL": "İptal",
    "~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO": "Paylaşılan bilgileri indirilen dosyaya dahil et.",
    "~RENAME_DIALOG.RENAME": "Yeniden Adlandır",
    "~RENAME_DIALOG.CANCEL": "İptal",
    "~SHARE_DIALOG.COPY": "Kopyala",
    "~SHARE_DIALOG.VIEW": "Görüntüle",
    "~SHARE_DIALOG.CLOSE": "Kapat",
    "~SHARE_DIALOG.COPY_SUCCESS": "İçerik panoya kopyalandı.",
    "~SHARE_DIALOG.COPY_ERROR": "Üzgünüz, bu içerik panoya kopyalanamadı.",
    "~SHARE_DIALOG.COPY_TITLE": "Sonucu Kopyala",
    "~SHARE_DIALOG.LONGEVITY_WARNING": "Bu dosyanın bir örneği bir yıldan fazla bir süre erişilmediği taktirde saklanacaktır.",
    "~SHARE_UPDATE.TITLE": "Paylaşılan görünüm güncellendi",
    "~SHARE_UPDATE.MESSAGE": "Paylaşılan görünüm başarıyla güncellendi.",
    "~CONFIRM.OPEN_FILE": "Değişiklikleri kaydetmediniz. Yeni bir dosya açmak istediğinize emin misiniz?",
    "~CONFIRM.NEW_FILE": "Değişiklikleri kaydetmediniz. Yeni bir dosya oluşturmak istediğinize emin misiniz?",
    "~CONFIRM.AUTHORIZE_OPEN": "Bu dosyayı açmak için yetkili olmanız gerekmektedir. Devam etmek istiyor musunuz?",
    "~CONFIRM.AUTHORIZE_SAVE": "Bu dosyayı kaydetmek için yetkili olmanız gerekmektedir. Devam etmek istiyor musunuz?",
    "~CONFIRM.CLOSE_FILE": "Değişiklikleri kaydetmediniz. Dosyayı kapatmak istediğinize emin misiniz?",
    "~CONFIRM.REVERT_TO_LAST_OPENED": "Dosyayı en son açılan haline geri döndürmek istediğinize emin misiniz?",
    "~CONFIRM.REVERT_TO_SHARED_VIEW": "Dosyayı en son paylaşılan haline geri döndürmek istediğinize emin misiniz?",
    "~CONFIRM_DIALOG.TITLE": "Emin misiniz?",
    "~CONFIRM_DIALOG.YES": "Evet",
    "~CONFIRM_DIALOG.NO": "Hayır",
    "~LOCAL_FILE_DIALOG.DROP_FILE_HERE": "Dosyayı buraya sürükleyiniz veya bir dosya seçmek için tıklayınız.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED": "Üzgünüz, açmak için yalnızca bir dosya seçebilirsiniz.",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED": "Üzgünüz, bir dosyadan daha fazlasını sürükleyemezsiniz.",
    "~IMPORT.LOCAL_FILE": "Yerel Dosya",
    "~IMPORT.URL": "URL",
    "~IMPORT_URL.MULTIPLE_URLS_DROPPED": "Üzgünüz, yalnızca bir dosyayı url ile açabilirsiniz.",
    "~IMPORT_URL.PLEASE_ENTER_URL": "Lütfen içeri aktarmak için url giriniz.",
    "~URL_TAB.DROP_URL_HERE": "URL'yi buraya sürükleyiniz veya URL'yi giriniz.",
    "~URL_TAB.IMPORT": "İçe Aktar",
    "~CLIENT_ERROR.TITLE": "Hata",
    "~ALERT_DIALOG.TITLE": "Uyarı",
    "~ALERT_DIALOG.CLOSE": "Kapat",
    "~ALERT.NO_PROVIDER": "Belirtilen dosya uygun bir sağlayıcı bulunmadığından açılamıyor.",
    "~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL": "Google ile Oturum Aç",
    "~GOOGLE_DRIVE.CONNECTING_MESSAGE": "Google'a bağlanılıyor...",
    "~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID": "Google Kullanıcı Kimliği bulunamadı.",
    "~DOCSTORE.LOAD_403_ERROR": "%{filename} dosyasını açmak için gerekli izinlere sahip değilsiniz.<br><br>Eğer başkasının dosyasını kullanıyorsanız dosya paylaşımda olmayabilir.",
    "~DOCSTORE.LOAD_SHARED_404_ERROR": "Paylaşılmak istenen döküman yüklenemiyor.<br><br>Dosya paylaşımda olmayabilir?",
    "~DOCSTORE.LOAD_404_ERROR": "%{filename} dosyası yüklenemiyor",
    "~DOCSTORE.SAVE_403_ERROR": "'%{filename}' dosyasını kaydetmek için gerekli izinlere sahip değilsiniz .<br><br>Tekrar oturum açmanız gerekmektedir.",
    "~DOCSTORE.SAVE_DUPLICATE_ERROR": "%{filename} dosyası oluşturulamıyor. Dosya zaten mevcut.",
    "~DOCSTORE.SAVE_ERROR_WITH_MESSAGE": "%{filename} dosyası kaydedilemez.: [%{message}]",
    "~DOCSTORE.SAVE_ERROR": "%{filename} dosyası kaydedilemez.",
    "~DOCSTORE.REMOVE_403_ERROR": "%{filename} dosyasını kaldırmak için gerekli izinlere sahip değilsiniz.<br><br>Tekrar oturum açmanız gerekmektedir.",
    "~DOCSTORE.REMOVE_ERROR": "%{filename} dosyası kaldırılamaz",
    "~DOCSTORE.RENAME_403_ERROR": "%{filename} dosyasını yeniden adlandırmak için gerekli izinlere sahip değilsiniz.<br><br>Tekrar oturum açmanız gerekmektedir.",
    "~DOCSTORE.RENAME_ERROR": "%{filename} dosyası yeniden adlandırılamadı",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE": "Concord Bulut Depolama Uyarısı",
    "~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE": "Concord Bulut Depolama Uyarısı",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE": "Farklı bir yere kaydet",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER": "Bunu sonra yapacağım",
    "~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE": "Concord Bulut Depolama sistemi kapatıldı!",
    "~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE": "Lütfen dosyanızı farklı bir yere kaydedin."
}

},{}],78:[function(require,module,exports){
module.exports={
    "~MENUBAR.UNTITLED_DOCUMENT": "未命名文件",
    "~MENU.NEW": "新增",
    "~MENU.OPEN": "開啟 ...",
    "~MENU.CLOSE": "關閉",
    "~MENU.IMPORT_DATA": "匯入資料...",
    "~MENU.SAVE": "儲存",
    "~MENU.SAVE_AS": "另存至 ...",
    "~MENU.EXPORT_AS": "匯出文件 ...",
    "~MENU.CREATE_COPY": "建立複本",
    "~MENU.SHARE": "分享...",
    "~MENU.SHARE_GET_LINK": "取得連結",
    "~MENU.SHARE_UPDATE": "更新文件內容",
    "~MENU.DOWNLOAD": "下載",
    "~MENU.RENAME": "重新命名",
    "~MENU.REVERT_TO": "復原至...",
    "~MENU.REVERT_TO_LAST_OPENED": "開啟狀態",
    "~MENU.REVERT_TO_SHARED_VIEW": "分享文件",
    "~DIALOG.SAVE": "儲存",
    "~DIALOG.SAVE_AS": "另存至 ...",
    "~DIALOG.EXPORT_AS": "匯出文件 ...",
    "~DIALOG.CREATE_COPY": "建立複本 ...",
    "~DIALOG.OPEN": "開啟",
    "~DIALOG.DOWNLOAD": "下載",
    "~DIALOG.RENAME": "重新命名",
    "~DIALOG.SHARED": "分享",
    "~DIALOG.IMPORT_DATA": "重要資料",
    "~PROVIDER.LOCAL_STORAGE": "本地儲存",
    "~PROVIDER.READ_ONLY": "唯讀",
    "~PROVIDER.GOOGLE_DRIVE": "Google 雲端硬碟",
    "~PROVIDER.DOCUMENT_STORE": "Concord Cloud",
    "~PROVIDER.LOCAL_FILE": "本地檔案",
    "~FILE_STATUS.SAVING": "儲存...",
    "~FILE_STATUS.SAVED": "已儲存所有更改",
    "~FILE_STATUS.SAVED_TO_PROVIDER": "儲存更改至 %{providerName}",
    "~FILE_STATUS.UNSAVED": "未儲存",
    "~FILE_DIALOG.FILENAME": "檔案名稱",
    "~FILE_DIALOG.OPEN": "開啟",
    "~FILE_DIALOG.SAVE": "儲存",
    "~FILE_DIALOG.CANCEL": "取消",
    "~FILE_DIALOG.REMOVE": "刪除",
    "~FILE_DIALOG.REMOVE_CONFIRM": "您確定要刪除 %{filename}?",
    "~FILE_DIALOG.REMOVED_TITLE": "刪除檔案",
    "~FILE_DIALOG.REMOVED_MESSAGE": "%{filename} 已刪除",
    "~FILE_DIALOG.LOADING": "讀取中...",
    "~FILE_DIALOG.LOAD_FOLDER_ERROR": "*** 載入文件時發生錯誤 ***",
    "~FILE_DIALOG.DOWNLOAD": "下載",
    "~FILE_DIALOG.DOWNLOAD_NOTE": "NOTE: 使用Safari 檔案可能變為 \"Unknown\" 您需要在手動更改副檔名為 .codap",
    "~DOWNLOAD_DIALOG.DOWNLOAD": "下載",
    "~DOWNLOAD_DIALOG.CANCEL": "取消",
    "~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO": "下載的檔案中包含分享的檔案",
    "~RENAME_DIALOG.RENAME": "重新命名",
    "~RENAME_DIALOG.CANCEL": "取消",
    "~SHARE_DIALOG.COPY": "複製",
    "~SHARE_DIALOG.VIEW": "檢視",
    "~SHARE_DIALOG.CLOSE": "關閉",
    "~SHARE_DIALOG.COPY_SUCCESS": "訊息已複製",
    "~SHARE_DIALOG.COPY_ERROR": "抱歉，訊息無法複製",
    "~SHARE_DIALOG.COPY_TITLE": "複製結果",
    "~SHARE_DIALOG.LONGEVITY_WARNING": "若一年沒人使用本文件之複本，則此複本將會被刪除",
    "~SHARE_UPDATE.TITLE": "更新文件內容",
    "~SHARE_UPDATE.MESSAGE": "文件內容已更新",
    "~CONFIRM.OPEN_FILE": "尚未儲存變更，您確定要開啟新的文件?",
    "~CONFIRM.NEW_FILE": "尚未儲存變更，您確定要建立新的文件?",
    "~CONFIRM.AUTHORIZE_OPEN": "本文件需要授權才能開啟，您要前往認證嗎? ",
    "~CONFIRM.AUTHORIZE_SAVE": "本文件需要授權才能儲存，您要前往認證嗎? ",
    "~CONFIRM.CLOSE_FILE": "尚未儲存變更，您確定要關閉文件嗎?",
    "~CONFIRM.REVERT_TO_LAST_OPENED": "您確定要將文件回復至最近開啟的狀態嗎?",
    "~CONFIRM.REVERT_TO_SHARED_VIEW": "您確定要將文件回復至最近分享的狀態嗎?",
    "~CONFIRM_DIALOG.TITLE": "確定?",
    "~CONFIRM_DIALOG.YES": "是",
    "~CONFIRM_DIALOG.NO": "否",
    "~LOCAL_FILE_DIALOG.DROP_FILE_HERE": "將檔案拖曳至此或點擊以選取檔案",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED": "抱歉, 您只能選取一個檔案",
    "~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED": "抱歉, 您無法拖曳超過一個檔案",
    "~IMPORT.LOCAL_FILE": "本地檔案",
    "~IMPORT.URL": "網址",
    "~IMPORT_URL.MULTIPLE_URLS_DROPPED": "抱歉, 您只能選擇一個開啟網址",
    "~IMPORT_URL.PLEASE_ENTER_URL": "請輸入要匯入的網址",
    "~URL_TAB.DROP_URL_HERE": "在下面輸入網址",
    "~URL_TAB.IMPORT": "匯入",
    "~CLIENT_ERROR.TITLE": "錯誤",
    "~ALERT_DIALOG.TITLE": "警告",
    "~ALERT_DIALOG.CLOSE": "關閉",
    "~ALERT.NO_PROVIDER": "無法開啟指定的文件，因為檔案類型不受支援",
    "~GOOGLE_DRIVE.LOGIN_BUTTON_LABEL": "登入Google",
    "~GOOGLE_DRIVE.CONNECTING_MESSAGE": "連結至 Google...",
    "~GOOGLE_DRIVE.ERROR_MISSING_CLIENTID": "在googleDrive程序中缺少帳戶資料",
    "~DOCSTORE.LOAD_403_ERROR": "您沒有權限讀取 %{filename}.<br><br>若您是使用其他人共享的檔案則可能已經取消共享",
    "~DOCSTORE.LOAD_SHARED_404_ERROR": "無法讀取此共享檔案<br><br>可能檔案已取消共享?",
    "~DOCSTORE.LOAD_404_ERROR": "無法讀取 %{filename}",
    "~DOCSTORE.SAVE_403_ERROR": "您沒有權限儲存 '%{filename}'.<br><br>您可能需要再次登入",
    "~DOCSTORE.SAVE_DUPLICATE_ERROR": "無法建立 %{filename}.  檔案已存在",
    "~DOCSTORE.SAVE_ERROR_WITH_MESSAGE": "無法儲存 %{filename}: [%{message}]",
    "~DOCSTORE.SAVE_ERROR": "無法儲存 %{filename}",
    "~DOCSTORE.REMOVE_403_ERROR": "您沒有權限移除 %{filename}.<br><br>您可能需要再次登入",
    "~DOCSTORE.REMOVE_ERROR": "無法移除 %{filename}",
    "~DOCSTORE.RENAME_403_ERROR": "您沒有權限更改名稱 %{filename}.<br><br>您可能需要再次登入",
    "~DOCSTORE.RENAME_ERROR": "無法更改名稱 %{filename}",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_TITLE": "Concord Cloud 警告",
    "~CONCORD_CLOUD_DEPRECATION.ALERT_SAVE_TITLE": "Concord Cloud 警告",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_SAVE_ELSEWHERE": "儲存至其他位置",
    "~CONCORD_CLOUD_DEPRECATION.CONFIRM_DO_IT_LATER": "稍後操作",
    "~CONCORD_CLOUD_DEPRECATION.SHUT_DOWN_MESSAGE": "The Concord Cloud has been shut down!",
    "~CONCORD_CLOUD_DEPRECATION.PLEASE_SAVE_ELSEWHERE": "Please save your documents to another location."
}

},{}],79:[function(require,module,exports){
var defaultLang, languageFiles, translate, translations, urlParams, varRegExp;

urlParams = require('./url-params');

languageFiles = {
  'de': require('./lang/de'),
  'en-US': require('./lang/en-US'),
  'es': require('./lang/es'),
  'he': require('./lang/he'),
  'tr': require('./lang/tr'),
  'zh-TW': require('./lang/zh-TW')
};

translations = {};

_.each(languageFiles, function(langContents, langKey) {
  var dashLoc, lang;
  translations[langKey] = langContents;
  if ((dashLoc = langKey.indexOf('-')) > 0) {
    lang = langKey.substring(0, dashLoc);
    translations[lang] = langContents;
  }
});

defaultLang = null;

if (urlParams.lang && translations[urlParams.lang]) {
  defaultLang = urlParams.lang;
}

if ((defaultLang == null) && document.documentElement.lang && (document.documentElement.lang !== "unknown")) {
  defaultLang = document.documentElement.lang;
}

if (defaultLang == null) {
  defaultLang = 'en';
}

varRegExp = /%\{\s*([^}\s]*)\s*\}/g;

translate = function(key, vars, lang) {
  var ref, translation;
  if (vars == null) {
    vars = {};
  }
  if (lang == null) {
    lang = defaultLang;
  }
  translation = (ref = translations[lang]) != null ? ref[key] : void 0;
  if (translation == null) {
    translation = key;
  }
  return translation.replace(varRegExp, function(match, key) {
    if (vars.hasOwnProperty(key)) {
      return vars[key];
    } else {
      return "'** UKNOWN KEY: " + key + " **";
    }
  });
};

module.exports = translate;


},{"./lang/de":73,"./lang/en-US":74,"./lang/es":75,"./lang/he":76,"./lang/tr":77,"./lang/zh-TW":78,"./url-params":80}],80:[function(require,module,exports){
// http://stackoverflow.com/a/2880929
var urlParams = {};
if (window && window.location && window.location.search) {
  (window.onpopstate = function () {
      var match,
          pl     = /\+/g,  // Regex for replacing addition symbol with a space
          search = /([^&=]+)=?([^&]*)/g,
          decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
          query  = window.location.search.substring(1);

      while ((match = search.exec(query)))
         urlParams[decode(match[1])] = decode(match[2]);
  })();
}

module.exports = urlParams;

},{}],81:[function(require,module,exports){
var ModalDialog, button, div, ref, tr;

ref = React.DOM, div = ref.div, button = ref.button;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'AlertDialogView',
  close: function() {
    var base, base1;
    if (typeof (base = this.props).close === "function") {
      base.close();
    }
    return typeof (base1 = this.props).callback === "function" ? base1.callback() : void 0;
  },
  render: function() {
    return ModalDialog({
      title: this.props.title || (tr('~ALERT_DIALOG.TITLE')),
      close: this.close,
      zIndex: 500
    }, div({
      className: 'alert-dialog'
    }, div({
      className: 'alert-dialog-message',
      dangerouslySetInnerHTML: {
        __html: this.props.message
      }
    }), div({
      className: 'buttons'
    }, button({
      onClick: this.close
    }, tr('~ALERT_DIALOG.CLOSE')))));
  }
});


},{"../utils/translate":79,"./modal-dialog-view":93}],82:[function(require,module,exports){
var AlertDialog, App, BlockingModal, ConfirmDialog, DownloadDialog, ImportTabbedDialog, InnerApp, MenuBar, ProviderTabbedDialog, RenameDialog, ShareDialog, div, iframe, isString, ref, tr;

MenuBar = React.createFactory(require('./menu-bar-view'));

ProviderTabbedDialog = React.createFactory(require('./provider-tabbed-dialog-view'));

DownloadDialog = React.createFactory(require('./download-dialog-view'));

RenameDialog = React.createFactory(require('./rename-dialog-view'));

ShareDialog = React.createFactory(require('./share-dialog-view'));

BlockingModal = React.createFactory(require('./blocking-modal-view'));

AlertDialog = React.createFactory(require('./alert-dialog-view'));

ConfirmDialog = React.createFactory(require('./confirm-dialog-view'));

ImportTabbedDialog = React.createFactory(require('./import-tabbed-dialog-view'));

tr = require('../utils/translate');

isString = require('../utils/is-string');

ref = React.DOM, div = ref.div, iframe = ref.iframe;

InnerApp = React.createFactory(React.createClass({
  displayName: 'CloudFileManagerInnerApp',
  shouldComponentUpdate: function(nextProps) {
    return nextProps.app !== this.props.app;
  },
  render: function() {
    return div({
      className: 'innerApp'
    }, iframe({
      src: this.props.app
    }));
  }
}));

App = React.createClass({
  displayName: 'CloudFileManager',
  getFilename: function(metadata) {
    var ref1;
    if ((metadata != null ? metadata.hasOwnProperty("name") : void 0) && ((ref1 = metadata.name) != null ? ref1.length : void 0) > 0) {
      return metadata.name;
    } else {
      return null;
    }
  },
  getInitialState: function() {
    var ref1, ref2, ref3;
    return {
      filename: this.getFilename(this.props.client.state.metadata),
      provider: (ref1 = this.props.client.state.metadata) != null ? ref1.provider : void 0,
      menuItems: ((ref2 = this.props.client._ui.menu) != null ? ref2.items : void 0) || [],
      menuOptions: ((ref3 = this.props.ui) != null ? ref3.menuBar : void 0) || {},
      providerDialog: null,
      downloadDialog: null,
      renameDialog: null,
      shareDialog: null,
      alertDialog: null,
      confirmDialog: null,
      dirty: false
    };
  },
  componentWillMount: function() {
    this.props.client.listen((function(_this) {
      return function(event) {
        var fileStatus, message, providerName, ref1, ref2, ref3;
        fileStatus = event.state.saving ? {
          message: tr('~FILE_STATUS.SAVING'),
          type: 'info'
        } : event.state.saved ? (providerName = (ref1 = event.state.metadata.provider) != null ? ref1.displayName : void 0, message = providerName ? tr('~FILE_STATUS.SAVED_TO_PROVIDER', {
          providerName: providerName
        }) : tr('~FILE_STATUS.SAVED'), {
          message: message,
          type: 'info'
        }) : event.state.dirty ? {
          message: tr('~FILE_STATUS.UNSAVED'),
          type: 'alert'
        } : null;
        _this.setState({
          filename: _this.getFilename(event.state.metadata),
          provider: (ref2 = event.state.metadata) != null ? ref2.provider : void 0,
          fileStatus: fileStatus
        });
        switch (event.type) {
          case 'connected':
            return _this.setState({
              menuItems: ((ref3 = _this.props.client._ui.menu) != null ? ref3.items : void 0) || []
            });
        }
      };
    })(this));
    return this.props.client._ui.listen((function(_this) {
      return function(event) {
        var index;
        switch (event.type) {
          case 'showProviderDialog':
            return _this.setState({
              providerDialog: event.data
            });
          case 'showDownloadDialog':
            return _this.setState({
              downloadDialog: event.data
            });
          case 'showRenameDialog':
            return _this.setState({
              renameDialog: event.data
            });
          case 'showImportDialog':
            return _this.setState({
              importDialog: event.data
            });
          case 'showShareDialog':
            return _this.setState({
              shareDialog: event.data
            });
          case 'showBlockingModal':
            return _this.setState({
              blockingModalProps: event.data
            });
          case 'hideBlockingModal':
            return _this.setState({
              blockingModalProps: null
            });
          case 'showAlertDialog':
            return _this.setState({
              alertDialog: event.data
            });
          case 'showConfirmDialog':
            return _this.setState({
              confirmDialog: event.data
            });
          case 'appendMenuItem':
            _this.state.menuItems.push(event.data);
            return _this.setState({
              menuItems: _this.state.menuItems
            });
          case 'prependMenuItem':
            _this.state.menuItems.unshift(event.data);
            return _this.setState({
              menuItems: _this.state.menuItems
            });
          case 'replaceMenuItem':
            index = _this._getMenuItemIndex(event.data.key);
            if (index !== -1) {
              _this.state.menuItems[index] = event.data.item;
              return _this.setState({
                menuItems: _this.state.menuItems
              });
            }
            break;
          case 'insertMenuItemBefore':
            index = _this._getMenuItemIndex(event.data.key);
            if (index !== -1) {
              if (index === 0) {
                _this.state.menuItems.unshift(event.data.item);
              } else {
                _this.state.menuItems.splice(index, 0, event.data.item);
              }
              return _this.setState({
                menuItems: _this.state.menuItems
              });
            }
            break;
          case 'insertMenuItemAfter':
            index = _this._getMenuItemIndex(event.data.key);
            if (index !== -1) {
              if (index === _this.state.menuItems.length - 1) {
                _this.state.menuItems.push(event.data.item);
              } else {
                _this.state.menuItems.splice(index + 1, 0, event.data.item);
              }
              return _this.setState({
                menuItems: _this.state.menuItems
              });
            }
            break;
          case 'setMenuBarInfo':
            _this.state.menuOptions.info = event.data;
            return _this.setState({
              menuOptions: _this.state.menuOptions
            });
        }
      };
    })(this));
  },
  _getMenuItemIndex: function(key) {
    var i, index, item, len, ref1;
    if (isString(key)) {
      ref1 = this.state.menuItems;
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        item = ref1[index];
        if (item.key === key) {
          return index;
        }
      }
      return -1;
    } else {
      index = parseInt(key, 10);
      if (isNaN(index) || index < 0 || index > this.state.menuItems.length - 1) {
        return -1;
      } else {
        return index;
      }
    }
  },
  closeDialogs: function() {
    return this.setState({
      providerDialog: null,
      downloadDialog: null,
      renameDialog: null,
      shareDialog: null,
      importDialog: null
    });
  },
  closeAlert: function() {
    return this.setState({
      alertDialog: null
    });
  },
  closeConfirm: function() {
    return this.setState({
      confirmDialog: null
    });
  },
  renderDialogs: function() {
    return div({}, this.state.blockingModalProps ? BlockingModal(this.state.blockingModalProps) : this.state.providerDialog ? ProviderTabbedDialog({
      client: this.props.client,
      dialog: this.state.providerDialog,
      close: this.closeDialogs
    }) : this.state.downloadDialog ? DownloadDialog({
      client: this.props.client,
      filename: this.state.downloadDialog.filename,
      mimeType: this.state.downloadDialog.mimeType,
      content: this.state.downloadDialog.content,
      close: this.closeDialogs
    }) : this.state.renameDialog ? RenameDialog({
      filename: this.state.renameDialog.filename,
      callback: this.state.renameDialog.callback,
      close: this.closeDialogs
    }) : this.state.importDialog ? ImportTabbedDialog({
      client: this.props.client,
      dialog: this.state.importDialog,
      close: this.closeDialogs
    }) : this.state.shareDialog ? ShareDialog({
      client: this.props.client,
      enableLaraSharing: this.props.enableLaraSharing,
      close: this.closeDialogs
    }) : void 0, this.state.alertDialog ? AlertDialog({
      title: this.state.alertDialog.title,
      message: this.state.alertDialog.message,
      callback: this.state.alertDialog.callback,
      close: this.closeAlert
    }) : void 0, this.state.confirmDialog ? ConfirmDialog(_.merge({}, this.state.confirmDialog, {
      close: this.closeConfirm
    })) : void 0);
  },
  render: function() {
    var menuItems;
    menuItems = !this.props.hideMenuBar ? this.state.menuItems : [];
    if (this.props.appOrMenuElemId) {
      return div({
        className: this.props.usingIframe ? 'app' : 'view'
      }, MenuBar({
        client: this.props.client,
        filename: this.state.filename,
        provider: this.state.provider,
        fileStatus: this.state.fileStatus,
        items: menuItems,
        options: this.state.menuOptions
      }), this.props.usingIframe ? InnerApp({
        app: this.props.app
      }) : void 0, this.renderDialogs());
    } else if (this.state.providerDialog || this.state.downloadDialog) {
      return div({
        className: 'app'
      }, this.renderDialogs());
    } else {
      return null;
    }
  }
});

module.exports = App;


},{"../utils/is-string":72,"../utils/translate":79,"./alert-dialog-view":81,"./blocking-modal-view":84,"./confirm-dialog-view":85,"./download-dialog-view":86,"./import-tabbed-dialog-view":89,"./menu-bar-view":92,"./provider-tabbed-dialog-view":96,"./rename-dialog-view":97,"./share-dialog-view":99}],83:[function(require,module,exports){
var AuthorizeMixin;

AuthorizeMixin = {
  getInitialState: function() {
    this._isAuthorized = false;
    return {
      authorized: false
    };
  },
  componentWillMount: function() {
    return this.props.provider.authorized((function(_this) {
      return function(authorized) {
        _this._isAuthorized = authorized;
        if (_this._isMounted) {
          return _this.setState({
            authorized: authorized
          });
        }
      };
    })(this));
  },
  componentDidMount: function() {
    this._isMounted = true;
    if (this.state.authorized !== this._isAuthorized) {
      return this.setState({
        authorized: this._isAuthorized
      });
    }
  },
  componentWillUnmount: function() {
    return this._isMounted = false;
  },
  render: function() {
    if (this._isAuthorized || this.state.authorized) {
      return this.renderWhenAuthorized();
    } else {
      return this.props.provider.renderAuthorizationDialog();
    }
  }
};

module.exports = AuthorizeMixin;


},{}],84:[function(require,module,exports){
var Modal, div, i, ref;

Modal = React.createFactory(require('./modal-view'));

ref = React.DOM, div = ref.div, i = ref.i;

module.exports = React.createClass({
  displayName: 'BlockingModal',
  close: function() {
    var base;
    return typeof (base = this.props).close === "function" ? base.close() : void 0;
  },
  drop: function(e) {
    var base;
    return typeof (base = this.props).onDrop === "function" ? base.onDrop(e) : void 0;
  },
  render: function() {
    return Modal({
      close: this.props.close
    }, div({
      className: 'modal-dialog',
      onDrop: this.drop
    }, div({
      className: 'modal-dialog-wrapper'
    }, div({
      className: 'modal-dialog-title'
    }, this.props.title || 'Untitled Dialog'), div({
      className: 'modal-dialog-workspace'
    }, div({
      className: 'modal-dialog-blocking-message'
    }, this.props.message)))));
  }
});


},{"./modal-view":95}],85:[function(require,module,exports){
var ModalDialog, button, div, ref, tr;

ref = React.DOM, div = ref.div, button = ref.button;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'ConfirmDialogView',
  confirm: function() {
    var base, base1;
    if (typeof (base = this.props).callback === "function") {
      base.callback();
    }
    return typeof (base1 = this.props).close === "function" ? base1.close() : void 0;
  },
  reject: function() {
    var base, base1;
    if (typeof (base = this.props).rejectCallback === "function") {
      base.rejectCallback();
    }
    return typeof (base1 = this.props).close === "function" ? base1.close() : void 0;
  },
  render: function() {
    return ModalDialog({
      title: this.props.title || tr('~CONFIRM_DIALOG.TITLE'),
      close: this.reject,
      zIndex: 500
    }, div({
      className: 'confirm-dialog'
    }, div({
      className: 'confirm-dialog-message',
      dangerouslySetInnerHTML: {
        __html: this.props.message
      }
    }), div({
      className: 'buttons'
    }, button({
      onClick: this.confirm
    }, this.props.yesTitle || tr('~CONFIRM_DIALOG.YES')), (!this.props.hideNoButton ? button({
      onClick: this.reject
    }, this.props.noTitle || tr('~CONFIRM_DIALOG.NO')) : void 0))));
  }
});


},{"../utils/translate":79,"./modal-dialog-view":93}],86:[function(require,module,exports){
var CloudMetadata, ModalDialog, a, button, div, input, ref, tr;

ref = React.DOM, div = ref.div, input = ref.input, a = ref.a, button = ref.button;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

CloudMetadata = (require('../providers/provider-interface')).CloudMetadata;

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'DownloadDialogView',
  getInitialState: function() {
    var filename, state;
    filename = CloudMetadata.withExtension(this.props.filename || (tr("~MENUBAR.UNTITLED_DOCUMENT")), 'json');
    return state = {
      filename: filename,
      trimmedFilename: this.trim(filename),
      includeShareInfo: false,
      shared: this.props.client.isShared()
    };
  },
  componentDidMount: function() {
    return this.refs.filename.focus();
  },
  updateFilename: function() {
    var filename;
    filename = this.refs.filename.value;
    return this.setState({
      filename: filename,
      trimmedFilename: this.trim(filename)
    });
  },
  updateIncludeShareInfo: function() {
    return this.setState({
      includeShareInfo: this.refs.includeShareInfo.checked
    });
  },
  trim: function(s) {
    return s.replace(/^\s+|\s+$/, '');
  },
  download: function(e, simulateClick) {
    if (!this.downloadDisabled()) {
      this.refs.download.setAttribute('href', this.props.client.getDownloadUrl(this.props.content, this.state.includeShareInfo));
      if (simulateClick) {
        this.refs.download.click();
      }
      return this.props.close();
    } else {
      if (e != null) {
        e.preventDefault();
      }
      return this.refs.filename.focus();
    }
  },
  downloadDisabled: function() {
    return this.state.trimmedFilename.length === 0;
  },
  watchForEnter: function(e) {
    if (e.keyCode === 13 && !this.downloadDisabled()) {
      e.preventDefault();
      e.stopPropagation();
      return this.download(null, true);
    }
  },
  render: function() {
    return ModalDialog({
      title: tr('~DIALOG.DOWNLOAD'),
      close: this.props.close
    }, div({
      className: 'download-dialog'
    }, input({
      type: 'text',
      ref: 'filename',
      placeholder: 'Filename',
      value: this.state.filename,
      onChange: this.updateFilename,
      onKeyDown: this.watchForEnter
    }), this.state.shared ? div({
      className: 'download-share'
    }, input({
      type: 'checkbox',
      ref: 'includeShareInfo',
      value: this.state.includeShareInfo,
      onChange: this.updateIncludeShareInfo
    }), tr('~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO')) : void 0, div({
      className: 'buttons'
    }, a({
      href: '#',
      ref: 'download',
      className: (this.downloadDisabled() ? 'disabled' : ''),
      download: this.state.trimmedFilename,
      onClick: this.download
    }, tr('~DOWNLOAD_DIALOG.DOWNLOAD')), button({
      onClick: this.props.close
    }, tr('~DOWNLOAD_DIALOG.CANCEL')))));
  }
});


},{"../providers/provider-interface":65,"../utils/translate":79,"./modal-dialog-view":93}],87:[function(require,module,exports){
var DropDown, DropdownItem, div, g, i, li, rect, ref, span, svg, ul;

ref = React.DOM, div = ref.div, i = ref.i, span = ref.span, ul = ref.ul, li = ref.li, svg = ref.svg, g = ref.g, rect = ref.rect;

DropdownItem = React.createFactory(React.createClass({
  displayName: 'DropdownItem',
  clicked: function() {
    return this.props.select(this.props.item);
  },
  mouseEnter: function() {
    var base, menu, menuItem;
    if (this.props.item.items) {
      menuItem = $(ReactDOM.findDOMNode(this.refs.item));
      menu = menuItem.parent().parent();
      return this.props.setSubMenu({
        style: {
          position: 'absolute',
          left: menu.width(),
          top: menuItem.position().top - parseInt(menuItem.css('padding-top'))
        },
        items: this.props.item.items
      });
    } else {
      return typeof (base = this.props).setSubMenu === "function" ? base.setSubMenu(null) : void 0;
    }
  },
  render: function() {
    var classes, enabled, name;
    enabled = this.props.item.hasOwnProperty('enabled') ? typeof this.props.item.enabled === 'function' ? this.props.item.enabled() : this.props.item.enabled : true;
    classes = ['menuItem'];
    if (this.props.item.separator) {
      classes.push('separator');
      return li({
        className: classes.join(' ')
      }, '');
    } else {
      if (!enabled || !(this.props.item.action || this.props.item.items)) {
        classes.push('disabled');
      }
      name = this.props.item.name || this.props.item;
      return li({
        ref: 'item',
        className: classes.join(' '),
        onClick: this.clicked,
        onMouseEnter: this.mouseEnter
      }, this.props.item.items ? i({
        className: 'icon-inspectorArrow-collapse'
      }) : void 0, name);
    }
  }
}));

DropDown = React.createClass({
  displayName: 'Dropdown',
  getInitialState: function() {
    return {
      showingMenu: false,
      timeout: null,
      subMenu: null
    };
  },
  componentWillMount: function() {
    if (window.addEventListener) {
      window.addEventListener('mousedown', this.checkBlur, true);
      return window.addEventListener('touchstart', this.checkBlur, true);
    }
  },
  componentWillUnmount: function() {
    if (window.removeEventListener) {
      window.removeEventListener('mousedown', this.checkBlur, true);
      return window.removeEventListener('touchstart', this.checkBlur, true);
    }
  },
  checkBlur: function() {
    if (this.state.showingMenu) {
      return this.blur();
    }
  },
  blur: function() {
    var timeout;
    this.unblur();
    timeout = setTimeout(((function(_this) {
      return function() {
        return _this.setState({
          showingMenu: false,
          subMenu: false
        });
      };
    })(this)), 500);
    return this.setState({
      timeout: timeout
    });
  },
  unblur: function() {
    if (this.state.timeout) {
      clearTimeout(this.state.timeout);
    }
    return this.setState({
      timeout: null
    });
  },
  setSubMenu: function(subMenu) {
    return this.setState({
      subMenu: subMenu
    });
  },
  select: function(item) {
    var nextState;
    if (item != null ? item.items : void 0) {
      return;
    }
    nextState = !this.state.showingMenu;
    this.setState({
      showingMenu: nextState
    });
    if (!item) {
      return;
    }
    return typeof item.action === "function" ? item.action() : void 0;
  },
  render: function() {
    var index, item, menuClass, ref1, select;
    menuClass = this.state.showingMenu ? 'menu-showing' : 'menu-hidden';
    select = (function(_this) {
      return function(item) {
        return function() {
          return _this.select(item);
        };
      };
    })(this);
    return div({
      className: 'menu'
    }, ((ref1 = this.props.items) != null ? ref1.length : void 0) > 0 ? div({}, div({
      className: 'menu-anchor',
      onClick: (function(_this) {
        return function() {
          return _this.select(null);
        };
      })(this)
    }, svg({
      version: '1.1',
      width: 16,
      height: 16,
      viewBox: '0 0 16 16',
      enableBackground: 'new 0 0 16 16'
    }, g({}, rect({
      y: 2,
      width: 16,
      height: 2
    }), rect({
      y: 7,
      width: 16,
      height: 2
    }), rect({
      y: 12,
      width: 16,
      height: 2
    })))), div({
      className: menuClass,
      onMouseLeave: this.blur,
      onMouseEnter: this.unblur
    }, ul({}, (function() {
      var j, len, ref2, results;
      ref2 = this.props.items;
      results = [];
      for (index = j = 0, len = ref2.length; j < len; index = ++j) {
        item = ref2[index];
        results.push(DropdownItem({
          key: index,
          item: item,
          select: this.select,
          setSubMenu: this.setSubMenu
        }));
      }
      return results;
    }).call(this)), this.state.subMenu ? div({
      className: menuClass,
      style: this.state.subMenu.style
    }, ul({}, (function() {
      var j, len, ref2, results;
      ref2 = this.state.subMenu.items;
      results = [];
      for (index = j = 0, len = ref2.length; j < len; index = ++j) {
        item = ref2[index];
        results.push(DropdownItem({
          key: index,
          item: item,
          select: this.select
        }));
      }
      return results;
    }).call(this))) : void 0)) : void 0);
  }
});

module.exports = DropDown;


},{}],88:[function(require,module,exports){
var AuthorizeMixin, CloudMetadata, FileDialogTab, FileList, FileListFile, button, div, i, img, input, ref, span, tr;

AuthorizeMixin = require('./authorize-mixin');

CloudMetadata = (require('../providers/provider-interface')).CloudMetadata;

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, img = ref.img, i = ref.i, span = ref.span, input = ref.input, button = ref.button;

FileListFile = React.createFactory(React.createClass({
  displayName: 'FileListFile',
  componentWillMount: function() {
    return this.lastClick = 0;
  },
  fileSelected: function(e) {
    var now;
    e.preventDefault();
    e.stopPropagation();
    now = (new Date()).getTime();
    this.props.fileSelected(this.props.metadata);
    if (now - this.lastClick <= 250) {
      this.props.fileConfirmed();
    }
    return this.lastClick = now;
  },
  render: function() {
    var selectableClass, selectedClass, subFolderClass;
    selectableClass = this.props.metadata.type !== CloudMetadata.Label ? 'selectable' : '';
    selectedClass = this.props.selected ? 'selected' : '';
    subFolderClass = this.props.isSubFolder ? 'subfolder' : '';
    return div({
      className: selectableClass + " " + selectedClass + " " + subFolderClass,
      title: this.props.metadata.description || void 0,
      onClick: this.props.metadata.type !== CloudMetadata.Label ? this.fileSelected : void 0
    }, React.DOM.i({
      className: this.props.metadata.type === CloudMetadata.Folder ? 'icon-inspectorArrow-collapse' : this.props.metadata.type === CloudMetadata.File ? 'icon-noteTool' : void 0
    }), this.props.metadata.name);
  }
}));

FileList = React.createFactory(React.createClass({
  displayName: 'FileList',
  getInitialState: function() {
    return {
      loading: true
    };
  },
  componentDidMount: function() {
    this._isMounted = true;
    return this.load(this.props.folder);
  },
  componentWillReceiveProps: function(nextProps) {
    if (nextProps.folder !== this.props.folder) {
      return this.load(nextProps.folder);
    }
  },
  componentWillUnmount: function() {
    return this._isMounted = false;
  },
  load: function(folder) {
    return this.props.provider.list(folder, (function(_this) {
      return function(err, list) {
        if (err) {
          return _this.props.client.alert(err);
        }
        if (_this._isMounted) {
          _this.setState({
            loading: false
          });
        }
        return _this.props.listLoaded(list);
      };
    })(this));
  },
  parentSelected: function(e) {
    var ref1;
    return this.props.fileSelected((ref1 = this.props.folder) != null ? ref1.parent : void 0);
  },
  render: function() {
    var isSubFolder, j, len, list, metadata, ref1;
    list = [];
    isSubFolder = this.props.folder != null;
    if (isSubFolder) {
      list.push(div({
        key: 'parent',
        className: 'selectable',
        onClick: this.parentSelected
      }, React.DOM.i({
        className: 'icon-paletteArrow-collapse'
      }), this.props.folder.name));
    }
    ref1 = this.props.list;
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
      metadata = ref1[i];
      list.push(FileListFile({
        key: i,
        metadata: metadata,
        selected: this.props.selectedFile === metadata,
        fileSelected: this.props.fileSelected,
        fileConfirmed: this.props.fileConfirmed,
        isSubFolder: isSubFolder
      }));
    }
    return div({
      className: 'filelist'
    }, this.state.loading ? tr("~FILE_DIALOG.LOADING") : list);
  }
}));

FileDialogTab = React.createClass({
  displayName: 'FileDialogTab',
  mixins: [AuthorizeMixin],
  getInitialState: function() {
    var initialState, ref1, ref2;
    initialState = this.getStateForFolder((ref1 = this.props.client.state.metadata) != null ? ref1.parent : void 0, true) || null;
    initialState.filename = ((ref2 = initialState.metadata) != null ? ref2.name : void 0) || '';
    return initialState;
  },
  componentDidMount: function() {
    return this._isMounted = true;
  },
  componentWillUnmount: function() {
    return this._isMounted = false;
  },
  isOpen: function() {
    return this.props.dialog.action === 'openFile';
  },
  filenameChanged: function(e) {
    var filename;
    filename = e.target.value;
    return this.setState({
      filename: filename,
      metadata: this.findMetadata(filename, this.state.list)
    });
  },
  listLoaded: function(list) {
    if (this._isMounted) {
      return this.setState({
        list: list
      });
    }
  },
  getSaveMetadata: function() {
    var saveMetadata;
    saveMetadata = this.props.client.state.metadata ? _.clone(this.props.client.state.metadata) : null;
    if (saveMetadata) {
      if (this.props.provider === saveMetadata.provider) {
        saveMetadata.providerData = _.cloneDeep(saveMetadata.providerData);
      } else {
        saveMetadata.provider = null;
        saveMetadata.providerData = null;
        saveMetadata.forceSaveDialog = false;
      }
    }
    return saveMetadata;
  },
  getStateForFolder: function(folder, initialFolder) {
    var metadata, ref1, ref2;
    metadata = this.isOpen() ? ((ref1 = this.state) != null ? ref1.metadata : void 0) || null : this.getSaveMetadata();
    if (initialFolder && (((ref2 = this.props.client.state.metadata) != null ? ref2.provider : void 0) !== this.props.provider)) {
      folder = null;
    } else {
      if (metadata != null) {
        metadata.parent = folder;
      }
    }
    return {
      folder: folder,
      metadata: metadata,
      list: []
    };
  },
  fileSelected: function(metadata) {
    if ((metadata != null ? metadata.type : void 0) === CloudMetadata.Folder) {
      return this.setState(this.getStateForFolder(metadata));
    } else if ((metadata != null ? metadata.type : void 0) === CloudMetadata.File) {
      return this.setState({
        filename: metadata.name,
        metadata: metadata
      });
    } else {
      return this.setState(this.getStateForFolder(null));
    }
  },
  confirm: function() {
    var confirmed, existingMetadata, filename, metadata;
    confirmed = (function(_this) {
      return function(metadata) {
        var base;
        _this.state.metadata = metadata;
        if (_this.state.metadata.provider !== _this.props.provider) {
          _this.state.metadata.provider = _this.props.provider;
          _this.state.metadata.providerData = {};
        }
        if (typeof (base = _this.props.dialog).callback === "function") {
          base.callback(_this.state.metadata);
        }
        return _this.props.close();
      };
    })(this);
    filename = $.trim(this.state.filename);
    existingMetadata = this.findMetadata(filename, this.state.list);
    metadata = this.state.metadata || existingMetadata;
    if (metadata) {
      if (this.isOpen()) {
        return confirmed(metadata);
      } else if (existingMetadata) {
        return this.props.client.confirm("Are you sure you want to overwrite " + existingMetadata.name + "?", function() {
          return confirmed(existingMetadata);
        });
      } else {
        return confirmed(metadata);
      }
    } else if (this.isOpen()) {
      return this.props.client.alert(filename + " not found");
    } else {
      return confirmed(new CloudMetadata({
        name: filename,
        type: CloudMetadata.File,
        parent: this.state.folder || null,
        provider: this.props.provider
      }));
    }
  },
  remove: function() {
    if (this.state.metadata && this.state.metadata.type !== CloudMetadata.Folder) {
      return this.props.client.confirm(tr("~FILE_DIALOG.REMOVE_CONFIRM", {
        filename: this.state.metadata.name
      }), (function(_this) {
        return function() {
          return _this.props.provider.remove(_this.state.metadata, function(err) {
            var index, list;
            if (!err) {
              _this.props.client.alert(tr("~FILE_DIALOG.REMOVED_MESSAGE", {
                filename: _this.state.metadata.name
              }), tr("~FILE_DIALOG.REMOVED_TITLE"));
              list = _this.state.list.slice(0);
              index = list.indexOf(_this.state.metadata);
              list.splice(index, 1);
              return _this.setState({
                list: list,
                metadata: null,
                filename: ''
              });
            }
          });
        };
      })(this));
    }
  },
  cancel: function() {
    return this.props.close();
  },
  findMetadata: function(filename, list) {
    var j, len, metadata;
    for (j = 0, len = list.length; j < len; j++) {
      metadata = list[j];
      if (metadata.name === filename) {
        return metadata;
      }
    }
    return null;
  },
  watchForEnter: function(e) {
    if (e.keyCode === 13 && !this.confirmDisabled()) {
      return this.confirm();
    }
  },
  confirmDisabled: function() {
    return (this.state.filename.length === 0) || (this.isOpen() && !this.state.metadata);
  },
  renderWhenAuthorized: function() {
    var confirmDisabled, removeDisabled;
    confirmDisabled = this.confirmDisabled();
    removeDisabled = (this.state.metadata === null) || (this.state.metadata.type === CloudMetadata.Folder);
    return div({
      className: 'dialogTab'
    }, input({
      type: 'text',
      value: this.state.filename,
      placeholder: tr("~FILE_DIALOG.FILENAME"),
      onChange: this.filenameChanged,
      onKeyDown: this.watchForEnter
    }), FileList({
      provider: this.props.provider,
      folder: this.state.folder,
      selectedFile: this.state.metadata,
      fileSelected: this.fileSelected,
      fileConfirmed: this.confirm,
      list: this.state.list,
      listLoaded: this.listLoaded,
      client: this.props.client
    }), div({
      className: 'buttons'
    }, button({
      onClick: this.confirm,
      disabled: confirmDisabled,
      className: confirmDisabled ? 'disabled' : ''
    }, this.isOpen() ? tr("~FILE_DIALOG.OPEN") : tr("~FILE_DIALOG.SAVE")), this.props.provider.can('remove') ? button({
      onClick: this.remove,
      disabled: removeDisabled,
      className: removeDisabled ? 'disabled' : ''
    }, tr("~FILE_DIALOG.REMOVE")) : void 0, button({
      onClick: this.cancel
    }, tr("~FILE_DIALOG.CANCEL"))));
  }
});

module.exports = FileDialogTab;


},{"../providers/provider-interface":65,"../utils/translate":79,"./authorize-mixin":83}],89:[function(require,module,exports){
var LocalFileImportTab, LocalFileTab, ModalTabbedDialog, TabbedPanel, UrlTab, tr;

ModalTabbedDialog = React.createFactory(require('./modal-tabbed-dialog-view'));

TabbedPanel = require('./tabbed-panel-view');

LocalFileTab = React.createFactory(require('./local-file-tab-list-view'));

UrlTab = React.createFactory(require('./url-tab-view'));

tr = require('../utils/translate');

LocalFileImportTab = React.createFactory(React.createClass);

module.exports = React.createClass({
  displayName: 'ImportTabbedDialog',
  importFile: function(metadata, via) {
    var reader;
    switch (metadata.provider) {
      case 'localFile':
        reader = new FileReader();
        reader.onload = (function(_this) {
          return function(loaded) {
            var base, data;
            data = {
              file: {
                name: metadata.providerData.file.name,
                content: loaded.target.result,
                object: metadata.providerData.file
              },
              via: via
            };
            return typeof (base = _this.props.dialog).callback === "function" ? base.callback(data) : void 0;
          };
        })(this);
        return reader.readAsText(metadata.providerData.file);
    }
  },
  importUrl: function(url, via) {
    var base;
    return typeof (base = this.props.dialog).callback === "function" ? base.callback({
      url: url,
      via: via
    }) : void 0;
  },
  render: function() {
    var tabs;
    tabs = [
      TabbedPanel.Tab({
        key: 0,
        label: tr("~IMPORT.LOCAL_FILE"),
        component: LocalFileTab({
          client: this.props.client,
          dialog: {
            callback: this.importFile
          },
          provider: 'localFile',
          close: this.props.close
        })
      }), TabbedPanel.Tab({
        key: 1,
        label: tr("~IMPORT.URL"),
        component: UrlTab({
          client: this.props.client,
          dialog: {
            callback: this.importUrl
          },
          close: this.props.close
        })
      })
    ];
    return ModalTabbedDialog({
      title: tr("~DIALOG.IMPORT_DATA"),
      close: this.props.close,
      tabs: tabs,
      selectedTabIndex: 0
    });
  }
});


},{"../utils/translate":79,"./local-file-tab-list-view":90,"./modal-tabbed-dialog-view":94,"./tabbed-panel-view":100,"./url-tab-view":101}],90:[function(require,module,exports){
var CloudMetadata, button, div, input, ref, tr;

ref = React.DOM, div = ref.div, input = ref.input, button = ref.button;

tr = require('../utils/translate');

CloudMetadata = (require('../providers/provider-interface')).CloudMetadata;

module.exports = React.createClass({
  displayName: 'LocalFileListTab',
  componentDidMount: function() {
    this.refs.dropZone.addEventListener('drop', this.drop);
  },
  componentWillUnmount: function() {
    this.refs.dropZone.removeEventListener('drop', this.drop);
  },
  getInitialState: function() {
    return {
      hover: false
    };
  },
  changed: function(e) {
    var files;
    files = e.target.files;
    if (files.length > 1) {
      return this.props.client.alert(tr("~LOCAL_FILE_DIALOG.MULTIPLE_FILES_SELECTED"));
    } else if (files.length === 1) {
      return this.openFile(files[0], 'select');
    }
  },
  openFile: function(file, via) {
    var base, metadata;
    metadata = new CloudMetadata({
      name: file.name.split('.')[0],
      type: CloudMetadata.File,
      parent: null,
      provider: this.props.provider,
      providerData: {
        file: file
      }
    });
    if (typeof (base = this.props.dialog).callback === "function") {
      base.callback(metadata, via);
    }
    return this.props.close();
  },
  cancel: function() {
    return this.props.close();
  },
  dragEnter: function(e) {
    e.preventDefault();
    return this.setState({
      hover: true
    });
  },
  dragLeave: function(e) {
    e.preventDefault();
    return this.setState({
      hover: false
    });
  },
  drop: function(e) {
    var droppedFiles;
    e.preventDefault();
    e.stopPropagation();
    droppedFiles = e.dataTransfer ? e.dataTransfer.files : e.target.files;
    if (droppedFiles.length > 1) {
      this.props.client.alert(tr("~LOCAL_FILE_DIALOG.MULTIPLE_FILES_DROPPED"));
    } else if (droppedFiles.length === 1) {
      this.openFile(droppedFiles[0], 'drop');
    }
  },
  render: function() {
    var dropClass;
    dropClass = "dropArea" + (this.state.hover ? ' dropHover' : '');
    return div({
      className: 'dialogTab localFileLoad'
    }, div({
      ref: 'dropZone',
      className: dropClass,
      onDragEnter: this.dragEnter,
      onDragLeave: this.dragLeave
    }, tr("~LOCAL_FILE_DIALOG.DROP_FILE_HERE"), input({
      type: 'file',
      onChange: this.changed
    })), div({
      className: 'buttons'
    }, button({
      onClick: this.cancel
    }, tr("~FILE_DIALOG.CANCEL"))));
  }
});


},{"../providers/provider-interface":65,"../utils/translate":79}],91:[function(require,module,exports){
var CloudMetadata, FileSaver, a, button, cloudContentFactory, div, input, ref, tr;

ref = React.DOM, div = ref.div, input = ref.input, button = ref.button, a = ref.a;

tr = require('../utils/translate');

CloudMetadata = (require('../providers/provider-interface')).CloudMetadata;

cloudContentFactory = (require('../providers/provider-interface')).cloudContentFactory;

FileSaver = require('../lib/file-saver');

module.exports = React.createClass({
  displayName: 'LocalFileSaveTab',
  getInitialState: function() {
    var extension, filename, hasPropsContent, ref1, ref2, ref3, state;
    hasPropsContent = ((ref1 = this.props.dialog.data) != null ? ref1.content : void 0) != null;
    filename = ((ref2 = this.props.client.state.metadata) != null ? ref2.name : void 0) || (tr("~MENUBAR.UNTITLED_DOCUMENT"));
    extension = hasPropsContent && this.props.dialog.data.extension ? this.props.dialog.data.extension : 'json';
    return state = {
      filename: filename,
      supportsDownloadAttribute: document.createElement('a').download !== void 0,
      downloadFilename: this.getDownloadFilename(hasPropsContent, filename, extension),
      extension: extension,
      mimeType: hasPropsContent && (this.props.dialog.data.mimeType != null) ? this.props.dialog.data.mimeType : 'text/plain',
      shared: this.props.client.isShared(),
      hasPropsContent: hasPropsContent,
      includeShareInfo: hasPropsContent,
      gotContent: hasPropsContent,
      content: (ref3 = this.props.dialog.data) != null ? ref3.content : void 0
    };
  },
  componentDidMount: function() {
    if (!this.state.hasPropsContent) {
      this.props.client._event('getContent', {
        shared: this.props.client._sharedMetadata()
      }, (function(_this) {
        return function(content) {
          var envelopedContent, ref1, ref2;
          envelopedContent = cloudContentFactory.createEnvelopedCloudContent(content);
          if ((ref1 = _this.props.client.state) != null) {
            if ((ref2 = ref1.currentContent) != null) {
              ref2.copyMetadataTo(envelopedContent);
            }
          }
          return _this.setState({
            gotContent: true,
            content: envelopedContent
          });
        };
      })(this));
    }
    return this.refs.download.addEventListener('click', this.confirm);
  },
  componentWillUnmount: function() {
    return this.refs.download.removeEventListener('click', this.confirm);
  },
  filenameChanged: function() {
    var filename;
    filename = this.refs.filename.value;
    return this.setState({
      filename: filename,
      downloadFilename: this.getDownloadFilename(this.state.hasPropsContent, filename, this.state.extension)
    });
  },
  includeShareInfoChanged: function() {
    return this.setState({
      includeShareInfo: this.refs.includeShareInfo.checked
    });
  },
  getDownloadFilename: function(hasPropsContent, filename, extension) {
    var newName;
    newName = filename.replace(/^\s+|\s+$/, '');
    if (hasPropsContent) {
      return CloudMetadata.newExtension(newName, extension);
    } else {
      return CloudMetadata.withExtension(newName, extension);
    }
  },
  confirm: function(e, simulateClick) {
    var blob, metadata;
    if (!this.confirmDisabled()) {
      if (this.state.supportsDownloadAttribute) {
        this.refs.download.href = this.props.client.getDownloadUrl(this.state.content, this.state.includeShareInfo, this.state.mimeType);
        if (simulateClick) {
          this.refs.download.click();
        }
      } else {
        blob = this.props.client.getDownloadBlob(this.state.content, this.state.includeShareInfo, this.state.mimeType);
        FileSaver.saveAs(blob, this.state.downloadFilename, true);
        if (e != null) {
          e.preventDefault();
        }
      }
      metadata = new CloudMetadata({
        name: this.state.downloadFilename.split('.')[0],
        type: CloudMetadata.File,
        parent: null,
        provider: this.props.provider
      });
      this.props.dialog.callback(metadata);
      this.props.close();
      return this.state.supportsDownloadAttribute;
    } else {
      if (e != null) {
        e.preventDefault();
      }
    }
  },
  contextMenu: function(e) {
    this.refs.download.href = this.props.client.getDownloadUrl(this.state.content, this.state.includeShareInfo, this.state.mimeType);
  },
  cancel: function() {
    this.props.close();
  },
  watchForEnter: function(e) {
    if (e.keyCode === 13 && !this.confirmDisabled()) {
      e.preventDefault();
      e.stopPropagation();
      this.confirm(null, true);
    }
  },
  confirmDisabled: function() {
    return (this.state.downloadFilename.length === 0) || !this.state.gotContent;
  },
  render: function() {
    var confirmDisabled, downloadAnchor, downloadButton;
    confirmDisabled = this.confirmDisabled();
    downloadAnchor = a({
      href: '#',
      ref: 'download',
      className: (confirmDisabled ? 'disabled' : ''),
      download: this.state.downloadFilename,
      onContextMenu: this.contextMenu
    }, tr('~FILE_DIALOG.DOWNLOAD'));
    downloadButton = button({
      ref: 'download',
      className: (confirmDisabled ? 'disabled' : '')
    }, tr('~FILE_DIALOG.DOWNLOAD'));
    return div({
      className: 'dialogTab localFileSave'
    }, input({
      type: 'text',
      ref: 'filename',
      value: this.state.filename,
      placeholder: tr("~FILE_DIALOG.FILENAME"),
      onChange: this.filenameChanged,
      onKeyDown: this.watchForEnter
    }), div({
      className: 'saveArea'
    }, this.state.shared && !this.state.hasPropsContent ? div({
      className: 'shareCheckbox'
    }, input({
      type: 'checkbox',
      ref: 'includeShareInfo',
      value: this.state.includeShareInfo,
      onChange: this.includeShareInfoChanged
    }), tr('~DOWNLOAD_DIALOG.INCLUDE_SHARE_INFO')) : void 0), div({
      className: 'note'
    }, tr('~FILE_DIALOG.DOWNLOAD_NOTE', {
      download: tr('~FILE_DIALOG.DOWNLOAD')
    })), div({
      className: 'buttons'
    }, this.state.supportsDownloadAttribute ? downloadAnchor : downloadButton, button({
      onClick: this.cancel
    }, tr("~FILE_DIALOG.CANCEL"))));
  }
});


},{"../lib/file-saver":55,"../providers/provider-interface":65,"../utils/translate":79}],92:[function(require,module,exports){
var Dropdown, div, i, input, ref, span, tr;

ref = React.DOM, div = ref.div, i = ref.i, span = ref.span, input = ref.input;

Dropdown = React.createFactory(require('./dropdown-view'));

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'MenuBar',
  componentWillMount: function() {
    if (window.addEventListener) {
      window.addEventListener('mousedown', this.checkBlur, true);
      window.addEventListener('touchstart', this.checkBlur, true);
    }
    return this.props.client._ui.listen((function(_this) {
      return function(event) {
        switch (event.type) {
          case 'editInitialFilename':
            _this.setState({
              editingFilename: true,
              editingInitialFilename: true
            });
            return setTimeout((function() {
              return _this.focusFilename();
            }), 10);
        }
      };
    })(this));
  },
  componentWillUnmount: function() {
    if (window.removeEventListener) {
      window.removeEventListener('mousedown', this.checkBlur, true);
      return window.removeEventListener('touchstart', this.checkBlur, true);
    }
  },
  getFilename: function(props) {
    var ref1;
    if (((ref1 = props.filename) != null ? ref1.length : void 0) > 0) {
      return props.filename;
    } else {
      return tr("~MENUBAR.UNTITLED_DOCUMENT");
    }
  },
  getEditableFilename: function(props) {
    var ref1;
    if (((ref1 = props.filename) != null ? ref1.length : void 0) > 0) {
      return props.filename;
    } else {
      return tr("~MENUBAR.UNTITLED_DOCUMENT");
    }
  },
  getInitialState: function() {
    var state;
    return state = {
      editingFilename: false,
      filename: this.getFilename(this.props),
      editableFilename: this.getEditableFilename(this.props),
      initialEditableFilename: this.getEditableFilename(this.props),
      editingInitialFilename: false
    };
  },
  componentWillReceiveProps: function(nextProps) {
    return this.setState({
      filename: this.getFilename(nextProps),
      editableFilename: this.getEditableFilename(nextProps),
      provider: nextProps.provider
    });
  },
  filenameClicked: function(e) {
    e.preventDefault();
    e.stopPropagation();
    this.setState({
      editingFilename: true,
      editingInitialFilename: false
    });
    return setTimeout(((function(_this) {
      return function() {
        return _this.focusFilename();
      };
    })(this)), 10);
  },
  filenameChanged: function() {
    return this.setState({
      editableFilename: this.filename().value
    });
  },
  filenameBlurred: function() {
    return this.rename();
  },
  filename: function() {
    return ReactDOM.findDOMNode(this.refs.filename);
  },
  focusFilename: function() {
    var el;
    el = this.filename();
    el.focus();
    return el.select();
  },
  cancelEdit: function() {
    var ref1;
    return this.setState({
      editingFilename: false,
      editableFilename: ((ref1 = this.state.filename) != null ? ref1.length : void 0) > 0 ? this.state.filename : this.state.initialEditableFilename
    });
  },
  rename: function() {
    var filename;
    filename = this.state.editableFilename.replace(/^\s+|\s+$/, '');
    if (filename.length > 0) {
      if (this.state.editingInitialFilename) {
        this.props.client.setInitialFilename(filename);
      } else {
        this.props.client.rename(this.props.client.state.metadata, filename);
      }
      return this.setState({
        editingFilename: false,
        filename: filename,
        editableFilename: filename
      });
    } else {
      return this.cancelEdit();
    }
  },
  watchForEnter: function(e) {
    if (e.keyCode === 13) {
      return this.rename();
    } else if (e.keyCode === 27) {
      return this.cancelEdit();
    }
  },
  help: function() {
    return window.open(this.props.options.help, '_blank');
  },
  checkBlur: function(e) {
    if (this.state.editingFilename && e.target !== this.filename()) {
      return this.filenameBlurred();
    }
  },
  render: function() {
    var ref1;
    return div({
      className: 'menu-bar'
    }, div({
      className: 'menu-bar-left'
    }, Dropdown({
      items: this.props.items
    }), this.state.editingFilename ? div({
      className: 'menu-bar-content-filename'
    }, input({
      ref: 'filename',
      value: this.state.editableFilename,
      onChange: this.filenameChanged,
      onKeyDown: this.watchForEnter
    })) : div({
      className: 'menu-bar-content-filename',
      onClick: this.filenameClicked
    }, this.state.filename), this.props.fileStatus ? span({
      className: "menu-bar-file-status-" + this.props.fileStatus.type
    }, this.props.fileStatus.message) : void 0), div({
      className: 'menu-bar-right'
    }, this.props.options.info ? span({
      className: 'menu-bar-info'
    }, this.props.options.info) : void 0, ((ref1 = this.props.provider) != null ? ref1.authorized() : void 0) ? this.props.provider.renderUser() : void 0, this.props.options.help ? i({
      style: {
        fontSize: "13px"
      },
      className: 'clickable icon-help',
      onClick: this.help
    }) : void 0));
  }
});


},{"../utils/translate":79,"./dropdown-view":87}],93:[function(require,module,exports){
var Modal, div, i, ref;

Modal = React.createFactory(require('./modal-view'));

ref = React.DOM, div = ref.div, i = ref.i;

module.exports = React.createClass({
  displayName: 'ModalDialog',
  close: function() {
    var base;
    return typeof (base = this.props).close === "function" ? base.close() : void 0;
  },
  render: function() {
    return Modal({
      close: this.close,
      zIndex: this.props.zIndex
    }, div({
      className: 'modal-dialog'
    }, div({
      className: 'modal-dialog-wrapper'
    }, div({
      className: 'modal-dialog-title'
    }, i({
      className: "modal-dialog-title-close icon-ex",
      onClick: this.close
    }), this.props.title || 'Untitled Dialog'), div({
      className: 'modal-dialog-workspace'
    }, this.props.children))));
  }
});


},{"./modal-view":95}],94:[function(require,module,exports){
var ModalDialog, TabbedPanel;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

TabbedPanel = React.createFactory(require('./tabbed-panel-view'));

module.exports = React.createClass({
  displayName: 'ModalTabbedDialogView',
  render: function() {
    return ModalDialog({
      title: this.props.title,
      close: this.props.close
    }, TabbedPanel({
      tabs: this.props.tabs,
      selectedTabIndex: this.props.selectedTabIndex
    }));
  }
});


},{"./modal-dialog-view":93,"./tabbed-panel-view":100}],95:[function(require,module,exports){
var div;

div = React.DOM.div;

module.exports = React.createClass({
  displayName: 'Modal',
  watchForEscape: function(e) {
    var base;
    if (e.keyCode === 27) {
      return typeof (base = this.props).close === "function" ? base.close() : void 0;
    }
  },
  getDimensions: function() {
    return {
      width: $(window).width() + 'px',
      height: $(window).height() + 'px'
    };
  },
  getInitialState: function() {
    var dimensions, initialState;
    dimensions = this.getDimensions();
    return initialState = {
      backgroundStyle: this.getBackgroundStyle(dimensions),
      contentStyle: this.getContentStyle(dimensions)
    };
  },
  getBackgroundStyle: function(dimensions) {
    if (this.props.zIndex) {
      return {
        zIndex: this.props.zIndex,
        width: dimensions.width,
        height: dimensions.height
      };
    } else {
      return dimensions;
    }
  },
  getContentStyle: function(dimensions) {
    if (this.props.zIndex) {
      return {
        zIndex: this.props.zIndex + 1,
        width: dimensions.width,
        height: dimensions.height
      };
    } else {
      return dimensions;
    }
  },
  updateStyles: function() {
    var dimensions;
    dimensions = this.getDimensions();
    return this.setState({
      backgroundStyle: this.getBackgroundStyle(dimensions),
      contentStyle: this.getContentStyle(dimensions)
    });
  },
  componentDidMount: function() {
    $(window).bind('keyup', this.watchForEscape);
    return $(window).bind('resize', this.updateStyles);
  },
  componentWillUnmount: function() {
    $(window).unbind('keyup', this.watchForEscape);
    return $(window).unbind('resize', this.updateStyles);
  },
  render: function() {
    return div({
      className: 'modal'
    }, div({
      className: 'modal-background',
      style: this.state.backgroundStyle
    }), div({
      className: 'modal-content',
      style: this.state.contentStyle
    }, this.props.children));
  }
});


},{}],96:[function(require,module,exports){
var CloudMetadata, FileDialogTab, ModalTabbedDialog, SelectProviderDialogTab, TabbedPanel, tr;

ModalTabbedDialog = React.createFactory(require('./modal-tabbed-dialog-view'));

TabbedPanel = require('./tabbed-panel-view');

CloudMetadata = (require('../providers/provider-interface')).CloudMetadata;

FileDialogTab = React.createFactory(require('./file-dialog-tab-view'));

SelectProviderDialogTab = React.createFactory(require('./select-provider-dialog-tab-view'));

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'ProviderTabbedDialog',
  render: function() {
    var TabComponent, capability, component, filteredTabComponent, i, j, len, onSelected, provider, ref, ref1, ref2, ref3, selectedTabIndex, tabs;
    ref = (function() {
      switch (this.props.dialog.action) {
        case 'openFile':
          return ['list', FileDialogTab];
        case 'saveFile':
        case 'saveFileAs':
          return ['save', FileDialogTab];
        case 'saveSecondaryFileAs':
          return ['export', FileDialogTab];
        case 'createCopy':
          return ['save', FileDialogTab];
        case 'selectProvider':
          return [null, SelectProviderDialogTab];
      }
    }).call(this), capability = ref[0], TabComponent = ref[1];
    tabs = [];
    selectedTabIndex = 0;
    ref1 = this.props.client.state.availableProviders;
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
      provider = ref1[i];
      if (!capability || provider.capabilities[capability]) {
        filteredTabComponent = provider.filterTabComponent(capability, TabComponent);
        if (filteredTabComponent) {
          component = filteredTabComponent({
            client: this.props.client,
            dialog: this.props.dialog,
            close: this.props.close,
            provider: provider
          });
          onSelected = provider.onProviderTabSelected ? provider.onProviderTabSelected.bind(provider) : null;
          tabs.push(TabbedPanel.Tab({
            key: i,
            label: tr(provider.displayName),
            component: component,
            capability: capability,
            onSelected: onSelected
          }));
          if (provider.name === ((ref2 = this.props.client.state.metadata) != null ? (ref3 = ref2.provider) != null ? ref3.name : void 0 : void 0)) {
            selectedTabIndex = tabs.length - 1;
          }
        }
      }
    }
    return ModalTabbedDialog({
      title: tr(this.props.dialog.title),
      close: this.props.close,
      tabs: tabs,
      selectedTabIndex: selectedTabIndex
    });
  }
});


},{"../providers/provider-interface":65,"../utils/translate":79,"./file-dialog-tab-view":88,"./modal-tabbed-dialog-view":94,"./select-provider-dialog-tab-view":98,"./tabbed-panel-view":100}],97:[function(require,module,exports){
var ModalDialog, a, button, div, input, ref, tr;

ref = React.DOM, div = ref.div, input = ref.input, a = ref.a, button = ref.button;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'RenameDialogView',
  getInitialState: function() {
    var filename, state;
    filename = this.props.filename || '';
    return state = {
      filename: filename,
      trimmedFilename: this.trim(filename)
    };
  },
  componentDidMount: function() {
    this.filename = ReactDOM.findDOMNode(this.refs.filename);
    return this.filename.focus();
  },
  updateFilename: function() {
    var filename;
    filename = this.filename.value;
    return this.setState({
      filename: filename,
      trimmedFilename: this.trim(filename)
    });
  },
  trim: function(s) {
    return s.replace(/^\s+|\s+$/, '');
  },
  rename: function(e) {
    var base;
    if (this.state.trimmedFilename.length > 0) {
      if (typeof (base = this.props).callback === "function") {
        base.callback(this.state.filename);
      }
      return this.props.close();
    } else {
      e.preventDefault();
      return this.filename.focus();
    }
  },
  render: function() {
    return ModalDialog({
      title: tr('~DIALOG.RENAME'),
      close: this.props.close
    }, div({
      className: 'rename-dialog'
    }, input({
      ref: 'filename',
      placeholder: 'Filename',
      value: this.state.filename,
      onChange: this.updateFilename
    }), div({
      className: 'buttons'
    }, button({
      className: (this.state.trimmedFilename.length === 0 ? 'disabled' : ''),
      onClick: this.rename
    }, tr('~RENAME_DIALOG.RENAME')), button({
      onClick: this.props.close
    }, tr('~RENAME_DIALOG.CANCEL')))));
  }
});


},{"../utils/translate":79,"./modal-dialog-view":93}],98:[function(require,module,exports){
var SelectProviderDialogTab, div;

div = React.DOM.div;

SelectProviderDialogTab = React.createFactory(React.createClass({
  displayName: 'SelectProviderDialogTab',
  render: function() {
    return div({}, "TODO: SelectProviderDialogTab: " + this.props.provider.displayName);
  }
}));

module.exports = SelectProviderDialogTab;


},{}],99:[function(require,module,exports){
var ModalDialog, SHOW_LONGEVITY_WARNING, SocialIcon, a, button, circle, div, g, getQueryParam, input, li, path, ref, socialIcons, span, strong, svg, textarea, tr, ul;

ref = React.DOM, div = ref.div, input = ref.input, a = ref.a, button = ref.button, strong = ref.strong, textarea = ref.textarea, svg = ref.svg, g = ref.g, path = ref.path, span = ref.span, circle = ref.circle, ul = ref.ul, li = ref.li;

SHOW_LONGEVITY_WARNING = false;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

getQueryParam = require('../utils/get-query-param');

tr = require('../utils/translate');

socialIcons = require('svg-social-icons/lib/icons.json');

SocialIcon = React.createFactory(React.createClass({
  displayName: 'SocialIcon',
  getInitialState: function() {
    return {
      data: socialIcons[this.props.icon]
    };
  },
  clicked: function() {
    return window.open(this.props.url);
  },
  render: function() {
    return a({
      className: 'social-icon',
      href: this.props.url,
      target: '_blank'
    }, div({
      className: 'social-container'
    }, svg({
      className: 'social-svg',
      viewBox: '0 0 64 64'
    }, g({
      className: 'social-svg-background'
    }, circle({
      cx: 32,
      cy: 32,
      r: 31
    })), g({
      className: 'social-svg-icon'
    }, path({
      d: this.state.data.icon
    })), g({
      className: 'social-svg-mask',
      style: {
        fill: this.state.data.color
      }
    }, path({
      d: this.state.data.mask
    })))));
  }
}));

module.exports = React.createClass({
  displayName: 'ShareDialogView',
  getInitialState: function() {
    return {
      link: this.getShareLink(),
      embed: this.getEmbed(),
      lara: this.getLara({
        codapServerUrl: "https://codap.concord.org/releases/latest/",
        launchButtonText: "Launch"
      }),
      codapServerUrl: "https://codap.concord.org/releases/latest/",
      launchButtonText: "Launch",
      tabSelected: 'link'
    };
  },
  getSharedDocumentId: function() {
    var ref1;
    if (this.props.client.isShared()) {
      return (ref1 = this.props.client.state.currentContent) != null ? ref1.get("sharedDocumentId") : void 0;
    } else {
      return null;
    }
  },
  getShareLink: function() {
    var sharedDocumentId;
    sharedDocumentId = this.getSharedDocumentId();
    if (sharedDocumentId) {
      return (this.props.client.getCurrentUrl()) + "#shared=" + sharedDocumentId;
    } else {
      return null;
    }
  },
  getEmbed: function() {
    if (this.getShareLink()) {
      return "<iframe width=\"398px\" height=\"313px\" frameborder=\"no\" scrolling=\"no\" allowfullscreen=\"true\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" src=\"" + (this.getShareLink()) + "\"></iframe>";
    } else {
      return null;
    }
  },
  getLara: function(options) {
    var buttonText, documentServer, server, sharedDocumentId;
    if (options == null) {
      options = null;
    }
    sharedDocumentId = this.getSharedDocumentId();
    if (sharedDocumentId) {
      documentServer = getQueryParam('documentServer') || 'https://document-store.concord.org';
      while (documentServer.substr(-1) === '/') {
        documentServer = documentServer.slice(0, -1);
      }
      server = encodeURIComponent(((options != null ? options.hasOwnProperty('codapServerUrl') : void 0) ? options.codapServerUrl : this.state.codapServerUrl));
      buttonText = encodeURIComponent(((options != null ? options.hasOwnProperty('launchButtonText') : void 0) ? options.launchButtonText : this.state.launchButtonText));
      return documentServer + "/v2/documents/" + sharedDocumentId + "/launch?server=" + server + "&buttonText=" + buttonText;
    } else {
      return null;
    }
  },
  copy: function(e) {
    var copied, mark, range, selection, toCopy;
    e.preventDefault();
    copied = false;
    toCopy = this.state[this.state.tabSelected];
    try {
      mark = document.createElement('mark');
      mark.innerText = toCopy;
      document.body.appendChild(mark);
      selection = document.getSelection();
      selection.removeAllRanges();
      range = document.createRange();
      range.selectNode(mark);
      selection.addRange(range);
      return copied = document.execCommand('copy');
    } catch (error) {
      try {
        window.clipboardData.setData('text', toCopy);
        return copied = true;
      } catch (error) {
        return copied = false;
      }
    } finally {
      if (selection) {
        if (typeof selection.removeRange === 'function') {
          selection.removeRange(range);
        } else {
          selection.removeAllRanges();
        }
      }
      if (mark) {
        document.body.removeChild(mark);
      }
      this.props.client.alert(tr(copied ? "~SHARE_DIALOG.COPY_SUCCESS" : "~SHARE_DIALOG.COPY_ERROR"), tr("~SHARE_DIALOG.COPY_TITLE"));
    }
  },
  updateShare: function() {
    return this.props.client.shareUpdate();
  },
  toggleShare: function(e) {
    e.preventDefault();
    return this.props.client.toggleShare((function(_this) {
      return function() {
        return _this.setState({
          link: _this.getShareLink(),
          embed: _this.getEmbed(),
          lara: _this.getLara()
        });
      };
    })(this));
  },
  selectLinkTab: function() {
    return this.setState({
      tabSelected: 'link'
    });
  },
  selectEmbedTab: function() {
    return this.setState({
      tabSelected: 'embed'
    });
  },
  selectLaraTab: function() {
    return this.setState({
      tabSelected: 'lara'
    });
  },
  changedCodapServerUrl: function() {
    var codapServerUrl;
    codapServerUrl = ReactDOM.findDOMNode(this.refs.codapServerUrl).value;
    return this.setState({
      codapServerUrl: codapServerUrl,
      lara: this.getLara({
        codapServerUrl: codapServerUrl
      })
    });
  },
  changedLaunchButtonText: function() {
    var launchButtonText;
    launchButtonText = ReactDOM.findDOMNode(this.refs.launchButtonText).value;
    return this.setState({
      launchButtonText: launchButtonText,
      lara: this.getLara({
        launchButtonText: launchButtonText
      })
    });
  },
  render: function() {
    var sharing;
    sharing = this.state.link !== null;
    return ModalDialog({
      title: tr('~DIALOG.SHARED'),
      close: this.props.close
    }, div({
      className: 'share-dialog'
    }, div({
      className: 'share-top-dialog'
    }, sharing ? div({}, div({
      className: 'share-status'
    }, "Shared view is ", strong({}, "enabled"), a({
      href: '#',
      onClick: this.toggleShare
    }, 'Stop sharing')), div({
      className: 'share-button'
    }, button({
      onClick: this.updateShare
    }, "Update shared view"), div({
      className: 'share-button-help-sharing'
    }, a({
      href: this.state.link,
      target: '_blank'
    }, 'Preview shared view')))) : div({}, div({
      className: 'share-status'
    }, "Shared view is ", strong({}, "disabled")), div({
      className: 'share-button'
    }, button({
      onClick: this.toggleShare
    }, "Enable sharing"), div({
      className: 'share-button-help-not-sharing'
    }, "When sharing is enabled, a copy of the current view is created.  This copy can be shared.")))), sharing ? div({}, ul({
      className: 'sharing-tabs'
    }, li({
      className: "sharing-tab" + (this.state.tabSelected === 'link' ? ' sharing-tab-selected' : ''),
      style: {
        marginLeft: 10
      },
      onClick: this.selectLinkTab
    }, 'Link'), li({
      className: "sharing-tab sharing-tab-embed" + (this.state.tabSelected === 'embed' ? ' sharing-tab-selected' : ''),
      onClick: this.selectEmbedTab
    }, 'Embed'), this.props.enableLaraSharing ? li({
      className: "sharing-tab sharing-tab-lara" + (this.state.tabSelected === 'lara' ? ' sharing-tab-selected' : ''),
      onClick: this.selectLaraTab
    }, 'LARA') : void 0), div({
      className: 'sharing-tab-contents'
    }, (function() {
      switch (this.state.tabSelected) {
        case 'embed':
          return div({}, "Embed code for including in webpages or other web-based content", document.execCommand || window.clipboardData ? a({
            className: 'copy-link',
            href: '#',
            onClick: this.copy
          }, tr('~SHARE_DIALOG.COPY')) : void 0, div({}, textarea({
            value: this.state.embed,
            readOnly: true
          })));
        case 'lara':
          return div({}, "Use this link when creating an activity in LARA", document.execCommand || window.clipboardData ? a({
            className: 'copy-link',
            href: '#',
            onClick: this.copy
          }, tr('~SHARE_DIALOG.COPY')) : void 0, div({}, input({
            value: this.state.lara,
            readOnly: true
          })), div({
            className: 'lara-settings'
          }, div({
            className: 'codap-server-url'
          }, "CODAP Server URL:", div({}, input({
            value: this.state.codapServerUrl,
            ref: 'codapServerUrl',
            onChange: this.changedCodapServerUrl
          }))), div({
            className: 'launch-button-text'
          }, "Launch Button Text:", div({}, input({
            value: this.state.launchButtonText,
            ref: 'launchButtonText',
            onChange: this.changedLaunchButtonText
          })))));
        default:
          return div({}, "Paste this into an email or text message ", document.execCommand || window.clipboardData ? a({
            className: 'copy-link',
            href: '#',
            onClick: this.copy
          }, tr('~SHARE_DIALOG.COPY')) : void 0, div({}, input({
            value: this.state.link,
            readOnly: true
          })), div({
            className: 'social-icons'
          }, SocialIcon({
            icon: 'facebook',
            url: "https://www.facebook.com/sharer/sharer.php?u=" + (encodeURIComponent(this.state.link))
          }), SocialIcon({
            icon: 'twitter',
            url: "https://twitter.com/home?status=" + (encodeURIComponent(this.state.link))
          })));
      }
    }).call(this))) : void 0, div({
      className: 'buttons'
    }, button({
      onClick: this.props.close
    }, tr('~SHARE_DIALOG.CLOSE'))), SHOW_LONGEVITY_WARNING ? div({
      className: 'longevity-warning'
    }, tr('~SHARE_DIALOG.LONGEVITY_WARNING')) : void 0));
  }
});


},{"../utils/get-query-param":70,"../utils/translate":79,"./modal-dialog-view":93,"svg-social-icons/lib/icons.json":51}],100:[function(require,module,exports){
var Tab, TabInfo, a, div, li, ref, ul;

ref = React.DOM, div = ref.div, ul = ref.ul, li = ref.li, a = ref.a;

TabInfo = (function() {
  function TabInfo(settings) {
    if (settings == null) {
      settings = {};
    }
    this.label = settings.label, this.component = settings.component, this.capability = settings.capability, this.onSelected = settings.onSelected;
  }

  return TabInfo;

})();

Tab = React.createFactory(React.createClass({
  displayName: 'TabbedPanelTab',
  clicked: function(e) {
    e.preventDefault();
    return this.props.onSelected(this.props.index);
  },
  render: function() {
    var classname;
    classname = this.props.selected ? 'tab-selected' : '';
    return li({
      className: classname,
      onClick: this.clicked
    }, this.props.label);
  }
}));

module.exports = React.createClass({
  displayName: 'TabbedPanelView',
  getInitialState: function() {
    return {
      selectedTabIndex: this.props.selectedTabIndex || 0
    };
  },
  componentDidMount: function() {
    var base;
    return typeof (base = this.props.tabs[this.state.selectedTabIndex]).onSelected === "function" ? base.onSelected(this.props.tabs[this.state.selectedTabIndex].capability) : void 0;
  },
  statics: {
    Tab: function(settings) {
      return new TabInfo(settings);
    }
  },
  selectedTab: function(index) {
    var base;
    if (typeof (base = this.props.tabs[index]).onSelected === "function") {
      base.onSelected(this.props.tabs[index].capability);
    }
    return this.setState({
      selectedTabIndex: index
    });
  },
  renderTab: function(tab, index) {
    return Tab({
      label: tab.label,
      key: index,
      index: index,
      selected: index === this.state.selectedTabIndex,
      onSelected: this.selectedTab
    });
  },
  renderTabs: function() {
    var index, tab;
    return div({
      className: 'workspace-tabs'
    }, (function() {
      var i, len, ref1, results;
      ref1 = this.props.tabs;
      results = [];
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        tab = ref1[index];
        results.push(ul({
          key: index
        }, this.renderTab(tab, index)));
      }
      return results;
    }).call(this));
  },
  renderSelectedPanel: function() {
    var index, tab;
    return div({
      className: 'workspace-tab-component'
    }, (function() {
      var i, len, ref1, results;
      ref1 = this.props.tabs;
      results = [];
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        tab = ref1[index];
        results.push(div({
          key: index,
          style: {
            display: index === this.state.selectedTabIndex ? 'block' : 'none'
          }
        }, tab.component));
      }
      return results;
    }).call(this));
  },
  render: function() {
    return div({
      className: "tabbed-panel"
    }, this.renderTabs(), this.renderSelectedPanel());
  }
});


},{}],101:[function(require,module,exports){
var button, div, input, ref, tr;

ref = React.DOM, div = ref.div, input = ref.input, button = ref.button;

tr = require('../utils/translate');

module.exports = React.createClass({
  displayName: 'UrlTab',
  getInitialState: function() {
    return {
      hover: false
    };
  },
  importUrl: function(url, via) {
    var base;
    if (typeof (base = this.props.dialog).callback === "function") {
      base.callback(url, via);
    }
    return this.props.close();
  },
  "import": function() {
    var url;
    url = $.trim(ReactDOM.findDOMNode(this.refs.url).value);
    if (url.length === 0) {
      return this.props.client.alert(tr("~IMPORT_URL.PLEASE_ENTER_URL"));
    } else {
      return this.importUrl(url, 'select');
    }
  },
  cancel: function() {
    return this.props.close();
  },
  dragEnter: function(e) {
    e.preventDefault();
    return this.setState({
      hover: true
    });
  },
  dragLeave: function(e) {
    e.preventDefault();
    return this.setState({
      hover: false
    });
  },
  drop: function(e) {
    var droppedUrls;
    e.preventDefault();
    if (e.dataTransfer) {
      droppedUrls = (e.dataTransfer.getData('url') || e.dataTransfer.getData('text/uri-list') || '').split('\n');
      if (droppedUrls.length > 1) {
        return this.props.client.alert(tr("~IMPORT_URL.MULTIPLE_URLS_DROPPED"));
      } else if (droppedUrls.length === 1) {
        return this.importUrl(droppedUrls[0], 'drop');
      }
    }
  },
  render: function() {
    var dropClass;
    dropClass = "urlDropArea" + (this.state.hover ? ' dropHover' : '');
    return div({
      className: 'dialogTab urlImport'
    }, div({
      className: dropClass,
      onDragEnter: this.dragEnter,
      onDragLeave: this.dragLeave,
      onDrop: this.drop
    }, tr("~URL_TAB.DROP_URL_HERE")), input({
      ref: 'url',
      placeholder: 'URL'
    }), div({
      className: 'buttons'
    }, button({
      onClick: this["import"]
    }, tr("~URL_TAB.IMPORT")), button({
      onClick: this.cancel
    }, tr("~FILE_DIALOG.CANCEL"))));
  }
});


},{"../utils/translate":79}]},{},[52,53])(53)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9jb252ZXJ0L2RtcC5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9jb252ZXJ0L3htbC5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9kaWZmL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvZGlmZi9zcmMvZGlmZi9jaGFyYWN0ZXIuanMiLCJub2RlX21vZHVsZXMvZGlmZi9zcmMvZGlmZi9jc3MuanMiLCJub2RlX21vZHVsZXMvZGlmZi9zcmMvZGlmZi9qc29uLmpzIiwibm9kZV9tb2R1bGVzL2RpZmYvc3JjL2RpZmYvbGluZS5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9kaWZmL3NlbnRlbmNlLmpzIiwibm9kZV9tb2R1bGVzL2RpZmYvc3JjL2RpZmYvd29yZC5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9wYXRjaC9hcHBseS5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy9wYXRjaC9jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvZGlmZi9zcmMvcGF0Y2gvcGFyc2UuanMiLCJub2RlX21vZHVsZXMvZGlmZi9zcmMvdXRpbC9kaXN0YW5jZS1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9kaWZmL3NyYy91dGlsL3BhcmFtcy5qcyIsIm5vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvamlmZi9qaWZmLmpzIiwibm9kZV9tb2R1bGVzL2ppZmYvbGliL0ludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yLmpzIiwibm9kZV9tb2R1bGVzL2ppZmYvbGliL1BhdGNoTm90SW52ZXJ0aWJsZUVycm9yLmpzIiwibm9kZV9tb2R1bGVzL2ppZmYvbGliL1Rlc3RGYWlsZWRFcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9jbG9uZS5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9jb21tdXRlUGF0aHMuanMiLCJub2RlX21vZHVsZXMvamlmZi9saWIvZGVlcEVxdWFscy5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9pbnZlcnNlLmpzIiwibm9kZV9tb2R1bGVzL2ppZmYvbGliL2pzb25QYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9qc29uUG9pbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9qc29uUG9pbnRlclBhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2ppZmYvbGliL2xjcy5qcyIsIm5vZGVfbW9kdWxlcy9qaWZmL2xpYi9wYXRjaGVzLmpzIiwibm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQuanMiLCJub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi9kZWZsYXRlLmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL2luZmxhdGUuanMiLCJub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL3N0cmluZ3MuanMiLCJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY3JjMzIuanMiLCJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9kZWZsYXRlLmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZ3poZWFkZXIuanMiLCJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZmYXN0LmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mbGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzIiwibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMiLCJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi90cmVlcy5qcyIsIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMiLCJub2RlX21vZHVsZXMvc3ZnLXNvY2lhbC1pY29ucy9saWIvaWNvbnMuanNvbiIsInBhY2thZ2UuanNvbiIsInNyYy9jb2RlL2FwcC5jb2ZmZWUiLCJzcmMvY29kZS9jbGllbnQuY29mZmVlIiwic3JjL2NvZGUvbGliL2ZpbGUtc2F2ZXIuanMiLCJzcmMvY29kZS9wcm92aWRlcnMvZG9jdW1lbnQtc3RvcmUtcHJvdmlkZXIuY29mZmVlIiwic3JjL2NvZGUvcHJvdmlkZXJzL2RvY3VtZW50LXN0b3JlLXNoYXJlLXByb3ZpZGVyLmNvZmZlZSIsInNyYy9jb2RlL3Byb3ZpZGVycy9kb2N1bWVudC1zdG9yZS11cmwuY29mZmVlIiwic3JjL2NvZGUvcHJvdmlkZXJzL2dvb2dsZS1kcml2ZS1wcm92aWRlci5jb2ZmZWUiLCJzcmMvY29kZS9wcm92aWRlcnMvbGFyYS1wcm92aWRlci5jb2ZmZWUiLCJzcmMvY29kZS9wcm92aWRlcnMvbG9jYWwtZmlsZS1wcm92aWRlci5jb2ZmZWUiLCJzcmMvY29kZS9wcm92aWRlcnMvbG9jYWxzdG9yYWdlLXByb3ZpZGVyLmNvZmZlZSIsInNyYy9jb2RlL3Byb3ZpZGVycy9wYXRjaGFibGUtY29udGVudC5jb2ZmZWUiLCJzcmMvY29kZS9wcm92aWRlcnMvcG9zdC1tZXNzYWdlLXByb3ZpZGVyLmNvZmZlZSIsInNyYy9jb2RlL3Byb3ZpZGVycy9wcm92aWRlci1pbnRlcmZhY2UuY29mZmVlIiwic3JjL2NvZGUvcHJvdmlkZXJzL3JlYWRvbmx5LXByb3ZpZGVyLmNvZmZlZSIsInNyYy9jb2RlL3Byb3ZpZGVycy91cmwtcHJvdmlkZXIuY29mZmVlIiwic3JjL2NvZGUvdWkuY29mZmVlIiwic3JjL2NvZGUvdXRpbHMvZ2V0LWhhc2gtcGFyYW0uY29mZmVlIiwic3JjL2NvZGUvdXRpbHMvZ2V0LXF1ZXJ5LXBhcmFtLmNvZmZlZSIsInNyYy9jb2RlL3V0aWxzL2lzLWFycmF5LmNvZmZlZSIsInNyYy9jb2RlL3V0aWxzL2lzLXN0cmluZy5jb2ZmZWUiLCJzcmMvY29kZS91dGlscy9sYW5nL2RlLmpzb24iLCJzcmMvY29kZS91dGlscy9sYW5nL2VuLVVTLmpzb24iLCJzcmMvY29kZS91dGlscy9sYW5nL2VzLmpzb24iLCJzcmMvY29kZS91dGlscy9sYW5nL2hlLmpzb24iLCJzcmMvY29kZS91dGlscy9sYW5nL3RyLmpzb24iLCJzcmMvY29kZS91dGlscy9sYW5nL3poLVRXLmpzb24iLCJzcmMvY29kZS91dGlscy90cmFuc2xhdGUuY29mZmVlIiwic3JjL2NvZGUvdXRpbHMvdXJsLXBhcmFtcy5qcyIsInNyYy9jb2RlL3ZpZXdzL2FsZXJ0LWRpYWxvZy12aWV3LmNvZmZlZSIsInNyYy9jb2RlL3ZpZXdzL2FwcC12aWV3LmNvZmZlZSIsInNyYy9jb2RlL3ZpZXdzL2F1dGhvcml6ZS1taXhpbi5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9ibG9ja2luZy1tb2RhbC12aWV3LmNvZmZlZSIsInNyYy9jb2RlL3ZpZXdzL2NvbmZpcm0tZGlhbG9nLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvZG93bmxvYWQtZGlhbG9nLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvZHJvcGRvd24tdmlldy5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9maWxlLWRpYWxvZy10YWItdmlldy5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9pbXBvcnQtdGFiYmVkLWRpYWxvZy12aWV3LmNvZmZlZSIsInNyYy9jb2RlL3ZpZXdzL2xvY2FsLWZpbGUtdGFiLWxpc3Qtdmlldy5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9sb2NhbC1maWxlLXRhYi1zYXZlLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvbWVudS1iYXItdmlldy5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9tb2RhbC1kaWFsb2ctdmlldy5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9tb2RhbC10YWJiZWQtZGlhbG9nLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvbW9kYWwtdmlldy5jb2ZmZWUiLCJzcmMvY29kZS92aWV3cy9wcm92aWRlci10YWJiZWQtZGlhbG9nLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvcmVuYW1lLWRpYWxvZy12aWV3LmNvZmZlZSIsInNyYy9jb2RlL3ZpZXdzL3NlbGVjdC1wcm92aWRlci1kaWFsb2ctdGFiLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3Mvc2hhcmUtZGlhbG9nLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvdGFiYmVkLXBhbmVsLXZpZXcuY29mZmVlIiwic3JjL2NvZGUvdmlld3MvdXJsLXRhYi12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztnQ0M1dkRnQjs7QUFBVCxTQUFTLG1CQUFULENBQTZCLE9BQTdCLEVBQXNDO0FBQzNDLE1BQUksTUFBTSxFQUFOO01BQ0EsZ0VBREo7TUFFSSxtRUFGSixDQUQyQztBQUkzQyxPQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxRQUFRLE1BQVIsRUFBZ0IsR0FBcEMsRUFBeUM7QUFDdkMsYUFBUyxRQUFRLENBQVIsQ0FBVCxDQUR1QztBQUV2QyxRQUFJLE9BQU8sS0FBUCxFQUFjO0FBQ2hCLGtCQUFZLENBQVosQ0FEZ0I7S0FBbEIsTUFFTyxJQUFJLE9BQU8sT0FBUCxFQUFnQjtBQUN6QixrQkFBWSxDQUFDLENBQUQsQ0FEYTtLQUFwQixNQUVBO0FBQ0wsa0JBQVksQ0FBWixDQURLO0tBRkE7O0FBTVAsUUFBSSxJQUFKLENBQVMsQ0FBQyxTQUFELEVBQVksT0FBTyxLQUFQLENBQXJCLEVBVnVDO0dBQXpDO0FBWUEsU0FBTyxHQUFQLENBaEIyQztDQUF0Qzs7Ozs7OztnQ0NEUztBQUFULFNBQVMsbUJBQVQsQ0FBNkIsT0FBN0IsRUFBc0M7QUFDM0MsTUFBSSxNQUFNLEVBQU4sQ0FEdUM7QUFFM0MsT0FBSyxJQUFJLElBQUksQ0FBSixFQUFPLElBQUksUUFBUSxNQUFSLEVBQWdCLEdBQXBDLEVBQXlDO0FBQ3ZDLFFBQUksU0FBUyxRQUFRLENBQVIsQ0FBVCxDQURtQztBQUV2QyxRQUFJLE9BQU8sS0FBUCxFQUFjO0FBQ2hCLFVBQUksSUFBSixDQUFTLE9BQVQsRUFEZ0I7S0FBbEIsTUFFTyxJQUFJLE9BQU8sT0FBUCxFQUFnQjtBQUN6QixVQUFJLElBQUosQ0FBUyxPQUFULEVBRHlCO0tBQXBCOztBQUlQLFFBQUksSUFBSixDQUFTLFdBQVcsT0FBTyxLQUFQLENBQXBCLEVBUnVDOztBQVV2QyxRQUFJLE9BQU8sS0FBUCxFQUFjO0FBQ2hCLFVBQUksSUFBSixDQUFTLFFBQVQsRUFEZ0I7S0FBbEIsTUFFTyxJQUFJLE9BQU8sT0FBUCxFQUFnQjtBQUN6QixVQUFJLElBQUosQ0FBUyxRQUFULEVBRHlCO0tBQXBCO0dBWlQ7QUFnQkEsU0FBTyxJQUFJLElBQUosQ0FBUyxFQUFULENBQVAsQ0FsQjJDO0NBQXRDOztBQXFCUCxTQUFTLFVBQVQsQ0FBb0IsQ0FBcEIsRUFBdUI7QUFDckIsTUFBSSxJQUFJLENBQUosQ0FEaUI7QUFFckIsTUFBSSxFQUFFLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE9BQWhCLENBQUosQ0FGcUI7QUFHckIsTUFBSSxFQUFFLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE1BQWhCLENBQUosQ0FIcUI7QUFJckIsTUFBSSxFQUFFLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE1BQWhCLENBQUosQ0FKcUI7QUFLckIsTUFBSSxFQUFFLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLFFBQWhCLENBQUosQ0FMcUI7O0FBT3JCLFNBQU8sQ0FBUCxDQVBxQjtDQUF2Qjs7Ozs7Ozt5Q0NyQndCO0FBQVQsU0FBUyxJQUFULEdBQWdCLEVBQWhCOztBQUVmLEtBQUssU0FBTCxHQUFpQjt5QkFDZixvQkFBSyxXQUFXLFdBQXlCO3dEQUFkLGdFQUFVLGtCQUFJOztBQUN2QyxRQUFJLFdBQVcsUUFBUSxRQUFSLENBRHdCO0FBRXZDLFFBQUksT0FBTyxPQUFQLEtBQW1CLFVBQW5CLEVBQStCO0FBQ2pDLGlCQUFXLE9BQVgsQ0FEaUM7QUFFakMsZ0JBQVUsRUFBVixDQUZpQztLQUFuQztBQUlBLFNBQUssT0FBTCxHQUFlLE9BQWYsQ0FOdUM7O0FBUXZDLFFBQUksT0FBTyxJQUFQLENBUm1DOztBQVV2QyxhQUFTLElBQVQsQ0FBYyxLQUFkLEVBQXFCO0FBQ25CLFVBQUksUUFBSixFQUFjO0FBQ1osbUJBQVcsWUFBVztBQUFFLG1CQUFTLFNBQVQsRUFBb0IsS0FBcEIsRUFBRjtTQUFYLEVBQTRDLENBQXZELEVBRFk7QUFFWixlQUFPLElBQVAsQ0FGWTtPQUFkLE1BR087QUFDTCxlQUFPLEtBQVAsQ0FESztPQUhQO0tBREY7OztBQVZ1QyxhQW9CdkMsR0FBWSxLQUFLLFNBQUwsQ0FBZSxTQUFmLENBQVosQ0FwQnVDO0FBcUJ2QyxnQkFBWSxLQUFLLFNBQUwsQ0FBZSxTQUFmLENBQVosQ0FyQnVDOztBQXVCdkMsZ0JBQVksS0FBSyxXQUFMLENBQWlCLEtBQUssUUFBTCxDQUFjLFNBQWQsQ0FBakIsQ0FBWixDQXZCdUM7QUF3QnZDLGdCQUFZLEtBQUssV0FBTCxDQUFpQixLQUFLLFFBQUwsQ0FBYyxTQUFkLENBQWpCLENBQVosQ0F4QnVDOztBQTBCdkMsUUFBSSxTQUFTLFVBQVUsTUFBVjtRQUFrQixTQUFTLFVBQVUsTUFBVixDQTFCRDtBQTJCdkMsUUFBSSxhQUFhLENBQWIsQ0EzQm1DO0FBNEJ2QyxRQUFJLGdCQUFnQixTQUFTLE1BQVQsQ0E1Qm1CO0FBNkJ2QyxRQUFJLFdBQVcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFELEVBQUksWUFBWSxFQUFaLEVBQWYsQ0FBWDs7O0FBN0JtQyxRQWdDbkMsU0FBUyxLQUFLLGFBQUwsQ0FBbUIsU0FBUyxDQUFULENBQW5CLEVBQWdDLFNBQWhDLEVBQTJDLFNBQTNDLEVBQXNELENBQXRELENBQVQsQ0FoQ21DO0FBaUN2QyxRQUFJLFNBQVMsQ0FBVCxFQUFZLE1BQVosR0FBcUIsQ0FBckIsSUFBMEIsTUFBMUIsSUFBb0MsU0FBUyxDQUFULElBQWMsTUFBZCxFQUFzQjs7QUFFNUQsYUFBTyxLQUFLLENBQUMsRUFBQyxPQUFPLFVBQVUsSUFBVixDQUFlLEVBQWYsQ0FBUCxFQUEyQixPQUFPLFVBQVUsTUFBVixFQUFwQyxDQUFMLENBQVAsQ0FGNEQ7S0FBOUQ7OztBQWpDdUMsYUF1QzlCLGNBQVQsR0FBMEI7QUFDeEIsV0FBSyxJQUFJLGVBQWUsQ0FBQyxDQUFELEdBQUssVUFBTCxFQUFpQixnQkFBZ0IsVUFBaEIsRUFBNEIsZ0JBQWdCLENBQWhCLEVBQW1CO0FBQ3RGLFlBQUksa0VBQUosQ0FEc0Y7QUFFdEYsWUFBSSxVQUFVLFNBQVMsZUFBZSxDQUFmLENBQW5CO1lBQ0EsYUFBYSxTQUFTLGVBQWUsQ0FBZixDQUF0QjtZQUNBLFVBQVMsQ0FBQyxhQUFhLFdBQVcsTUFBWCxHQUFvQixDQUFqQyxDQUFELEdBQXVDLFlBQXZDLENBSnlFO0FBS3RGLFlBQUksT0FBSixFQUFhOztBQUVYLG1CQUFTLGVBQWUsQ0FBZixDQUFULEdBQTZCLFNBQTdCLENBRlc7U0FBYjs7QUFLQSxZQUFJLFNBQVMsV0FBVyxRQUFRLE1BQVIsR0FBaUIsQ0FBakIsR0FBcUIsTUFBckI7WUFDcEIsWUFBWSxjQUFjLEtBQUssT0FBTCxJQUFlLFVBQVMsTUFBVCxDQVh5QztBQVl0RixZQUFJLENBQUMsTUFBRCxJQUFXLENBQUMsU0FBRCxFQUFZOztBQUV6QixtQkFBUyxZQUFULElBQXlCLFNBQXpCLENBRnlCO0FBR3pCLG1CQUh5QjtTQUEzQjs7Ozs7QUFac0YsWUFxQmxGLENBQUMsTUFBRCxJQUFZLGFBQWEsUUFBUSxNQUFSLEdBQWlCLFdBQVcsTUFBWCxFQUFvQjtBQUNoRSxxQkFBVyxVQUFVLFVBQVYsQ0FBWCxDQURnRTtBQUVoRSxlQUFLLGFBQUwsQ0FBbUIsU0FBUyxVQUFULEVBQXFCLFNBQXhDLEVBQW1ELElBQW5ELEVBRmdFO1NBQWxFLE1BR087QUFDTCxxQkFBVyxPQUFYO0FBREssa0JBRUwsQ0FBUyxNQUFULEdBRks7QUFHTCxlQUFLLGFBQUwsQ0FBbUIsU0FBUyxVQUFULEVBQXFCLElBQXhDLEVBQThDLFNBQTlDLEVBSEs7U0FIUDs7QUFTQSxrQkFBUyxLQUFLLGFBQUwsQ0FBbUIsUUFBbkIsRUFBNkIsU0FBN0IsRUFBd0MsU0FBeEMsRUFBbUQsWUFBbkQsQ0FBVDs7O0FBOUJzRixZQWlDbEYsU0FBUyxNQUFULEdBQWtCLENBQWxCLElBQXVCLE1BQXZCLElBQWlDLFVBQVMsQ0FBVCxJQUFjLE1BQWQsRUFBc0I7QUFDekQsaUJBQU8sS0FBSyxZQUFZLElBQVosRUFBa0IsU0FBUyxVQUFULEVBQXFCLFNBQXZDLEVBQWtELFNBQWxELEVBQTZELEtBQUssZUFBTCxDQUFsRSxDQUFQLENBRHlEO1NBQTNELE1BRU87O0FBRUwsbUJBQVMsWUFBVCxJQUF5QixRQUF6QixDQUZLO1NBRlA7T0FqQ0Y7O0FBeUNBLG1CQTFDd0I7S0FBMUI7Ozs7O0FBdkN1QyxRQXVGbkMsUUFBSixFQUFjO0FBQ1osT0FBQyxTQUFTLElBQVQsR0FBZ0I7QUFDZixtQkFBVyxZQUFXOzs7QUFHcEIsY0FBSSxhQUFhLGFBQWIsRUFBNEI7QUFDOUIsbUJBQU8sVUFBUCxDQUQ4QjtXQUFoQzs7QUFJQSxjQUFJLENBQUMsZ0JBQUQsRUFBbUI7QUFDckIsbUJBRHFCO1dBQXZCO1NBUFMsRUFVUixDQVZILEVBRGU7T0FBaEIsR0FBRCxDQURZO0tBQWQsTUFjTztBQUNMLGFBQU8sY0FBYyxhQUFkLEVBQTZCO0FBQ2xDLFlBQUksTUFBTSxnQkFBTixDQUQ4QjtBQUVsQyxZQUFJLEdBQUosRUFBUztBQUNQLGlCQUFPLEdBQVAsQ0FETztTQUFUO09BRkY7S0FmRjtHQXhGYTttREFnSGYsc0NBQWMsWUFBWSxPQUFPLFNBQVM7QUFDeEMsUUFBSSxPQUFPLFdBQVcsV0FBVyxNQUFYLEdBQW9CLENBQXBCLENBQWxCLENBRG9DO0FBRXhDLFFBQUksUUFBUSxLQUFLLEtBQUwsS0FBZSxLQUFmLElBQXdCLEtBQUssT0FBTCxLQUFpQixPQUFqQixFQUEwQjs7O0FBRzVELGlCQUFXLFdBQVcsTUFBWCxHQUFvQixDQUFwQixDQUFYLEdBQW9DLEVBQUMsT0FBTyxLQUFLLEtBQUwsR0FBYSxDQUFiLEVBQWdCLE9BQU8sS0FBUCxFQUFjLFNBQVMsT0FBVCxFQUExRSxDQUg0RDtLQUE5RCxNQUlPO0FBQ0wsaUJBQVcsSUFBWCxDQUFnQixFQUFDLE9BQU8sQ0FBUCxFQUFVLE9BQU8sS0FBUCxFQUFjLFNBQVMsT0FBVCxFQUF6QyxFQURLO0tBSlA7R0FsSGE7bURBMEhmLHNDQUFjLFVBQVUsV0FBVyxXQUFXLGNBQWM7QUFDMUQsUUFBSSxTQUFTLFVBQVUsTUFBVjtRQUNULFNBQVMsVUFBVSxNQUFWO1FBQ1QsU0FBUyxTQUFTLE1BQVQ7UUFDVCxTQUFTLFNBQVMsWUFBVDtRQUVULGNBQWMsQ0FBZCxDQU5zRDtBQU8xRCxXQUFPLFNBQVMsQ0FBVCxHQUFhLE1BQWIsSUFBdUIsU0FBUyxDQUFULEdBQWEsTUFBYixJQUF1QixLQUFLLE1BQUwsQ0FBWSxVQUFVLFNBQVMsQ0FBVCxDQUF0QixFQUFtQyxVQUFVLFNBQVMsQ0FBVCxDQUE3QyxDQUE5QyxFQUF5RztBQUM5RyxlQUQ4RztBQUU5RyxlQUY4RztBQUc5RyxvQkFIOEc7S0FBaEg7O0FBTUEsUUFBSSxXQUFKLEVBQWlCO0FBQ2YsZUFBUyxVQUFULENBQW9CLElBQXBCLENBQXlCLEVBQUMsT0FBTyxXQUFQLEVBQTFCLEVBRGU7S0FBakI7O0FBSUEsYUFBUyxNQUFULEdBQWtCLE1BQWxCLENBakIwRDtBQWtCMUQsV0FBTyxNQUFQLENBbEIwRDtHQTFIN0M7bURBK0lmLHdCQUFPLE1BQU0sT0FBTztBQUNsQixXQUFPLFNBQVMsS0FBVCxDQURXO0dBL0lMO21EQWtKZixrQ0FBWSxPQUFPO0FBQ2pCLFFBQUksTUFBTSxFQUFOLENBRGE7QUFFakIsU0FBSyxJQUFJLElBQUksQ0FBSixFQUFPLElBQUksTUFBTSxNQUFOLEVBQWMsR0FBbEMsRUFBdUM7QUFDckMsVUFBSSxNQUFNLENBQU4sQ0FBSixFQUFjO0FBQ1osWUFBSSxJQUFKLENBQVMsTUFBTSxDQUFOLENBQVQsRUFEWTtPQUFkO0tBREY7QUFLQSxXQUFPLEdBQVAsQ0FQaUI7R0FsSko7bURBMkpmLDhCQUFVLE9BQU87QUFDZixXQUFPLEtBQVAsQ0FEZTtHQTNKRjttREE4SmYsNEJBQVMsT0FBTztBQUNkLFdBQU8sTUFBTSxLQUFOLENBQVksRUFBWixDQUFQLENBRGM7R0E5SkQ7Q0FBakI7O0FBbUtBLFNBQVMsV0FBVCxDQUFxQixJQUFyQixFQUEyQixVQUEzQixFQUF1QyxTQUF2QyxFQUFrRCxTQUFsRCxFQUE2RCxlQUE3RCxFQUE4RTtBQUM1RSxNQUFJLGVBQWUsQ0FBZjtNQUNBLGVBQWUsV0FBVyxNQUFYO01BQ2YsU0FBUyxDQUFUO01BQ0EsU0FBUyxDQUFULENBSndFOztBQU01RSxTQUFPLGVBQWUsWUFBZixFQUE2QixjQUFwQyxFQUFvRDtBQUNsRCxRQUFJLFlBQVksV0FBVyxZQUFYLENBQVosQ0FEOEM7QUFFbEQsUUFBSSxDQUFDLFVBQVUsT0FBVixFQUFtQjtBQUN0QixVQUFJLENBQUMsVUFBVSxLQUFWLElBQW1CLGVBQXBCLEVBQXFDO0FBQ3ZDLFlBQUksUUFBUSxVQUFVLEtBQVYsQ0FBZ0IsTUFBaEIsRUFBd0IsU0FBUyxVQUFVLEtBQVYsQ0FBekMsQ0FEbUM7QUFFdkMsZ0JBQVEsTUFBTSxHQUFOLENBQVUsVUFBUyxLQUFULEVBQWdCLENBQWhCLEVBQW1CO0FBQ25DLGNBQUksV0FBVyxVQUFVLFNBQVMsQ0FBVCxDQUFyQixDQUQrQjtBQUVuQyxpQkFBTyxTQUFTLE1BQVQsR0FBa0IsTUFBTSxNQUFOLEdBQWUsUUFBakMsR0FBNEMsS0FBNUMsQ0FGNEI7U0FBbkIsQ0FBbEIsQ0FGdUM7O0FBT3ZDLGtCQUFVLEtBQVYsR0FBa0IsTUFBTSxJQUFOLENBQVcsRUFBWCxDQUFsQixDQVB1QztPQUF6QyxNQVFPO0FBQ0wsa0JBQVUsS0FBVixHQUFrQixVQUFVLEtBQVYsQ0FBZ0IsTUFBaEIsRUFBd0IsU0FBUyxVQUFVLEtBQVYsQ0FBakMsQ0FBa0QsSUFBbEQsQ0FBdUQsRUFBdkQsQ0FBbEIsQ0FESztPQVJQO0FBV0EsZ0JBQVUsVUFBVSxLQUFWOzs7QUFaWSxVQWVsQixDQUFDLFVBQVUsS0FBVixFQUFpQjtBQUNwQixrQkFBVSxVQUFVLEtBQVYsQ0FEVTtPQUF0QjtLQWZGLE1Ba0JPO0FBQ0wsZ0JBQVUsS0FBVixHQUFrQixVQUFVLEtBQVYsQ0FBZ0IsTUFBaEIsRUFBd0IsU0FBUyxVQUFVLEtBQVYsQ0FBakMsQ0FBa0QsSUFBbEQsQ0FBdUQsRUFBdkQsQ0FBbEIsQ0FESztBQUVMLGdCQUFVLFVBQVUsS0FBVjs7Ozs7QUFGTCxVQU9ELGdCQUFnQixXQUFXLGVBQWUsQ0FBZixDQUFYLENBQTZCLEtBQTdCLEVBQW9DO0FBQ3RELFlBQUksTUFBTSxXQUFXLGVBQWUsQ0FBZixDQUFqQixDQURrRDtBQUV0RCxtQkFBVyxlQUFlLENBQWYsQ0FBWCxHQUErQixXQUFXLFlBQVgsQ0FBL0IsQ0FGc0Q7QUFHdEQsbUJBQVcsWUFBWCxJQUEyQixHQUEzQixDQUhzRDtPQUF4RDtLQXpCRjtHQUZGOzs7O0FBTjRFLE1BMkN4RSxnQkFBZ0IsV0FBVyxlQUFlLENBQWYsQ0FBM0IsQ0EzQ3dFO0FBNEM1RSxNQUFJLGVBQWUsQ0FBZixLQUNJLGNBQWMsS0FBZCxJQUF1QixjQUFjLE9BQWQsQ0FEM0IsSUFFRyxLQUFLLE1BQUwsQ0FBWSxFQUFaLEVBQWdCLGNBQWMsS0FBZCxDQUZuQixFQUV5QztBQUMzQyxlQUFXLGVBQWUsQ0FBZixDQUFYLENBQTZCLEtBQTdCLElBQXNDLGNBQWMsS0FBZCxDQURLO0FBRTNDLGVBQVcsR0FBWCxHQUYyQztHQUY3Qzs7QUFPQSxTQUFPLFVBQVAsQ0FuRDRFO0NBQTlFOztBQXNEQSxTQUFTLFNBQVQsQ0FBbUIsSUFBbkIsRUFBeUI7QUFDdkIsU0FBTyxFQUFFLFFBQVEsS0FBSyxNQUFMLEVBQWEsWUFBWSxLQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsQ0FBc0IsQ0FBdEIsQ0FBWixFQUE5QixDQUR1QjtDQUF6Qjs7Ozs7Ozs7Z0NDeE5nQjs7QUFIaEI7Ozs7Ozs7dUJBRU8sSUFBTSx5RkFBZ0IscUVBQWhCO0FBQ04sU0FBUyxTQUFULENBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLEVBQW1DLFFBQW5DLEVBQTZDO0FBQUUsU0FBTyxjQUFjLElBQWQsQ0FBbUIsTUFBbkIsRUFBMkIsTUFBM0IsRUFBbUMsUUFBbkMsQ0FBUCxDQUFGO0NBQTdDOzs7Ozs7OztnQ0NJUzs7QUFQaEI7Ozs7Ozs7dUJBRU8sSUFBTSw2RUFBVSxxRUFBVjtBQUNiLFFBQVEsUUFBUixHQUFtQixVQUFTLEtBQVQsRUFBZ0I7QUFDakMsU0FBTyxNQUFNLEtBQU4sQ0FBWSxlQUFaLENBQVAsQ0FEaUM7Q0FBaEI7O0FBSVosU0FBUyxPQUFULENBQWlCLE1BQWpCLEVBQXlCLE1BQXpCLEVBQWlDLFFBQWpDLEVBQTJDO0FBQUUsU0FBTyxRQUFRLElBQVIsQ0FBYSxNQUFiLEVBQXFCLE1BQXJCLEVBQTZCLFFBQTdCLENBQVAsQ0FBRjtDQUEzQzs7Ozs7Ozs7Ozs7Z0NDWVM7eURBS0E7O0FBeEJoQjs7Ozs7O0FBQ0E7Ozs7Ozs7QUFFQSxJQUFNLDBCQUEwQixPQUFPLFNBQVAsQ0FBaUIsUUFBakI7O0FBR3pCLElBQU0sK0VBQVcscUVBQVg7OztBQUdiLFNBQVMsZUFBVCxHQUEyQixJQUEzQjs7QUFFQSxTQUFTLFFBQVQsR0FBb0IsZ0VBQVMsUUFBVDtBQUNwQixTQUFTLFNBQVQsR0FBcUIsVUFBUyxLQUFULEVBQWdCO0FBQ25DLFNBQU8sT0FBTyxLQUFQLEtBQWlCLFFBQWpCLEdBQTRCLEtBQTVCLEdBQW9DLEtBQUssU0FBTCxDQUFlLGFBQWEsS0FBYixDQUFmLEVBQW9DLFNBQXBDLEVBQStDLElBQS9DLENBQXBDLENBRDRCO0NBQWhCO0FBR3JCLFNBQVMsTUFBVCxHQUFrQixVQUFTLElBQVQsRUFBZSxLQUFmLEVBQXNCO0FBQ3RDLFNBQU8saUVBQUssU0FBTCxDQUFlLE1BQWYsQ0FBc0IsS0FBSyxPQUFMLENBQWEsWUFBYixFQUEyQixJQUEzQixDQUF0QixFQUF3RCxNQUFNLE9BQU4sQ0FBYyxZQUFkLEVBQTRCLElBQTVCLENBQXhELENBQVA7SUFEc0M7Q0FBdEI7O0FBSVgsU0FBUyxRQUFULENBQWtCLE1BQWxCLEVBQTBCLE1BQTFCLEVBQWtDLFFBQWxDLEVBQTRDO0FBQUUsU0FBTyxTQUFTLElBQVQsQ0FBYyxNQUFkLEVBQXNCLE1BQXRCLEVBQThCLFFBQTlCLENBQVAsQ0FBRjtDQUE1Qzs7OztBQUtBLFNBQVMsWUFBVCxDQUFzQixHQUF0QixFQUEyQixLQUEzQixFQUFrQyxnQkFBbEMsRUFBb0Q7QUFDekQsVUFBUSxTQUFTLEVBQVQsQ0FEaUQ7QUFFekQscUJBQW1CLG9CQUFvQixFQUFwQixDQUZzQzs7QUFJekQsTUFBSSwyREFBSixDQUp5RDs7QUFNekQsT0FBSyxJQUFJLENBQUosRUFBTyxJQUFJLE1BQU0sTUFBTixFQUFjLEtBQUssQ0FBTCxFQUFRO0FBQ3BDLFFBQUksTUFBTSxDQUFOLE1BQWEsR0FBYixFQUFrQjtBQUNwQixhQUFPLGlCQUFpQixDQUFqQixDQUFQLENBRG9CO0tBQXRCO0dBREY7O0FBTUEsTUFBSSwwRUFBSixDQVp5RDs7QUFjekQsTUFBSSxxQkFBcUIsd0JBQXdCLElBQXhCLENBQTZCLEdBQTdCLENBQXJCLEVBQXdEO0FBQzFELFVBQU0sSUFBTixDQUFXLEdBQVgsRUFEMEQ7QUFFMUQsdUJBQW1CLElBQUksS0FBSixDQUFVLElBQUksTUFBSixDQUE3QixDQUYwRDtBQUcxRCxxQkFBaUIsSUFBakIsQ0FBc0IsZ0JBQXRCLEVBSDBEO0FBSTFELFNBQUssSUFBSSxDQUFKLEVBQU8sSUFBSSxJQUFJLE1BQUosRUFBWSxLQUFLLENBQUwsRUFBUTtBQUNsQyx1QkFBaUIsQ0FBakIsSUFBc0IsYUFBYSxJQUFJLENBQUosQ0FBYixFQUFxQixLQUFyQixFQUE0QixnQkFBNUIsQ0FBdEIsQ0FEa0M7S0FBcEM7QUFHQSxVQUFNLEdBQU4sR0FQMEQ7QUFRMUQscUJBQWlCLEdBQWpCLEdBUjBEO0FBUzFELFdBQU8sZ0JBQVAsQ0FUMEQ7R0FBNUQ7O0FBWUEsTUFBSSxPQUFPLElBQUksTUFBSixFQUFZO0FBQ3JCLFVBQU0sSUFBSSxNQUFKLEVBQU4sQ0FEcUI7R0FBdkI7O0FBSUEsTUFBSSx5REFBTyxpREFBUCxLQUFlLFFBQWYsSUFBMkIsUUFBUSxJQUFSLEVBQWM7QUFDM0MsVUFBTSxJQUFOLENBQVcsR0FBWCxFQUQyQztBQUUzQyx1QkFBbUIsRUFBbkIsQ0FGMkM7QUFHM0MscUJBQWlCLElBQWpCLENBQXNCLGdCQUF0QixFQUgyQztBQUkzQyxRQUFJLGFBQWEsRUFBYjtRQUNBLDZEQURKLENBSjJDO0FBTTNDLFNBQUssR0FBTCxJQUFZLEdBQVosRUFBaUI7O0FBRWYsVUFBSSxJQUFJLGNBQUosQ0FBbUIsR0FBbkIsQ0FBSixFQUE2QjtBQUMzQixtQkFBVyxJQUFYLENBQWdCLEdBQWhCLEVBRDJCO09BQTdCO0tBRkY7QUFNQSxlQUFXLElBQVgsR0FaMkM7QUFhM0MsU0FBSyxJQUFJLENBQUosRUFBTyxJQUFJLFdBQVcsTUFBWCxFQUFtQixLQUFLLENBQUwsRUFBUTtBQUN6QyxZQUFNLFdBQVcsQ0FBWCxDQUFOLENBRHlDO0FBRXpDLHVCQUFpQixHQUFqQixJQUF3QixhQUFhLElBQUksR0FBSixDQUFiLEVBQXVCLEtBQXZCLEVBQThCLGdCQUE5QixDQUF4QixDQUZ5QztLQUEzQztBQUlBLFVBQU0sR0FBTixHQWpCMkM7QUFrQjNDLHFCQUFpQixHQUFqQixHQWxCMkM7R0FBN0MsTUFtQk87QUFDTCx1QkFBbUIsR0FBbkIsQ0FESztHQW5CUDtBQXNCQSxTQUFPLGdCQUFQLENBcER5RDtDQUFwRDs7Ozs7Ozs7Z0NDTVM7eURBQ0E7O0FBL0JoQjs7Ozs7O0FBQ0E7Ozs7O3VCQUVPLElBQU0sK0VBQVcscUVBQVg7QUFDYixTQUFTLFFBQVQsR0FBb0IsVUFBUyxLQUFULEVBQWdCO0FBQ2xDLE1BQUksV0FBVyxFQUFYO01BQ0EsbUJBQW1CLE1BQU0sS0FBTixDQUFZLFdBQVosQ0FBbkI7OztBQUY4QixNQUs5QixDQUFDLGlCQUFpQixpQkFBaUIsTUFBakIsR0FBMEIsQ0FBMUIsQ0FBbEIsRUFBZ0Q7QUFDbEQscUJBQWlCLEdBQWpCLEdBRGtEO0dBQXBEOzs7QUFMa0MsT0FVN0IsSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLGlCQUFpQixNQUFqQixFQUF5QixHQUE3QyxFQUFrRDtBQUNoRCxRQUFJLE9BQU8saUJBQWlCLENBQWpCLENBQVAsQ0FENEM7O0FBR2hELFFBQUksSUFBSSxDQUFKLElBQVMsQ0FBQyxLQUFLLE9BQUwsQ0FBYSxjQUFiLEVBQTZCO0FBQ3pDLGVBQVMsU0FBUyxNQUFULEdBQWtCLENBQWxCLENBQVQsSUFBaUMsSUFBakMsQ0FEeUM7S0FBM0MsTUFFTztBQUNMLFVBQUksS0FBSyxPQUFMLENBQWEsZ0JBQWIsRUFBK0I7QUFDakMsZUFBTyxLQUFLLElBQUwsRUFBUCxDQURpQztPQUFuQztBQUdBLGVBQVMsSUFBVCxDQUFjLElBQWQsRUFKSztLQUZQO0dBSEY7O0FBYUEsU0FBTyxRQUFQLENBdkJrQztDQUFoQjs7QUEwQmIsU0FBUyxTQUFULENBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLEVBQW1DLFFBQW5DLEVBQTZDO0FBQUUsU0FBTyxTQUFTLElBQVQsQ0FBYyxNQUFkLEVBQXNCLE1BQXRCLEVBQThCLFFBQTlCLENBQVAsQ0FBRjtDQUE3QztBQUNBLFNBQVMsZ0JBQVQsQ0FBMEIsTUFBMUIsRUFBa0MsTUFBbEMsRUFBMEMsUUFBMUMsRUFBb0Q7QUFDekQsTUFBSSxVQUFVLDhFQUFnQixRQUFoQixFQUEwQixFQUFDLGtCQUFrQixJQUFsQixFQUEzQixDQUFWLENBRHFEO0FBRXpELFNBQU8sU0FBUyxJQUFULENBQWMsTUFBZCxFQUFzQixNQUF0QixFQUE4QixPQUE5QixDQUFQLENBRnlEO0NBQXBEOzs7Ozs7OztnQ0N2QlM7O0FBUmhCOzs7Ozs7O3VCQUdPLElBQU0sdUZBQWUscUVBQWY7QUFDYixhQUFhLFFBQWIsR0FBd0IsVUFBUyxLQUFULEVBQWdCO0FBQ3RDLFNBQU8sTUFBTSxLQUFOLENBQVksdUJBQVosQ0FBUCxDQURzQztDQUFoQjs7QUFJakIsU0FBUyxhQUFULENBQXVCLE1BQXZCLEVBQStCLE1BQS9CLEVBQXVDLFFBQXZDLEVBQWlEO0FBQUUsU0FBTyxhQUFhLElBQWIsQ0FBa0IsTUFBbEIsRUFBMEIsTUFBMUIsRUFBa0MsUUFBbEMsQ0FBUCxDQUFGO0NBQWpEOzs7Ozs7OztnQ0N1Q1M7eURBSUE7O0FBbkRoQjs7Ozs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEsSUFBTSxvQkFBb0IsK0RBQXBCOztBQUVOLElBQU0sZUFBZSxJQUFmOztBQUVDLElBQU0sK0VBQVcscUVBQVg7QUFDYixTQUFTLE1BQVQsR0FBa0IsVUFBUyxJQUFULEVBQWUsS0FBZixFQUFzQjtBQUN0QyxTQUFPLFNBQVMsS0FBVCxJQUFtQixLQUFLLE9BQUwsQ0FBYSxnQkFBYixJQUFpQyxDQUFDLGFBQWEsSUFBYixDQUFrQixJQUFsQixDQUFELElBQTRCLENBQUMsYUFBYSxJQUFiLENBQWtCLEtBQWxCLENBQUQsQ0FEakQ7Q0FBdEI7QUFHbEIsU0FBUyxRQUFULEdBQW9CLFVBQVMsS0FBVCxFQUFnQjtBQUNsQyxNQUFJLFNBQVMsTUFBTSxLQUFOLENBQVksVUFBWixDQUFUOzs7QUFEOEIsT0FJN0IsSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLE9BQU8sTUFBUCxHQUFnQixDQUFoQixFQUFtQixHQUF2QyxFQUE0Qzs7QUFFMUMsUUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFKLENBQVIsSUFBa0IsT0FBTyxJQUFJLENBQUosQ0FBekIsSUFDSyxrQkFBa0IsSUFBbEIsQ0FBdUIsT0FBTyxDQUFQLENBQXZCLENBREwsSUFFSyxrQkFBa0IsSUFBbEIsQ0FBdUIsT0FBTyxJQUFJLENBQUosQ0FBOUIsQ0FGTCxFQUU0QztBQUM5QyxhQUFPLENBQVAsS0FBYSxPQUFPLElBQUksQ0FBSixDQUFwQixDQUQ4QztBQUU5QyxhQUFPLE1BQVAsQ0FBYyxJQUFJLENBQUosRUFBTyxDQUFyQixFQUY4QztBQUc5QyxVQUg4QztLQUZoRDtHQUZGOztBQVdBLFNBQU8sTUFBUCxDQWZrQztDQUFoQjs7QUFrQmIsU0FBUyxTQUFULENBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLEVBQW1DLFFBQW5DLEVBQTZDO0FBQ2xELE1BQUksVUFBVSw4RUFBZ0IsUUFBaEIsRUFBMEIsRUFBQyxrQkFBa0IsSUFBbEIsRUFBM0IsQ0FBVixDQUQ4QztBQUVsRCxTQUFPLFNBQVMsSUFBVCxDQUFjLE1BQWQsRUFBc0IsTUFBdEIsRUFBOEIsT0FBOUIsQ0FBUCxDQUZrRDtDQUE3QztBQUlBLFNBQVMsa0JBQVQsQ0FBNEIsTUFBNUIsRUFBb0MsTUFBcEMsRUFBNEMsUUFBNUMsRUFBc0Q7QUFDM0QsU0FBTyxTQUFTLElBQVQsQ0FBYyxNQUFkLEVBQXNCLE1BQXRCLEVBQThCLFFBQTlCLENBQVAsQ0FEMkQ7Q0FBdEQ7Ozs7Ozs7OztBQ25DUDs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0FHRTt5REFFQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFFQTt5REFDQTt5REFFQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTs7Ozs7OztnQ0NsRGM7eURBc0hBOztBQXpIaEI7O0FBQ0E7Ozs7Ozs7dUJBRU8sU0FBUyxVQUFULENBQW9CLE1BQXBCLEVBQTRCLE9BQTVCLEVBQW1EO3NEQUFkLGdFQUFVLGtCQUFJOztBQUN4RCxNQUFJLE9BQU8sT0FBUCxLQUFtQixRQUFuQixFQUE2QjtBQUMvQixjQUFVLHdFQUFXLE9BQVgsQ0FBVixDQUQrQjtHQUFqQzs7QUFJQSxNQUFJLE1BQU0sT0FBTixDQUFjLE9BQWQsQ0FBSixFQUE0QjtBQUMxQixRQUFJLFFBQVEsTUFBUixHQUFpQixDQUFqQixFQUFvQjtBQUN0QixZQUFNLElBQUksS0FBSixDQUFVLDRDQUFWLENBQU4sQ0FEc0I7S0FBeEI7O0FBSUEsY0FBVSxRQUFRLENBQVIsQ0FBVixDQUwwQjtHQUE1Qjs7O0FBTHdELE1BY3BELFFBQVEsT0FBTyxLQUFQLENBQWEsSUFBYixDQUFSO01BQ0EsUUFBUSxRQUFRLEtBQVI7TUFFUixjQUFjLFFBQVEsV0FBUixJQUF3QixVQUFDLFVBQUQsRUFBYSxJQUFiLEVBQW1CLFNBQW5CLEVBQThCLFlBQTlCO21DQUErQyxTQUFTLFlBQVQ7O0dBQS9DO01BQ3RDLGFBQWEsQ0FBYjtNQUNBLGFBQWEsUUFBUSxVQUFSLElBQXNCLENBQXRCO01BQ2IsVUFBVSxDQUFWO01BQ0EsU0FBUyxDQUFUO01BRUEscUVBVEo7TUFVSSxrRUFWSjs7Ozs7QUFkd0QsV0E2Qi9DLFFBQVQsQ0FBa0IsSUFBbEIsRUFBd0IsS0FBeEIsRUFBK0I7QUFDN0IsU0FBSyxJQUFJLElBQUksQ0FBSixFQUFPLElBQUksS0FBSyxLQUFMLENBQVcsTUFBWCxFQUFtQixHQUF2QyxFQUE0QztBQUMxQyxVQUFJLE9BQU8sS0FBSyxLQUFMLENBQVcsQ0FBWCxDQUFQO1VBQ0EsWUFBWSxLQUFLLENBQUwsQ0FBWjtVQUNBLFVBQVUsS0FBSyxNQUFMLENBQVksQ0FBWixDQUFWLENBSHNDOztBQUsxQyxVQUFJLGNBQWMsR0FBZCxJQUFxQixjQUFjLEdBQWQsRUFBbUI7O0FBRTFDLFlBQUksQ0FBQyxZQUFZLFFBQVEsQ0FBUixFQUFXLE1BQU0sS0FBTixDQUF2QixFQUFxQyxTQUFyQyxFQUFnRCxPQUFoRCxDQUFELEVBQTJEO0FBQzdELHVCQUQ2RDs7QUFHN0QsY0FBSSxhQUFhLFVBQWIsRUFBeUI7QUFDM0IsbUJBQU8sS0FBUCxDQUQyQjtXQUE3QjtTQUhGO0FBT0EsZ0JBVDBDO09BQTVDO0tBTEY7O0FBa0JBLFdBQU8sSUFBUCxDQW5CNkI7R0FBL0I7OztBQTdCd0QsT0FvRG5ELElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxNQUFNLE1BQU4sRUFBYyxHQUFsQyxFQUF1QztBQUNyQyxRQUFJLE9BQU8sTUFBTSxDQUFOLENBQVA7UUFDQSxVQUFVLE1BQU0sTUFBTixHQUFlLEtBQUssUUFBTDtRQUN6QixjQUFjLENBQWQ7UUFDQSxRQUFRLFNBQVMsS0FBSyxRQUFMLEdBQWdCLENBQXpCLENBSnlCOztBQU1yQyxRQUFJLFdBQVcsaUZBQWlCLEtBQWpCLEVBQXdCLE9BQXhCLEVBQWlDLE9BQWpDLENBQVgsQ0FOaUM7O0FBUXJDLFdBQU8sZ0JBQWdCLFNBQWhCLEVBQTJCLGNBQWMsVUFBZCxFQUEwQjtBQUMxRCxVQUFJLFNBQVMsSUFBVCxFQUFlLFFBQVEsV0FBUixDQUFuQixFQUF5QztBQUN2QyxhQUFLLE1BQUwsR0FBYyxVQUFVLFdBQVYsQ0FEeUI7QUFFdkMsY0FGdUM7T0FBekM7S0FERjs7QUFPQSxRQUFJLGdCQUFnQixTQUFoQixFQUEyQjtBQUM3QixhQUFPLEtBQVAsQ0FENkI7S0FBL0I7Ozs7QUFmcUMsV0FxQnJDLEdBQVUsS0FBSyxNQUFMLEdBQWMsS0FBSyxRQUFMLEdBQWdCLEtBQUssUUFBTCxDQXJCSDtHQUF2Qzs7O0FBcER3RCxPQTZFbkQsSUFBSSxLQUFJLENBQUosRUFBTyxLQUFJLE1BQU0sTUFBTixFQUFjLElBQWxDLEVBQXVDO0FBQ3JDLFFBQUksUUFBTyxNQUFNLEVBQU4sQ0FBUDtRQUNBLFNBQVEsTUFBSyxNQUFMLEdBQWMsTUFBSyxRQUFMLEdBQWdCLENBQTlCLENBRnlCO0FBR3JDLFFBQUksTUFBSyxRQUFMLElBQWlCLENBQWpCLEVBQW9CO0FBQUUsZUFBRjtLQUF4Qjs7QUFFQSxTQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxNQUFLLEtBQUwsQ0FBVyxNQUFYLEVBQW1CLEdBQXZDLEVBQTRDO0FBQzFDLFVBQUksT0FBTyxNQUFLLEtBQUwsQ0FBVyxDQUFYLENBQVA7VUFDQSxZQUFZLEtBQUssQ0FBTCxDQUFaO1VBQ0EsVUFBVSxLQUFLLE1BQUwsQ0FBWSxDQUFaLENBQVYsQ0FIc0M7O0FBSzFDLFVBQUksY0FBYyxHQUFkLEVBQW1CO0FBQ3JCLGlCQURxQjtPQUF2QixNQUVPLElBQUksY0FBYyxHQUFkLEVBQW1CO0FBQzVCLGNBQU0sTUFBTixDQUFhLE1BQWIsRUFBb0IsQ0FBcEI7O0FBRDRCLE9BQXZCLE1BR0EsSUFBSSxjQUFjLEdBQWQsRUFBbUI7QUFDNUIsZ0JBQU0sTUFBTixDQUFhLE1BQWIsRUFBb0IsQ0FBcEIsRUFBdUIsT0FBdkIsRUFENEI7QUFFNUIsbUJBRjRCO1NBQXZCLE1BR0EsSUFBSSxjQUFjLElBQWQsRUFBb0I7QUFDN0IsY0FBSSxvQkFBb0IsTUFBSyxLQUFMLENBQVcsSUFBSSxDQUFKLENBQVgsR0FBb0IsTUFBSyxLQUFMLENBQVcsSUFBSSxDQUFKLENBQVgsQ0FBa0IsQ0FBbEIsQ0FBcEIsR0FBMkMsSUFBM0MsQ0FESztBQUU3QixjQUFJLHNCQUFzQixHQUF0QixFQUEyQjtBQUM3QiwwQkFBYyxJQUFkLENBRDZCO1dBQS9CLE1BRU8sSUFBSSxzQkFBc0IsR0FBdEIsRUFBMkI7QUFDcEMsdUJBQVcsSUFBWCxDQURvQztXQUEvQjtTQUpGO0tBYlQ7R0FMRjs7O0FBN0V3RCxNQTJHcEQsV0FBSixFQUFpQjtBQUNmLFdBQU8sQ0FBQyxNQUFNLE1BQU0sTUFBTixHQUFlLENBQWYsQ0FBUCxFQUEwQjtBQUMvQixZQUFNLEdBQU4sR0FEK0I7S0FBakM7R0FERixNQUlPLElBQUksUUFBSixFQUFjO0FBQ25CLFVBQU0sSUFBTixDQUFXLEVBQVgsRUFEbUI7R0FBZDtBQUdQLFNBQU8sTUFBTSxJQUFOLENBQVcsSUFBWCxDQUFQLENBbEh3RDtDQUFuRDs7O0FBc0hBLFNBQVMsWUFBVCxDQUFzQixPQUF0QixFQUErQixPQUEvQixFQUF3QztBQUM3QyxNQUFJLE9BQU8sT0FBUCxLQUFtQixRQUFuQixFQUE2QjtBQUMvQixjQUFVLHdFQUFXLE9BQVgsQ0FBVixDQUQrQjtHQUFqQzs7QUFJQSxNQUFJLGVBQWUsQ0FBZixDQUx5QztBQU03QyxXQUFTLFlBQVQsR0FBd0I7QUFDdEIsUUFBSSxRQUFRLFFBQVEsY0FBUixDQUFSLENBRGtCO0FBRXRCLFFBQUksQ0FBQyxLQUFELEVBQVE7QUFDVixhQUFPLFFBQVEsUUFBUixFQUFQLENBRFU7S0FBWjs7QUFJQSxZQUFRLFFBQVIsQ0FBaUIsS0FBakIsRUFBd0IsVUFBUyxHQUFULEVBQWMsSUFBZCxFQUFvQjtBQUMxQyxVQUFJLEdBQUosRUFBUztBQUNQLGVBQU8sUUFBUSxRQUFSLENBQWlCLEdBQWpCLENBQVAsQ0FETztPQUFUOztBQUlBLFVBQUksaUJBQWlCLFdBQVcsSUFBWCxFQUFpQixLQUFqQixFQUF3QixPQUF4QixDQUFqQixDQUxzQztBQU0xQyxjQUFRLE9BQVIsQ0FBZ0IsS0FBaEIsRUFBdUIsY0FBdkIsRUFOMEM7O0FBUTFDLGlCQUFXLFlBQVgsRUFBeUIsQ0FBekIsRUFSMEM7S0FBcEIsQ0FBeEIsQ0FOc0I7R0FBeEI7QUFpQkEsaUJBdkI2QztDQUF4Qzs7Ozs7OztnQ0N2SFM7eURBOEZBO3lEQXdCQTs7QUF4SGhCOzs7Ozt1QkFFTyxTQUFTLGVBQVQsQ0FBeUIsV0FBekIsRUFBc0MsV0FBdEMsRUFBbUQsTUFBbkQsRUFBMkQsTUFBM0QsRUFBbUUsU0FBbkUsRUFBOEUsU0FBOUUsRUFBeUYsT0FBekYsRUFBa0c7QUFDdkcsTUFBSSxDQUFDLE9BQUQsRUFBVTtBQUNaLGNBQVUsRUFBRSxTQUFTLENBQVQsRUFBWixDQURZO0dBQWQ7O0FBSUEsTUFBTSxPQUFPLHNFQUFVLE1BQVYsRUFBa0IsTUFBbEIsQ0FBUCxDQUxpRztBQU12RyxPQUFLLElBQUwsQ0FBVSxFQUFDLE9BQU8sRUFBUCxFQUFXLE9BQU8sRUFBUCxFQUF0Qjs7QUFOdUcsV0FROUYsWUFBVCxDQUFzQixLQUF0QixFQUE2QjtBQUMzQixXQUFPLE1BQU0sR0FBTixDQUFVLFVBQVMsS0FBVCxFQUFnQjtBQUFFLGFBQU8sTUFBTSxLQUFOLENBQVQ7S0FBaEIsQ0FBakIsQ0FEMkI7R0FBN0I7O0FBSUEsTUFBSSxRQUFRLEVBQVIsQ0FabUc7QUFhdkcsTUFBSSxnQkFBZ0IsQ0FBaEI7TUFBbUIsZ0JBQWdCLENBQWhCO01BQW1CLFdBQVcsRUFBWDtNQUN0QyxVQUFVLENBQVY7TUFBYSxVQUFVLENBQVYsQ0Fkc0Y7O3FEQWU5RjtBQUNQLFFBQU0sVUFBVSxLQUFLLENBQUwsQ0FBVjtRQUNBLFFBQVEsUUFBUSxLQUFSLElBQWlCLFFBQVEsS0FBUixDQUFjLE9BQWQsQ0FBc0IsS0FBdEIsRUFBNkIsRUFBN0IsRUFBaUMsS0FBakMsQ0FBdUMsSUFBdkMsQ0FBakI7QUFDZCxZQUFRLEtBQVIsR0FBZ0IsS0FBaEI7O0FBRUEsUUFBSSxRQUFRLEtBQVIsSUFBaUIsUUFBUSxPQUFSLEVBQWlCOzs7Ozs7QUFFcEMsVUFBSSxDQUFDLGFBQUQsRUFBZ0I7QUFDbEIsWUFBTSxPQUFPLEtBQUssSUFBSSxDQUFKLENBQVosQ0FEWTtBQUVsQix3QkFBZ0IsT0FBaEIsQ0FGa0I7QUFHbEIsd0JBQWdCLE9BQWhCLENBSGtCOztBQUtsQixZQUFJLElBQUosRUFBVTtBQUNSLHFCQUFXLFFBQVEsT0FBUixHQUFrQixDQUFsQixHQUFzQixhQUFhLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBaUIsQ0FBQyxRQUFRLE9BQVIsQ0FBL0IsQ0FBdEIsR0FBeUUsRUFBekUsQ0FESDtBQUVSLDJCQUFpQixTQUFTLE1BQVQsQ0FGVDtBQUdSLDJCQUFpQixTQUFTLE1BQVQsQ0FIVDtTQUFWO09BTEY7OztBQUZvQyxtRUFlcEMsVUFBUyxJQUFULDBMQUFrQixNQUFNLEdBQU4sQ0FBVSxVQUFTLEtBQVQsRUFBZ0I7QUFDMUMsZUFBTyxDQUFDLFFBQVEsS0FBUixHQUFnQixHQUFoQixHQUFzQixHQUF0QixDQUFELEdBQThCLEtBQTlCLENBRG1DO09BQWhCLEVBQTVCOzs7QUFmb0MsVUFvQmhDLFFBQVEsS0FBUixFQUFlO0FBQ2pCLG1CQUFXLE1BQU0sTUFBTixDQURNO09BQW5CLE1BRU87QUFDTCxtQkFBVyxNQUFNLE1BQU4sQ0FETjtPQUZQO0tBcEJGLE1BeUJPOztBQUVMLFVBQUksYUFBSixFQUFtQjs7QUFFakIsWUFBSSxNQUFNLE1BQU4sSUFBZ0IsUUFBUSxPQUFSLEdBQWtCLENBQWxCLElBQXVCLElBQUksS0FBSyxNQUFMLEdBQWMsQ0FBZCxFQUFpQjs7Ozs7O0FBRTlELGtGQUFTLElBQVQsMkxBQWtCLGFBQWEsS0FBYixFQUFsQixFQUY4RDtTQUFoRSxNQUdPOzs7Ozs7QUFFTCxjQUFJLGNBQWMsS0FBSyxHQUFMLENBQVMsTUFBTSxNQUFOLEVBQWMsUUFBUSxPQUFSLENBQXJDLENBRkM7QUFHTCxrRkFBUyxJQUFULDJMQUFrQixhQUFhLE1BQU0sS0FBTixDQUFZLENBQVosRUFBZSxXQUFmLENBQWIsRUFBbEIsRUFISzs7QUFLTCxjQUFJLE9BQU87QUFDVCxzQkFBVSxhQUFWO0FBQ0Esc0JBQVcsVUFBVSxhQUFWLEdBQTBCLFdBQTFCO0FBQ1gsc0JBQVUsYUFBVjtBQUNBLHNCQUFXLFVBQVUsYUFBVixHQUEwQixXQUExQjtBQUNYLG1CQUFPLFFBQVA7V0FMRSxDQUxDO0FBWUwsY0FBSSxLQUFLLEtBQUssTUFBTCxHQUFjLENBQWQsSUFBbUIsTUFBTSxNQUFOLElBQWdCLFFBQVEsT0FBUixFQUFpQjs7QUFFM0QsZ0JBQUksZ0JBQWlCLE1BQU0sSUFBTixDQUFXLE1BQVgsQ0FBakIsQ0FGdUQ7QUFHM0QsZ0JBQUksZ0JBQWlCLE1BQU0sSUFBTixDQUFXLE1BQVgsQ0FBakIsQ0FIdUQ7QUFJM0QsZ0JBQUksTUFBTSxNQUFOLElBQWdCLENBQWhCLElBQXFCLENBQUMsYUFBRCxFQUFnQjs7QUFFdkMsdUJBQVMsTUFBVCxDQUFnQixLQUFLLFFBQUwsRUFBZSxDQUEvQixFQUFrQyw4QkFBbEMsRUFGdUM7YUFBekMsTUFHTyxJQUFJLENBQUMsYUFBRCxJQUFrQixDQUFDLGFBQUQsRUFBZ0I7QUFDM0MsdUJBQVMsSUFBVCxDQUFjLDhCQUFkLEVBRDJDO2FBQXRDO1dBUFQ7QUFXQSxnQkFBTSxJQUFOLENBQVcsSUFBWCxFQXZCSzs7QUF5QkwsMEJBQWdCLENBQWhCLENBekJLO0FBMEJMLDBCQUFnQixDQUFoQixDQTFCSztBQTJCTCxxQkFBVyxFQUFYLENBM0JLO1NBSFA7T0FGRjtBQW1DQSxpQkFBVyxNQUFNLE1BQU4sQ0FyQ047QUFzQ0wsaUJBQVcsTUFBTSxNQUFOLENBdENOO0tBekJQO0lBcEJxRzs7QUFldkcsT0FBSyxJQUFJLElBQUksQ0FBSixFQUFPLElBQUksS0FBSyxNQUFMLEVBQWEsR0FBakMsRUFBc0M7O2tDQUE3QixHQUE2QjtHQUF0Qzs7QUF3RUEsU0FBTztBQUNMLGlCQUFhLFdBQWIsRUFBMEIsYUFBYSxXQUFiO0FBQzFCLGVBQVcsU0FBWCxFQUFzQixXQUFXLFNBQVg7QUFDdEIsV0FBTyxLQUFQO0dBSEYsQ0F2RnVHO0NBQWxHOztBQThGQSxTQUFTLG1CQUFULENBQTZCLFdBQTdCLEVBQTBDLFdBQTFDLEVBQXVELE1BQXZELEVBQStELE1BQS9ELEVBQXVFLFNBQXZFLEVBQWtGLFNBQWxGLEVBQTZGLE9BQTdGLEVBQXNHO0FBQzNHLE1BQU0sT0FBTyxnQkFBZ0IsV0FBaEIsRUFBNkIsV0FBN0IsRUFBMEMsTUFBMUMsRUFBa0QsTUFBbEQsRUFBMEQsU0FBMUQsRUFBcUUsU0FBckUsRUFBZ0YsT0FBaEYsQ0FBUCxDQURxRzs7QUFHM0csTUFBTSxNQUFNLEVBQU4sQ0FIcUc7QUFJM0csTUFBSSxlQUFlLFdBQWYsRUFBNEI7QUFDOUIsUUFBSSxJQUFKLENBQVMsWUFBWSxXQUFaLENBQVQsQ0FEOEI7R0FBaEM7QUFHQSxNQUFJLElBQUosQ0FBUyxxRUFBVCxFQVAyRztBQVEzRyxNQUFJLElBQUosQ0FBUyxTQUFTLEtBQUssV0FBTCxJQUFvQixPQUFPLEtBQUssU0FBTCxLQUFtQixXQUExQixHQUF3QyxFQUF4QyxHQUE2QyxPQUFPLEtBQUssU0FBTCxDQUFqRixDQUFULENBUjJHO0FBUzNHLE1BQUksSUFBSixDQUFTLFNBQVMsS0FBSyxXQUFMLElBQW9CLE9BQU8sS0FBSyxTQUFMLEtBQW1CLFdBQTFCLEdBQXdDLEVBQXhDLEdBQTZDLE9BQU8sS0FBSyxTQUFMLENBQWpGLENBQVQsQ0FUMkc7O0FBVzNHLE9BQUssSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLEtBQUssS0FBTCxDQUFXLE1BQVgsRUFBbUIsR0FBdkMsRUFBNEM7QUFDMUMsUUFBTSxPQUFPLEtBQUssS0FBTCxDQUFXLENBQVgsQ0FBUCxDQURvQztBQUUxQyxRQUFJLElBQUosQ0FDRSxTQUFTLEtBQUssUUFBTCxHQUFnQixHQUF6QixHQUErQixLQUFLLFFBQUwsR0FDN0IsSUFERixHQUNTLEtBQUssUUFBTCxHQUFnQixHQUR6QixHQUMrQixLQUFLLFFBQUwsR0FDN0IsS0FGRixDQURGLENBRjBDO0FBTzFDLFFBQUksSUFBSixDQUFTLEtBQVQsQ0FBZSxHQUFmLEVBQW9CLEtBQUssS0FBTCxDQUFwQixDQVAwQztHQUE1Qzs7QUFVQSxTQUFPLElBQUksSUFBSixDQUFTLElBQVQsSUFBaUIsSUFBakIsQ0FyQm9HO0NBQXRHOztBQXdCQSxTQUFTLFdBQVQsQ0FBcUIsUUFBckIsRUFBK0IsTUFBL0IsRUFBdUMsTUFBdkMsRUFBK0MsU0FBL0MsRUFBMEQsU0FBMUQsRUFBcUUsT0FBckUsRUFBOEU7QUFDbkYsU0FBTyxvQkFBb0IsUUFBcEIsRUFBOEIsUUFBOUIsRUFBd0MsTUFBeEMsRUFBZ0QsTUFBaEQsRUFBd0QsU0FBeEQsRUFBbUUsU0FBbkUsRUFBOEUsT0FBOUUsQ0FBUCxDQURtRjtDQUE5RTs7Ozs7OztnQ0N4SFM7QUFBVCxTQUFTLFVBQVQsQ0FBb0IsT0FBcEIsRUFBMkM7c0RBQWQsZ0VBQVUsa0JBQUk7O0FBQ2hELE1BQUksVUFBVSxRQUFRLEtBQVIsQ0FBYyxJQUFkLENBQVY7TUFDQSxPQUFPLEVBQVA7TUFDQSxJQUFJLENBQUosQ0FINEM7O0FBS2hELFdBQVMsVUFBVCxHQUFzQjtBQUNwQixRQUFJLFFBQVEsRUFBUixDQURnQjtBQUVwQixTQUFLLElBQUwsQ0FBVSxLQUFWOzs7QUFGb0IsV0FLYixJQUFJLFFBQVEsTUFBUixFQUFnQjtBQUN6QixVQUFJLE9BQU8sUUFBUSxDQUFSLENBQVA7OztBQURxQixVQUlyQix3QkFBd0IsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBSixFQUF3QztBQUN0QyxjQURzQztPQUF4Qzs7O0FBSnlCLFVBU3JCLFNBQVMsMkNBQTZDLElBQTdDLENBQWtELElBQWxELENBQVQsQ0FUcUI7QUFVekIsVUFBSSxNQUFKLEVBQVk7QUFDVixjQUFNLEtBQU4sR0FBYyxPQUFPLENBQVAsQ0FBZCxDQURVO09BQVo7O0FBSUEsVUFkeUI7S0FBM0I7Ozs7QUFMb0IsbUJBd0JwQixDQUFnQixLQUFoQixFQXhCb0I7QUF5QnBCLG9CQUFnQixLQUFoQjs7O0FBekJvQixTQTRCcEIsQ0FBTSxLQUFOLEdBQWMsRUFBZCxDQTVCb0I7O0FBOEJwQixXQUFPLElBQUksUUFBUSxNQUFSLEVBQWdCO0FBQ3pCLFVBQUksUUFBTyxRQUFRLENBQVIsQ0FBUCxDQURxQjs7QUFHekIsVUFBSSxpQ0FBaUMsSUFBakMsQ0FBc0MsS0FBdEMsQ0FBSixFQUFpRDtBQUMvQyxjQUQrQztPQUFqRCxNQUVPLElBQUksTUFBTSxJQUFOLENBQVcsS0FBWCxDQUFKLEVBQXNCO0FBQzNCLGNBQU0sS0FBTixDQUFZLElBQVosQ0FBaUIsV0FBakIsRUFEMkI7T0FBdEIsTUFFQSxJQUFJLFNBQVEsUUFBUSxNQUFSLEVBQWdCOztBQUVqQyxjQUFNLElBQUksS0FBSixDQUFVLG1CQUFtQixJQUFJLENBQUosQ0FBbkIsR0FBNEIsR0FBNUIsR0FBa0MsS0FBSyxTQUFMLENBQWUsS0FBZixDQUFsQyxDQUFoQixDQUZpQztPQUE1QixNQUdBO0FBQ0wsWUFESztPQUhBO0tBUFQ7R0E5QkY7Ozs7QUFMZ0QsV0FxRHZDLGVBQVQsQ0FBeUIsS0FBekIsRUFBZ0M7QUFDOUIsUUFBSSxhQUFhLHVDQUF5QyxJQUF6QyxDQUE4QyxRQUFRLENBQVIsQ0FBOUMsQ0FBYixDQUQwQjtBQUU5QixRQUFJLFVBQUosRUFBZ0I7QUFDZCxVQUFJLFlBQVksV0FBVyxDQUFYLE1BQWtCLEtBQWxCLEdBQTBCLEtBQTFCLEdBQWtDLEtBQWxDLENBREY7QUFFZCxZQUFNLFlBQVksVUFBWixDQUFOLEdBQWdDLFdBQVcsQ0FBWCxDQUFoQyxDQUZjO0FBR2QsWUFBTSxZQUFZLFFBQVosQ0FBTixHQUE4QixXQUFXLENBQVgsQ0FBOUIsQ0FIYzs7QUFLZCxVQUxjO0tBQWhCO0dBRkY7Ozs7QUFyRGdELFdBa0V2QyxTQUFULEdBQXFCO0FBQ25CLFFBQUksbUJBQW1CLENBQW5CO1FBQ0Esa0JBQWtCLFFBQVEsR0FBUixDQUFsQjtRQUNBLGNBQWMsZ0JBQWdCLEtBQWhCLENBQXNCLDRDQUF0QixDQUFkLENBSGU7O0FBS25CLFFBQUksT0FBTztBQUNULGdCQUFVLENBQUMsWUFBWSxDQUFaLENBQUQ7QUFDVixnQkFBVSxDQUFDLFlBQVksQ0FBWixDQUFELElBQW1CLENBQW5CO0FBQ1YsZ0JBQVUsQ0FBQyxZQUFZLENBQVosQ0FBRDtBQUNWLGdCQUFVLENBQUMsWUFBWSxDQUFaLENBQUQsSUFBbUIsQ0FBbkI7QUFDVixhQUFPLEVBQVA7S0FMRSxDQUxlOztBQWFuQixRQUFJLFdBQVcsQ0FBWDtRQUNBLGNBQWMsQ0FBZCxDQWRlO0FBZW5CLFdBQU8sSUFBSSxRQUFRLE1BQVIsRUFBZ0IsR0FBM0IsRUFBZ0M7QUFDOUIsVUFBSSxZQUFZLFFBQVEsQ0FBUixFQUFXLENBQVgsQ0FBWixDQUQwQjs7QUFHOUIsVUFBSSxjQUFjLEdBQWQsSUFBcUIsY0FBYyxHQUFkLElBQXFCLGNBQWMsR0FBZCxJQUFxQixjQUFjLElBQWQsRUFBb0I7QUFDckYsYUFBSyxLQUFMLENBQVcsSUFBWCxDQUFnQixRQUFRLENBQVIsQ0FBaEIsRUFEcUY7O0FBR3JGLFlBQUksY0FBYyxHQUFkLEVBQW1CO0FBQ3JCLHFCQURxQjtTQUF2QixNQUVPLElBQUksY0FBYyxHQUFkLEVBQW1CO0FBQzVCLHdCQUQ0QjtTQUF2QixNQUVBLElBQUksY0FBYyxHQUFkLEVBQW1CO0FBQzVCLHFCQUQ0QjtBQUU1Qix3QkFGNEI7U0FBdkI7T0FQVCxNQVdPO0FBQ0wsY0FESztPQVhQO0tBSEY7OztBQWZtQixRQW1DZixDQUFDLFFBQUQsSUFBYSxLQUFLLFFBQUwsS0FBa0IsQ0FBbEIsRUFBcUI7QUFDcEMsV0FBSyxRQUFMLEdBQWdCLENBQWhCLENBRG9DO0tBQXRDO0FBR0EsUUFBSSxDQUFDLFdBQUQsSUFBZ0IsS0FBSyxRQUFMLEtBQWtCLENBQWxCLEVBQXFCO0FBQ3ZDLFdBQUssUUFBTCxHQUFnQixDQUFoQixDQUR1QztLQUF6Qzs7O0FBdENtQixRQTJDZixRQUFRLE1BQVIsRUFBZ0I7QUFDbEIsVUFBSSxhQUFhLEtBQUssUUFBTCxFQUFlO0FBQzlCLGNBQU0sSUFBSSxLQUFKLENBQVUsc0RBQXNELG1CQUFtQixDQUFuQixDQUF0RCxDQUFoQixDQUQ4QjtPQUFoQztBQUdBLFVBQUksZ0JBQWdCLEtBQUssUUFBTCxFQUFlO0FBQ2pDLGNBQU0sSUFBSSxLQUFKLENBQVUsd0RBQXdELG1CQUFtQixDQUFuQixDQUF4RCxDQUFoQixDQURpQztPQUFuQztLQUpGOztBQVNBLFdBQU8sSUFBUCxDQXBEbUI7R0FBckI7O0FBdURBLFNBQU8sSUFBSSxRQUFRLE1BQVIsRUFBZ0I7QUFDekIsaUJBRHlCO0dBQTNCOztBQUlBLFNBQU8sSUFBUCxDQTdIZ0Q7Q0FBM0M7Ozs7Ozs7O3lDQ0dRLFVBQVMsS0FBVCxFQUFnQixPQUFoQixFQUF5QixPQUF6QixFQUFrQztBQUMvQyxNQUFJLGNBQWMsSUFBZDtNQUNBLG9CQUFvQixLQUFwQjtNQUNBLG1CQUFtQixLQUFuQjtNQUNBLGNBQWMsQ0FBZCxDQUoyQzs7QUFNL0MsU0FBTyxTQUFTLFFBQVQsR0FBb0I7QUFDekIsUUFBSSxlQUFlLENBQUMsZ0JBQUQsRUFBbUI7QUFDcEMsVUFBSSxpQkFBSixFQUF1QjtBQUNyQixzQkFEcUI7T0FBdkIsTUFFTztBQUNMLHNCQUFjLEtBQWQsQ0FESztPQUZQOzs7O0FBRG9DLFVBU2hDLFFBQVEsV0FBUixJQUF1QixPQUF2QixFQUFnQztBQUNsQyxlQUFPLFdBQVAsQ0FEa0M7T0FBcEM7O0FBSUEseUJBQW1CLElBQW5CLENBYm9DO0tBQXRDOztBQWdCQSxRQUFJLENBQUMsaUJBQUQsRUFBb0I7QUFDdEIsVUFBSSxDQUFDLGdCQUFELEVBQW1CO0FBQ3JCLHNCQUFjLElBQWQsQ0FEcUI7T0FBdkI7Ozs7QUFEc0IsVUFPbEIsV0FBVyxRQUFRLFdBQVIsRUFBcUI7QUFDbEMsZUFBTyxFQUFDLGFBQUQsQ0FEMkI7T0FBcEM7O0FBSUEsMEJBQW9CLElBQXBCLENBWHNCO0FBWXRCLGFBQU8sVUFBUCxDQVpzQjtLQUF4Qjs7OztBQWpCeUIsR0FBcEIsQ0FOd0M7Q0FBbEM7Ozs7Ozs7Z0NDSEM7QUFBVCxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBa0MsUUFBbEMsRUFBNEM7QUFDakQsTUFBSSxPQUFPLE9BQVAsS0FBbUIsVUFBbkIsRUFBK0I7QUFDakMsYUFBUyxRQUFULEdBQW9CLE9BQXBCLENBRGlDO0dBQW5DLE1BRU8sSUFBSSxPQUFKLEVBQWE7QUFDbEIsU0FBSyxJQUFJLElBQUosSUFBWSxPQUFqQixFQUEwQjs7QUFFeEIsVUFBSSxRQUFRLGNBQVIsQ0FBdUIsSUFBdkIsQ0FBSixFQUFrQztBQUNoQyxpQkFBUyxJQUFULElBQWlCLFFBQVEsSUFBUixDQUFqQixDQURnQztPQUFsQztLQUZGO0dBREs7QUFRUCxTQUFPLFFBQVAsQ0FYaUQ7Q0FBNUM7Ozs7QUNBUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2wxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDelZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdlZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdExBO0FBQ0E7QUFDQTs7QUNGQSxJQUFBOztBQUFBLE9BQUEsR0FBVSxLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsa0JBQVIsQ0FBcEI7O0FBRVYsc0JBQUEsR0FBeUIsQ0FBQyxPQUFBLENBQVEsTUFBUixDQUFELENBQWdCLENBQUM7O0FBQzFDLHNCQUFBLEdBQXlCLENBQUMsT0FBQSxDQUFRLFVBQVIsQ0FBRCxDQUFvQixDQUFDOztBQUU5QyxZQUFBLEdBQWUsT0FBQSxDQUFRLHdCQUFSOztBQUVUO0VBRVMsMEJBQUMsT0FBRDtJQUVYLElBQUMsQ0FBQSxXQUFELEdBQWUsc0JBQXNCLENBQUM7SUFFdEMsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFJLHNCQUFKLENBQUE7SUFDVixJQUFDLENBQUEsVUFBRCxHQUFjO0VBTEg7OzZCQVliLElBQUEsR0FBTSxTQUFDLFVBQUQ7SUFBQyxJQUFDLENBQUEsYUFBRDtJQUNMLElBQUMsQ0FBQSxVQUFVLENBQUMsVUFBWixHQUF5QjtNQUN2QixlQUFBLEVBQWlCLFlBQUEsQ0FBYSxRQUFiLENBRE07TUFFdkIsVUFBQSxFQUFZLFlBQUEsQ0FBYSxNQUFiLENBRlc7TUFHdkIsVUFBQSxFQUFZLFlBQUEsQ0FBYSxNQUFiLENBSFc7TUFJdkIsaUJBQUEsRUFBbUIsWUFBQSxDQUFhLGFBQWIsQ0FKSTs7V0FPekIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxhQUFSLENBQXNCLElBQUMsQ0FBQSxVQUF2QjtFQVJJOzs2QkFXTixXQUFBLEdBQWEsU0FBQyxVQUFELEVBQWMsU0FBZCxFQUF5QixhQUF6QjtJQUFDLElBQUMsQ0FBQSxhQUFEOztNQUF3QixnQkFBZ0I7O0lBQ3BELElBQUMsQ0FBQSxVQUFVLENBQUMsV0FBWixHQUEwQjtJQUMxQixJQUFDLENBQUEsVUFBVSxDQUFDLGVBQVosR0FBOEI7SUFDOUIsSUFBQyxDQUFBLElBQUQsQ0FBTSxJQUFDLENBQUEsVUFBUDtJQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixDQUFlLGFBQWY7V0FDQSxJQUFDLENBQUEsVUFBRCxDQUFZLFFBQVEsQ0FBQyxjQUFULENBQXdCLFNBQXhCLENBQVo7RUFMVzs7NkJBT2IsYUFBQSxHQUFlLFNBQUMsYUFBRDtJQUNiLElBQUcsdUNBQUg7TUFDRSxJQUFDLENBQUEsVUFBRCxDQUFZLFFBQVEsQ0FBQyxjQUFULENBQXdCLElBQUMsQ0FBQSxVQUFVLENBQUMsZUFBcEMsQ0FBWixFQURGO0tBQUEsTUFBQTtNQUdFLElBQUMsQ0FBQSxnQkFBRCxDQUFBLEVBSEY7O0lBSUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLENBQWUsYUFBZjtJQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixDQUFBO1dBR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxnQkFBUixDQUFBO0VBVGE7OzZCQVdmLGdCQUFBLEdBQWtCLFNBQUE7QUFDaEIsUUFBQTtJQUFBLE1BQUEsR0FBUyxRQUFRLENBQUMsYUFBVCxDQUF1QixLQUF2QjtJQUNULFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixNQUExQjtXQUNBLElBQUMsQ0FBQSxVQUFELENBQVksTUFBWjtFQUhnQjs7NkJBS2xCLFVBQUEsR0FBWSxTQUFDLE1BQUQ7SUFDVixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosR0FBcUIsSUFBQyxDQUFBO1dBQ3RCLFFBQVEsQ0FBQyxNQUFULENBQWlCLE9BQUEsQ0FBUSxJQUFDLENBQUEsVUFBVCxDQUFqQixFQUF1QyxNQUF2QztFQUZVOzs7Ozs7QUFJZCxNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLGdCQUFKLENBQUE7Ozs7QUMzRGpCLElBQUEseVdBQUE7RUFBQTs7O0FBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxtQkFBUjs7QUFDTCxRQUFBLEdBQVcsT0FBQSxDQUFRLG1CQUFSOztBQUNYLFdBQUEsR0FBYyxPQUFBLENBQVEsV0FBUjs7QUFDZCxhQUFBLEdBQWdCLE9BQUEsQ0FBUSx5QkFBUjs7QUFFaEIsa0JBQUEsR0FBcUIsQ0FBQyxPQUFBLENBQVEsTUFBUixDQUFELENBQWdCLENBQUM7O0FBRXRDLG9CQUFBLEdBQXVCLE9BQUEsQ0FBUSxtQ0FBUjs7QUFDdkIsZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLCtCQUFSOztBQUNuQixtQkFBQSxHQUFzQixPQUFBLENBQVEsbUNBQVI7O0FBQ3RCLFlBQUEsR0FBZSxPQUFBLENBQVEsMkJBQVI7O0FBQ2YscUJBQUEsR0FBd0IsT0FBQSxDQUFRLHFDQUFSOztBQUN4QiwwQkFBQSxHQUE2QixPQUFBLENBQVEsMkNBQVI7O0FBQzdCLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSxpQ0FBUjs7QUFDcEIsbUJBQUEsR0FBc0IsT0FBQSxDQUFRLG1DQUFSOztBQUN0QixXQUFBLEdBQWMsT0FBQSxDQUFRLDBCQUFSOztBQUVkLGlCQUFBLEdBQW9CLENBQUMsT0FBQSxDQUFRLGdDQUFSLENBQUQsQ0FBMEMsQ0FBQzs7QUFDL0QsbUJBQUEsR0FBc0IsQ0FBQyxPQUFBLENBQVEsZ0NBQVIsQ0FBRCxDQUEwQyxDQUFDOztBQUNqRSxZQUFBLEdBQWUsQ0FBQyxPQUFBLENBQVEsZ0NBQVIsQ0FBRCxDQUEwQyxDQUFDOztBQUMxRCxhQUFBLEdBQWdCLENBQUMsT0FBQSxDQUFRLGdDQUFSLENBQUQsQ0FBMEMsQ0FBQzs7QUFFckQ7RUFFUyxxQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFvQixTQUFwQixFQUFzQyxNQUF0QztJQUFDLElBQUMsQ0FBQSxPQUFEO0lBQU8sSUFBQyxDQUFBLHVCQUFELFFBQVE7SUFBSSxJQUFDLENBQUEsK0JBQUQsWUFBWTtJQUFNLElBQUMsQ0FBQSx5QkFBRCxTQUFTO0VBQS9DOzs7Ozs7QUFFVDtFQUVTLGdDQUFDLE9BQUQ7O0lBQ1gsSUFBQyxDQUFBLEtBQUQsR0FDRTtNQUFBLGtCQUFBLEVBQW9CLEVBQXBCOztJQUNGLElBQUMsQ0FBQSxVQUFELEdBQWM7SUFDZCxJQUFDLENBQUEsV0FBRCxDQUFBO0lBQ0EsSUFBQyxDQUFBLEdBQUQsR0FBTyxJQUFJLGtCQUFKLENBQXVCLElBQXZCO0lBQ1AsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUNiLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBSSxXQUFKLENBQUE7RUFQSjs7bUNBU2IsYUFBQSxHQUFlLFNBQUMsV0FBRDtBQUViLFFBQUE7SUFGYyxJQUFDLENBQUEsbUNBQUQsY0FBYzs7VUFFakIsQ0FBQyxrQkFBbUI7O0lBQy9CLFlBQVksQ0FBQyxlQUFiLEdBQStCLElBQUMsQ0FBQSxVQUFVLENBQUM7SUFJM0MsWUFBQSxHQUFlO0lBQ2YsWUFBQSxHQUFlLENBQ2Isb0JBRGEsRUFFYixnQkFGYSxFQUdiLG1CQUhhLEVBSWIsWUFKYSxFQUtiLHFCQUxhLEVBTWIsaUJBTmEsRUFPYixtQkFQYTtBQVNmLFNBQUEsOENBQUE7O01BQ0UsSUFBRyxRQUFRLENBQUMsU0FBVCxDQUFBLENBQUg7UUFDRSxZQUFhLENBQUEsUUFBUSxDQUFDLElBQVQsQ0FBYixHQUE4QixTQURoQzs7QUFERjtJQUtBLElBQUcsQ0FBSSxJQUFDLENBQUEsVUFBVSxDQUFDLFNBQW5CO01BQ0UsSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQUFaLEdBQXdCO0FBQ3hCLFdBQUEsNEJBQUE7O1FBQ0UsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFyQixDQUEwQixZQUExQjtBQURGLE9BRkY7O0lBTUEsYUFBYSxDQUFDLFNBQWQsR0FBMEIsSUFBQyxDQUFBLFVBQVUsQ0FBQztJQUN0QyxhQUFhLENBQUMsa0JBQWQsR0FBbUMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxrQkFBWixJQUFrQztJQUNyRSxJQUFHLGFBQWEsQ0FBQyxTQUFqQjtNQUFnQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBakMsQ0FBc0MsYUFBYSxDQUFDLFNBQXBELEVBQWhDOztJQUVBLGlCQUFBLEdBQW9CLElBQUMsQ0FBQSxVQUFVLENBQUMsaUJBQVosSUFBaUM7SUFDckQsaUJBQWlCLENBQUMsSUFBbEIsQ0FBdUIsSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUFuQztJQUdBLGtCQUFBLEdBQXFCLElBQUMsQ0FBQSxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQXRCLENBQUE7SUFDckIsSUFBRyxhQUFBLENBQWMsaUNBQWQsQ0FBSDtNQUNFLGtCQUFrQixDQUFDLElBQW5CLENBQXdCLGFBQXhCLEVBREY7O0lBRUEsa0JBQUEsR0FBcUI7SUFDckIsYUFBQSxHQUFnQjtBQUNoQixTQUFBLHNEQUFBOztNQUNFLE1BQXFDLFFBQUEsQ0FBUyxZQUFULENBQUgsR0FDTyxDQUFDLFlBQUQsRUFBZSxFQUFmLENBRFAsR0FFTyxDQUFDLFlBQVksQ0FBQyxJQUFkLEVBQW9CLFlBQXBCLENBRnpDLEVBQUMscUJBQUQsRUFBZTs7UUFJZixlQUFlLENBQUMsV0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDOztNQUN4QyxlQUFlLENBQUMsaUJBQWhCLEdBQW9DO01BQ3BDLElBQUcsQ0FBSSxZQUFQO1FBQ0UsSUFBQyxDQUFBLEtBQUQsQ0FBTyw0RUFBUCxFQURGO09BQUEsTUFBQTtRQUdFLElBQUcsWUFBWSxDQUFDLGNBQWhCO1VBQ0UsWUFBYSxDQUFBLFlBQUEsQ0FBYixHQUE2QixZQUFZLENBQUMsY0FBYixDQUE0QixpQkFBNUIsRUFEL0I7O1FBRUEsSUFBRyxZQUFhLENBQUEsWUFBQSxDQUFoQjtVQUNFLFFBQUEsR0FBVyxZQUFhLENBQUEsWUFBQTtVQUN4QixRQUFBLEdBQVcsSUFBSSxRQUFKLENBQWEsZUFBYixFQUE4QixJQUE5QjtVQUNYLElBQUMsQ0FBQSxTQUFVLENBQUEsWUFBQSxDQUFYLEdBQTJCO1VBRTNCLElBQUcsWUFBQSxLQUFnQixxQkFBcUIsQ0FBQyxJQUF6QztZQUNFLGFBQUEsR0FBZ0IsSUFBSSwwQkFBSixDQUErQixJQUEvQixFQUFrQyxRQUFsQyxFQURsQjs7VUFFQSxJQUFHLFFBQVEsQ0FBQyxjQUFaO1lBQ0UsSUFBQyxDQUFBLFNBQVUsQ0FBQSxRQUFRLENBQUMsY0FBVCxDQUFYLEdBQXNDLFNBRHhDOztVQUVBLGtCQUFrQixDQUFDLElBQW5CLENBQXdCLFFBQXhCLEVBVEY7U0FBQSxNQUFBO1VBV0UsSUFBQyxDQUFBLEtBQUQsQ0FBTyxvQkFBQSxHQUFxQixZQUE1QixFQVhGO1NBTEY7O0FBUEY7SUF3QkEsSUFBQyxDQUFBLFNBQUQsQ0FDRTtNQUFBLGtCQUFBLEVBQW9CLGtCQUFwQjtNQUNBLGFBQUEsRUFBZSxhQURmO0tBREY7YUFJQSxJQUFDLENBQUEsV0FBVSxDQUFDLFlBQUQsQ0FBQyxLQUFPO2FBQ25CLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBRSxDQUFDLDJCQUFELENBQUMsb0JBQXNCLFFBQVEsQ0FBQzthQUM5QyxJQUFDLENBQUEsVUFBVSxDQUFDLEdBQUUsQ0FBQyw4QkFBRCxDQUFDLHVCQUF5QjtJQUN4QyxJQUFDLENBQUEsZUFBRCxDQUFBO0lBRUEsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxFQUF0QjtJQUdBLElBQUcsSUFBQyxDQUFBLFVBQVUsQ0FBQyxnQkFBZjtNQUNFLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxnQkFBdEIsRUFERjs7SUFJQSxtQkFBbUIsQ0FBQyxtQkFBcEIsQ0FDRTtNQUFBLFVBQUEsRUFBWSxxQkFBWjtNQUNBLE9BQUEsRUFBUyxJQUFDLENBQUEsVUFBVSxDQUFDLE9BQVosSUFBdUIsRUFEaEM7TUFFQSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBQVUsQ0FBQyxVQUFaLElBQTBCLEVBRnRDO01BR0EsV0FBQSxFQUFhLElBQUMsQ0FBQSxVQUFVLENBQUMsV0FBWixJQUEyQixFQUh4QztLQURGO0lBTUEsSUFBQyxDQUFBLG9CQUFELDhDQUF5QyxDQUFFLGNBQWhCLENBQStCLHNCQUEvQixXQUFILEdBQStELElBQUMsQ0FBQSxVQUFVLENBQUMsRUFBRSxDQUFDLG9CQUE5RSxHQUF3RztXQUVoSSxJQUFDLENBQUEseUJBQUQsQ0FBQTtFQXpGYTs7bUNBMkZmLGtCQUFBLEdBQW9CLFNBQUMsSUFBRCxFQUFPLFVBQVA7QUFDbEIsUUFBQTtBQUFBO0FBQUE7U0FBQSxxQ0FBQTs7TUFDRSxJQUFHLFFBQVEsQ0FBQyxJQUFULEtBQWlCLElBQXBCOztVQUNFLFFBQVEsQ0FBQyxVQUFXOztBQUNwQixhQUFBLGlCQUFBO1VBQ0UsUUFBUSxDQUFDLE9BQVEsQ0FBQSxHQUFBLENBQWpCLEdBQXdCLFVBQVcsQ0FBQSxHQUFBO0FBRHJDO0FBRUEsY0FKRjtPQUFBLE1BQUE7NkJBQUE7O0FBREY7O0VBRGtCOzttQ0FRcEIsT0FBQSxHQUFTLFNBQUE7V0FDUCxJQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFBcUI7TUFBQyxNQUFBLEVBQVEsSUFBVDtLQUFyQjtFQURPOzttQ0FVVCxnQkFBQSxHQUFrQixTQUFBO0FBRWhCLFFBQUE7SUFBQSxVQUFBLEdBQWEsSUFBQyxDQUFBLFVBQVUsQ0FBQztJQUN6QixJQUFHLFVBQVUsQ0FBQyxlQUFkO2FBQ0UsSUFBQyxDQUFBLGlCQUFELENBQW1CLFVBQVUsQ0FBQyxlQUE5QixFQURGO0tBQUEsTUFFSyxJQUFHLFVBQVUsQ0FBQyxVQUFkO01BQ0gsSUFBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQXRCLENBQThCLE1BQTlCLENBQUEsS0FBeUMsQ0FBNUM7ZUFDRSxJQUFDLENBQUEsV0FBRCxDQUFhLFVBQVUsQ0FBQyxVQUF4QixFQURGO09BQUEsTUFBQTtRQUdFLE1BQWlDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBdEIsQ0FBNEIsR0FBNUIsQ0FBakMsRUFBQyxxQkFBRCxFQUFlO2VBQ2YsSUFBQyxDQUFBLGdCQUFELENBQWtCLFlBQWxCLEVBQWdDLGNBQWhDLEVBSkY7T0FERztLQUFBLE1BTUEsSUFBRyxVQUFVLENBQUMsVUFBZDthQUNILElBQUMsQ0FBQSxjQUFELENBQWdCLFVBQVUsQ0FBQyxVQUEzQixFQURHO0tBQUEsTUFFQSxJQUFHLFVBQVUsQ0FBQyxpQkFBZDtNQUNILE9BQXlCLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUE3QixDQUFtQyxHQUFuQyxDQUF6QixFQUFDLHNCQUFELEVBQWU7YUFDZixJQUFDLENBQUEsaUJBQUQsQ0FBbUIsWUFBbkIsRUFBaUMsTUFBakMsRUFGRztLQUFBLE1BQUE7QUFLSDtBQUFBLFdBQUEsc0NBQUE7O1FBQ0UsSUFBVSxRQUFRLENBQUMsZUFBVCxDQUFBLENBQVY7QUFBQSxpQkFBQTs7QUFERjthQUlBLElBQUMsQ0FBQSxLQUFELENBQUEsRUFURzs7RUFiVzs7bUNBd0JsQixLQUFBLEdBQU8sU0FBQTtXQUNMLElBQUMsQ0FBQSxNQUFELENBQVEsT0FBUjtFQURLOzttQ0FHUCxNQUFBLEdBQVEsU0FBQyxRQUFEO0lBQ04sSUFBRyxRQUFIO2FBQ0UsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLFFBQWpCLEVBREY7O0VBRE07O21DQUlSLEdBQUEsR0FBSyxTQUFDLEtBQUQsRUFBUSxTQUFSO0lBQ0gsSUFBSSxJQUFDLENBQUEsVUFBVSxDQUFDLEdBQWhCO2FBQ0UsSUFBQyxDQUFBLFVBQVUsQ0FBQyxHQUFaLENBQWdCLEtBQWhCLEVBQXVCLFNBQXZCLEVBREY7O0VBREc7O21DQUlMLFlBQUEsR0FBYyxTQUFDLFVBQUQ7QUFDWixRQUFBO0FBQUE7QUFBQSxTQUFBLHFDQUFBOztNQUNFLElBQW1CLFFBQVEsQ0FBQyxPQUFULENBQWlCLFVBQWpCLENBQW5CO0FBQUEsZUFBTyxTQUFQOztBQURGO0VBRFk7O21DQUlkLGNBQUEsR0FBZ0IsU0FBQyxJQUFEO0lBQ2QsSUFBQyxDQUFBLEdBQUcsQ0FBQyxjQUFMLENBQW9CLElBQXBCO1dBQTBCO0VBRFo7O21DQUdoQixlQUFBLEdBQWlCLFNBQUMsSUFBRDtJQUNmLElBQUMsQ0FBQSxHQUFHLENBQUMsZUFBTCxDQUFxQixJQUFyQjtXQUEyQjtFQURaOzttQ0FHakIsZUFBQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxJQUFOO0lBQ2YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxlQUFMLENBQXFCLEdBQXJCLEVBQTBCLElBQTFCO1dBQWdDO0VBRGpCOzttQ0FHakIsb0JBQUEsR0FBc0IsU0FBQyxHQUFELEVBQU0sSUFBTjtJQUNwQixJQUFDLENBQUEsR0FBRyxDQUFDLG9CQUFMLENBQTBCLEdBQTFCLEVBQStCLElBQS9CO1dBQXFDO0VBRGpCOzttQ0FHdEIsbUJBQUEsR0FBcUIsU0FBQyxHQUFELEVBQU0sSUFBTjtJQUNuQixJQUFDLENBQUEsR0FBRyxDQUFDLG1CQUFMLENBQXlCLEdBQXpCLEVBQThCLElBQTlCO1dBQW9DO0VBRGpCOzttQ0FHckIsY0FBQSxHQUFnQixTQUFDLElBQUQ7V0FDZCxJQUFDLENBQUEsR0FBRyxDQUFDLGNBQUwsQ0FBb0IsSUFBcEI7RUFEYzs7bUNBR2hCLE9BQUEsR0FBUyxTQUFDLFFBQUQ7O01BQUMsV0FBVzs7SUFDbkIsSUFBQyxDQUFBLGlCQUFELENBQUE7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFBO0lBQ0EsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixHQUF1QjtXQUN2QixJQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFBcUI7TUFBQyxPQUFBLEVBQVMsRUFBVjtLQUFyQjtFQUpPOzttQ0FNVCxhQUFBLEdBQWUsU0FBQyxRQUFEOztNQUFDLFdBQVc7O0lBQ3pCLElBQUcsSUFBQyxDQUFBLG9CQUFKO2FBQ0UsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsYUFBRCxDQUFBLENBQVosRUFBOEIsUUFBOUIsRUFERjtLQUFBLE1BRUssSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVY7TUFDSCxJQUFHLElBQUMsQ0FBQSxpQkFBRCxJQUF1QixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQWpDO1FBQ0UsSUFBQyxDQUFBLElBQUQsQ0FBQTtlQUNBLElBQUMsQ0FBQSxPQUFELENBQUEsRUFGRjtPQUFBLE1BQUE7ZUFJRSxJQUFDLENBQUEsT0FBRCxDQUFTLEVBQUEsQ0FBRyxtQkFBSCxDQUFULEVBQWtDLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQUcsS0FBQyxDQUFBLE9BQUQsQ0FBQTtVQUFIO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQyxFQUpGO09BREc7S0FBQSxNQUFBO2FBT0gsSUFBQyxDQUFBLE9BQUQsQ0FBQSxFQVBHOztFQUhROzttQ0FZZixRQUFBLEdBQVUsU0FBQyxRQUFELEVBQVcsUUFBWDtBQUNSLFFBQUE7O01BRG1CLFdBQVc7O0lBQzlCLDhEQUFxQixDQUFFLEdBQXBCLENBQXdCLE1BQXhCLEVBQWdDLFFBQWhDLG1CQUFIO01BQ0UsSUFBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSLEVBQXdCO1FBQUMsRUFBQSxFQUFJLFVBQUw7T0FBeEI7YUFDQSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQWxCLENBQXVCLFFBQXZCLEVBQWlDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxHQUFELEVBQU0sT0FBTjtVQUMvQixJQUFtQyxHQUFuQztBQUFBLG1CQUFPLEtBQUMsQ0FBQSxLQUFELENBQU8sR0FBUCxFQUFZLFNBQUE7cUJBQUcsS0FBQyxDQUFBLEtBQUQsQ0FBQTtZQUFILENBQVosRUFBUDs7VUFFQSxLQUFDLENBQUEsaUJBQUQsQ0FBQTtVQUNBLEtBQUMsQ0FBQSxXQUFELENBQWEsT0FBYixFQUFzQixRQUF0QixFQUFnQztZQUFDLGFBQUEsRUFBZSxPQUFPLENBQUMsS0FBUixDQUFBLENBQWhCO1dBQWhDLEVBQWtFLEtBQUMsQ0FBQSxjQUFELENBQWdCLFFBQWhCLENBQWxFOztZQUNBLFNBQVUsU0FBUzs7aUJBQ25CLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBbEIsQ0FBNkIsT0FBN0IsRUFBc0MsUUFBdEM7UUFOK0I7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpDLEVBRkY7S0FBQSxNQUFBO2FBVUUsSUFBQyxDQUFBLGNBQUQsQ0FBZ0IsUUFBaEIsRUFWRjs7RUFEUTs7bUNBYVYsY0FBQSxHQUFnQixTQUFDLFFBQUQ7QUFDZCxRQUFBOztNQURlLFdBQVc7O0lBQzFCLFVBQUEsR0FBYSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFDWCxLQUFDLENBQUEsR0FBRyxDQUFDLGNBQUwsQ0FBb0IsU0FBQyxRQUFEO2lCQUNsQixLQUFDLENBQUEsUUFBRCxDQUFVLFFBQVYsRUFBb0IsUUFBcEI7UUFEa0IsQ0FBcEI7TUFEVztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7SUFHYixJQUFHLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFkO2FBQ0UsVUFBQSxDQUFBLEVBREY7S0FBQSxNQUFBO2FBR0UsSUFBQyxDQUFBLE9BQUQsQ0FBUyxFQUFBLENBQUcsb0JBQUgsQ0FBVCxFQUFtQyxVQUFuQyxFQUhGOztFQUpjOzttQ0FTaEIsU0FBQSxHQUFXLFNBQUMsUUFBRDs7TUFBQyxXQUFXOztJQUNyQixJQUFDLENBQUEsaUJBQUQsQ0FBQTtJQUNBLElBQUMsQ0FBQSxXQUFELENBQUE7SUFDQSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWhCLEdBQXVCO0lBQ3ZCLElBQUMsQ0FBQSxNQUFELENBQVEsWUFBUixFQUFzQjtNQUFDLE9BQUEsRUFBUyxFQUFWO0tBQXRCOzRDQUNBO0VBTFM7O21DQU9YLGVBQUEsR0FBaUIsU0FBQyxRQUFEOztNQUFDLFdBQVc7O0lBQzNCLElBQUcsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQWQ7YUFDRSxJQUFDLENBQUEsU0FBRCxDQUFXLFFBQVgsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsT0FBRCxDQUFTLEVBQUEsQ0FBRyxxQkFBSCxDQUFULEVBQW9DLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxLQUFDLENBQUEsU0FBRCxDQUFXLFFBQVg7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEMsRUFIRjs7RUFEZTs7bUNBTWpCLFVBQUEsR0FBWSxTQUFDLElBQUQsRUFBTyxRQUFQOztNQUFPLFdBQVc7O0lBQzVCLElBQUMsQ0FBQSxNQUFELENBQVEsY0FBUixFQUF3QixJQUF4Qjs0Q0FDQSxTQUFVO0VBRkE7O21DQUlaLGdCQUFBLEdBQWtCLFNBQUMsUUFBRDs7TUFBQyxXQUFXOztXQUM1QixJQUFDLENBQUEsR0FBRyxDQUFDLGdCQUFMLENBQXNCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO2VBQ3BCLEtBQUMsQ0FBQSxVQUFELENBQVksSUFBWixFQUFrQixRQUFsQjtNQURvQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEI7RUFEZ0I7O21DQUlsQixhQUFBLEdBQWUsU0FBQyxJQUFELEVBQU8sUUFBUDtBQUNiLFFBQUE7O01BRG9CLFdBQVM7O0lBQzdCLE1BQUEsR0FBUyxJQUFJLFVBQUosQ0FBQTtJQUNULE1BQU0sQ0FBQyxNQUFQLEdBQWdCLFNBQUMsTUFBRDs4Q0FDZCxTQUFVO1FBQUMsSUFBQSxFQUFNLElBQUksQ0FBQyxJQUFaO1FBQWtCLE9BQUEsRUFBUyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQXpDOztJQURJO1dBRWhCLE1BQU0sQ0FBQyxVQUFQLENBQWtCLElBQWxCO0VBSmE7O21DQU1mLGFBQUEsR0FBZSxTQUFDLElBQUQsRUFBTyxRQUFQOztNQUFPLFdBQVM7O0lBQzdCLElBQUMsQ0FBQSxNQUFELENBQVEsY0FBUixFQUF3QjtNQUFDLEVBQUEsRUFBSSxlQUFMO0tBQXhCO1dBQ0EsSUFBQyxDQUFBLGFBQUQsQ0FBZSxJQUFmLEVBQXFCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO0FBQ25CLFlBQUE7UUFBQSxPQUFBLEdBQVUsbUJBQW1CLENBQUMsMkJBQXBCLENBQWdELElBQUksQ0FBQyxPQUFyRDtRQUNWLFFBQUEsR0FBVyxJQUFJLGFBQUosQ0FDVDtVQUFBLElBQUEsRUFBTSxJQUFJLENBQUMsSUFBWDtVQUNBLElBQUEsRUFBTSxhQUFhLENBQUMsSUFEcEI7U0FEUztRQUdYLEtBQUMsQ0FBQSxXQUFELENBQWEsT0FBYixFQUFzQixRQUF0QixFQUFnQztVQUFDLGFBQUEsRUFBZSxPQUFPLENBQUMsS0FBUixDQUFBLENBQWhCO1NBQWhDO2dEQUNBLFNBQVUsU0FBUztNQU5BO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQjtFQUZhOzttQ0FVZixlQUFBLEdBQWlCLFNBQUMsSUFBRCxFQUFPLFFBQVA7O01BQU8sV0FBUzs7V0FDL0IsSUFBQyxDQUFBLGFBQUQsQ0FBZSxJQUFmLEVBQXFCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO2VBQ25CLEtBQUMsQ0FBQSxVQUFELENBQVksSUFBWixFQUFrQixRQUFsQjtNQURtQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBckI7RUFEZTs7bUNBSWpCLGlCQUFBLEdBQW1CLFNBQUMsRUFBRDtBQUNqQixRQUFBO0lBQUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSLEVBQXdCO01BQUMsRUFBQSxFQUFJLG1CQUFMO0tBQXhCO3lEQUNvQixDQUFFLGlCQUF0QixDQUF3QyxFQUF4QyxFQUE0QyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsR0FBRCxFQUFNLE9BQU4sRUFBZSxRQUFmO1FBQzFDLElBQW1DLEdBQW5DO0FBQUEsaUJBQU8sS0FBQyxDQUFBLEtBQUQsQ0FBTyxHQUFQLEVBQVksU0FBQTttQkFBRyxLQUFDLENBQUEsS0FBRCxDQUFBO1VBQUgsQ0FBWixFQUFQOztlQUNBLEtBQUMsQ0FBQSxXQUFELENBQWEsT0FBYixFQUFzQixRQUF0QixFQUFnQztVQUFDLFlBQUEsRUFBYyxLQUFmO1VBQXNCLGFBQUEsRUFBZSxPQUFPLENBQUMsS0FBUixDQUFBLENBQXJDO1NBQWhDO01BRjBDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE1QztFQUZpQjs7bUNBT25CLHdCQUFBLEdBQTBCLFNBQUE7QUFDeEIsUUFBQTtJQUFBLElBQUcsOEVBQUg7TUFDRSxPQUFpQyxJQUFDLENBQUEsVUFBVSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBbEMsQ0FBd0MsR0FBeEMsQ0FBakMsRUFBQyxzQkFBRCxFQUFlO01BQ2YsUUFBQSxHQUFXLElBQUMsQ0FBQSxTQUFVLENBQUEsWUFBQTtNQUN0QixJQUFHLFFBQUg7ZUFDRSxRQUFRLENBQUMsU0FBVCxDQUFtQixDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFBO21CQUNqQixLQUFDLENBQUEsZ0JBQUQsQ0FBa0IsWUFBQSxDQUFhLGNBQWIsQ0FBbEI7VUFEaUI7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5CLEVBREY7T0FIRjs7RUFEd0I7O21DQVExQix1QkFBQSxHQUF5QixTQUFDLFFBQUQsRUFBVyxjQUFYO1dBRXZCLElBQUMsQ0FBQSxPQUFELENBQVMsRUFBQSxDQUFHLHlCQUFILENBQVQsRUFBd0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQ3RDLFFBQVEsQ0FBQyxTQUFULENBQW1CLFNBQUE7VUFDakIsS0FBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSLEVBQXdCO1lBQUMsRUFBQSxFQUFJLHlCQUFMO1dBQXhCO2lCQUNBLFFBQVEsQ0FBQyxTQUFULENBQW1CLGNBQW5CLEVBQW1DLFNBQUMsR0FBRCxFQUFNLE9BQU4sRUFBZSxRQUFmO1lBQ2pDLElBQXNCLEdBQXRCO0FBQUEscUJBQU8sS0FBQyxDQUFBLEtBQUQsQ0FBTyxHQUFQLEVBQVA7O1lBQ0EsS0FBQyxDQUFBLFdBQUQsQ0FBYSxPQUFiLEVBQXNCLFFBQXRCLEVBQWdDO2NBQUMsYUFBQSxFQUFlLE9BQU8sQ0FBQyxLQUFSLENBQUEsQ0FBaEI7YUFBaEMsRUFBa0UsS0FBQyxDQUFBLGNBQUQsQ0FBZ0IsUUFBaEIsQ0FBbEU7bUJBQ0EsUUFBUSxDQUFDLFVBQVQsQ0FBb0IsT0FBcEIsRUFBNkIsUUFBN0I7VUFIaUMsQ0FBbkM7UUFGaUIsQ0FBbkI7TUFEc0M7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXhDO0VBRnVCOzttQ0FVekIsZ0JBQUEsR0FBa0IsU0FBQyxZQUFELEVBQWUsY0FBZjtBQUNoQixRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUMsQ0FBQSxTQUFVLENBQUEsWUFBQTtJQUN0QixJQUFHLFFBQUg7YUFDRSxRQUFRLENBQUMsVUFBVCxDQUFvQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsVUFBRDtVQUVsQixJQUFHLFVBQUEsSUFBYyxDQUFJLFFBQVEsQ0FBQyx1QkFBVCxDQUFBLENBQXJCO1lBQ0UsS0FBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSLEVBQXdCO2NBQUMsRUFBQSxFQUFJLGtCQUFMO2FBQXhCO21CQUNBLFFBQVEsQ0FBQyxTQUFULENBQW1CLGNBQW5CLEVBQW1DLFNBQUMsR0FBRCxFQUFNLE9BQU4sRUFBZSxRQUFmO2NBQ2pDLElBQW1DLEdBQW5DO0FBQUEsdUJBQU8sS0FBQyxDQUFBLEtBQUQsQ0FBTyxHQUFQLEVBQVksU0FBQTt5QkFBRyxLQUFDLENBQUEsS0FBRCxDQUFBO2dCQUFILENBQVosRUFBUDs7Y0FDQSxLQUFDLENBQUEsV0FBRCxDQUFhLE9BQWIsRUFBc0IsUUFBdEIsRUFBZ0M7Z0JBQUMsYUFBQSxFQUFlLE9BQU8sQ0FBQyxLQUFSLENBQUEsQ0FBaEI7ZUFBaEMsRUFBa0UsS0FBQyxDQUFBLGNBQUQsQ0FBZ0IsUUFBaEIsQ0FBbEU7cUJBQ0EsUUFBUSxDQUFDLFVBQVQsQ0FBb0IsT0FBcEIsRUFBNkIsUUFBN0I7WUFIaUMsQ0FBbkMsRUFGRjtXQUFBLE1BQUE7bUJBT0UsS0FBQyxDQUFBLHVCQUFELENBQXlCLFFBQXpCLEVBQW1DLGNBQW5DLEVBUEY7O1FBRmtCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQixFQURGO0tBQUEsTUFBQTthQVlFLElBQUMsQ0FBQSxLQUFELENBQU8sRUFBQSxDQUFHLG9CQUFILENBQVAsRUFBaUMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUFHLEtBQUMsQ0FBQSxLQUFELENBQUE7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBakMsRUFaRjs7RUFGZ0I7O21DQWdCbEIsV0FBQSxHQUFhLFNBQUMsR0FBRDtXQUNYLElBQUMsQ0FBQSxXQUFXLENBQUMsZUFBYixDQUE2QixHQUE3QixFQUFrQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsR0FBRCxFQUFNLE9BQU4sRUFBZSxRQUFmO1FBQ2hDLEtBQUMsQ0FBQSxNQUFELENBQVEsY0FBUixFQUF3QjtVQUFDLEVBQUEsRUFBSSxhQUFMO1NBQXhCO1FBQ0EsSUFBbUMsR0FBbkM7QUFBQSxpQkFBTyxLQUFDLENBQUEsS0FBRCxDQUFPLEdBQVAsRUFBWSxTQUFBO21CQUFHLEtBQUMsQ0FBQSxLQUFELENBQUE7VUFBSCxDQUFaLEVBQVA7O2VBQ0EsS0FBQyxDQUFBLFdBQUQsQ0FBYSxPQUFiLEVBQXNCLFFBQXRCLEVBQWdDO1VBQUMsYUFBQSxFQUFlLE9BQU8sQ0FBQyxLQUFSLENBQUEsQ0FBaEI7U0FBaEMsRUFBa0UsS0FBQyxDQUFBLGNBQUQsQ0FBZ0IsUUFBaEIsQ0FBbEU7TUFIZ0M7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0VBRFc7O21DQU1iLGlCQUFBLEdBQW1CLFNBQUMsWUFBRCxFQUFlLE1BQWY7QUFDakIsUUFBQTtJQUFBLFFBQUEsR0FBVyxJQUFDLENBQUEsU0FBVSxDQUFBLFlBQUE7SUFDdEIsSUFBRyxRQUFBLElBQWEsUUFBUSxDQUFDLEdBQVQsQ0FBYSxXQUFiLEVBQTBCLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBakMsQ0FBaEI7TUFDRSxJQUFPLDJCQUFQO1FBQ0UsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLEdBQWtCLElBQUksYUFBSixDQUNoQjtVQUFBLElBQUEsRUFBTSxhQUFhLENBQUMsSUFBcEI7VUFDQSxRQUFBLEVBQVUsUUFEVjtTQURnQixFQURwQjs7TUFLQSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFoQixHQUF5QixJQUFJLGFBQUosQ0FDdkI7UUFBQSxJQUFBLEVBQU0sYUFBYSxDQUFDLE1BQXBCO1FBQ0EsWUFBQSxFQUNFO1VBQUEsRUFBQSxFQUFJLE1BQUo7U0FGRjtPQUR1QjtNQUt6QixJQUFDLENBQUEsR0FBRyxDQUFDLG1CQUFMLENBQUEsRUFYRjs7V0FZQSxJQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFBcUI7TUFBQyxPQUFBLEVBQVMsRUFBVjtLQUFyQjtFQWRpQjs7bUNBZ0JuQixrQkFBQSxHQUFvQixTQUFDLFFBQUQ7SUFDbEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBaEIsQ0FBdUIsUUFBdkI7V0FDQSxJQUFDLENBQUEsSUFBRCxDQUFBO0VBRmtCOzttQ0FJcEIsZ0JBQUEsR0FBa0IsU0FBQTtXQUNoQjtFQURnQjs7bUNBR2xCLHVCQUFBLEdBQXlCLFNBQUMsYUFBRCxFQUFnQixRQUFoQjtXQUV2QixJQUFDLENBQUEsT0FBRCxDQUFTLEVBQUEsQ0FBRyx5QkFBSCxDQUFULEVBQXdDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUN0QyxLQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBekIsQ0FBbUMsU0FBQTtpQkFDakMsS0FBQyxDQUFBLFFBQUQsQ0FBVSxhQUFWLEVBQXlCLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBaEMsRUFBMEMsUUFBMUM7UUFEaUMsQ0FBbkM7TUFEc0M7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXhDO0VBRnVCOzttQ0FNekIsSUFBQSxHQUFNLFNBQUMsUUFBRDs7TUFBQyxXQUFXOztXQUNoQixJQUFDLENBQUEsTUFBRCxDQUFRLFlBQVIsRUFBc0I7TUFBRSxNQUFBLEVBQVEsSUFBQyxDQUFBLGVBQUQsQ0FBQSxDQUFWO0tBQXRCLEVBQXNELENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxhQUFEO2VBQ3BELEtBQUMsQ0FBQSxXQUFELENBQWEsYUFBYixFQUE0QixRQUE1QjtNQURvRDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEQ7RUFESTs7bUNBSU4sV0FBQSxHQUFhLFNBQUMsYUFBRCxFQUFnQixRQUFoQjtBQUNYLFFBQUE7O01BRDJCLFdBQVc7O0lBQ3RDLFFBQUEsNkNBQTBCLENBQUUsa0JBQWpCLElBQTZCLElBQUMsQ0FBQSxZQUFELENBQWMsTUFBZDtJQUN4QyxJQUFHLGdCQUFIO2FBQ0UsUUFBUSxDQUFDLFVBQVQsQ0FBb0IsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLFlBQUQ7VUFFbEIsSUFBRyxZQUFBLElBQWdCLENBQUksUUFBUSxDQUFDLHVCQUFULENBQUEsQ0FBdkI7bUJBQ0UsS0FBQyxDQUFBLFFBQUQsQ0FBVSxhQUFWLEVBQXlCLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBaEMsRUFBMEMsUUFBMUMsRUFERjtXQUFBLE1BQUE7bUJBR0UsS0FBQyxDQUFBLHVCQUFELENBQXlCLGFBQXpCLEVBQXdDLFFBQXhDLEVBSEY7O1FBRmtCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQixFQURGO0tBQUEsTUFBQTthQVFFLElBQUMsQ0FBQSxjQUFELENBQWdCLGFBQWhCLEVBQStCLFFBQS9CLEVBUkY7O0VBRlc7O21DQVliLFFBQUEsR0FBVSxTQUFDLGFBQUQsRUFBZ0IsUUFBaEIsRUFBMEIsUUFBMUI7QUFFUixRQUFBOztNQUZrQyxXQUFXOztJQUU3Qyw4REFBcUIsQ0FBRSxHQUFwQixDQUF3QixRQUF4QixFQUFrQyxRQUFsQyxtQkFBSDthQUNFLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixhQUFsQixFQUFpQyxRQUFqQyxFQUEyQyxRQUEzQyxFQURGO0tBQUEsTUFBQTthQUdFLElBQUMsQ0FBQSxjQUFELENBQWdCLGFBQWhCLEVBQStCLFFBQS9CLEVBSEY7O0VBRlE7O21DQU9WLGdCQUFBLEdBQWtCLFNBQUMsYUFBRCxFQUFnQixRQUFoQixFQUEwQixRQUExQjtBQUNoQixRQUFBOztNQUQwQyxXQUFXOztJQUNyRCxJQUFDLENBQUEsU0FBRCxDQUNFO01BQUEsTUFBQSxFQUFRLFFBQVI7S0FERjtJQUVBLGNBQUEsR0FBaUIsSUFBQyxDQUFBLDZCQUFELENBQStCLGFBQS9CLEVBQThDLFFBQTlDO1dBQ2pCLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBbEIsQ0FBdUIsY0FBdkIsRUFBdUMsUUFBdkMsRUFBaUQsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQsRUFBTSxVQUFOO1FBQy9DLElBQUcsR0FBSDtVQUVFLFFBQVEsQ0FBQyxnQkFBVCxHQUE0QjtVQUM1QixLQUFDLENBQUEsU0FBRCxDQUFXO1lBQUUsUUFBQSxFQUFVLFFBQVo7WUFBc0IsTUFBQSxFQUFRLElBQTlCO1dBQVg7VUFDQSxJQUFHLFVBQUEsS0FBYyxHQUFqQjtBQUNFLG1CQUFPLEtBQUMsQ0FBQSx1QkFBRCxDQUF5QixhQUF6QixFQUF3QyxRQUF4QyxFQURUO1dBQUEsTUFBQTtBQUdFLG1CQUFPLEtBQUMsQ0FBQSxLQUFELENBQU8sR0FBUCxFQUhUO1dBSkY7O1FBUUEsSUFBRyxLQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsS0FBcUIsUUFBeEI7VUFDRSxLQUFDLENBQUEsaUJBQUQsQ0FBQSxFQURGOztRQUdBLElBQW9DLGlDQUFwQztVQUFBLE9BQU8sUUFBUSxDQUFDLGlCQUFoQjs7UUFDQSxLQUFDLENBQUEsWUFBRCxDQUFjLFdBQWQsRUFBMkIsY0FBM0IsRUFBMkMsUUFBM0MsRUFBcUQ7VUFBQyxLQUFBLEVBQU8sSUFBUjtTQUFyRCxFQUFvRSxLQUFDLENBQUEsY0FBRCxDQUFnQixRQUFoQixDQUFwRTtnREFDQSxTQUFVLGdCQUFnQjtNQWRxQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBakQ7RUFKZ0I7O21DQW9CbEIsY0FBQSxHQUFnQixTQUFDLGFBQUQsRUFBdUIsUUFBdkI7O01BQUMsZ0JBQWdCOzs7TUFBTSxXQUFXOztXQUNoRCxJQUFDLENBQUEsR0FBRyxDQUFDLGNBQUwsQ0FBb0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFFBQUQ7ZUFDbEIsS0FBQyxDQUFBLFdBQUQsQ0FBYSxhQUFiLEVBQTRCLFFBQTVCLEVBQXNDLFFBQXRDO01BRGtCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtFQURjOzttQ0FJaEIsZ0JBQUEsR0FBa0IsU0FBQyxhQUFELEVBQXVCLFFBQXZCOztNQUFDLGdCQUFnQjs7O01BQU0sV0FBVzs7V0FDbEQsSUFBQyxDQUFBLEdBQUcsQ0FBQyxnQkFBTCxDQUFzQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUNwQixLQUFDLENBQUEsV0FBRCxDQUFhLGFBQWIsRUFBNEIsUUFBNUIsRUFBc0MsUUFBdEM7TUFEb0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXRCO0VBRGdCOzttQ0FJbEIsVUFBQSxHQUFZLFNBQUMsYUFBRCxFQUF1QixRQUF2QjtBQUNWLFFBQUE7O01BRFcsZ0JBQWdCOzs7TUFBTSxXQUFXOztJQUM1QyxlQUFBLEdBQWtCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxhQUFEO0FBQ2hCLFlBQUE7ZUFBQSxLQUFDLENBQUEsY0FBRCxDQUFnQixhQUFoQiw0Q0FBOEMsQ0FBRSxhQUFoRCxFQUFzRCxTQUFDLEdBQUQsRUFBTSxVQUFOO1VBQ3BELElBQXdCLEdBQXhCO0FBQUEsb0RBQU8sU0FBVSxjQUFqQjs7VUFDQSxNQUFNLENBQUMsSUFBUCxDQUFZLEtBQUMsQ0FBQSxhQUFELENBQWUsUUFBQSxHQUFTLFVBQXhCLENBQVo7a0RBQ0EsU0FBVTtRQUgwQyxDQUF0RDtNQURnQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7SUFLbEIsSUFBRyxhQUFBLEtBQWlCLElBQXBCO2FBQ0UsSUFBQyxDQUFBLE1BQUQsQ0FBUSxZQUFSLEVBQXNCLEVBQXRCLEVBQTBCLFNBQUMsYUFBRDtlQUN4QixlQUFBLENBQWdCLGFBQWhCO01BRHdCLENBQTFCLEVBREY7S0FBQSxNQUFBO2FBSUUsZUFBQSxDQUFnQixhQUFoQixFQUpGOztFQU5VOzttQ0FZWixjQUFBLEdBQWdCLFNBQUMsYUFBRCxFQUFnQixJQUFoQixFQUFzQixRQUF0QjtBQUNkLFFBQUE7QUFBQTtNQUNFLE1BQUEsR0FBUztNQUNULGFBQUEsR0FBZ0I7QUFDaEI7QUFBQSxXQUFBLFVBQUE7O1FBQ0UsSUFBRyxHQUFHLENBQUMsTUFBSixDQUFXLENBQVgsRUFBYyxNQUFNLENBQUMsTUFBckIsQ0FBQSxLQUFnQyxNQUFuQztVQUNFLFVBQUEsR0FBYSxRQUFBLENBQVMsR0FBRyxDQUFDLE1BQUosQ0FBVyxNQUFNLENBQUMsTUFBbEIsQ0FBVCxFQUFvQyxFQUFwQztVQUNiLGFBQUEsR0FBZ0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxhQUFULEVBQXdCLFVBQXhCLEVBRmxCOztBQURGO01BSUEsYUFBQTtNQUNBLEtBQUEsR0FBUSxJQUFJLENBQUMsU0FBTCxDQUNOO1FBQUEsSUFBQSxrQkFBUyxJQUFJLENBQUUsZ0JBQU4sR0FBZSxDQUFsQixHQUF5QixVQUFBLEdBQVcsSUFBcEMsR0FBZ0QsMkJBQXREO1FBQ0EsYUFBQSxFQUFlLGFBRGY7T0FETTtNQUdSLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBcEIsQ0FBNEIsRUFBQSxHQUFHLE1BQUgsR0FBWSxhQUF4QyxFQUF5RCxLQUF6RDs4Q0FDQSxTQUFVLE1BQU0sd0JBWmxCO0tBQUEsYUFBQTtNQWFNO2FBQ0osUUFBQSxDQUFTLHdDQUFULEVBZEY7O0VBRGM7O21DQWlCaEIsY0FBQSxHQUFnQixTQUFDLFVBQUQ7QUFDZCxRQUFBO0lBQUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSLEVBQXdCO01BQUMsRUFBQSxFQUFJLGdCQUFMO0tBQXhCO0FBQ0E7TUFDRSxHQUFBLEdBQU0sWUFBQSxHQUFhO01BQ25CLE1BQUEsR0FBUyxJQUFJLENBQUMsS0FBTCxDQUFXLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBcEIsQ0FBNEIsR0FBNUIsQ0FBWDtNQUNULE9BQUEsR0FBVSxtQkFBbUIsQ0FBQywyQkFBcEIsQ0FBZ0QsTUFBTSxDQUFDLGFBQXZEO01BQ1YsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO1FBQUEsSUFBQSxFQUFNLE1BQU0sQ0FBQyxJQUFiO1FBQ0EsSUFBQSxFQUFNLGFBQWEsQ0FBQyxJQURwQjtPQURTO01BR1gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixHQUF1QjtNQUN2QixJQUFDLENBQUEsV0FBRCxDQUFhLE9BQWIsRUFBc0IsUUFBdEIsRUFBZ0M7UUFBQyxLQUFBLEVBQU8sSUFBUjtRQUFjLGFBQUEsRUFBZSxPQUFPLENBQUMsS0FBUixDQUFBLENBQTdCO09BQWhDO2FBQ0EsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFwQixDQUErQixHQUEvQixFQVRGO0tBQUEsYUFBQTtNQVVNO2FBQ0osUUFBQSxDQUFTLDRCQUFULEVBWEY7O0VBRmM7O21DQWVoQixlQUFBLEdBQWlCLFNBQUE7QUFDZixRQUFBOzJEQUFxQixDQUFFLGlCQUF2QixDQUFBLFdBQUEsSUFBOEM7RUFEL0I7O21DQUdqQixZQUFBLEdBQWMsU0FBQTtXQUNaLElBQUMsQ0FBQSxHQUFHLENBQUMsV0FBTCxDQUFpQixJQUFqQjtFQURZOzttQ0FHZCxXQUFBLEdBQWEsU0FBQTtXQUNYLElBQUMsQ0FBQSxLQUFELENBQU8sQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLEtBQUQsQ0FBUSxFQUFBLENBQUcsdUJBQUgsQ0FBUixFQUFzQyxFQUFBLENBQUcscUJBQUgsQ0FBdEM7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBUDtFQURXOzttQ0FHYixXQUFBLEdBQWEsU0FBQyxRQUFEO0lBQ1gsSUFBRyxJQUFDLENBQUEsUUFBRCxDQUFBLENBQUg7YUFDRSxJQUFDLENBQUEsT0FBRCxDQUFTLFFBQVQsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsS0FBRCxDQUFPLFFBQVAsRUFIRjs7RUFEVzs7bUNBTWIsUUFBQSxHQUFVLFNBQUE7QUFDUixRQUFBOzJEQUFxQixDQUFFLEdBQXZCLENBQTJCLGtCQUEzQixXQUFBLElBQW1ELG1EQUF5QixDQUFFLEdBQXZCLENBQTJCLFlBQTNCO0VBRC9DOzttQ0FHVixhQUFBLEdBQWUsU0FBQTtBQUNiLFFBQUE7SUFBQSxVQUFBLG1EQUFrQyxDQUFFLEdBQXZCLENBQTJCLFlBQTNCLFdBQUEsSUFBNEM7SUFDekQsWUFBQSxvREFBb0MsQ0FBRSxHQUF2QixDQUEyQixjQUEzQjtXQUNmLENBQUMsWUFBQSxJQUFnQixVQUFVLENBQUMsU0FBNUIsQ0FBQSxJQUEyQyxtREFBeUIsQ0FBRSxHQUF2QixDQUEyQixZQUEzQjtFQUhsQzs7bUNBS2YsYUFBQSxHQUFlLFNBQUMsTUFBRCxFQUFTLFFBQVQ7QUFDYixRQUFBO0lBQUEsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVY7TUFDRSxlQUFBLEdBQWtCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBYSxDQUFDLGtCQUFyQixDQUF3QyxNQUF4QzthQUNsQixJQUFDLENBQUEsTUFBRCxDQUFRLFlBQVIsRUFBc0I7UUFBRSxNQUFBLEVBQVEsZUFBVjtPQUF0QixFQUFtRCxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsYUFBRDtBQUNqRCxjQUFBO1VBQUEsS0FBQyxDQUFBLFNBQUQsQ0FDRTtZQUFBLE9BQUEsRUFBUyxNQUFUO1dBREY7VUFFQSxhQUFBLEdBQWdCLG1CQUFtQixDQUFDLDJCQUFwQixDQUFnRCxhQUFoRDtVQUNoQixhQUFhLENBQUMsV0FBZCxDQUEwQixlQUExQjtVQUNBLGNBQUEsR0FBaUIsS0FBQyxDQUFBLDZCQUFELENBQStCLGFBQS9CLEVBQThDLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBckQ7VUFDakIsYUFBYSxDQUFDLEdBQWQsQ0FBa0IsU0FBbEIsRUFBNkIsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsU0FBbkIsQ0FBN0I7VUFDQSxJQUFHLE1BQUg7WUFDRSxjQUFjLENBQUMsTUFBZixDQUFzQixZQUF0QixFQURGO1dBQUEsTUFBQTtZQUdFLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFlBQW5CLEVBQWlDLElBQWpDLEVBSEY7O2lCQUlBLEtBQUMsQ0FBQSxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQXJCLENBQTJCLE1BQTNCLEVBQW1DLGNBQW5DLEVBQW1ELGFBQW5ELEVBQWtFLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBekUsRUFBbUYsU0FBQyxHQUFELEVBQU0sZUFBTjtZQUNqRixJQUFzQixHQUF0QjtBQUFBLHFCQUFPLEtBQUMsQ0FBQSxLQUFELENBQU8sR0FBUCxFQUFQOztvREFDQSxTQUFVLE1BQU0saUJBQWlCO1VBRmdELENBQW5GO1FBWGlEO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuRCxFQUZGOztFQURhOzttQ0FrQmYsS0FBQSxHQUFPLFNBQUMsUUFBRDtXQUNMLElBQUMsQ0FBQSxhQUFELENBQWUsSUFBZixFQUFxQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsR0FBRCxFQUFNLGVBQU4sRUFBdUIsY0FBdkI7UUFDbkIsS0FBQyxDQUFBLFlBQUQsQ0FBYyxZQUFkLEVBQTRCLGNBQTVCLEVBQTRDLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBbkQ7Z0RBQ0EsU0FBVSxNQUFNO01BRkc7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJCO0VBREs7O21DQUtQLE9BQUEsR0FBUyxTQUFDLFFBQUQ7V0FDUCxJQUFDLENBQUEsYUFBRCxDQUFlLEtBQWYsRUFBc0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQsRUFBTSxlQUFOLEVBQXVCLGNBQXZCO1FBQ3BCLEtBQUMsQ0FBQSxZQUFELENBQWMsY0FBZCxFQUE4QixjQUE5QixFQUE4QyxLQUFDLENBQUEsS0FBSyxDQUFDLFFBQXJEO2dEQUNBLFNBQVU7TUFGVTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEI7RUFETzs7bUNBS1QsY0FBQSxHQUFnQixTQUFDLFFBQUQ7QUFDZCxRQUFBOztNQURlLFdBQVc7O0lBQzFCLEVBQUEsa0RBQTBCLENBQUUsR0FBdkIsQ0FBMkIsa0JBQTNCO0lBQ0wsSUFBRyxFQUFBLElBQU8sa0NBQVY7YUFDRSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxpQkFBckIsQ0FBdUMsRUFBdkMsRUFBMkMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLEdBQUQsRUFBTSxPQUFOLEVBQWUsUUFBZjtBQUN6QyxjQUFBO1VBQUEsSUFBc0IsR0FBdEI7QUFBQSxtQkFBTyxLQUFDLENBQUEsS0FBRCxDQUFPLEdBQVAsRUFBUDs7VUFDQSxLQUFDLENBQUEsS0FBSyxDQUFDLGNBQWMsQ0FBQyxjQUF0QixDQUFxQyxPQUFyQztVQUNBLElBQUcsQ0FBSSxRQUFRLENBQUMsSUFBYixJQUFzQixDQUFBLE9BQUEsR0FBVSxPQUFPLENBQUMsR0FBUixDQUFZLFNBQVosQ0FBVixDQUF6QjtZQUNFLFFBQVEsQ0FBQyxJQUFULEdBQWdCLFFBRGxCOztVQUVBLEtBQUMsQ0FBQSxXQUFELENBQWEsT0FBYixFQUFzQixRQUF0QixFQUFnQztZQUFDLEtBQUEsRUFBTyxJQUFSO1lBQWMsYUFBQSxFQUFlLE9BQU8sQ0FBQyxLQUFSLENBQUEsQ0FBN0I7V0FBaEM7a0RBQ0EsU0FBVTtRQU4rQjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBM0MsRUFERjs7RUFGYzs7bUNBV2hCLG9CQUFBLEdBQXNCLFNBQUMsUUFBRDtBQUNwQixRQUFBOztNQURxQixXQUFXOztJQUNoQyxvREFBd0IsQ0FBRSxHQUF2QixDQUEyQixrQkFBM0IsV0FBQSxJQUFtRCxrQ0FBdEQ7YUFDRSxJQUFDLENBQUEsT0FBRCxDQUFTLEVBQUEsQ0FBRyxnQ0FBSCxDQUFULEVBQStDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxLQUFDLENBQUEsY0FBRCxDQUFnQixRQUFoQjtRQUFIO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEvQyxFQURGOztFQURvQjs7bUNBSXRCLGNBQUEsR0FBZ0IsU0FBQyxRQUFEOztNQUFDLFdBQVc7O1dBRTFCLElBQUMsQ0FBQSxNQUFELENBQVEsWUFBUixFQUFzQjtNQUFFLE1BQUEsRUFBUSxJQUFDLENBQUEsZUFBRCxDQUFBLENBQVY7S0FBdEIsRUFBc0QsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQ7QUFDcEQsWUFBQTtRQUFBLGdCQUFBLEdBQW1CLG1CQUFtQixDQUFDLDJCQUFwQixDQUFnRCxPQUFoRDs7YUFDRSxDQUFFLGNBQXZCLENBQXNDLGdCQUF0Qzs7ZUFDQSxLQUFDLENBQUEsR0FBRyxDQUFDLGNBQUwsNkNBQW1DLENBQUUsYUFBckMsRUFBMkMsZ0JBQTNDLEVBQTZELFFBQTdEO01BSG9EO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF0RDtFQUZjOzttQ0FPaEIsZUFBQSxHQUFpQixTQUFDLE9BQUQsRUFBVSxnQkFBVixFQUE0QixRQUE1QjtBQUNmLFFBQUE7O01BRDJDLFdBQVM7O0lBQ3BELElBQUcsT0FBTyxPQUFQLEtBQWtCLFFBQXJCO01BQ0UsSUFBRyxRQUFRLENBQUMsT0FBVCxDQUFpQixPQUFqQixDQUFBLElBQTZCLENBQWhDO1FBQ0UsYUFBQSxHQUFnQixXQUFXLENBQUMsV0FBWixDQUF3QixPQUF4QixFQURsQjtPQUFBLE1BQUE7UUFHRSxhQUFBLEdBQWdCLFFBSGxCO09BREY7S0FBQSxNQU1LLElBQUcsZ0JBQUg7TUFDSCxhQUFBLEdBQWdCLElBQUksQ0FBQyxTQUFMLENBQWUsT0FBTyxDQUFDLFVBQVIsQ0FBQSxDQUFmLEVBRGI7S0FBQSxNQUFBO01BS0gsSUFBQSxHQUFPLE9BQU8sQ0FBQyxLQUFSLENBQUEsQ0FBZSxDQUFDLFVBQWhCLENBQUE7TUFDUCxPQUFPLElBQUksQ0FBQztNQUNaLE9BQU8sSUFBSSxDQUFDO01BQ1osT0FBTyxJQUFJLENBQUM7TUFDWixPQUFPLElBQUksQ0FBQztNQUVaLElBQStCLDZEQUEvQjtRQUFBLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFyQjs7TUFDQSxhQUFBLEdBQWdCLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixFQVpiOztXQWNMLElBQUksSUFBSixDQUFTLENBQUMsYUFBRCxDQUFULEVBQTBCO01BQUMsSUFBQSxFQUFNLFFBQVA7S0FBMUI7RUFyQmU7O21DQXVCakIsY0FBQSxHQUFnQixTQUFDLE9BQUQsRUFBVSxnQkFBVixFQUE0QixRQUE1QjtBQUNkLFFBQUE7O01BRDBDLFdBQVM7O0lBQ25ELElBQUEsR0FBTyxNQUFNLENBQUMsR0FBUCxJQUFjLE1BQU0sQ0FBQztJQUM1QixJQUE4RSxJQUE5RTthQUFBLElBQUksQ0FBQyxlQUFMLENBQXFCLElBQUMsQ0FBQSxlQUFELENBQWlCLE9BQWpCLEVBQTBCLGdCQUExQixFQUE0QyxRQUE1QyxDQUFyQixFQUFBOztFQUZjOzttQ0FJaEIsTUFBQSxHQUFRLFNBQUMsUUFBRCxFQUFXLE9BQVgsRUFBb0IsUUFBcEI7QUFDTixRQUFBO0lBQUEsS0FBQSxHQUFRLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFDZixPQUFBLEdBQVUsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFFBQUQ7QUFDUixZQUFBOzthQUFxQixDQUFFLFdBQXZCLENBQW1DO1lBQUEsT0FBQSxFQUFTLFFBQVEsQ0FBQyxJQUFsQjtXQUFuQzs7UUFDQSxLQUFDLENBQUEsWUFBRCxDQUFjLGFBQWQsRUFBNkIsS0FBQyxDQUFBLEtBQUssQ0FBQyxjQUFwQyxFQUFvRCxRQUFwRCxFQUE4RDtVQUFDLEtBQUEsRUFBTyxLQUFSO1NBQTlELEVBQThFLEtBQUMsQ0FBQSxjQUFELENBQWdCLFFBQWhCLENBQTlFO2dEQUNBLFNBQVU7TUFIRjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7SUFJVixJQUFHLE9BQUEsK0NBQTRCLENBQUUsY0FBakM7TUFDRSxnRkFBNEIsQ0FBRSxHQUEzQixDQUErQixRQUEvQixFQUF5QyxRQUF6QyxtQkFBSDtlQUNFLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUF6QixDQUFnQyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQXZDLEVBQWlELE9BQWpELEVBQTBELENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsR0FBRCxFQUFNLFFBQU47WUFDeEQsSUFBc0IsR0FBdEI7QUFBQSxxQkFBTyxLQUFDLENBQUEsS0FBRCxDQUFPLEdBQVAsRUFBUDs7bUJBQ0EsT0FBQSxDQUFRLFFBQVI7VUFGd0Q7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTFELEVBREY7T0FBQSxNQUFBO1FBS0UsSUFBRyxRQUFIO1VBQ0UsUUFBUSxDQUFDLElBQVQsR0FBZ0I7VUFDaEIsUUFBUSxDQUFDLFFBQVQsR0FBb0IsUUFGdEI7U0FBQSxNQUFBO1VBSUUsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO1lBQUEsSUFBQSxFQUFNLE9BQU47WUFDQSxJQUFBLEVBQU0sYUFBYSxDQUFDLElBRHBCO1dBRFMsRUFKYjs7ZUFPQSxPQUFBLENBQVEsUUFBUixFQVpGO09BREY7O0VBTk07O21DQXFCUixZQUFBLEdBQWMsU0FBQyxRQUFEO0FBQ1osUUFBQTs7TUFEYSxXQUFXOztXQUN4QixJQUFDLENBQUEsR0FBRyxDQUFDLFlBQUwsMENBQWlDLENBQUUsYUFBbkMsRUFBeUMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQ7ZUFDdkMsS0FBQyxDQUFBLE1BQUQsQ0FBUSxLQUFDLENBQUEsS0FBSyxDQUFDLFFBQWYsRUFBeUIsT0FBekIsRUFBa0MsUUFBbEM7TUFEdUM7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXpDO0VBRFk7O21DQUlkLGtCQUFBLEdBQW9CLFNBQUMsUUFBRDs7TUFBQyxXQUFXOztJQUM5QixJQUFDLENBQUEsTUFBRCxDQUFRLGNBQVIsRUFBd0I7TUFBQyxFQUFBLEVBQUksb0JBQUw7S0FBeEI7SUFDQSxJQUFHLGtDQUFBLElBQTBCLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBcEM7YUFDRSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBcEIsRUFBbUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUExQyxFQUFvRDtRQUFDLGFBQUEsRUFBZSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFyQixDQUFBLENBQWhCO09BQXBELEVBREY7O0VBRmtCOzttQ0FLcEIsd0JBQUEsR0FBMEIsU0FBQyxRQUFEOztNQUFDLFdBQVc7O0lBQ3BDLElBQUcsa0NBQUEsSUFBMEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFwQzthQUNFLElBQUMsQ0FBQSxPQUFELENBQVMsRUFBQSxDQUFHLGdDQUFILENBQVQsRUFBK0MsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUFHLEtBQUMsQ0FBQSxrQkFBRCxDQUFvQixRQUFwQjtRQUFIO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEvQyxFQURGO0tBQUEsTUFBQTs4Q0FHRSxTQUFVLDhFQUhaOztFQUR3Qjs7bUNBTTFCLHlCQUFBLEdBQTJCLFNBQUMsYUFBRCxFQUFnQixTQUFoQixFQUEyQixRQUEzQixFQUFxQyxRQUFyQztBQUN6QixRQUFBO0lBQUEsSUFBRyxDQUFDLFFBQUEsR0FBVyxJQUFDLENBQUEsWUFBRCxDQUFjLFFBQWQsQ0FBWixDQUFIO01BQ0UsUUFBQSxHQUFXO1FBQUUsVUFBQSxRQUFGO1FBQVksV0FBQSxTQUFaO1FBQXVCLFVBQUEsUUFBdkI7O2FBQ1gsSUFBQyxDQUFBLGlCQUFELENBQW1CLGFBQW5CLEVBQWtDLFFBQWxDLEVBQTRDLFFBQTVDLEVBRkY7S0FBQSxNQUFBO01BSUUsSUFBQSxHQUFPO1FBQUUsT0FBQSxFQUFTLGFBQVg7UUFBMEIsV0FBQSxTQUExQjtRQUFxQyxVQUFBLFFBQXJDOzthQUNQLElBQUMsQ0FBQSxHQUFHLENBQUMseUJBQUwsQ0FBK0IsSUFBL0IsRUFBcUMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLFFBQUQ7VUFFbkMsSUFBRyxTQUFIO1lBQ0UsUUFBUSxDQUFDLFFBQVQsR0FBb0IsYUFBYSxDQUFDLFlBQWQsQ0FBMkIsUUFBUSxDQUFDLFFBQXBDLEVBQThDLFNBQTlDLEVBRHRCOztVQUVBLElBQUcsUUFBSDtZQUNFLFFBQVEsQ0FBQyxRQUFULEdBQW9CLFNBRHRCOztpQkFHQSxLQUFDLENBQUEsaUJBQUQsQ0FBbUIsYUFBbkIsRUFBa0MsUUFBbEMsRUFBNEMsUUFBNUM7UUFQbUM7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJDLEVBTEY7O0VBRHlCOzttQ0FpQjNCLGlCQUFBLEdBQW1CLFNBQUMsYUFBRCxFQUFnQixRQUFoQixFQUEwQixRQUExQjtBQUNqQixRQUFBOztNQUQyQyxXQUFXOztJQUN0RCw4REFBcUIsQ0FBRSxHQUFwQixDQUF3QixRQUF4QixFQUFrQyxRQUFsQyxtQkFBSDthQUNFLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBbEIsQ0FBK0IsYUFBL0IsRUFBOEMsUUFBOUMsRUFBd0QsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLEdBQUQsRUFBTSxVQUFOO1VBQ3RELElBQUcsR0FBSDtBQUNFLG1CQUFPLEtBQUMsQ0FBQSxLQUFELENBQU8sR0FBUCxFQURUOztrREFFQSxTQUFVLGVBQWU7UUFINkI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXhELEVBREY7O0VBRGlCOzttQ0FPbkIsS0FBQSxHQUFPLFNBQUMsT0FBRDs7TUFBQyxVQUFVOztXQUNoQixJQUFDLENBQUEsU0FBRCxDQUNFO01BQUEsS0FBQSxFQUFPLE9BQVA7TUFDQSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLElBQWlCLENBQUksT0FENUI7S0FERjtFQURLOzttQ0FLUCxjQUFBLEdBQWdCLFNBQUE7QUFDZCxRQUFBO1dBQUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLElBQ0UsMkNBQW1CLENBQUUsMEJBRHZCLElBRUUsQ0FBSSxJQUFDLENBQUEsZ0JBQUQsQ0FBQSxDQUZOLGlGQUcyQixDQUFFLEdBQTNCLENBQStCLFFBQS9CLEVBQXlDLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBaEQ7RUFKWTs7bUNBTWhCLFFBQUEsR0FBVSxTQUFDLFFBQUQ7SUFDUixJQUFHLElBQUMsQ0FBQSxpQkFBSjtNQUNFLGFBQUEsQ0FBYyxJQUFDLENBQUEsaUJBQWYsRUFERjs7SUFJQSxJQUFHLFFBQUEsR0FBVyxJQUFkO01BQ0UsUUFBQSxHQUFXLElBQUksQ0FBQyxLQUFMLENBQVcsUUFBQSxHQUFXLElBQXRCLEVBRGI7O0lBRUEsSUFBRyxRQUFBLEdBQVcsQ0FBZDthQUNFLElBQUMsQ0FBQSxpQkFBRCxHQUFxQixXQUFBLENBQVksQ0FBQyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7VUFBRyxJQUFXLEtBQUMsQ0FBQSxjQUFELENBQUEsQ0FBWDttQkFBQSxLQUFDLENBQUEsSUFBRCxDQUFBLEVBQUE7O1FBQUg7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUQsQ0FBWixFQUFnRCxRQUFBLEdBQVcsSUFBM0QsRUFEdkI7O0VBUFE7O21DQVVWLFlBQUEsR0FBYyxTQUFBO1dBQ1o7RUFEWTs7bUNBR2QsaUJBQUEsR0FBbUIsU0FBQyxVQUFEO1dBQ2pCLElBQUMsQ0FBQSxHQUFHLENBQUMsaUJBQUwsQ0FBdUIsVUFBdkI7RUFEaUI7O21DQUduQixpQkFBQSxHQUFtQixTQUFBO1dBQ2pCLElBQUMsQ0FBQSxHQUFHLENBQUMsaUJBQUwsQ0FBQTtFQURpQjs7bUNBR25CLGFBQUEsR0FBZSxTQUFDLFdBQUQ7QUFDYixRQUFBOztNQURjLGNBQWM7O0lBQzVCLE1BQUEsR0FBWSxtQkFBSCxHQUFxQixHQUFBLEdBQUksV0FBekIsR0FBNEM7V0FFckQsRUFBQSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBckIsR0FBOEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFoRCxHQUEyRDtFQUg5Qzs7bUNBU2YsaUJBQUEsR0FBbUIsU0FBQyxNQUFEO0FBQ2pCLFFBQUE7SUFBQSxHQUFBLEdBQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN0QixJQUFBLEdBQU8sR0FBRyxDQUFDLEtBQUosQ0FBVSxHQUFWO0FBRVAsU0FBQSx3Q0FBQTs7TUFDRSxFQUFBLEdBQUssSUFBSSxNQUFKLENBQVcsUUFBQSxHQUFXLEdBQVgsR0FBaUIsaUJBQTVCLEVBQStDLEdBQS9DO01BRUwsSUFBRyxFQUFFLENBQUMsSUFBSCxDQUFRLEdBQVIsQ0FBSDtRQUNFLElBQUssQ0FBQSxDQUFBLENBQUwsR0FBVSxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsT0FBUixDQUFnQixFQUFoQixFQUFvQixNQUFwQixDQUEyQixDQUFDLE9BQTVCLENBQW9DLFNBQXBDLEVBQStDLEVBQS9DLEVBRFo7O0FBSEY7SUFNQSxHQUFBLEdBQU0sSUFBSyxDQUFBLENBQUEsQ0FBTCxHQUFVLENBQUcsZUFBSCxHQUFpQixHQUFBLEdBQU0sSUFBSyxDQUFBLENBQUEsQ0FBNUIsR0FBb0MsRUFBcEM7SUFFaEIsSUFBRyxHQUFBLEtBQVMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUE1QjthQUNFLE9BQU8sQ0FBQyxTQUFSLENBQWtCO1FBQUUsV0FBQSxFQUFhLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBL0I7T0FBbEIsRUFBeUQsRUFBekQsRUFBNkQsR0FBN0QsRUFERjs7RUFaaUI7O21DQWVuQixPQUFBLEdBQVMsU0FBQyxPQUFELEVBQVUsUUFBVjtXQUNQLElBQUMsQ0FBQSxhQUFELENBQWU7TUFBRSxPQUFBLEVBQVMsT0FBWDtNQUFvQixRQUFBLEVBQVUsUUFBOUI7S0FBZjtFQURPOzttQ0FHVCxhQUFBLEdBQWUsU0FBQyxNQUFEO1dBQ2IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxhQUFMLENBQW1CLE1BQW5CO0VBRGE7O21DQUdmLEtBQUEsR0FBTyxTQUFDLE9BQUQsRUFBVSxlQUFWLEVBQTJCLFFBQTNCO0lBQ0wsSUFBRyxDQUFDLENBQUMsVUFBRixDQUFhLGVBQWIsQ0FBSDtNQUNFLFFBQUEsR0FBVztNQUNYLGVBQUEsR0FBa0IsS0FGcEI7O1dBR0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFMLENBQWlCLE9BQWpCLEVBQTJCLGVBQUEsSUFBbUIsRUFBQSxDQUFHLHFCQUFILENBQTlDLEVBQXlFLFFBQXpFO0VBSks7O21DQU1QLFdBQUEsR0FBYSxTQUFDLGFBQUQsRUFBZ0IsUUFBaEIsRUFBMEIsUUFBMUI7SUFDWCxJQUFHLGFBQUEsS0FBbUIsSUFBdEI7YUFDRSxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsYUFBbEIsRUFBaUMsUUFBakMsRUFBMkMsUUFBM0MsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsTUFBRCxDQUFRLFlBQVIsRUFBc0I7UUFBRSxNQUFBLEVBQVEsSUFBQyxDQUFBLGVBQUQsQ0FBQSxDQUFWO09BQXRCLEVBQXNELENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxhQUFEO2lCQUNwRCxLQUFDLENBQUEsZ0JBQUQsQ0FBa0IsYUFBbEIsRUFBaUMsUUFBakMsRUFBMkMsUUFBM0M7UUFEb0Q7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXRELEVBSEY7O0VBRFc7O21DQU9iLFlBQUEsR0FBYyxTQUFDLElBQUQsRUFBTyxPQUFQLEVBQWdCLFFBQWhCLEVBQTBCLGVBQTFCLEVBQThDLFVBQTlDOztNQUEwQixrQkFBZ0I7OztNQUFJLGFBQVc7Ozs7UUFDckUsUUFBUSxDQUFFLGVBQWdCOzs7SUFDMUIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxPQUFkLEVBQXVCLFFBQXZCLEVBQWlDLGVBQWpDLEVBQWtELFVBQWxEO1dBQ0EsSUFBQyxDQUFBLE1BQUQsQ0FBUSxJQUFSLEVBQWM7TUFBRSxPQUFBLG9CQUFTLE9BQU8sQ0FBRSxnQkFBVCxDQUFBLFVBQVg7TUFBd0MsTUFBQSxFQUFRLElBQUMsQ0FBQSxlQUFELENBQUEsQ0FBaEQ7S0FBZDtFQUhZOzttQ0FLZCxXQUFBLEdBQWEsU0FBQyxPQUFELEVBQVUsUUFBVixFQUFvQixlQUFwQixFQUF3QyxVQUF4Qzs7TUFBb0Isa0JBQWdCOzs7TUFBSSxhQUFXOztXQUM5RCxJQUFDLENBQUEsTUFBRCxDQUFRLFlBQVIsRUFBc0I7TUFBRSxPQUFBLG9CQUFTLE9BQU8sQ0FBRSxnQkFBVCxDQUFBLFVBQVg7S0FBdEIsRUFBZ0UsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE1BQUQsRUFBUyxlQUFUO1FBQzlELElBQXNDLE1BQXRDO0FBQUEsaUJBQU8sS0FBQyxDQUFBLEtBQUQsQ0FBTyxNQUFQLEVBQWUsU0FBQTttQkFBRyxLQUFDLENBQUEsS0FBRCxDQUFBO1VBQUgsQ0FBZixFQUFQOzs7O1lBRUEsUUFBUSxDQUFFLGVBQWdCOzs7UUFDMUIsSUFBRyxDQUFJLEtBQUMsQ0FBQSxVQUFVLENBQUMsZUFBbkI7VUFDRSxPQUFPLENBQUMsV0FBUixDQUFvQixlQUFwQixFQURGOztRQUVBLEtBQUMsQ0FBQSxZQUFELENBQWMsT0FBZCxFQUF1QixRQUF2QixFQUFpQyxlQUFqQyxFQUFrRCxVQUFsRDtlQUNBLEtBQUMsQ0FBQSxLQUFELENBQUE7TUFQOEQ7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhFO0VBRFc7O21DQVViLFlBQUEsR0FBYyxTQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLGVBQXBCLEVBQXdDLFVBQXhDO0FBQ1osUUFBQTs7TUFEZ0Msa0JBQWdCOzs7TUFBSSxhQUFXOztJQUMvRCxLQUFBLEdBQ0U7TUFBQSxjQUFBLEVBQWdCLE9BQWhCO01BQ0EsUUFBQSxFQUFVLFFBRFY7TUFFQSxNQUFBLEVBQVEsSUFGUjtNQUdBLEtBQUEsRUFBTyxLQUhQO01BSUEsS0FBQSxFQUFPLENBQUksZUFBZSxDQUFDLEtBQXBCLHVCQUE4QixPQUFPLENBQUUsa0JBQVQsQ0FBQSxXQUpyQzs7QUFLRixTQUFBLHNCQUFBOzs7TUFDRSxLQUFNLENBQUEsR0FBQSxDQUFOLEdBQWE7QUFEZjtJQUVBLElBQUMsQ0FBQSxlQUFELG9CQUFpQixRQUFRLENBQUUsYUFBM0I7SUFDQSxJQUFHLFVBQUEsS0FBZ0IsSUFBbkI7TUFDRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWhCLEdBQXVCLFdBRHpCOztXQUVBLElBQUMsQ0FBQSxTQUFELENBQVcsS0FBWDtFQVpZOzttQ0FjZCxNQUFBLEdBQVEsU0FBQyxJQUFELEVBQU8sSUFBUCxFQUFrQixhQUFsQjtBQUNOLFFBQUE7O01BRGEsT0FBTzs7O01BQUksZ0JBQWdCOztJQUN4QyxLQUFBLEdBQVEsSUFBSSwyQkFBSixDQUFnQyxJQUFoQyxFQUFzQyxJQUF0QyxFQUE0QyxhQUE1QyxFQUEyRCxJQUFDLENBQUEsS0FBNUQ7QUFDUjtBQUFBO1NBQUEscUNBQUE7O21CQUNFLFFBQUEsQ0FBUyxLQUFUO0FBREY7O0VBRk07O21DQUtSLFNBQUEsR0FBVyxTQUFDLE9BQUQ7QUFDVCxRQUFBO0FBQUEsU0FBQSxjQUFBOzs7TUFDRSxJQUFDLENBQUEsS0FBTSxDQUFBLEdBQUEsQ0FBUCxHQUFjO0FBRGhCO1dBRUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSO0VBSFM7O21DQUtYLFdBQUEsR0FBYSxTQUFBO1dBQ1gsSUFBQyxDQUFBLFNBQUQsQ0FDRTtNQUFBLGFBQUEsRUFBZSxJQUFmO01BQ0EsY0FBQSxFQUFnQixJQURoQjtNQUVBLFFBQUEsRUFBVSxJQUZWO01BR0EsS0FBQSxFQUFPLEtBSFA7TUFJQSxNQUFBLEVBQVEsSUFKUjtNQUtBLEtBQUEsRUFBTyxLQUxQO0tBREY7RUFEVzs7bUNBU2IsaUJBQUEsR0FBbUIsU0FBQTtBQUNqQixRQUFBO0lBQUEsOEVBQTRCLENBQUUsR0FBM0IsQ0FBK0IsT0FBL0IsRUFBd0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUEvQyxtQkFBSDthQUNFLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUF6QixDQUErQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQXRDLEVBREY7O0VBRGlCOzttQ0FJbkIsNkJBQUEsR0FBK0IsU0FBQyxhQUFELEVBQWdCLFFBQWhCO0FBQzdCLFFBQUE7O01BRDZDLFdBQVc7O0lBQ3hELElBQUcsaUNBQUg7TUFDRSxjQUFBLEdBQWlCLElBQUMsQ0FBQSxLQUFLLENBQUM7TUFDeEIsY0FBYyxDQUFDLE9BQWYsQ0FBdUIsYUFBdkIsRUFGRjtLQUFBLE1BQUE7TUFJRSxjQUFBLEdBQWlCLG1CQUFtQixDQUFDLDJCQUFwQixDQUFnRCxhQUFoRCxFQUpuQjs7SUFLQSxJQUFHLGdCQUFIO01BQ0UsY0FBYyxDQUFDLFdBQWYsQ0FBMkI7UUFBQSxPQUFBLEVBQVMsUUFBUSxDQUFDLElBQWxCO09BQTNCLEVBREY7O1dBRUE7RUFSNkI7O21DQVUvQixlQUFBLEdBQWlCLFNBQUMsSUFBRDtBQUNmLFFBQUE7SUFBQSxvRUFBa0IsQ0FBRSxtQ0FBcEI7YUFDRSxRQUFRLENBQUMsS0FBVCxHQUFpQixFQUFBLEdBQUUsaUJBQUksSUFBSSxDQUFFLGdCQUFOLEdBQWUsQ0FBbEIsR0FBeUIsSUFBekIsR0FBb0MsRUFBQSxDQUFHLDRCQUFILENBQXJDLENBQUYsR0FBMEUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxFQUFFLENBQUMsb0JBQXpGLEdBQWdILElBQUMsQ0FBQSxVQUFVLENBQUMsRUFBRSxDQUFDLGtCQURsSjs7RUFEZTs7bUNBSWpCLGNBQUEsR0FBZ0IsU0FBQyxRQUFEO0FBQ2QsUUFBQTtJQUFBLCtEQUFxQixDQUFFLFlBQXBCLENBQUEsb0JBQUEsSUFBdUMseUlBQTFDO2FBQ0UsUUFBQSxHQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFsQixJQUFvQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQXZELENBQVIsR0FBb0UsR0FBcEUsR0FBc0UsQ0FBQyxrQkFBQSxDQUFtQixlQUFuQixDQUFELEVBRHhFO0tBQUEsTUFFSyx3QkFBRyxRQUFRLENBQUUsa0JBQVYsWUFBOEIsV0FBOUIsSUFDSixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFyQixDQUE2QixZQUE3QixDQUFBLEtBQThDLENBRDdDO2FBRUgsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUZiO0tBQUEsTUFBQTthQUdBLEdBSEE7O0VBSFM7O21DQVFoQix5QkFBQSxHQUEyQixTQUFBO1dBQ3pCLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxFQUFWLENBQWEsU0FBYixFQUF3QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtBQUN0QixZQUFBO1FBQUEsRUFBQSxHQUFLLENBQUMsQ0FBQztRQUNQLEtBQUEsR0FBUSxTQUFDLElBQUQsRUFBTyxNQUFQO0FBQ04sY0FBQTs7WUFEYSxTQUFPOztVQUNwQixPQUFBLEdBQVUsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxFQUFSLEVBQVksTUFBWixFQUFvQjtZQUFDLElBQUEsRUFBTSxJQUFQO1dBQXBCO2lCQUNWLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVixDQUFzQixPQUF0QixFQUErQixFQUFFLENBQUMsTUFBbEM7UUFGTTtBQUdSLDZDQUFjLENBQUUsYUFBaEI7QUFBQSxlQUNPLGtCQURQO21CQUVJLEtBQUEsQ0FBTSxlQUFOLEVBQXVCO2NBQUEsUUFBQSxFQUFVLENBQUMsZUFBRCxDQUFWO2FBQXZCO0FBRkosZUFHTyxlQUhQO1lBSUksSUFBRyxLQUFDLENBQUEsY0FBRCxDQUFBLENBQUg7cUJBQ0UsS0FBQyxDQUFBLElBQUQsQ0FBTSxTQUFBO3VCQUFHLEtBQUEsQ0FBTSxnQkFBTixFQUF3QjtrQkFBQSxLQUFBLEVBQU8sSUFBUDtpQkFBeEI7Y0FBSCxDQUFOLEVBREY7YUFBQSxNQUFBO3FCQUdFLEtBQUEsQ0FBTSxnQkFBTixFQUF3QjtnQkFBQSxLQUFBLEVBQU8sS0FBUDtlQUF4QixFQUhGOztBQUpKO01BTHNCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF4QjtFQUR5Qjs7Ozs7O0FBZTdCLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSwyQkFBQSxFQUE2QiwyQkFBN0I7RUFDQSxzQkFBQSxFQUF3QixzQkFEeEI7Ozs7O0FDMXdCRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUxBLElBQUEsaU9BQUE7RUFBQTs7O0FBQUEsTUFBc0IsS0FBSyxDQUFDLEdBQTVCLEVBQUMsYUFBRCxFQUFNLG1CQUFOLEVBQWM7O0FBRWQsYUFBQSxHQUFnQixPQUFBLENBQVEsMEJBQVI7O0FBQ2hCLFlBQUEsR0FBZSxPQUFBLENBQVEseUJBQVI7O0FBQ2YsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFDTCxRQUFBLEdBQVcsT0FBQSxDQUFRLG9CQUFSOztBQUNYLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFDUCxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBRVAsaUJBQUEsR0FBb0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUNyRCxtQkFBQSxHQUFzQixDQUFDLE9BQUEsQ0FBUSxzQkFBUixDQUFELENBQWdDLENBQUM7O0FBQ3ZELGFBQUEsR0FBZ0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUVqRCxnQkFBQSxHQUFtQixPQUFBLENBQVEsc0JBQVI7O0FBQ25CLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSxxQkFBUjs7QUFFbkIsZ0NBQUEsR0FBbUMsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsS0FBSyxDQUFDLFdBQU4sQ0FDckQ7RUFBQSxXQUFBLEVBQWEsa0NBQWI7RUFFQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLGlCQUFBLEVBQW1CLEtBQW5COztFQURlLENBRmpCO0VBS0Esa0JBQUEsRUFBb0IsU0FBQTtXQUNsQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxpQkFBaEIsQ0FBa0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQ2hDLEtBQUMsQ0FBQSxRQUFELENBQVU7VUFBQSxpQkFBQSxFQUFtQixJQUFuQjtTQUFWO01BRGdDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQztFQURrQixDQUxwQjtFQVNBLFlBQUEsRUFBYyxTQUFBO1dBQ1osSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBaEIsQ0FBQTtFQURZLENBVGQ7RUFZQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxxQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLDZCQUFaO0tBQUosRUFBZ0QsRUFBaEQsQ0FERixFQUVFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyx1QkFBWjtLQUFKLEVBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxpQkFBVixHQUNHLE1BQUEsQ0FBTztNQUFDLE9BQUEsRUFBUyxJQUFDLENBQUEsWUFBWDtLQUFQLEVBQWlDLGtCQUFqQyxDQURILEdBR0UsK0JBSkgsQ0FGRjtFQURLLENBWlI7Q0FEcUQsQ0FBcEI7O0FBd0I3Qjs7O0VBRVMsK0JBQUMsT0FBRCxFQUFnQixNQUFoQjtJQUFDLElBQUMsQ0FBQSw0QkFBRCxVQUFXO0lBQUksSUFBQyxDQUFBLFNBQUQ7SUFDM0IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxnQkFBVCxHQUE0QjtJQUM1Qix1REFDRTtNQUFBLElBQUEsRUFBTSxxQkFBcUIsQ0FBQyxJQUE1QjtNQUNBLFdBQUEsRUFBYSxJQUFDLENBQUEsT0FBTyxDQUFDLFdBQVQsSUFBd0IsQ0FBQyxFQUFBLENBQUcsMEJBQUgsQ0FBRCxDQURyQztNQUVBLGNBQUEsRUFBZ0IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxjQUZ6QjtNQUdBLFlBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFqQixDQUFOO1FBQ0EsTUFBQSxFQUFRLElBQUMsQ0FBQSxlQUFELENBQWlCLE1BQWpCLENBRFI7UUFFQSxDQUFBLE1BQUEsQ0FBQSxFQUFRLEtBRlI7UUFHQSxJQUFBLEVBQU0sSUFBQyxDQUFBLGVBQUQsQ0FBaUIsTUFBakIsQ0FITjtRQUlBLElBQUEsRUFBTSxJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFqQixDQUpOO1FBS0EsTUFBQSxFQUFRLElBQUMsQ0FBQSxlQUFELENBQWlCLFFBQWpCLENBTFI7UUFNQSxNQUFBLEVBQVEsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsUUFBakIsQ0FOUjtRQU9BLEtBQUEsRUFBTyxLQVBQO09BSkY7S0FERjtJQWNBLElBQUMsQ0FBQSxTQUFELEdBQWE7TUFDWCxjQUFBLEVBQWdCLGFBQUEsQ0FBYyxnQkFBZCxDQURMO01BRVgsUUFBQSxFQUFVLGFBQUEsQ0FBYyxVQUFkLENBRkM7TUFHWCxNQUFBLEVBQVEsYUFBQSxDQUFjLFFBQWQsQ0FIRztNQUlYLE9BQUEsRUFBUyxhQUFBLENBQWMsS0FBZCxDQUpFO01BS1gsUUFBQSxFQUFVLGFBQUEsQ0FBYyxPQUFkLENBTEM7O0lBUWIsSUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsVUFBRCxFQUFhLEtBQWIsRUFBb0IsT0FBcEI7SUFFeEIsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLGdCQUFKLENBQXFCLElBQUMsQ0FBQSxTQUFTLENBQUMsY0FBaEM7SUFFZixJQUFDLENBQUEsSUFBRCxHQUFRO0lBRVIsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsSUFBSSxnQkFBSixDQUFxQixJQUFDLENBQUEsT0FBTyxDQUFDLGVBQTlCO0VBOUJMOztFQWdDYixxQkFBQyxDQUFBLElBQUQsR0FBTzs7a0NBRVAsR0FBQSxHQUFLLFNBQUMsVUFBRCxFQUFhLFFBQWI7QUFFSCxRQUFBO0lBQUEsSUFBZ0IsQ0FBQyxDQUFDLFVBQUEsS0FBYyxNQUFmLENBQUEsSUFBMEIsQ0FBQyxVQUFBLEtBQWMsUUFBZixDQUEzQixDQUFBLHFFQUErRSxDQUFFLHdCQUFqRztBQUFBLGFBQU8sTUFBUDs7V0FDQSwrQ0FBTSxVQUFOLEVBQWtCLFFBQWxCO0VBSEc7O2tDQU1MLHVCQUFBLEdBQXlCLFNBQUE7V0FDdkIsQ0FBSSxDQUFDLElBQUMsQ0FBQSxTQUFTLENBQUMsTUFBWCxJQUFxQixDQUFDLElBQUMsQ0FBQSxTQUFTLENBQUMsT0FBWCxJQUF1QixJQUFDLENBQUEsU0FBUyxDQUFDLFFBQW5DLENBQXRCO0VBRG1COztrQ0FHekIsVUFBQSxHQUFZLFNBQUMsWUFBRDtJQUFDLElBQUMsQ0FBQSxlQUFEO0lBQ1gsSUFBRyxJQUFDLENBQUEsWUFBSjtNQUNFLElBQUcsSUFBQyxDQUFBLElBQUo7ZUFDRSxJQUFDLENBQUEsWUFBRCxDQUFjLElBQWQsRUFERjtPQUFBLE1BQUE7ZUFHRSxJQUFDLENBQUEsV0FBRCxDQUFBLEVBSEY7T0FERjtLQUFBLE1BQUE7YUFNRSxJQUFDLENBQUEsSUFBRCxLQUFXLEtBTmI7O0VBRFU7O2tDQVNaLFNBQUEsR0FBVyxTQUFDLGtCQUFEO1dBQ1QsSUFBQyxDQUFBLGdCQUFELENBQWtCLGtCQUFsQjtFQURTOztrQ0FHWCxpQkFBQSxHQUFtQixTQUFDLHNCQUFEO0lBQUMsSUFBQyxDQUFBLHlCQUFEO0lBQ2xCLElBQUcsSUFBQyxDQUFBLGVBQUo7YUFDRSxJQUFDLENBQUEsc0JBQUQsQ0FBQSxFQURGOztFQURpQjs7a0NBSW5CLFdBQUEsR0FBYSxTQUFBO0FBQ1gsUUFBQTtJQUFBLFFBQUEsR0FBVyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtBQUNULFlBQUE7UUFBQSxLQUFDLENBQUEsSUFBRCxHQUFRO1FBQ1IsS0FBQyxDQUFBLGVBQUQsR0FBbUI7O1VBQ25CLEtBQUMsQ0FBQTs7UUFDRCxJQUFHLElBQUg7O2dCQUNlLENBQUUsS0FBZixDQUFBO1dBREY7O1FBRUEsSUFBa0MsS0FBQyxDQUFBLFlBQW5DO2lCQUFBLEtBQUMsQ0FBQSxZQUFELENBQWUsSUFBQSxLQUFVLElBQXpCLEVBQUE7O01BTlM7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO1dBUVgsQ0FBQyxDQUFDLElBQUYsQ0FDRTtNQUFBLFFBQUEsRUFBVSxNQUFWO01BQ0EsR0FBQSxFQUFLLElBQUMsQ0FBQSxXQUFXLENBQUMsVUFBYixDQUFBLENBREw7TUFFQSxTQUFBLEVBQ0U7UUFBQSxlQUFBLEVBQWlCLElBQWpCO09BSEY7TUFJQSxPQUFBLEVBQVMsU0FBQyxJQUFEO2VBQVUsUUFBQSxDQUFTLElBQVQ7TUFBVixDQUpUO01BS0EsS0FBQSxFQUFPLFNBQUE7ZUFBRyxRQUFBLENBQVMsSUFBVDtNQUFILENBTFA7S0FERjtFQVRXOztrQ0FpQmIsWUFBQSxHQUFjOztrQ0FFZCxnQkFBQSxHQUFrQixTQUFDLGtCQUFEO0FBQ2hCLFFBQUE7SUFBQSxJQUFHLElBQUMsQ0FBQSxZQUFELElBQWtCLENBQUksSUFBQyxDQUFBLFlBQVksQ0FBQyxNQUF2QztNQUNFLElBQUMsQ0FBQSxZQUFZLENBQUMsS0FBZCxDQUFBLEVBREY7S0FBQSxNQUFBO01BSUUscUJBQUEsR0FBd0IsU0FBQyxDQUFELEVBQUksQ0FBSjtBQUN0QixZQUFBO1FBQUEsVUFBQSxHQUFhLE1BQU0sQ0FBQyxVQUFQLElBQXFCLE1BQU0sQ0FBQztRQUN6QyxTQUFBLEdBQWEsTUFBTSxDQUFDLFNBQVAsSUFBcUIsTUFBTSxDQUFDO1FBQ3pDLEtBQUEsR0FBUyxNQUFNLENBQUMsVUFBUCxJQUFzQixRQUFRLENBQUMsZUFBZSxDQUFDLFdBQS9DLElBQStELE1BQU0sQ0FBQztRQUMvRSxNQUFBLEdBQVMsTUFBTSxDQUFDLFdBQVAsSUFBc0IsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUEvQyxJQUErRCxNQUFNLENBQUM7UUFFL0UsSUFBQSxHQUFPLENBQUMsQ0FBQyxLQUFBLEdBQVEsQ0FBVCxDQUFBLEdBQWMsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFmLENBQUEsR0FBMEI7UUFDakMsR0FBQSxHQUFNLENBQUMsQ0FBQyxNQUFBLEdBQVMsQ0FBVixDQUFBLEdBQWUsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFoQixDQUFBLEdBQTJCO0FBQ2pDLGVBQU87VUFBQyxNQUFBLElBQUQ7VUFBTyxLQUFBLEdBQVA7O01BUmU7TUFVeEIsS0FBQSxHQUFRO01BQ1IsTUFBQSxHQUFTO01BQ1QsUUFBQSxHQUFXLHFCQUFBLENBQXNCLEtBQXRCLEVBQTZCLE1BQTdCO01BQ1gsY0FBQSxHQUFpQixDQUNmLFFBQUEsR0FBVyxLQURJLEVBRWYsU0FBQSxHQUFZLE1BRkcsRUFHZixNQUFBLEdBQVMsUUFBUSxDQUFDLEdBQWxCLElBQXlCLEdBSFYsRUFJZixPQUFBLEdBQVUsUUFBUSxDQUFDLElBQW5CLElBQTJCLEdBSlosRUFLZixlQUxlLEVBTWYsY0FOZSxFQU9mLGFBUGUsRUFRZixZQVJlLEVBU2YsWUFUZTtNQVlqQixJQUFDLENBQUEsWUFBRCxHQUFnQixNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxXQUFXLENBQUMsU0FBYixDQUFBLENBQVosRUFBc0MsTUFBdEMsRUFBOEMsY0FBYyxDQUFDLElBQWYsQ0FBQSxDQUE5QztNQUVoQixJQUFHLElBQUMsQ0FBQSxZQUFKO1FBQ0UsVUFBQSxHQUFhLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7QUFDWCxnQkFBQTtBQUFBO2NBQ0UsSUFBSSxLQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUF2QixLQUErQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQW5EO2dCQUNFLGFBQUEsQ0FBYyxJQUFkO2dCQUNBLEtBQUMsQ0FBQSxZQUFZLENBQUMsS0FBZCxDQUFBO2dCQUNBLEtBQUMsQ0FBQSxXQUFELENBQUE7Z0JBQ0EsSUFBd0Isa0JBQXhCO3lCQUFBLGtCQUFBLENBQUEsRUFBQTtpQkFKRjtlQURGO2FBQUEsYUFBQTtjQU1NLFVBTk47O1VBRFc7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO1FBVWIsSUFBQSxHQUFPLFdBQUEsQ0FBWSxVQUFaLEVBQXdCLEdBQXhCLEVBWFQ7T0EvQkY7O1dBNENBLElBQUMsQ0FBQTtFQTdDZTs7a0NBK0NsQix5QkFBQSxHQUEyQixTQUFBO1dBQ3hCLGdDQUFBLENBQWlDO01BQUMsUUFBQSxFQUFVLElBQVg7TUFBYyxZQUFBLEVBQWMsSUFBQyxDQUFBLFlBQTdCO0tBQWpDO0VBRHdCOztrQ0FHM0IsVUFBQSxHQUFZLFNBQUE7SUFDVixJQUFHLElBQUMsQ0FBQSxJQUFKO2FBQ0csSUFBQSxDQUFLLEVBQUwsRUFBVSxJQUFBLENBQUs7UUFBQyxTQUFBLEVBQVcscUJBQVo7T0FBTCxDQUFWLEVBQW9ELElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBMUQsRUFESDtLQUFBLE1BQUE7YUFHRSxLQUhGOztFQURVOztrQ0FNWixrQkFBQSxHQUFvQixTQUFDLFVBQUQsRUFBYSxnQkFBYjtJQUVsQixJQUFHLFVBQUEsS0FBYyxNQUFkLElBQXlCLElBQUMsQ0FBQSxrQkFBN0I7TUFDRSxJQUFDLENBQUEsa0JBQUQsR0FBc0I7YUFDdEIsS0FGRjtLQUFBLE1BQUE7YUFJRSxpQkFKRjs7RUFGa0I7O2tDQVFwQixlQUFBLEdBQWlCLFNBQUMsVUFBRDtJQUNmLElBQUcsVUFBQSxLQUFjLE1BQWpCO2FBQ0UsSUFBQyxDQUFBLE9BQU8sQ0FBQyxnQkFBVCxHQUE0QixFQUQ5QjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsT0FBTyxDQUFDLGdCQUFULEdBQTRCLEVBSDlCOztFQURlOztrQ0FNakIsa0JBQUEsR0FBb0IsU0FBQTtXQUNsQixpRkFBQSxHQUdlLENBQUMsRUFBQSxDQUFHLENBQUMseUJBQXlCLENBQUMsaUJBQTlCLENBQUQsQ0FIZixHQUdnRSwwREFIaEUsR0FNTyxDQUFDLEVBQUEsQ0FBRyxDQUFDLHlCQUF5QixDQUFDLHFCQUE5QixDQUFELENBTlAsR0FNNEQ7RUFQMUM7O2tDQVlwQixxQkFBQSxHQUF1QixTQUFDLFVBQUQ7SUFDckIsSUFBRyxVQUFBLEtBQWMsTUFBZCxJQUF5QixJQUFDLENBQUEsa0JBQUQsQ0FBQSxDQUE1QjthQUNFLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixDQUFjLElBQUMsQ0FBQSxrQkFBRCxDQUFBLENBQWQsRUFBc0MsRUFBQSxDQUFHLDZDQUFILENBQXRDLEVBREY7O0VBRHFCOztrQ0FJdkIsZUFBQSxHQUFpQixTQUFBO0lBQ2YsSUFBRyxJQUFDLENBQUEsU0FBUyxDQUFDLFFBQWQ7TUFDRSxJQUFDLENBQUEsTUFBTSxDQUFDLGdCQUFSLENBQXlCLElBQUMsQ0FBQSxJQUExQixFQUFnQztRQUFFLEVBQUEsRUFBSSxJQUFDLENBQUEsU0FBUyxDQUFDLFFBQWpCO09BQWhDO2FBQ0EsS0FGRjtLQUFBLE1BR0ssSUFBRyxJQUFDLENBQUEsU0FBUyxDQUFDLE9BQVgsSUFBdUIsSUFBQyxDQUFBLFNBQVMsQ0FBQyxRQUFyQztNQUNILElBQUMsQ0FBQSxNQUFNLENBQUMsZ0JBQVIsQ0FBeUIsSUFBQyxDQUFBLElBQTFCLEVBQWdDO1FBQUUsSUFBQSxFQUFNLElBQUMsQ0FBQSxTQUFTLENBQUMsT0FBbkI7UUFBNEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxTQUFTLENBQUMsUUFBOUM7T0FBaEM7YUFDQSxLQUZHO0tBQUEsTUFBQTthQUlILE1BSkc7O0VBSlU7O2tDQVVqQixJQUFBLEdBQU0sU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNKLENBQUMsQ0FBQyxJQUFGLENBQ0U7TUFBQSxRQUFBLEVBQVUsTUFBVjtNQUNBLEdBQUEsRUFBSyxJQUFDLENBQUEsV0FBVyxDQUFDLGFBQWIsQ0FBQSxDQURMO01BRUEsT0FBQSxFQUFTLElBRlQ7TUFHQSxTQUFBLEVBQ0U7UUFBQSxlQUFBLEVBQWlCLElBQWpCO09BSkY7TUFLQSxPQUFBLEVBQVMsU0FBQyxJQUFEO0FBQ1AsWUFBQTtRQUFBLElBQUEsR0FBTztBQUNQLGFBQUEsV0FBQTs7O1VBQ0UsSUFBRyxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBSSxDQUFDLElBQXZCLENBQUg7WUFDRSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksYUFBSixDQUNSO2NBQUEsSUFBQSxFQUFNLElBQUksQ0FBQyxJQUFYO2NBQ0EsWUFBQSxFQUFjO2dCQUFDLEVBQUEsRUFBSSxJQUFJLENBQUMsRUFBVjtlQURkO2NBRUEsSUFBQSxFQUFNLGFBQWEsQ0FBQyxJQUZwQjtjQUdBLFFBQUEsRUFBVSxJQUhWO2FBRFEsQ0FBVixFQURGOztBQURGO2VBT0EsUUFBQSxDQUFTLElBQVQsRUFBZSxJQUFmO01BVE8sQ0FMVDtNQWVBLEtBQUEsRUFBTyxTQUFBO2VBQ0wsUUFBQSxDQUFTLElBQVQsRUFBZSxFQUFmO01BREssQ0FmUDtNQWlCQSxVQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUssQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQTtZQUNILEtBQUMsQ0FBQSxJQUFELEdBQVE7bUJBQ1IsS0FBQyxDQUFBLFlBQUQsQ0FBYyxLQUFkO1VBRkc7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUw7T0FsQkY7S0FERjtFQURJOztrQ0F3Qk4sSUFBQSxHQUFNLFNBQUMsUUFBRCxFQUFXLFFBQVg7QUFDSixRQUFBO0lBQUEsZUFBQSxHQUFrQixDQUFPLFFBQVEsQ0FBQyxlQUFoQixHQUFxQyxJQUFyQyxHQUErQztJQUNqRSxRQUFBLGlEQUFnQyxDQUFFLFlBQXZCLElBQTZCLFFBQVEsQ0FBQztJQUNqRCxXQUFBLEdBQWM7SUFDZCxJQUFtQyxRQUFuQztNQUFBLFdBQVcsQ0FBQyxRQUFaLEdBQXVCLFNBQXZCOztJQUNBLElBQTBDLElBQUMsQ0FBQSxTQUFTLENBQUMsTUFBckQ7TUFBQSxXQUFXLENBQUMsTUFBWixHQUFxQixJQUFDLENBQUEsU0FBUyxDQUFDLE9BQWhDOztJQUNBLElBQUcsQ0FBSSxRQUFQO01BQ0UsaURBQTZFLENBQUUsYUFBL0U7UUFBQSxXQUFXLENBQUMsVUFBWixnREFBOEMsQ0FBRSxjQUFoRDs7TUFDQSxpREFBeUUsQ0FBRSxjQUEzRTtRQUFBLFdBQVcsQ0FBQyxLQUFaLGdEQUF5QyxDQUFFLGVBQTNDO09BRkY7O1dBR0EsQ0FBQyxDQUFDLElBQUYsQ0FDRTtNQUFBLEdBQUEsRUFBSyxJQUFDLENBQUEsV0FBVyxDQUFDLFlBQWIsQ0FBQSxDQUFMO01BQ0EsUUFBQSxFQUFVLE1BRFY7TUFFQSxJQUFBLEVBQU0sV0FGTjtNQUdBLE9BQUEsRUFBUyxJQUhUO01BSUEsU0FBQSxFQUNFO1FBQUMsaUJBQUEsZUFBRDtPQUxGO01BTUEsT0FBQSxFQUFTLFNBQUMsSUFBRDtBQUNQLFlBQUE7UUFBQSxPQUFBLEdBQVUsbUJBQW1CLENBQUMsMkJBQXBCLENBQWdELElBQWhEO1FBT1YsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsUUFBUSxDQUFDLElBQVQsSUFBaUIsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUF2QyxJQUNBLElBQUksQ0FBQyxPQURMLElBQ2dCLElBQUksQ0FBQyxJQURyQix5Q0FDeUMsQ0FBRSxjQUQzRDtRQUVBLElBQUcsUUFBUSxDQUFDLElBQVo7VUFDRSxPQUFPLENBQUMsV0FBUixDQUFvQjtZQUFBLE9BQUEsRUFBUyxRQUFRLENBQUMsUUFBbEI7V0FBcEIsRUFERjs7ZUFHQSxRQUFBLENBQVMsSUFBVCxFQUFlLE9BQWY7TUFiTyxDQU5UO01Bb0JBLFVBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSyxDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFBO1lBQ0gsS0FBQyxDQUFBLElBQUQsR0FBUTttQkFDUixRQUFBLENBQVMsRUFBQSxDQUFHLDBCQUFILEVBQStCO2NBQUMsUUFBQSxFQUFVLFFBQVEsQ0FBQyxJQUFULElBQWlCLFVBQTVCO2FBQS9CLENBQVQsRUFBa0YsR0FBbEY7VUFGRztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBTDtPQXJCRjtNQXlCQSxLQUFBLEVBQU8sU0FBQyxLQUFEO0FBQ0wsWUFBQTtRQUFBLElBQVUsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsR0FBMUI7QUFBQSxpQkFBQTs7UUFDQSxPQUFBLEdBQWEsUUFBUSxDQUFDLGVBQVosR0FDUixFQUFBLENBQUcsaUNBQUgsQ0FEUSxHQUdSLEVBQUEsQ0FBRywwQkFBSCxFQUErQjtVQUFDLFFBQUEsRUFBVSxRQUFRLENBQUMsSUFBVCxrREFBc0MsQ0FBRSxZQUF4QyxJQUE4QyxVQUF6RDtTQUEvQjtlQUNGLFFBQUEsQ0FBUyxPQUFUO01BTkssQ0F6QlA7S0FERjtFQVRJOztrQ0EyQ04sSUFBQSxHQUFNLFNBQUMsWUFBRCxFQUFlLFFBQWYsRUFBeUIsUUFBekI7QUFDSixRQUFBO0lBQUEsT0FBQSxHQUFVLFlBQVksQ0FBQyxVQUFiLENBQUE7SUFHVixZQUFBLEdBQWUsSUFBQyxDQUFBLFlBQVksQ0FBQyxXQUFkLENBQTBCLE9BQTFCLEVBQW1DLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBVCxJQUFtQixRQUFRLENBQUMsWUFBL0Q7SUFFZixJQUFHLFlBQVksQ0FBQyxXQUFiLElBQTZCLENBQUksWUFBWSxDQUFDLFVBQWpEO01BRUUsUUFBQSxDQUFTLElBQVQ7QUFDQSxhQUhGOztJQUtBLE1BQUEsR0FBUztJQUNULElBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUF6QjtNQUFpQyxNQUFNLENBQUMsUUFBUCxHQUFrQixRQUFRLENBQUMsWUFBWSxDQUFDLEdBQXpFOztJQUVBLElBQUcsQ0FBSSxZQUFZLENBQUMsV0FBakIsSUFBaUMsUUFBUSxDQUFDLFFBQTdDO01BQ0UsTUFBTSxDQUFDLFVBQVAsR0FBb0IsUUFBUSxDQUFDLFNBRC9COztJQVVBLElBQUcsSUFBQyxDQUFBLFNBQVMsQ0FBQyxNQUFkO01BQ0UsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxPQUQ3Qjs7SUFHQSxNQUFBLEdBQVM7SUFDVCxHQUFBLEdBQVMsWUFBWSxDQUFDLFdBQWhCLEdBQ08sSUFBQyxDQUFBLFdBQVcsQ0FBQyxhQUFiLENBQTJCLE1BQTNCLENBRFAsR0FFTyxJQUFDLENBQUEsV0FBVyxDQUFDLFlBQWIsQ0FBMEIsTUFBMUI7SUFFYixPQUFBLEdBQ0U7TUFBQSxTQUFBLEVBQVcsTUFBWDtNQUNBLFFBQUEsRUFBVSx1QkFEVjtNQUVBLFdBQUEsRUFBYSxZQUFZLENBQUMsV0FGMUI7TUFHQSxNQUFBLEVBQVEsTUFIUjtNQUlBLEdBQUEsRUFBSyxHQUpMO01BS0EsTUFBQSxFQUFRLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUxSO01BTUEsT0FBQSxFQUFTLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBekIsQ0FBZ0MsQ0FBaEMsRUFBbUMsR0FBbkMsQ0FOVDs7SUFPRixJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxNQUFaLEVBQW9CLE9BQXBCO1dBRUEsQ0FBQyxDQUFDLElBQUYsQ0FDRTtNQUFBLFFBQUEsRUFBVSxNQUFWO01BQ0EsSUFBQSxFQUFNLE1BRE47TUFFQSxHQUFBLEVBQUssR0FGTDtNQUdBLElBQUEsRUFBTSxJQUFJLENBQUMsT0FBTCxDQUFhLFlBQVksQ0FBQyxXQUExQixDQUhOO01BSUEsV0FBQSxFQUFhLFlBQVksQ0FBQyxRQUoxQjtNQUtBLFdBQUEsRUFBYSxLQUxiO01BTUEsVUFBQSxFQUFZLFNBQUMsR0FBRDtlQUNWLEdBQUcsQ0FBQyxnQkFBSixDQUFxQixrQkFBckIsRUFBeUMsU0FBekM7TUFEVSxDQU5aO01BUUEsT0FBQSxFQUFTLElBUlQ7TUFTQSxTQUFBLEVBQ0U7UUFBQSxlQUFBLEVBQWlCLElBQWpCO09BVkY7TUFXQSxPQUFBLEVBQVMsU0FBQyxJQUFEO1FBQ1AsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQStCLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBWixHQUF1QixDQUFDLENBQUMsU0FBRixDQUFZLE9BQVosQ0FBdkIsR0FBaUQsSUFBN0U7UUFDQSxJQUFHLElBQUksQ0FBQyxFQUFSO1VBQWdCLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBdEIsR0FBMkIsSUFBSSxDQUFDLEdBQWhEOztlQUVBLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZjtNQUpPLENBWFQ7TUFnQkEsVUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7WUFDSCxLQUFDLENBQUEsSUFBRCxHQUFRO21CQUNSLFFBQUEsQ0FBUyxFQUFBLENBQUcsMEJBQUgsRUFBK0I7Y0FBQyxRQUFBLEVBQVUsUUFBUSxDQUFDLElBQXBCO2FBQS9CLENBQVQsRUFBb0UsR0FBcEU7VUFGRztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBTDtPQWpCRjtNQW9CQSxLQUFBLEVBQU8sU0FBQyxLQUFEO0FBQ0wsWUFBQTtBQUFBO1VBQ0UsSUFBVSxLQUFLLENBQUMsTUFBTixLQUFnQixHQUExQjtBQUFBLG1CQUFBOztVQUNBLFlBQUEsR0FBZSxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUssQ0FBQyxZQUFqQjtVQUNmLElBQUcsWUFBWSxDQUFDLE9BQWIsS0FBd0IsaUJBQTNCO21CQUNFLFFBQUEsQ0FBUyxFQUFBLENBQUcsZ0NBQUgsRUFBcUM7Y0FBQyxRQUFBLEVBQVUsUUFBUSxDQUFDLElBQXBCO2FBQXJDLENBQVQsRUFERjtXQUFBLE1BQUE7bUJBR0UsUUFBQSxDQUFTLEVBQUEsQ0FBRyxtQ0FBSCxFQUF3QztjQUFDLFFBQUEsRUFBVSxRQUFRLENBQUMsSUFBcEI7Y0FBMEIsT0FBQSxFQUFTLFlBQVksQ0FBQyxPQUFoRDthQUF4QyxDQUFULEVBSEY7V0FIRjtTQUFBLGFBQUE7aUJBUUUsUUFBQSxDQUFTLEVBQUEsQ0FBRyxzQkFBSCxFQUEyQjtZQUFDLFFBQUEsRUFBVSxRQUFRLENBQUMsSUFBcEI7V0FBM0IsQ0FBVCxFQVJGOztNQURLLENBcEJQO0tBREY7RUExQ0k7O2tDQTBFTixNQUFBLEdBQVEsU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNOLENBQUMsQ0FBQyxJQUFGLENBQ0U7TUFBQSxHQUFBLEVBQUssSUFBQyxDQUFBLFdBQVcsQ0FBQyxjQUFiLENBQUEsQ0FBTDtNQUNBLElBQUEsRUFDRTtRQUFBLFVBQUEsRUFBWSxRQUFRLENBQUMsUUFBckI7T0FGRjtNQUdBLE9BQUEsRUFBUyxJQUhUO01BSUEsU0FBQSxFQUNFO1FBQUEsZUFBQSxFQUFpQixJQUFqQjtPQUxGO01BTUEsT0FBQSxFQUFTLFNBQUMsSUFBRDtlQUNQLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZjtNQURPLENBTlQ7TUFRQSxVQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUssQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQTtZQUNILEtBQUMsQ0FBQSxJQUFELEdBQVE7bUJBQ1IsUUFBQSxDQUFTLEVBQUEsQ0FBRyw0QkFBSCxFQUFpQztjQUFDLFFBQUEsRUFBVSxRQUFRLENBQUMsSUFBcEI7YUFBakMsQ0FBVCxFQUFzRSxHQUF0RTtVQUZHO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFMO09BVEY7TUFZQSxLQUFBLEVBQU8sU0FBQyxLQUFEO1FBQ0wsSUFBVSxLQUFLLENBQUMsTUFBTixLQUFnQixHQUExQjtBQUFBLGlCQUFBOztlQUNBLFFBQUEsQ0FBUyxFQUFBLENBQUcsd0JBQUgsRUFBNkI7VUFBQyxRQUFBLEVBQVUsUUFBUSxDQUFDLElBQXBCO1NBQTdCLENBQVQ7TUFGSyxDQVpQO0tBREY7RUFETTs7a0NBa0JSLE1BQUEsR0FBUSxTQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLFFBQXBCO1dBQ04sQ0FBQyxDQUFDLElBQUYsQ0FDRTtNQUFBLEdBQUEsRUFBSyxJQUFDLENBQUEsV0FBVyxDQUFDLGNBQWIsQ0FBQSxDQUFMO01BQ0EsSUFBQSxFQUNFO1FBQUEsUUFBQSxFQUFVLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBaEM7UUFDQSxhQUFBLEVBQWUsYUFBYSxDQUFDLGFBQWQsQ0FBNEIsT0FBNUIsQ0FEZjtPQUZGO01BSUEsT0FBQSxFQUFTLElBSlQ7TUFLQSxTQUFBLEVBQ0U7UUFBQSxlQUFBLEVBQWlCLElBQWpCO09BTkY7TUFPQSxPQUFBLEVBQVMsU0FBQyxJQUFEO1FBQ1AsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsT0FBaEI7ZUFDQSxRQUFBLENBQVMsSUFBVCxFQUFlLFFBQWY7TUFGTyxDQVBUO01BVUEsVUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7WUFDSCxLQUFDLENBQUEsSUFBRCxHQUFRO21CQUNSLFFBQUEsQ0FBUyxFQUFBLENBQUcsNEJBQUgsRUFBaUM7Y0FBQyxRQUFBLEVBQVUsUUFBUSxDQUFDLElBQXBCO2FBQWpDLENBQVQsRUFBc0UsR0FBdEU7VUFGRztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBTDtPQVhGO01BY0EsS0FBQSxFQUFPLFNBQUMsS0FBRDtRQUNMLElBQVUsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsR0FBMUI7QUFBQSxpQkFBQTs7ZUFDQSxRQUFBLENBQVMsRUFBQSxDQUFHLHdCQUFILEVBQTZCO1VBQUMsUUFBQSxFQUFVLFFBQVEsQ0FBQyxJQUFwQjtTQUE3QixDQUFUO01BRkssQ0FkUDtLQURGO0VBRE07O2tDQW9CUixZQUFBLEdBQWMsU0FBQTtXQUFHO0VBQUg7O2tDQUVkLFNBQUEsR0FBVyxTQUFDLGVBQUQsRUFBa0IsUUFBbEI7QUFDVCxRQUFBO0lBQUEsWUFBQSxHQUFrQixPQUFPLGVBQVAsS0FBMEIsUUFBN0IsR0FDUSxlQURSLEdBRVE7TUFBRSxFQUFBLEVBQUksZUFBTjs7SUFDdkIsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO01BQUEsSUFBQSxFQUFNLGFBQWEsQ0FBQyxJQUFwQjtNQUNBLFFBQUEsRUFBVSxJQURWO01BRUEsWUFBQSxFQUFjLFlBRmQ7S0FEUztXQUtYLElBQUMsQ0FBQSxJQUFELENBQU0sUUFBTixFQUFnQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsR0FBRCxFQUFNLE9BQU47UUFDZCxLQUFDLENBQUEsTUFBTSxDQUFDLGlCQUFSLENBQTBCLEtBQUMsQ0FBQSxvQkFBM0I7ZUFDQSxRQUFBLENBQVMsR0FBVCxFQUFjLE9BQWQsRUFBdUIsUUFBdkI7TUFGYztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEI7RUFUUzs7a0NBYVgsa0JBQUEsR0FBb0IsU0FBQyxRQUFEO1dBQ2xCLFFBQVEsQ0FBQyxZQUFZLENBQUM7RUFESjs7a0NBR3BCLFVBQUEsR0FBWSxTQUFDLE9BQUQsRUFBVSxRQUFWO0FBQ1YsUUFBQTtJQUFBLGdCQUFBLEdBQW1CLElBQUMsQ0FBQSxPQUFPLENBQUMsZ0JBQVQsSUFBNkI7SUFDaEQsUUFBQSxHQUFXLENBQUMsQ0FBQyxhQUFBLENBQWMsZ0JBQWQsQ0FBRixJQUFxQyxDQUFDLENBQUMsWUFBQSxDQUFhLE1BQWI7SUFDbEQsSUFBVSxDQUFJLGdCQUFKLElBQXdCLFFBQWxDO0FBQUEsYUFBQTs7V0FDQSxJQUFDLENBQUEsTUFBTSxDQUFDLGFBQVIsQ0FBc0I7TUFDcEIsS0FBQSxFQUFPLEVBQUEsQ0FBRywrQ0FBSCxDQURhO01BRXBCLE9BQUEsRUFBUyxJQUFDLENBQUEsa0JBQUQsQ0FBQSxDQUZXO01BR3BCLFFBQUEsRUFBVSxFQUFBLENBQUcsbURBQUgsQ0FIVTtNQUlwQixPQUFBLEVBQVMsRUFBQSxDQUFHLGdEQUFILENBSlc7TUFLcEIsWUFBQSxFQUFjLGdCQUFBLElBQW9CLENBTGQ7TUFNcEIsUUFBQSxFQUFVLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtVQUNSLEtBQUMsQ0FBQSxrQkFBRCxHQUFzQjtpQkFDdEIsS0FBQyxDQUFBLE1BQU0sQ0FBQyxnQkFBUixDQUFBO1FBRlE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBTlU7TUFTcEIsY0FBQSxFQUFnQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7VUFDZCxJQUFHLGdCQUFBLEdBQW1CLENBQXRCO21CQUNFLEtBQUMsQ0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFuQixHQUFzQyxLQUR4Qzs7UUFEYztNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FUSTtLQUF0QjtFQUpVOzs7O0dBclhzQjs7QUF1WXBDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCOzs7O0FDL2FqQixJQUFBOztBQUFBLGFBQUEsR0FBZ0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUNqRCxnQkFBQSxHQUFtQixPQUFBLENBQVEsc0JBQVI7O0FBQ25CLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFRRDtFQUVTLG9DQUFDLE1BQUQsRUFBVSxRQUFWO0lBQUMsSUFBQyxDQUFBLFNBQUQ7SUFBUyxJQUFDLENBQUEsV0FBRDtJQUNyQixJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxRQUFRLENBQUM7RUFEZDs7dUNBR2IsaUJBQUEsR0FBbUIsU0FBQyxFQUFELEVBQUssUUFBTDtBQUNqQixRQUFBO0lBQUEsY0FBQSxHQUFpQixJQUFJLGFBQUosQ0FDZjtNQUFBLGVBQUEsRUFBaUIsRUFBakI7TUFDQSxJQUFBLEVBQU0sYUFBYSxDQUFDLElBRHBCO01BRUEsWUFBQSxFQUFjLEtBRmQ7S0FEZTtXQUlqQixJQUFDLENBQUEsUUFBUSxDQUFDLElBQVYsQ0FBZSxjQUFmLEVBQStCLFNBQUMsR0FBRCxFQUFNLE9BQU47YUFDN0IsUUFBQSxDQUFTLEdBQVQsRUFBYyxPQUFkLEVBQXVCLGNBQXZCO0lBRDZCLENBQS9CO0VBTGlCOzt1Q0FRbkIsa0JBQUEsR0FBb0IsU0FBQyxNQUFEO1dBQ2xCO01BQUUsWUFBQSxFQUFpQixNQUFILEdBQWUsQ0FBZixHQUFzQixDQUF0Qzs7RUFEa0I7O3VDQUdwQixLQUFBLEdBQU8sU0FBQyxNQUFELEVBQVMsYUFBVCxFQUF3QixhQUF4QixFQUF1QyxRQUF2QyxFQUFpRCxRQUFqRDtBQUdMLFFBQUE7SUFBQSxVQUFBLEdBQWEsYUFBYSxDQUFDLEdBQWQsQ0FBa0Isa0JBQWxCO0lBSWIsVUFBQSxHQUFhLGFBQWEsQ0FBQyxHQUFkLENBQWtCLFlBQWxCO0lBQ2IsTUFBQSxHQUFTLGFBQWEsQ0FBQyxHQUFkLENBQWtCLGNBQWxCO0lBRVQsU0FBQSx5QkFBWSxVQUFVLENBQUUsbUJBQVosSUFBeUI7SUFFckMsTUFBQSxHQUFTO01BQUMsTUFBQSxFQUFRLE1BQVQ7O0lBQ1QsSUFBRyxTQUFIO01BQ0UsTUFBTSxDQUFDLFNBQVAsR0FBbUIsTUFBQSxHQUFTLFVBRDlCOztJQUtBLElBQUcsVUFBQSxJQUFlLFNBQWxCO01BQ0UsTUFBZ0IsSUFBQyxDQUFBLFdBQVcsQ0FBQyxjQUFiLENBQTRCLFVBQTVCLEVBQXdDLE1BQXhDLENBQWhCLEVBQUMsbUJBQUQsRUFBUzthQUNULENBQUMsQ0FBQyxJQUFGLENBQ0U7UUFBQSxRQUFBLEVBQVUsTUFBVjtRQUNBLElBQUEsRUFBTSxNQUROO1FBRUEsR0FBQSxFQUFLLEdBRkw7UUFHQSxXQUFBLEVBQWEsa0JBSGI7UUFJQSxJQUFBLEVBQU0sSUFBSSxDQUFDLE9BQUwsQ0FBYSxhQUFhLENBQUMsZ0JBQWQsQ0FBQSxDQUFiLENBSk47UUFLQSxXQUFBLEVBQWEsS0FMYjtRQU1BLFVBQUEsRUFBWSxTQUFDLEdBQUQ7aUJBQ1YsR0FBRyxDQUFDLGdCQUFKLENBQXFCLGtCQUFyQixFQUF5QyxTQUF6QztRQURVLENBTlo7UUFRQSxPQUFBLEVBQVMsSUFSVDtRQVNBLFNBQUEsRUFDRTtVQUFBLGVBQUEsRUFBaUIsSUFBakI7U0FWRjtRQVdBLE9BQUEsRUFBUyxTQUFDLElBQUQ7VUFFUCxJQUFHLE1BQUEsSUFBZSxvQkFBbEI7WUFDRSxhQUFhLENBQUMsV0FBZCxDQUNFO2NBQUEsVUFBQSxFQUFZO2dCQUFFLFNBQUEsRUFBVyxNQUFiO2VBQVo7YUFERixFQURGOztpQkFHQSxRQUFBLENBQVMsSUFBVCxFQUFlLElBQUksQ0FBQyxFQUFwQjtRQUxPLENBWFQ7UUFpQkEsS0FBQSxFQUFPLFNBQUMsS0FBRDtBQUNMLGNBQUE7VUFBQSxPQUFBLHVCQUFVLFFBQVEsQ0FBRSxrQkFBVixJQUFzQjtpQkFDaEMsUUFBQSxDQUFTLDJCQUFBLEdBQTRCLE9BQTVCLEdBQW9DLEdBQTdDO1FBRkssQ0FqQlA7T0FERixFQUZGO0tBQUEsTUEwQkssSUFBRyxNQUFIO01BQ0gsTUFBTSxDQUFDLE1BQVAsR0FBZ0I7TUFDaEIsT0FBZ0IsSUFBQyxDQUFBLFdBQVcsQ0FBQyxnQkFBYixDQUE4QixNQUE5QixDQUFoQixFQUFDLG9CQUFELEVBQVM7YUFDVCxDQUFDLENBQUMsSUFBRixDQUNFO1FBQUEsUUFBQSxFQUFVLE1BQVY7UUFDQSxJQUFBLEVBQU0sTUFETjtRQUVBLEdBQUEsRUFBSyxHQUZMO1FBR0EsV0FBQSxFQUFhLGtCQUhiO1FBSUEsSUFBQSxFQUFNLElBQUksQ0FBQyxPQUFMLENBQWEsYUFBYSxDQUFDLGdCQUFkLENBQUEsQ0FBYixDQUpOO1FBS0EsV0FBQSxFQUFhLEtBTGI7UUFNQSxVQUFBLEVBQVksU0FBQyxHQUFEO2lCQUNWLEdBQUcsQ0FBQyxnQkFBSixDQUFxQixrQkFBckIsRUFBeUMsU0FBekM7UUFEVSxDQU5aO1FBUUEsT0FBQSxFQUFTLElBUlQ7UUFTQSxTQUFBLEVBQ0U7VUFBQSxlQUFBLEVBQWlCLElBQWpCO1NBVkY7UUFXQSxPQUFBLEVBQVMsU0FBQyxJQUFEO1VBRVAsYUFBYSxDQUFDLFdBQWQsQ0FDRTtZQUFBLGdCQUFBLEVBQWtCLElBQUksQ0FBQyxFQUF2QjtZQUNBLFVBQUEsRUFBWTtjQUFFLFFBQUEsRUFBVSxJQUFJLENBQUMsYUFBakI7Y0FBZ0MsU0FBQSxFQUFXLElBQUksQ0FBQyxrQkFBaEQ7YUFEWjtXQURGO2lCQUdBLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBSSxDQUFDLEVBQXBCO1FBTE8sQ0FYVDtRQWlCQSxLQUFBLEVBQU8sU0FBQyxLQUFEO0FBQ0wsY0FBQTtVQUFBLE9BQUEsdUJBQVUsUUFBUSxDQUFFLGtCQUFWLElBQXNCO2lCQUNoQyxRQUFBLENBQVMsbUJBQUEsR0FBb0IsT0FBcEIsR0FBNEIsR0FBckM7UUFGSyxDQWpCUDtPQURGLEVBSEc7S0FBQSxNQUFBO2FBeUJILFFBQUEsQ0FBUyxxQkFBQSxHQUFzQixPQUF0QixHQUE4QixHQUF2QyxFQXpCRzs7RUE1Q0E7Ozs7OztBQXVFVCxNQUFNLENBQUMsT0FBUCxHQUFpQjs7OztBQzVGakIsSUFBQTs7QUFBQSxrQkFBQSxHQUFxQjs7QUFFZjtFQUVTLDBCQUFDLFdBQUQ7SUFDWCxJQUFDLENBQUEsV0FBRCxHQUFlLFdBQUEsSUFBZTtJQUU5QixJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxXQUFXLENBQUMsT0FBYixDQUFxQixNQUFyQixFQUE2QixFQUE3QjtFQUhKOzs2QkFLYixTQUFBLEdBQVcsU0FBQyxHQUFELEVBQU0sTUFBTjtBQUNULFFBQUE7SUFBQSxJQUFBLENBQWtCLE1BQWxCO0FBQUEsYUFBTyxJQUFQOztJQUNBLEdBQUEsR0FBTTtBQUNOLFNBQUEsYUFBQTs7TUFDRSxHQUFHLENBQUMsSUFBSixDQUFTLENBQUMsR0FBRCxFQUFNLEtBQU4sQ0FBWSxDQUFDLEdBQWIsQ0FBaUIsU0FBakIsQ0FBMkIsQ0FBQyxJQUE1QixDQUFpQyxHQUFqQyxDQUFUO0FBREY7QUFFQSxXQUFPLEdBQUEsR0FBTSxHQUFOLEdBQVksR0FBRyxDQUFDLElBQUosQ0FBUyxHQUFUO0VBTFY7OzZCQVVYLFNBQUEsR0FBVyxTQUFDLE1BQUQ7V0FDVCxJQUFDLENBQUEsU0FBRCxDQUFjLElBQUMsQ0FBQSxXQUFGLEdBQWMsb0JBQTNCLEVBQWdELE1BQWhEO0VBRFM7OzZCQUdYLFVBQUEsR0FBWSxTQUFDLE1BQUQ7V0FDVixJQUFDLENBQUEsU0FBRCxDQUFjLElBQUMsQ0FBQSxXQUFGLEdBQWMsWUFBM0IsRUFBd0MsTUFBeEM7RUFEVTs7NkJBR1osYUFBQSxHQUFlLFNBQUMsTUFBRDtXQUNiLElBQUMsQ0FBQSxTQUFELENBQWMsSUFBQyxDQUFBLFdBQUYsR0FBYyxlQUEzQixFQUEyQyxNQUEzQztFQURhOzs2QkFHZixZQUFBLEdBQWMsU0FBQyxNQUFEO1dBQ1osSUFBQyxDQUFBLFNBQUQsQ0FBYyxJQUFDLENBQUEsV0FBRixHQUFjLGdCQUEzQixFQUE0QyxNQUE1QztFQURZOzs2QkFHZCxZQUFBLEdBQWMsU0FBQyxNQUFEO1dBQ1osSUFBQyxDQUFBLFNBQUQsQ0FBYyxJQUFDLENBQUEsV0FBRixHQUFjLGdCQUEzQixFQUE0QyxNQUE1QztFQURZOzs2QkFHZCxhQUFBLEdBQWUsU0FBQyxNQUFEO1dBQ2IsSUFBQyxDQUFBLFNBQUQsQ0FBYyxJQUFDLENBQUEsV0FBRixHQUFjLGlCQUEzQixFQUE2QyxNQUE3QztFQURhOzs2QkFHZixjQUFBLEdBQWdCLFNBQUMsTUFBRDtXQUNkLElBQUMsQ0FBQSxTQUFELENBQWMsSUFBQyxDQUFBLFdBQUYsR0FBYyxrQkFBM0IsRUFBOEMsTUFBOUM7RUFEYzs7NkJBR2hCLGNBQUEsR0FBZ0IsU0FBQyxNQUFEO1dBQ2QsSUFBQyxDQUFBLFNBQUQsQ0FBYyxJQUFDLENBQUEsV0FBRixHQUFjLGtCQUEzQixFQUE4QyxNQUE5QztFQURjOzs2QkFNaEIsVUFBQSxHQUFZLFNBQUMsRUFBRCxFQUFLLE1BQUw7V0FDVixJQUFDLENBQUEsU0FBRCxDQUFjLElBQUMsQ0FBQSxXQUFGLEdBQWMsZ0JBQWQsR0FBOEIsRUFBM0MsRUFBaUQsTUFBakQ7RUFEVTs7NkJBR1osZ0JBQUEsR0FBa0IsU0FBQyxNQUFEO1dBQ2hCO01BQUUsTUFBQSxFQUFRLE1BQVY7TUFBa0IsR0FBQSxFQUFLLElBQUMsQ0FBQSxVQUFELENBQVksRUFBWixFQUFnQixNQUFoQixDQUF2Qjs7RUFEZ0I7OzZCQUdsQixjQUFBLEdBQWdCLFNBQUMsRUFBRCxFQUFLLE1BQUw7V0FDZDtNQUFFLE1BQUEsRUFBUSxLQUFWO01BQWlCLEdBQUEsRUFBSyxJQUFDLENBQUEsVUFBRCxDQUFZLEVBQVosRUFBZ0IsTUFBaEIsQ0FBdEI7O0VBRGM7OzZCQUdoQixjQUFBLEdBQWdCLFNBQUMsRUFBRCxFQUFLLE1BQUw7V0FDZDtNQUFFLE1BQUEsRUFBUSxLQUFWO01BQWlCLEdBQUEsRUFBSyxJQUFDLENBQUEsVUFBRCxDQUFZLEVBQVosRUFBZ0IsTUFBaEIsQ0FBdEI7O0VBRGM7OzZCQUdoQixlQUFBLEdBQWlCLFNBQUMsRUFBRCxFQUFLLE1BQUw7V0FDZjtNQUFFLE1BQUEsRUFBUSxPQUFWO01BQW1CLEdBQUEsRUFBSyxJQUFDLENBQUEsVUFBRCxDQUFZLEVBQVosRUFBZ0IsTUFBaEIsQ0FBeEI7O0VBRGU7Ozs7OztBQU9uQixNQUFNLENBQUMsT0FBUCxHQUFpQjs7OztBQ3RFakIsSUFBQSx3SkFBQTtFQUFBOzs7QUFBQSxNQUFzQixLQUFLLENBQUMsR0FBNUIsRUFBQyxhQUFELEVBQU0sbUJBQU4sRUFBYzs7QUFFZCxFQUFBLEdBQUssT0FBQSxDQUFRLG9CQUFSOztBQUNMLFFBQUEsR0FBVyxPQUFBLENBQVEsb0JBQVI7O0FBQ1gsTUFBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSOztBQUVULGlCQUFBLEdBQW9CLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFDckQsbUJBQUEsR0FBc0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUN2RCxhQUFBLEdBQWdCLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFFakQsOEJBQUEsR0FBaUMsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsS0FBSyxDQUFDLFdBQU4sQ0FDbkQ7RUFBQSxXQUFBLEVBQWEsZ0NBQWI7RUFFQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLFVBQUEsRUFBWSxNQUFNLENBQUMsa0JBQW5COztFQURlLENBRmpCO0VBVUEsa0JBQUEsRUFBb0IsU0FBQTtXQUNsQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFoQixDQUE0QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDMUIsSUFBRyxLQUFDLENBQUEsVUFBSjtpQkFDRSxLQUFDLENBQUEsUUFBRCxDQUFVO1lBQUEsVUFBQSxFQUFZLElBQVo7V0FBVixFQURGOztNQUQwQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7RUFEa0IsQ0FWcEI7RUFlQSxpQkFBQSxFQUFtQixTQUFBO0lBQ2pCLElBQUMsQ0FBQSxVQUFELEdBQWM7SUFDZCxJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxLQUF1QixNQUFNLENBQUMsa0JBQWpDO2FBQ0UsSUFBQyxDQUFBLFFBQUQsQ0FBVTtRQUFBLFVBQUEsRUFBWSxNQUFNLENBQUMsa0JBQW5CO09BQVYsRUFERjs7RUFGaUIsQ0FmbkI7RUFvQkEsb0JBQUEsRUFBc0IsU0FBQTtXQUNwQixJQUFDLENBQUEsVUFBRCxHQUFjO0VBRE0sQ0FwQnRCO0VBdUJBLFlBQUEsRUFBYyxTQUFBO1dBQ1osSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBaEIsQ0FBMEIsbUJBQW1CLENBQUMsVUFBOUM7RUFEWSxDQXZCZDtFQTBCQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxtQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLDJCQUFaO0tBQUosRUFBOEMsRUFBOUMsQ0FERixFQUVFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxxQkFBWjtLQUFKLEVBQ0ksTUFBTSxDQUFDLGtCQUFQLElBQTZCLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBdkMsR0FDRyxNQUFBLENBQU87TUFBQyxPQUFBLEVBQVMsSUFBQyxDQUFBLFlBQVg7S0FBUCxFQUFrQyxFQUFBLENBQUcsa0NBQUgsQ0FBbEMsQ0FESCxHQUdHLEVBQUEsQ0FBRyxrQ0FBSCxDQUpKLENBRkY7RUFESyxDQTFCUjtDQURtRCxDQUFwQjs7QUFzQzNCOzs7RUFFUyw2QkFBQyxPQUFELEVBQWdCLE1BQWhCO0lBQUMsSUFBQyxDQUFBLDRCQUFELFVBQVc7SUFBSSxJQUFDLENBQUEsU0FBRDtJQUMzQixxREFDRTtNQUFBLElBQUEsRUFBTSxtQkFBbUIsQ0FBQyxJQUExQjtNQUNBLFdBQUEsRUFBYSxJQUFDLENBQUEsT0FBTyxDQUFDLFdBQVQsSUFBd0IsQ0FBQyxFQUFBLENBQUcsd0JBQUgsQ0FBRCxDQURyQztNQUVBLGNBQUEsRUFBZ0IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxjQUZ6QjtNQUdBLFlBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxJQUFOO1FBQ0EsTUFBQSxFQUFRLElBRFI7UUFFQSxDQUFBLE1BQUEsQ0FBQSxFQUFRLElBRlI7UUFHQSxJQUFBLEVBQU0sSUFITjtRQUlBLElBQUEsRUFBTSxJQUpOO1FBS0EsTUFBQSxFQUFRLEtBTFI7UUFNQSxNQUFBLEVBQVEsSUFOUjtRQU9BLEtBQUEsRUFBTyxJQVBQO1FBUUEsU0FBQSxFQUFXLElBUlg7T0FKRjtLQURGO0lBZUEsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUNiLElBQUMsQ0FBQSxJQUFELEdBQVE7SUFDUixJQUFDLENBQUEsUUFBRCxHQUFZLElBQUMsQ0FBQSxPQUFPLENBQUM7SUFDckIsSUFBRyxDQUFJLElBQUMsQ0FBQSxRQUFSO0FBQ0UsWUFBTSxJQUFJLEtBQUosQ0FBVyxFQUFBLENBQUcsc0NBQUgsQ0FBWCxFQURSOztJQUVBLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBQyxDQUFBLE9BQU8sQ0FBQyxRQUFULElBQXFCO0lBQ2pDLElBQUMsQ0FBQSxpQkFBRCxHQUFxQixJQUFDLENBQUEsT0FBTyxDQUFDO0lBQzlCLElBQUMsQ0FBQSxjQUFELEdBQWtCLElBQUMsQ0FBQSxPQUFPLENBQUMsY0FBVCxJQUEyQjtJQUM3QyxJQUFHLElBQUMsQ0FBQSxjQUFKO01BQ0UsSUFBQyxDQUFBLFFBQUQsSUFBYSxnQkFEZjs7SUFFQSxJQUFDLENBQUEsU0FBRCxDQUFBO0VBMUJXOztFQTRCYixtQkFBQyxDQUFBLElBQUQsR0FBTzs7RUFHUCxtQkFBQyxDQUFBLFNBQUQsR0FBYTs7RUFDYixtQkFBQyxDQUFBLFVBQUQsR0FBYzs7Z0NBRWQsVUFBQSxHQUFZLFNBQUMsWUFBRDtJQUNWLElBQUEsQ0FBd0Msc0JBQXhDO01BQUEsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsYUFBaEI7O0lBQ0EsSUFBRyxZQUFIO01BQ0UsSUFBRyxJQUFDLENBQUEsU0FBSjtlQUNFLFlBQUEsQ0FBYSxJQUFiLEVBREY7T0FBQSxNQUFBO2VBR0UsSUFBQyxDQUFBLFNBQUQsQ0FBVyxtQkFBbUIsQ0FBQyxTQUEvQixFQUhGO09BREY7S0FBQSxNQUFBO2FBTUUsSUFBQyxDQUFBLFNBQUQsS0FBZ0IsS0FObEI7O0VBRlU7O2dDQVVaLFNBQUEsR0FBVyxTQUFDLFNBQUQ7V0FDVCxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtBQUNYLFlBQUE7UUFBQSxJQUFBLEdBQ0U7VUFBQSxTQUFBLEVBQVcsS0FBQyxDQUFBLFFBQVo7VUFDQSxLQUFBLEVBQU8sQ0FDTCxnREFESyxFQUVMLCtDQUZLLEVBR0wsNENBSEssRUFJTCxrREFKSyxDQURQO1VBT0EsU0FBQSxFQUFXLFNBUFg7O2VBUUYsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFWLENBQW9CLElBQXBCLEVBQTBCLFNBQUMsU0FBRDtVQUN4QixLQUFDLENBQUEsU0FBRCxHQUFnQixTQUFBLElBQWMsQ0FBSSxTQUFTLENBQUMsS0FBL0IsR0FBMEMsU0FBMUMsR0FBeUQ7VUFDdEUsS0FBQyxDQUFBLElBQUQsR0FBUTtVQUNSLEtBQUMsQ0FBQSxjQUFELENBQWdCLEtBQUMsQ0FBQSxTQUFqQjtVQUNBLElBQUcsS0FBQyxDQUFBLFNBQUo7WUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBNUIsQ0FBQSxDQUFpQyxDQUFDLE9BQWxDLENBQTBDLFNBQUMsSUFBRDtxQkFDeEMsS0FBQyxDQUFBLElBQUQsR0FBUTtZQURnQyxDQUExQyxFQURGOzs0REFHQSxLQUFDLENBQUEsYUFBYyxLQUFDLENBQUEsU0FBRCxLQUFnQjtRQVBQLENBQTFCO01BVlc7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWI7RUFEUzs7Z0NBb0JYLGNBQUEsR0FBZ0IsU0FBQyxTQUFEO0lBQ2QsSUFBRyxJQUFDLENBQUEsaUJBQUo7TUFDRSxZQUFBLENBQWEsSUFBQyxDQUFBLGlCQUFkLEVBREY7O0lBRUEsSUFBRyxTQUFBLElBQWMsQ0FBSSxTQUFTLENBQUMsS0FBL0I7YUFDRSxJQUFDLENBQUEsaUJBQUQsR0FBcUIsVUFBQSxDQUFXLENBQUMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUFHLEtBQUMsQ0FBQSxTQUFELENBQVcsbUJBQW1CLENBQUMsU0FBL0I7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBRCxDQUFYLEVBQTBELENBQUMsUUFBQSxDQUFTLFNBQVMsQ0FBQyxVQUFuQixFQUErQixFQUEvQixDQUFBLEdBQXFDLElBQXRDLENBQUEsR0FBOEMsSUFBeEcsRUFEdkI7O0VBSGM7O2dDQU1oQix5QkFBQSxHQUEyQixTQUFBO1dBQ3hCLDhCQUFBLENBQStCO01BQUMsUUFBQSxFQUFVLElBQVg7S0FBL0I7RUFEd0I7O2dDQUczQixVQUFBLEdBQVksU0FBQTtJQUNWLElBQUcsSUFBQyxDQUFBLElBQUo7YUFDRyxJQUFBLENBQUssRUFBTCxFQUFVLElBQUEsQ0FBSztRQUFDLFNBQUEsRUFBVyxhQUFaO09BQUwsQ0FBVixFQUE0QyxJQUFDLENBQUEsSUFBSSxDQUFDLElBQWxELEVBREg7S0FBQSxNQUFBO2FBR0UsS0FIRjs7RUFEVTs7Z0NBTVosSUFBQSxHQUFPLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEI7V0FDTCxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtRQUNYLElBQUcsS0FBQyxDQUFBLGNBQUo7aUJBQ0UsS0FBQyxDQUFBLGlCQUFELENBQW1CLE9BQW5CLEVBQTRCLFFBQTVCLEVBQXNDLFFBQXRDLEVBREY7U0FBQSxNQUFBO2lCQUdFLEtBQUMsQ0FBQSxTQUFELENBQVcsT0FBWCxFQUFvQixRQUFwQixFQUE4QixRQUE5QixFQUhGOztNQURXO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFiO0VBREs7O2dDQU9QLElBQUEsR0FBTSxTQUFDLFFBQUQsRUFBVyxRQUFYO1dBQ0osSUFBQyxDQUFBLFdBQUQsQ0FBYSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDWCxJQUFHLEtBQUMsQ0FBQSxjQUFKO2lCQUNFLEtBQUMsQ0FBQSx5QkFBRCxDQUEyQixRQUEzQixFQUFxQyxRQUFyQyxFQURGO1NBQUEsTUFBQTtpQkFHRSxLQUFDLENBQUEsU0FBRCxDQUFXLFFBQVgsRUFBcUIsUUFBckIsRUFIRjs7TUFEVztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBYjtFQURJOztnQ0FPTixJQUFBLEdBQU0sU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNKLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO0FBQ1gsWUFBQTtRQUFBLGNBQUEsR0FBaUI7O0FBQUM7QUFBQTtlQUFBLHNDQUFBOzt5QkFBQSxjQUFBLEdBQWUsUUFBZixHQUF3QjtBQUF4Qjs7c0JBQUQsQ0FBK0QsQ0FBQyxJQUFoRSxDQUFxRSxNQUFyRTtRQUNqQixPQUFBLEdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQXhCLENBQ1I7VUFBQSxDQUFBLEVBQUcsS0FBQSxHQUFRLHVCQUFBLEdBQXdCLGNBQXhCLEdBQXVDLDREQUF2QyxHQUFrRyxDQUFJLFFBQUgsR0FBaUIsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUF2QyxHQUErQyxNQUFoRCxDQUFsRyxHQUF5SixjQUFwSztTQURRO2VBRVYsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsU0FBQyxNQUFEO0FBQ2QsY0FBQTtVQUFBLElBQStELENBQUksTUFBSixJQUFjLE1BQU0sQ0FBQyxLQUFwRjtBQUFBLG1CQUFPLFFBQUEsQ0FBUyxLQUFDLENBQUEsU0FBRCxDQUFXLE1BQVgsRUFBbUIsc0JBQW5CLENBQVQsRUFBUDs7VUFDQSxJQUFBLEdBQU87QUFDUDtBQUFBLGVBQUEsc0NBQUE7O1lBQ0UsSUFBQSxHQUFVLElBQUksQ0FBQyxRQUFMLEtBQWlCLG9DQUFwQixHQUE4RCxhQUFhLENBQUMsTUFBNUUsR0FBd0YsYUFBYSxDQUFDO1lBQzdHLElBQUcsSUFBQSxLQUFRLGFBQWEsQ0FBQyxNQUF0QixJQUFnQyxLQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBSSxDQUFDLEtBQXZCLENBQW5DO2NBQ0UsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFJLGFBQUosQ0FDUjtnQkFBQSxJQUFBLEVBQU0sSUFBSSxDQUFDLEtBQVg7Z0JBQ0EsSUFBQSxFQUFNLElBRE47Z0JBRUEsTUFBQSxFQUFRLFFBRlI7Z0JBR0EsWUFBQSxFQUFjLElBQUksQ0FBQyxRQUhuQjtnQkFJQSxRQUFBLEVBQVUsS0FKVjtnQkFLQSxZQUFBLEVBQ0U7a0JBQUEsRUFBQSxFQUFJLElBQUksQ0FBQyxFQUFUO2lCQU5GO2VBRFEsQ0FBVixFQURGOztBQUZGO1VBV0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFDLENBQUQsRUFBSSxDQUFKO0FBQ1IsZ0JBQUE7WUFBQSxNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFQLENBQUE7WUFDVCxNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFQLENBQUE7WUFDVCxJQUFhLE1BQUEsR0FBUyxNQUF0QjtBQUFBLHFCQUFPLENBQUMsRUFBUjs7WUFDQSxJQUFZLE1BQUEsR0FBUyxNQUFyQjtBQUFBLHFCQUFPLEVBQVA7O0FBQ0EsbUJBQU87VUFMQyxDQUFWO2lCQU1BLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZjtRQXBCYyxDQUFoQjtNQUpXO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFiO0VBREk7O2dDQTJCTixNQUFBLEdBQVEsU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNOLElBQUMsQ0FBQSxXQUFELENBQWEsU0FBQTtBQUNYLFVBQUE7TUFBQSxPQUFBLEdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLE1BQUQsRUFBdkIsQ0FDUjtRQUFBLE1BQUEsRUFBUSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQTlCO09BRFE7YUFFVixPQUFPLENBQUMsT0FBUixDQUFnQixTQUFDLE1BQUQ7Z0RBQ2QsMkJBQVUsTUFBTSxDQUFFLGVBQVIsSUFBaUI7TUFEYixDQUFoQjtJQUhXLENBQWI7RUFETTs7Z0NBT1IsTUFBQSxHQUFRLFNBQUMsUUFBRCxFQUFXLE9BQVgsRUFBb0IsUUFBcEI7V0FDTixJQUFDLENBQUEsV0FBRCxDQUFhLFNBQUE7QUFDWCxVQUFBO01BQUEsT0FBQSxHQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUF4QixDQUNSO1FBQUEsTUFBQSxFQUFRLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBOUI7UUFDQSxRQUFBLEVBQ0U7VUFBQSxLQUFBLEVBQU8sYUFBYSxDQUFDLGFBQWQsQ0FBNEIsT0FBNUIsQ0FBUDtTQUZGO09BRFE7YUFJVixPQUFPLENBQUMsT0FBUixDQUFnQixTQUFDLE1BQUQ7UUFDZCxxQkFBRyxNQUFNLENBQUUsY0FBWDtrREFDRSxTQUFVLE1BQU0sQ0FBQyxnQkFEbkI7U0FBQSxNQUFBO1VBR0UsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsT0FBaEI7aUJBQ0EsUUFBQSxDQUFTLElBQVQsRUFBZSxRQUFmLEVBSkY7O01BRGMsQ0FBaEI7SUFMVyxDQUFiO0VBRE07O2dDQWFSLEtBQUEsR0FBTyxTQUFDLFFBQUQsRUFBVyxRQUFYO0FBQ0wsUUFBQTtJQUFBLElBQUcsOEdBQUg7YUFDRSxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBbkMsQ0FBQSxFQURGOztFQURLOztnQ0FJUCxZQUFBLEdBQWMsU0FBQTtXQUFHO0VBQUg7O2dDQUVkLFNBQUEsR0FBVyxTQUFDLGVBQUQsRUFBa0IsUUFBbEI7QUFDVCxRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO01BQUEsSUFBQSxFQUFNLGFBQWEsQ0FBQyxJQUFwQjtNQUNBLFFBQUEsRUFBVSxJQURWO01BRUEsWUFBQSxFQUNFO1FBQUEsRUFBQSxFQUFJLGVBQUo7T0FIRjtLQURTO1dBS1gsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFOLEVBQWdCLFNBQUMsR0FBRCxFQUFNLE9BQU47YUFDZCxRQUFBLENBQVMsR0FBVCxFQUFjLE9BQWQsRUFBdUIsUUFBdkI7SUFEYyxDQUFoQjtFQU5TOztnQ0FTWCxrQkFBQSxHQUFvQixTQUFDLFFBQUQ7V0FDbEIsUUFBUSxDQUFDLFlBQVksQ0FBQztFQURKOztnQ0FHcEIsdUJBQUEsR0FBeUIsU0FBQTtXQUN2QjtFQUR1Qjs7Z0NBR3pCLFNBQUEsR0FBVyxTQUFBO0FBQ1QsUUFBQTtJQUFBLElBQUcsQ0FBSSxNQUFNLENBQUMsWUFBZDtNQUNFLE1BQU0sQ0FBQyxZQUFQLEdBQXNCO01BQ3RCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtVQUNuQixNQUFNLENBQUMsV0FBUCxHQUFxQjtpQkFFckIsS0FBQyxDQUFBLFdBQUQsQ0FBYSxTQUFBLEdBQUEsQ0FBYjtRQUhtQjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7TUFJckIsTUFBQSxHQUFTLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCO01BQ1QsTUFBTSxDQUFDLEdBQVAsR0FBYTthQUNiLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixNQUExQixFQVJGOztFQURTOztnQ0FXWCxXQUFBLEdBQWEsU0FBQyxRQUFEO0FBQ1gsUUFBQTtJQUFBLElBQUcsTUFBTSxDQUFDLGtCQUFWO2FBQ0UsUUFBQSxDQUFBLEVBREY7S0FBQSxNQUFBO01BR0UsSUFBQSxHQUFPO01BQ1AsS0FBQSxHQUFRLFNBQUE7UUFDTixJQUFHLE1BQU0sQ0FBQyxXQUFWO2lCQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBWixDQUFpQixPQUFqQixFQUEwQixJQUExQixFQUFnQyxTQUFBO21CQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQVosQ0FBaUIsUUFBakIsRUFBMkIsSUFBM0IsRUFBaUMsU0FBQTtxQkFDL0IsSUFBSSxDQUFDLElBQUwsQ0FBVSxnQkFBVixFQUE0QixTQUFBO2dCQUMxQixNQUFNLENBQUMsa0JBQVAsR0FBNEI7dUJBQzVCLFFBQVEsQ0FBQyxJQUFULENBQWMsSUFBZDtjQUYwQixDQUE1QjtZQUQrQixDQUFqQztVQUQ4QixDQUFoQyxFQURGO1NBQUEsTUFBQTtpQkFPRSxVQUFBLENBQVcsS0FBWCxFQUFrQixFQUFsQixFQVBGOztNQURNO2FBU1IsVUFBQSxDQUFXLEtBQVgsRUFBa0IsRUFBbEIsRUFiRjs7RUFEVzs7Z0NBZ0JiLFNBQUEsR0FBVyxTQUFDLFFBQUQsRUFBVyxRQUFYO0FBQ1QsUUFBQTtJQUFBLE9BQUEsR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBeEIsQ0FDUjtNQUFBLE1BQUEsRUFBUSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQTlCO0tBRFE7V0FFVixPQUFPLENBQUMsT0FBUixDQUFnQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtBQUNkLFlBQUE7UUFBQSxtQkFBRyxJQUFJLENBQUUsb0JBQVQ7VUFDRSxRQUFRLENBQUMsTUFBVCxDQUFnQixJQUFJLENBQUMsS0FBckI7VUFDQSxRQUFRLENBQUMsWUFBVCxHQUF3QixJQUFJLENBQUM7VUFDN0IsUUFBUSxDQUFDLFlBQVQsR0FBd0I7WUFBQSxFQUFBLEVBQUksSUFBSSxDQUFDLEVBQVQ7O1VBQ3hCLElBQU8seUJBQUoseUNBQXFDLENBQUUsZ0JBQWQsR0FBdUIsQ0FBbkQ7WUFDRSxRQUFRLENBQUMsTUFBVCxHQUFrQixJQUFJLGFBQUosQ0FDaEI7Y0FBQSxJQUFBLEVBQU0sYUFBYSxDQUFDLE1BQXBCO2NBQ0EsUUFBQSxFQUFVLEtBRFY7Y0FFQSxZQUFBLEVBQ0U7Z0JBQUEsRUFBQSxFQUFJLElBQUksQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFFLENBQUMsRUFBcEI7ZUFIRjthQURnQixFQURwQjs7VUFNQSxHQUFBLEdBQU0sSUFBSSxDQUFDO1VBRVgsR0FBQSxJQUFTLENBQUksR0FBRyxDQUFDLE9BQUosQ0FBWSxHQUFaLENBQUEsS0FBb0IsQ0FBQyxDQUF4QixHQUErQixHQUEvQixHQUF3QyxHQUF6QyxDQUFBLEdBQTZDLGVBQTdDLEdBQTJELENBQUMsa0JBQUEsQ0FBbUIsS0FBQyxDQUFBLFNBQVMsQ0FBQyxZQUE5QixDQUFEO1VBQ3BFLEdBQUEsR0FBTSxJQUFJLGNBQUosQ0FBQTtVQUNOLEdBQUcsQ0FBQyxJQUFKLENBQVMsS0FBVCxFQUFnQixHQUFoQjtVQUNBLEdBQUcsQ0FBQyxNQUFKLEdBQWEsU0FBQTttQkFDWCxRQUFBLENBQVMsSUFBVCxFQUFlLG1CQUFtQixDQUFDLDJCQUFwQixDQUFnRCxHQUFHLENBQUMsWUFBcEQsQ0FBZjtVQURXO1VBRWIsR0FBRyxDQUFDLE9BQUosR0FBYyxTQUFBO21CQUNaLFFBQUEsQ0FBUyxpQ0FBVDtVQURZO2lCQUVkLEdBQUcsQ0FBQyxJQUFKLENBQUEsRUFuQkY7U0FBQSxNQUFBO2lCQXFCRSxRQUFBLENBQVMsS0FBQyxDQUFBLFNBQUQsQ0FBVyxJQUFYLEVBQWlCLDRCQUFqQixDQUFULEVBckJGOztNQURjO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFoQjtFQUhTOztnQ0EyQlgsU0FBQSxHQUFXLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEI7QUFDVCxRQUFBO0lBQUEsUUFBQSxHQUFXO0lBQ1gsUUFBQSxHQUFXLFFBQVEsQ0FBQyxRQUFULElBQXFCLElBQUMsQ0FBQTtJQUNqQyxNQUFBLEdBQVMsSUFBSSxDQUFDLFNBQUwsQ0FDUDtNQUFBLEtBQUEsRUFBTyxRQUFRLENBQUMsUUFBaEI7TUFDQSxRQUFBLEVBQVUsUUFEVjtNQUVBLE9BQUEsRUFBUztRQUFDO1VBQUMsRUFBQSxFQUFPLDJHQUFILEdBQTJDLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQXhFLEdBQWdGLE1BQXJGO1NBQUQ7T0FGVDtLQURPO0lBS1QscURBQXlDLENBQUUsWUFBMUIsR0FDZixDQUFDLEtBQUQsRUFBUSx5QkFBQSxHQUEwQixRQUFRLENBQUMsWUFBWSxDQUFDLEVBQXhELENBRGUsR0FHZixDQUFDLE1BQUQsRUFBUyx3QkFBVCxDQUhGLEVBQUMsZ0JBQUQsRUFBUztJQUtULGdCQUFBLEdBQW1CO0lBQ25CLElBQUcsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsUUFBakIsQ0FBQSxLQUE4QixDQUFqQztNQUVFLGdCQUFBLEdBQW1CLHdDQUZyQjs7SUFJQSxJQUFBLEdBQU8sQ0FDTCxRQUFBLEdBQVMsUUFBVCxHQUFrQiw0Q0FBbEIsR0FBOEQsTUFEekQsRUFFTCxRQUFBLEdBQVMsUUFBVCxHQUFrQixvQkFBbEIsR0FBc0MsUUFBdEMsR0FBaUQsZ0JBQWpELEdBQWtFLFVBQWxFLEdBQTJFLG1EQUFDLE9BQU8sQ0FBQyw0QkFBUixJQUErQixPQUFoQyxDQUZ0RSxFQUdMLFFBQUEsR0FBUyxRQUFULEdBQWtCLElBSGIsQ0FJTixDQUFDLElBSkssQ0FJQSxFQUpBO0lBTVAsT0FBQSxHQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBWixDQUNSO01BQUEsSUFBQSxFQUFNLElBQU47TUFDQSxNQUFBLEVBQVEsTUFEUjtNQUVBLE1BQUEsRUFBUTtRQUFDLFVBQUEsRUFBWSxXQUFiO09BRlI7TUFHQSxPQUFBLEVBQVM7UUFBQyxjQUFBLEVBQWdCLCtCQUFBLEdBQWtDLFFBQWxDLEdBQTZDLEdBQTlEO09BSFQ7TUFJQSxJQUFBLEVBQU0sSUFKTjtLQURRO1dBT1YsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7UUFDZCxJQUFHLFFBQUg7VUFDRSxtQkFBRyxJQUFJLENBQUUsY0FBVDttQkFDRSxRQUFBLENBQVMsMEJBQUEsR0FBMkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUEvQyxFQURGO1dBQUEsTUFFSyxJQUFHLElBQUg7WUFDSCxRQUFRLENBQUMsWUFBVCxHQUF3QjtjQUFBLEVBQUEsRUFBSSxJQUFJLENBQUMsRUFBVDs7bUJBQ3hCLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZixFQUZHO1dBQUEsTUFBQTttQkFJSCxRQUFBLENBQVMsS0FBQyxDQUFBLFNBQUQsQ0FBVyxJQUFYLEVBQWlCLHdCQUFqQixDQUFULEVBSkc7V0FIUDs7TUFEYztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEI7RUEvQlM7O2dDQXlDWCx5QkFBQSxHQUEyQixTQUFDLFFBQUQsRUFBVyxRQUFYO0FBQ3pCLFFBQUE7SUFBQSxJQUFBLEdBQU87SUFDUCxVQUFBLEdBQWEsU0FBQyxHQUFEO0FBQ1gsVUFBQTtNQUFBLE9BQUEsR0FBVSxHQUFHLENBQUMsUUFBSixDQUFBLENBQWMsQ0FBQyxPQUFmLENBQUEsQ0FBd0IsQ0FBQyxHQUF6QixDQUE2QixTQUE3QjtNQUNWLElBQUcsUUFBUSxDQUFDLFlBQVo7UUFDRSxVQUFBLEdBQWEsU0FBQyxDQUFEO1VBQ1gsSUFBRyxDQUFJLENBQUMsQ0FBQyxPQUFOLElBQWtCLENBQUMsQ0FBQyxTQUFGLEtBQWlCLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQXJFO21CQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQVosQ0FDRTtjQUFBLEtBQUEsRUFBTyxzQkFBUDtjQUNBLE9BQUEsRUFBUyw4RkFEVDthQURGLEVBREY7O1FBRFc7UUFLYixPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGFBQXZELEVBQXNFLFVBQXRFO1FBQ0EsT0FBTyxDQUFDLGdCQUFSLENBQXlCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxZQUF2RCxFQUFxRSxVQUFyRSxFQVBGOztBQVFBO0FBQUEsV0FBQSxzQ0FBQTs7UUFDRSxJQUFzQyxZQUFZLENBQUMsSUFBbkQ7VUFBQSxTQUFBLEdBQVksWUFBWSxDQUFDLFVBQXpCOztBQURGO01BRUEsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUF0QixHQUNFO1FBQUEsR0FBQSxFQUFLLEdBQUw7UUFDQSxPQUFBLEVBQVMsT0FEVDtRQUVBLFNBQUEsRUFBVyxTQUZYOzthQUdGLFFBQUEsQ0FBUyxJQUFULEVBQWUsbUJBQW1CLENBQUMsMkJBQXBCLENBQWdELE9BQU8sQ0FBQyxPQUFSLENBQUEsQ0FBaEQsQ0FBZjtJQWhCVztJQWtCYixJQUFBLEdBQU8sU0FBQyxLQUFEO0FBQ0wsVUFBQTtNQUFBLE9BQUEsR0FBVSxLQUFLLENBQUMsWUFBTixDQUFtQixFQUFuQjthQUNWLEtBQUssQ0FBQyxPQUFOLENBQUEsQ0FBZSxDQUFDLEdBQWhCLENBQW9CLFNBQXBCLEVBQStCLE9BQS9CO0lBRks7SUFJUCxLQUFBLEdBQVEsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQ7UUFDTixJQUFHLEdBQUcsQ0FBQyxJQUFKLEtBQVksd0JBQWY7aUJBQ0UsS0FBQyxDQUFBLFNBQUQsQ0FBVyxtQkFBbUIsQ0FBQyxTQUEvQixFQURGO1NBQUEsTUFBQTtpQkFHRSxLQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsQ0FBYyxHQUFHLENBQUMsT0FBbEIsRUFIRjs7TUFETTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7SUFNUixpREFBd0IsQ0FBRSxXQUExQjtNQUNFLE9BQUEsR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBeEIsQ0FDUjtRQUFBLE1BQUEsRUFBUSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQTlCO09BRFEsRUFEWjtLQUFBLE1BQUE7TUFJRSxPQUFBLEdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQXhCLENBQ1I7UUFBQSxLQUFBLEVBQU8sUUFBUSxDQUFDLFFBQWhCO1FBQ0EsUUFBQSxFQUFVLElBQUMsQ0FBQSxRQURYO1FBRUEsT0FBQSxFQUFTO1VBQUM7WUFBQyxFQUFBLEVBQU8sMkdBQUgsR0FBMkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBeEUsR0FBZ0YsTUFBckY7V0FBRDtTQUZUO09BRFEsRUFKWjs7V0FTQSxPQUFPLENBQUMsT0FBUixDQUFnQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtRQUNkLG1CQUFHLElBQUksQ0FBRSxXQUFUO1VBQ0UsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsSUFBSSxDQUFDLEtBQXJCO1VBQ0EsUUFBUSxDQUFDLFlBQVQsR0FBd0IsSUFBSSxDQUFDO1VBQzdCLFFBQVEsQ0FBQyxZQUFULEdBQXdCO1lBQUEsRUFBQSxFQUFJLElBQUksQ0FBQyxFQUFUOztpQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBcEIsQ0FBeUIsSUFBSSxDQUFDLEVBQTlCLEVBQWtDLFVBQWxDLEVBQThDLElBQTlDLEVBQW9ELEtBQXBELEVBSkY7U0FBQSxNQUFBO2lCQU1FLFFBQUEsQ0FBUyxLQUFDLENBQUEsU0FBRCxDQUFXLElBQVgsRUFBaUIscUJBQWpCLENBQVQsRUFORjs7TUFEYztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEI7RUF2Q3lCOztnQ0FnRDNCLGlCQUFBLEdBQW1CLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEI7QUFDakIsUUFBQTtJQUFBLGlEQUF3QixDQUFFLGNBQTFCO2FBQ0UsSUFBQyxDQUFBLDJCQUFELENBQTZCLE9BQTdCLEVBQXNDLFFBQXRDLEVBQWdELFFBQWhELEVBREY7S0FBQSxNQUFBO2FBR0UsSUFBQyxDQUFBLHlCQUFELENBQTJCLFFBQTNCLEVBQXFDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxHQUFEO1VBQ25DLElBQXVCLEdBQXZCO0FBQUEsbUJBQU8sUUFBQSxDQUFTLEdBQVQsRUFBUDs7aUJBQ0EsS0FBQyxDQUFBLDJCQUFELENBQTZCLE9BQTdCLEVBQXNDLFFBQXRDLEVBQWdELFFBQWhEO1FBRm1DO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQyxFQUhGOztFQURpQjs7Z0NBUW5CLDJCQUFBLEdBQTZCLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEI7QUFDM0IsUUFBQTtJQUFBLEtBQUEsR0FBUTtJQUNSLGVBQUEsR0FBa0IsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFDakQsS0FBQSxHQUFRLE1BQU0sQ0FBQyxTQUFQLENBQWlCLGVBQWUsQ0FBQyxPQUFoQixDQUFBLENBQWpCLEVBQTRDLE9BQU8sQ0FBQyxnQkFBUixDQUFBLENBQTVDO0FBQ1IsU0FBQSx1Q0FBQTs7TUFDRSxJQUFHLElBQUksQ0FBQyxPQUFSO1FBQ0UsZUFBZSxDQUFDLFdBQWhCLENBQTRCLEtBQTVCLEVBQW1DLEtBQUEsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQXRELEVBREY7T0FBQSxNQUFBO1FBR0UsSUFBRyxJQUFJLENBQUMsS0FBUjtVQUNFLGVBQWUsQ0FBQyxZQUFoQixDQUE2QixLQUE3QixFQUFvQyxJQUFJLENBQUMsS0FBekMsRUFERjs7UUFFQSxLQUFBLElBQVMsSUFBSSxDQUFDLE1BTGhCOztBQURGO1dBT0EsUUFBQSxDQUFTLElBQVQ7RUFYMkI7O2dDQWE3QixTQUFBLEdBQVcsU0FBQyxNQUFELEVBQVMsTUFBVDtJQUNULElBQUcsa0RBQUg7YUFDSyxNQUFELEdBQVEsSUFBUixHQUFZLE1BQU0sQ0FBQyxRQUR2QjtLQUFBLE1BQUE7YUFHRSxPQUhGOztFQURTOzs7O0dBdlVxQjs7QUE2VWxDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCOzs7O0FDN1hqQixJQUFBLG9JQUFBO0VBQUE7OztBQUFBLGlCQUFBLEdBQW9CLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFDckQsbUJBQUEsR0FBc0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUN2RCxhQUFBLEdBQWdCLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFDakQsZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLHNCQUFSOztBQUNuQixnQkFBQSxHQUFtQixPQUFBLENBQVEscUJBQVI7O0FBQ25CLGFBQUEsR0FBZ0IsT0FBQSxDQUFRLDBCQUFSOztBQUNoQixNQUFBLEdBQVMsQ0FBQyxPQUFBLENBQVEsV0FBUixDQUFELENBQXFCLENBQUM7O0FBQy9CLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFTRDs7O0VBRUosWUFBQyxDQUFBLElBQUQsR0FBTzs7RUFFTSxzQkFBQyxPQUFELEVBQWdCLE1BQWhCO0lBQUMsSUFBQyxDQUFBLDRCQUFELFVBQVc7SUFBSSxJQUFDLENBQUEsU0FBRDtJQUMzQiw4Q0FDRTtNQUFBLElBQUEsRUFBTSxZQUFZLENBQUMsSUFBbkI7TUFDQSxZQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sSUFBTjtRQUNBLE1BQUEsRUFBUSxJQURSO1FBRUEsQ0FBQSxNQUFBLENBQUEsRUFBUSxLQUZSO1FBR0EsSUFBQSxFQUFNLElBSE47UUFJQSxJQUFBLEVBQU0sS0FKTjtRQUtBLE1BQUEsRUFBUSxLQUxSO1FBTUEsTUFBQSxFQUFRLEtBTlI7UUFPQSxLQUFBLEVBQU8sS0FQUDtPQUZGO0tBREY7SUFZQSxJQUFDLENBQUEsU0FBRCxHQUFhO01BQ1gsY0FBQSxFQUFnQixhQUFBLENBQWMsZ0JBQWQsQ0FETDtNQUVYLGNBQUEsRUFBZ0IsYUFBQSxDQUFjLGdCQUFkLENBRkw7O0lBSWIsSUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsZ0JBQUQsRUFBbUIsWUFBbkI7SUFFeEIsSUFBQyxDQUFBLFVBQUQsR0FBaUIsSUFBQyxDQUFBLFNBQVMsQ0FBQyxjQUFkLEdBQWtDLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFNBQVMsQ0FBQyxjQUF6QixDQUFsQyxHQUFnRjtJQUM5RixJQUFDLENBQUEsZUFBRCxHQUFtQjtJQUNuQixJQUFDLENBQUEsZ0JBQUQsR0FBb0I7SUFFcEIsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLGdCQUFKLENBQXFCLElBQUMsQ0FBQSxTQUFTLENBQUMsY0FBaEM7SUFFZixJQUFDLENBQUEsWUFBRCxHQUFnQixJQUFJLGdCQUFKLENBQXFCLElBQUMsQ0FBQSxPQUFPLENBQUMsZUFBOUI7RUF6Qkw7O3lCQTJCYixZQUFBLEdBQWMsU0FBQyxNQUFEO1dBQ1osTUFBTSxDQUFDLFNBQVAsQ0FBaUIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxNQUFmLENBQWpCO0VBRFk7O3lCQUdkLFlBQUEsR0FBYyxTQUFDLE1BQUQ7QUFDWixRQUFBO0FBQUE7TUFDRSxPQUFBLEdBQVUsSUFBSSxDQUFDLEtBQUwsQ0FBVyxNQUFNLENBQUMsTUFBUCxDQUFjLE1BQWQsQ0FBWCxFQURaO0tBQUEsY0FBQTtNQUVNO01BQ0osT0FBQSxHQUFVLEtBSFo7O1dBSUE7RUFMWTs7eUJBT2QsZUFBQSxHQUFpQixTQUFBO0lBQ2YsSUFBRyxJQUFDLENBQUEsVUFBSjtNQUNFLElBQUMsQ0FBQSxNQUFNLENBQUMsZ0JBQVIsQ0FBeUIsSUFBQyxDQUFBLElBQTFCLEVBQWdDLElBQUMsQ0FBQSxVQUFqQzthQUNBLEtBRkY7S0FBQSxNQUFBO2FBSUUsTUFKRjs7RUFEZTs7eUJBT2pCLFdBQUEsR0FBYSxTQUFDLFFBQUQ7QUFDWCxRQUFBO0lBQUEsK0NBQWtFLENBQUUsZUFBcEU7TUFBQSxRQUFRLENBQUMsZ0JBQVQsR0FBNEIsSUFBQyxDQUFBLGlCQUE3Qjs7SUFDQSxJQUFpQyxJQUFDLENBQUEsT0FBTyxDQUFDLFdBQTFDO01BQUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxXQUFULENBQXFCLFFBQXJCLEVBQUE7O1dBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksYUFBWixFQUEyQixRQUEzQjtFQUhXOzt5QkFNYixrQkFBQSxHQUFvQixTQUFDLFVBQUQsRUFBYSxnQkFBYjtXQUNsQjtFQURrQjs7eUJBR3BCLDBCQUFBLEdBQTRCLFNBQUMsUUFBRDtBQUMxQixRQUFBO0lBQUEsT0FBQSx1QkFBVSxRQUFRLENBQUUsa0JBQVYsSUFBc0I7SUFDaEMsSUFBRyxPQUFPLE9BQVAsS0FBa0IsUUFBckI7QUFDRTtRQUNFLE9BQUEsR0FBVSxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQVgsRUFEWjtPQUFBLGNBQUE7UUFFTTtRQUNKLE9BQUEsR0FBVSxHQUhaO09BREY7O1dBS0E7RUFQMEI7O3lCQVM1QixHQUFBLEdBQUssU0FBQyxVQUFELEVBQWEsUUFBYjtBQUNILFFBQUE7SUFBQSxpQkFBQSxHQUFvQixpSkFBQSxJQUNJO0lBQ3hCLG1CQUFBLEdBQXNCLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsUUFBbkIsRUFBNkIsUUFBN0IsQ0FBc0MsQ0FBQyxPQUF2QyxDQUErQyxVQUEvQyxDQUFBLElBQThEO1dBQ3BGLHNDQUFNLFVBQU4sRUFBa0IsUUFBbEIsQ0FBQSxJQUFnQyxDQUFJLENBQUMsbUJBQUEsSUFBd0IsaUJBQXpCO0VBSmpDOzt5QkFNTCxJQUFBLEdBQU0sU0FBQyxRQUFELEVBQVcsUUFBWDtBQUNKLFFBQUE7SUFBQSxPQUFnQixJQUFDLENBQUEsV0FBVyxDQUFDLGNBQWIsNENBQWlELENBQUUsaUJBQW5ELENBQWhCLEVBQUMsb0JBQUQsRUFBUztJQUVULG9GQUFvQyxDQUFFLDBCQUF0QztNQUNFLFNBQUEsR0FBWSxNQUFBLEdBQVMsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsU0FEeEQ7S0FBQSxNQUVLLG9GQUFvQyxDQUFFLDJCQUF0QztNQUNILFNBQUEsR0FBWSxNQUFBLEdBQVMsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFEbkQ7O1dBR0wsQ0FBQyxDQUFDLElBQUYsQ0FDRTtNQUFBLElBQUEsRUFBTSxNQUFOO01BQ0EsR0FBQSxFQUFLLEdBREw7TUFFQSxRQUFBLEVBQVUsTUFGVjtNQUdBLElBQUEsRUFDRTtRQUFBLFNBQUEsRUFBVyxTQUFYO09BSkY7TUFLQSxPQUFBLEVBQVMsSUFMVDtNQU9BLE9BQUEsRUFBUyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsSUFBRDtBQUNQLGNBQUE7VUFBQSxLQUFDLENBQUEsV0FBRCxDQUFhO1lBQ1gsU0FBQSxFQUFXLE1BREE7WUFFWCxVQUFBLCtDQUFpQyxDQUFFLGlCQUZ4QjtZQUdYLFdBQUEsRUFBYSxHQUhGO1dBQWI7VUFLQSxPQUFBLEdBQVUsbUJBQW1CLENBQUMsMkJBQXBCLENBQWdELElBQWhEO1VBT1YsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsUUFBUSxDQUFDLElBQVQsSUFBaUIsSUFBSSxDQUFDLE9BQXRCLElBQWlDLElBQUksQ0FBQyxJQUF0Qyx5Q0FBMEQsQ0FBRSxjQUE1RTtVQUNBLElBQUcsUUFBUSxDQUFDLElBQVo7WUFDRSxPQUFPLENBQUMsV0FBUixDQUFvQjtjQUFBLE9BQUEsRUFBUyxRQUFRLENBQUMsUUFBbEI7YUFBcEIsRUFERjs7aUJBR0EsUUFBQSxDQUFTLElBQVQsRUFBZSxPQUFmO1FBakJPO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQVBUO01BMEJBLEtBQUEsRUFBTyxTQUFDLEtBQUQ7QUFDTCxZQUFBO2VBQUEsUUFBQSxDQUFTLGlCQUFBLEdBQWlCLENBQUMsUUFBUSxDQUFDLElBQVQsa0RBQXNDLENBQUUsa0JBQXhDLElBQW9ELE1BQXJELENBQTFCO01BREssQ0ExQlA7S0FERjtFQVJJOzt5QkFzQ04sSUFBQSxHQUFNLFNBQUMsWUFBRCxFQUFlLFFBQWYsRUFBeUIsUUFBekIsRUFBbUMsWUFBbkM7QUFDSixRQUFBO0lBQUEsT0FBQSxHQUFVLFlBQVksQ0FBQyxVQUFiLENBQUE7SUFHVixRQUFBLEdBQVcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFULElBQW1CLFFBQVEsQ0FBQyxZQUE1QixJQUE2QyxDQUFJO0lBQzVELFlBQUEsR0FBZSxJQUFDLENBQUEsWUFBWSxDQUFDLFdBQWQsQ0FBMEIsT0FBMUIsRUFBbUMsUUFBbkM7SUFFZixJQUFHLFlBQVksQ0FBQyxXQUFiLElBQTZCLENBQUksWUFBWSxDQUFDLFVBQWpEO01BRUUsUUFBQSxDQUFTLElBQVQ7QUFDQSxhQUhGOztJQUtBLE1BQUEsR0FBUztJQUNULElBQUcsQ0FBSSxZQUFZLENBQUMsV0FBakIsSUFBaUMsUUFBUSxDQUFDLFFBQTdDO01BQ0UsTUFBTSxDQUFDLFVBQVAsR0FBb0IsUUFBUSxDQUFDLFNBRC9COztJQUdBLElBQUcsQ0FBQyxnSkFBRCxDQUFIO01BQ0UsTUFBTSxDQUFDLFNBQVAsR0FBbUIsTUFBQSxHQUFTLFFBQVEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFVBRC9EOztJQUdBLE9BQW1CLFlBQVksQ0FBQyxXQUFoQixHQUNPLElBQUMsQ0FBQSxXQUFXLENBQUMsZUFBYixDQUE2QixRQUFRLENBQUMsWUFBWSxDQUFDLFFBQW5ELEVBQTZELE1BQTdELENBRFAsR0FFTyxJQUFDLENBQUEsV0FBVyxDQUFDLGNBQWIsQ0FBNEIsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFsRCxFQUE0RCxNQUE1RCxDQUZ2QixFQUFDLG9CQUFELEVBQVM7SUFJVCxPQUFBLEdBQ0U7TUFBQSxTQUFBLEVBQVcsTUFBWDtNQUNBLFFBQUEsRUFBVSxjQURWO01BRUEsV0FBQSxFQUFhLFlBQVksQ0FBQyxXQUYxQjtNQUdBLE1BQUEsRUFBUSxNQUhSO01BS0EsR0FBQSxFQUFLLEdBQUcsQ0FBQyxNQUFKLENBQVcsQ0FBWCxFQUFjLEdBQUcsQ0FBQyxPQUFKLENBQVksV0FBWixDQUFBLEdBQTJCLEVBQXpDLENBQUEsR0FBK0MsS0FMcEQ7TUFNQSxNQUFBLEVBQVEsSUFBSSxDQUFDLFNBQUwsQ0FBZTtRQUFFLFVBQUEsRUFBWSxNQUFNLENBQUMsVUFBckI7T0FBZixDQU5SO01BT0EsT0FBQSxFQUFTLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBekIsQ0FBZ0MsQ0FBaEMsRUFBbUMsR0FBbkMsQ0FQVDs7SUFRRixJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxNQUFaLEVBQW9CLE9BQXBCO1dBRUEsQ0FBQyxDQUFDLElBQUYsQ0FDRTtNQUFBLFFBQUEsRUFBVSxNQUFWO01BQ0EsSUFBQSxFQUFNLE1BRE47TUFFQSxHQUFBLEVBQUssR0FGTDtNQUdBLElBQUEsRUFBTSxJQUFJLENBQUMsT0FBTCxDQUFhLFlBQVksQ0FBQyxXQUExQixDQUhOO01BSUEsV0FBQSxFQUFhLFlBQVksQ0FBQyxRQUoxQjtNQUtBLFdBQUEsRUFBYSxLQUxiO01BTUEsVUFBQSxFQUFZLFNBQUMsR0FBRDtlQUNWLEdBQUcsQ0FBQyxnQkFBSixDQUFxQixrQkFBckIsRUFBeUMsU0FBekM7TUFEVSxDQU5aO01BUUEsT0FBQSxFQUFTLElBUlQ7TUFTQSxPQUFBLEVBQVMsU0FBQyxJQUFEO1FBQ1AsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQStCLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBWixHQUF1QixDQUFDLENBQUMsU0FBRixDQUFZLE9BQVosQ0FBdkIsR0FBaUQsSUFBN0U7UUFDQSxJQUFHLElBQUksQ0FBQyxRQUFSO1VBQXNCLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBdEIsR0FBaUMsSUFBSSxDQUFDLFNBQTVEOztlQUVBLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZjtNQUpPLENBVFQ7TUFlQSxLQUFBLEVBQU8sU0FBQyxLQUFEO0FBRUwsWUFBQTtRQUFBLElBQUcsWUFBWSxDQUFDLFdBQWhCO2lCQUNFLElBQUMsQ0FBQSxJQUFELENBQU0sWUFBTixFQUFvQixRQUFwQixFQUE4QixRQUE5QixFQUF3QyxJQUF4QyxFQURGO1NBQUEsTUFBQTtBQUlFO1lBQ0UsWUFBQSxHQUFlLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBSyxDQUFDLFlBQWpCO1lBQ2YsSUFBRyxZQUFZLENBQUMsT0FBYixLQUF3QixpQkFBM0I7cUJBQ0UsUUFBQSxDQUFTLG1CQUFBLEdBQW9CLFFBQVEsQ0FBQyxJQUE3QixHQUFrQyx3QkFBM0MsRUFERjthQUFBLE1BQUE7cUJBR0UsUUFBQSxDQUFTLGlCQUFBLEdBQWtCLFFBQVEsQ0FBQyxJQUEzQixHQUFnQyxLQUFoQyxHQUFxQyxZQUFZLENBQUMsT0FBbEQsR0FBMEQsR0FBbkUsRUFIRjthQUZGO1dBQUEsY0FBQTttQkFPRSxRQUFBLENBQVMsaUJBQUEsR0FBa0IsUUFBUSxDQUFDLElBQXBDLEVBUEY7V0FKRjs7TUFGSyxDQWZQO0tBREY7RUFsQ0k7O3lCQWlFTixZQUFBLEdBQWMsU0FBQTtXQUFHO0VBQUg7O3lCQUVkLFNBQUEsR0FBVyxTQUFDLGVBQUQsRUFBa0IsUUFBbEI7QUFDVCxRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO01BQUEsSUFBQSxFQUFNLGFBQWEsQ0FBQyxJQUFwQjtNQUNBLFFBQUEsRUFBVSxJQURWO0tBRFM7SUFJWCxJQUFHLE9BQU8sZUFBUCxLQUEwQixRQUE3QjtNQUNFLGVBQUEsR0FBa0IsSUFBQyxDQUFBLFlBQUQsQ0FBYyxlQUFkLEVBRHBCOztJQUdBLElBQUMsQ0FBQSxlQUFELEdBQW1CO0lBQ25CLElBQUMsQ0FBQSxnQkFBRCxvRkFBd0QsQ0FBRSx5QkFBbkMsR0FBNEMsQ0FBL0MsR0FBc0QsZUFBZSxDQUFDLGdCQUF0RSxHQUE0RjtJQUVoSCxnQkFBQSxHQUFtQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsWUFBRCxFQUFlLFFBQWY7UUFDakIsUUFBUSxDQUFDLFlBQVQsR0FBd0I7ZUFDeEIsS0FBQyxDQUFBLElBQUQsQ0FBTSxRQUFOLEVBQWdCLFNBQUMsR0FBRCxFQUFNLE9BQU47VUFDZCxLQUFDLENBQUEsTUFBTSxDQUFDLGlCQUFSLENBQTBCLEtBQUMsQ0FBQSxvQkFBM0I7aUJBQ0EsUUFBQSxDQUFTLEdBQVQsRUFBYyxPQUFkLEVBQXVCLFFBQXZCO1FBRmMsQ0FBaEI7TUFGaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0lBU25CLDhCQUFxRCxlQUFlLENBQUUsaUJBQXRFO0FBQUEsYUFBTyxnQkFBQSxDQUFpQixlQUFqQixFQUFrQyxRQUFsQyxFQUFQOztJQUtBLHNCQUFBLEdBQXlCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxXQUFELEVBQWMsUUFBZCxFQUF3QixXQUF4QixFQUFxQyxRQUFyQztBQUN2QixZQUFBO1FBQUEsZ0JBQUEsR0FBbUIsS0FBQyxDQUFBLDBCQUFELENBQTRCLFFBQTVCO1FBQ25CLFFBQUEsR0FBVyxnQkFBZ0IsQ0FBQztRQUU1QixpQkFBQSxHQUFvQixLQUFDLENBQUEsZ0JBQWdCLENBQUMsTUFBbEIsR0FBMkI7UUFFL0MsMEJBQUEsR0FBNkIsU0FBQyxJQUFELEVBQU8sV0FBUCxFQUFvQixRQUFwQjtBQUUzQixjQUFBO1VBQUEsV0FBQSxHQUFjLENBQUMsQ0FBQyxTQUFGLENBQVksZ0JBQVo7VUFDZCxXQUFXLENBQUMsUUFBWixHQUF1QjtVQUV2QixPQUFBLEdBQVUsSUFBSSxDQUFDLFNBQUwsQ0FBZSxXQUFmO1VBQ1YsVUFBQSxHQUFnQixpQ0FBQSxJQUE2QixPQUFPLFdBQVcsQ0FBQyxXQUFuQixLQUFrQyxRQUFsRSxHQUFnRixXQUFXLENBQUMsV0FBNUYsR0FBNkc7VUFDMUgsWUFBQSxHQUFrQixVQUFILEdBQW1CLGVBQUEsR0FBZSxDQUFDLGtCQUFBLENBQW1CLFVBQW5CLENBQUQsQ0FBbEMsR0FBeUU7VUFFeEYsY0FBQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxJQUFOO21CQUNmLENBQUMsQ0FBQyxJQUFGLENBQU87Y0FDTCxJQUFBLEVBQU0sS0FERDtjQUVMLEdBQUEsRUFBUSxHQUFELEdBQUssWUFBTCxHQUFnQixDQUFDLGtCQUFBLENBQW1CLE9BQW5CLENBQUQsQ0FBaEIsR0FBK0MsWUFGakQ7Y0FHTCxRQUFBLEVBQVUsTUFITDtjQUlMLFNBQUEsRUFDRTtnQkFBQSxlQUFBLEVBQWlCLElBQWpCO2VBTEc7YUFBUCxDQU9BLENBQUMsSUFQRCxDQU9NLFNBQUMsSUFBRCxFQUFPLE1BQVAsRUFBZSxLQUFmO2NBQ0osb0JBQUcsSUFBSSxDQUFFLGlCQUFOLEtBQWlCLEtBQXBCO3VCQUNFLElBQUEsQ0FBSyxpRkFBQSxHQUFrRixJQUFJLENBQUMsT0FBdkYsR0FBK0YsR0FBcEcsRUFERjtlQUFBLE1BQUE7dUJBR0UsSUFBQSxDQUFLLElBQUwsRUFIRjs7WUFESSxDQVBOLENBWUEsQ0FBQyxJQVpELENBWU0sU0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixLQUFoQjtxQkFDSixJQUFBLENBQUssK0VBQUw7WUFESSxDQVpOO1VBRGU7VUFnQmpCLFFBQUEsR0FBVyxJQUFJLENBQUMsS0FBTCxDQUFBO1VBQ1gsWUFBQSxHQUFlLFNBQUE7QUFDYixnQkFBQTtZQUFBLElBQUcsUUFBUSxDQUFDLE1BQVQsS0FBbUIsQ0FBdEI7cUJBQ0UsUUFBQSxDQUFTLElBQVQsRUFERjthQUFBLE1BQUE7Y0FHRSxHQUFBLEdBQU0sUUFBUSxDQUFDLEtBQVQsQ0FBQTtxQkFDTixjQUFBLENBQWUsR0FBZixFQUFvQixTQUFDLEdBQUQ7Z0JBQ2xCLElBQUcsR0FBSDt5QkFDRSxRQUFBLENBQVMsR0FBVCxFQURGO2lCQUFBLE1BQUE7eUJBR0UsWUFBQSxDQUFBLEVBSEY7O2NBRGtCLENBQXBCLEVBSkY7O1VBRGE7aUJBVWYsWUFBQSxDQUFBO1FBcEMyQjtRQXNDN0IscUJBQUEsR0FBd0IsU0FBQyxjQUFEO0FBQ3RCLGNBQUE7VUFBQSxRQUFBLEdBQ0U7WUFBQSxRQUFBLEVBQVUsY0FBYyxDQUFDLEVBQXpCO1lBQ0EsVUFBQSxFQUNFO2NBQUEsUUFBQSxFQUFVLGNBQWMsQ0FBQyxhQUF6QjtjQUNBLFNBQUEsRUFBVyxjQUFjLENBQUMsa0JBRDFCO2FBRkY7O1VBS0YsUUFBQSxHQUFjLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBbkIsR0FDTSxFQUFBLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFuQixHQUE0QixNQUFNLENBQUMsUUFBUSxDQUFDLFFBRGxELEdBRVMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFqQixHQUEwQixJQUExQixHQUE4QixNQUFNLENBQUMsUUFBUSxDQUFDLElBQTlDLEdBQXFELE1BQU0sQ0FBQyxRQUFRLENBQUM7VUFDeEYsbUJBQUEsR0FDRTtZQUFBLFFBQUEsRUFBVSxjQUFjLENBQUMsRUFBekI7WUFDQSxVQUFBLEVBQ0U7Y0FBQSxRQUFBLEVBQVUsY0FBYyxDQUFDLGFBQXpCO2FBRkY7O1VBR0YsaUJBQUEsR0FBb0IsS0FBQyxDQUFBLFlBQUQsQ0FBYyxtQkFBZDs7WUFDcEIsZ0JBQWdCLENBQUMsZUFBZ0I7O2lCQUNqQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsYUFBOUIsR0FBaUQsUUFBRCxHQUFVLGtCQUFWLEdBQTRCO1FBaEJ0RDtRQW1CeEIsSUFBRyx5REFBQSxJQUF3QixDQUFDLHlFQUFBLElBQWtDLDBFQUFuQyxDQUEzQjtVQUVFLFFBQUEsR0FBVyxTQUFDLFFBQUQ7QUFDVCxnQkFBQTtZQUFBLFlBQUEsR0FDRTtjQUFBLE1BQUEsRUFBUSxRQUFRLENBQUMsUUFBakI7Y0FDQSxTQUFBLEVBQVcsTUFBQSxHQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFEdEM7O1lBRUYsT0FBZ0IsS0FBQyxDQUFBLFdBQVcsQ0FBQyxnQkFBYixDQUE4QixZQUE5QixDQUFoQixFQUFDLG9CQUFELEVBQVM7bUJBQ1QsQ0FBQyxDQUFDLElBQUYsQ0FBTztjQUNMLElBQUEsRUFBTSxNQUREO2NBRUwsR0FBQSxFQUFLLEdBRkE7Y0FHTCxRQUFBLEVBQVUsTUFITDthQUFQLENBS0EsQ0FBQyxJQUxELENBS00sU0FBQyxjQUFELEVBQWlCLE1BQWpCLEVBQXlCLEtBQXpCO0FBQ0osa0JBQUE7Y0FBQSxRQUFBLEdBQVc7Z0JBQ1QsU0FBQSxFQUFXLE9BREY7Z0JBRVQsVUFBQSxFQUFZLFFBQVEsQ0FBQyxRQUZaO2dCQUdULFdBQUEsRUFBYSxHQUhKOztjQUtYLElBQXVFLGtGQUF2RTtnQkFBQSxRQUFRLENBQUMsbUJBQVQsR0FBK0IsZ0JBQWdCLENBQUMsb0JBQWhEOztjQUNBLEtBQUMsQ0FBQSxXQUFELENBQWEsUUFBYjtjQUNBLHFCQUFBLENBQXNCLGNBQXRCO3FCQUNBLFFBQUEsQ0FBUyxJQUFUO1lBVEksQ0FMTixDQWVBLENBQUMsSUFmRCxDQWVNLFNBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsS0FBaEI7cUJBQ0osUUFBQSxDQUFTLDhFQUFUO1lBREksQ0FmTjtVQUxTO1VBdUJYLFlBQUEsR0FBZSxTQUFDLEdBQUQsRUFBTSxRQUFOO0FBQ2IsZ0JBQUE7WUFBQSxJQUFHLEdBQUg7cUJBQ0UsUUFBQSxDQUFTLEdBQVQsRUFERjthQUFBLE1BQUE7Y0FHRSxrQkFBQSxHQUFxQixDQUFDLENBQUMsU0FBRixDQUFZLFFBQVo7Y0FDckIsa0JBQWtCLENBQUMsWUFBbkIsR0FBa0M7cUJBQ2xDLDBCQUFBLENBQTJCLEtBQUMsQ0FBQSxnQkFBNUIsRUFBOEMsa0JBQTlDLEVBQWtFLFFBQWxFLEVBTEY7O1VBRGE7VUFRZixZQUFBLEdBQWUsU0FBQyxHQUFELEVBQU0sUUFBTjtZQUNiLElBQUcsR0FBSDtxQkFDRSxRQUFBLENBQVMsR0FBVCxFQURGO2FBQUEsTUFBQTtjQUdFLFFBQVEsQ0FBQyxZQUFULEdBQXdCO3FCQUN4QiwwQkFBQSxDQUEyQixDQUFDLFdBQUQsQ0FBM0IsRUFBMEMsUUFBMUMsRUFBb0QsUUFBcEQsRUFKRjs7VUFEYTtVQU9mLGtCQUFBLEdBQXFCLFNBQUMsR0FBRCxFQUFNLFFBQU47WUFDbkIsSUFBRyxHQUFIO3FCQUNFLFFBQUEsQ0FBUyxHQUFULEVBREY7YUFBQSxNQUFBO2NBR0UsT0FBTyxRQUFRLENBQUM7cUJBQ2hCLDBCQUFBLENBQTJCLENBQUMsV0FBRCxDQUEzQixFQUEwQyxRQUExQyxFQUFvRCxRQUFwRCxFQUpGOztVQURtQjtVQU9yQixRQUFBLEdBQVcsU0FBQyxHQUFEO1lBQ1QsSUFBRyxHQUFIO3FCQUNFLFFBQUEsQ0FBUyxHQUFULEVBREY7YUFBQSxNQUFBO3FCQUdFLGdCQUFBLENBQWlCLENBQUMsQ0FBQyxTQUFGLENBQVksUUFBWixDQUFqQixFQUF3QyxRQUF4QyxFQUhGOztVQURTO1VBT1gsSUFBRyxRQUFRLENBQUMsWUFBWjtZQUNFLElBQUcsUUFBUSxDQUFDLFlBQVQsS0FBeUIsUUFBNUI7Y0FDRSxJQUFHLGlCQUFIO0FBRUUsdUJBQU8sWUFBQSxDQUFhLElBQWIsRUFBbUIsUUFBbkIsRUFGVDtlQUFBLE1BQUE7QUFLRSx1QkFBTyxRQUFBLENBQVMsU0FBQyxHQUFEO3lCQUFTLGtCQUFBLENBQW1CLEdBQW5CLEVBQXdCLFFBQXhCO2dCQUFULENBQVQsRUFMVDtlQURGO2FBQUEsTUFBQTtjQVFFLElBQUcsaUJBQUg7QUFFRSx1QkFBTyxRQUFBLENBQVMsU0FBQyxHQUFEO3lCQUFTLFlBQUEsQ0FBYSxHQUFiLEVBQWtCLENBQUMsU0FBQyxHQUFEOzJCQUFTLFlBQUEsQ0FBYSxHQUFiLEVBQWtCLFFBQWxCO2tCQUFULENBQUQsQ0FBbEI7Z0JBQVQsQ0FBVCxFQUZUO2VBQUEsTUFBQTtBQUtFLHVCQUFPLFFBQUEsQ0FBUyxTQUFDLEdBQUQ7eUJBQVMsa0JBQUEsQ0FBbUIsR0FBbkIsRUFBd0IsUUFBeEI7Z0JBQVQsQ0FBVCxFQUxUO2VBUkY7YUFERjtXQUFBLE1BQUE7WUFnQkUsSUFBRyxpQkFBSDtBQUVFLHFCQUFPLFlBQUEsQ0FBYSxJQUFiLEVBQW1CLFNBQUMsR0FBRDt1QkFBUyxZQUFBLENBQWEsR0FBYixFQUFrQixRQUFsQjtjQUFULENBQW5CLEVBRlQ7YUFBQSxNQUFBO0FBS0UscUJBQU8sUUFBQSxDQUFBLEVBTFQ7YUFoQkY7V0F0REY7O1FBOEVBLElBQUcsQ0FBSSxRQUFQO1VBQ0UsUUFBQSxDQUFTLDRFQUFUO0FBQ0EsaUJBRkY7O1FBS0EsWUFBQSxHQUFlO1VBQUUsTUFBQSxFQUFRLFFBQVY7O1FBRWYsSUFBRyxXQUFIO1VBQ0UsWUFBWSxDQUFDLFNBQWIsR0FBeUIsTUFBQSxHQUFPLFlBRGxDOztRQUVBLE9BQWdCLEtBQUMsQ0FBQSxXQUFXLENBQUMsZ0JBQWIsQ0FBOEIsWUFBOUIsQ0FBaEIsRUFBQyxvQkFBRCxFQUFTO2VBQ1QsQ0FBQyxDQUFDLElBQUYsQ0FBTztVQUNMLElBQUEsRUFBTSxNQUREO1VBRUwsR0FBQSxFQUFLLEdBRkE7VUFHTCxRQUFBLEVBQVUsTUFITDtTQUFQLENBS0EsQ0FBQyxJQUxELENBS00sU0FBQyxjQUFELEVBQWlCLE1BQWpCLEVBQXlCLEtBQXpCO0FBRUosY0FBQTtVQUFBLHFCQUFBLENBQXNCLGNBQXRCO1VBQ0EsSUFBRyxpQkFBSDtZQUNFLFFBQVEsQ0FBQyxZQUFULEdBQXdCLFNBRDFCOztVQUdBLFlBQUEsR0FBZSxDQUFDLENBQUMsS0FBRixDQUFRLEVBQVIsRUFBWSxRQUFaLEVBQXNCO1lBQUUsR0FBQSxFQUFLLFdBQVA7V0FBdEI7VUFDZixjQUFBLEdBQWlCLFNBQUE7bUJBQUcsZ0JBQUEsQ0FBaUIsWUFBakIsRUFBK0IsUUFBL0I7VUFBSDtpQkFHakIsMEJBQUEsQ0FBMkIsQ0FBQyxXQUFELENBQTNCLEVBQTBDLFFBQTFDLEVBQW9ELFNBQUMsR0FBRDtZQUNsRCxJQUFHLEdBQUg7cUJBQ0UsUUFBQSxDQUFTLEdBQVQsRUFERjthQUFBLE1BRUssSUFBRyxpQkFBSDtjQUNILFFBQVEsQ0FBQyxZQUFULEdBQXdCO3FCQUN4QiwwQkFBQSxDQUEyQixLQUFDLENBQUEsZ0JBQTVCLEVBQThDLFFBQTlDLEVBQXdELFNBQUMsR0FBRDtnQkFDdEQsSUFBRyxHQUFIO3lCQUNFLFFBQUEsQ0FBUyxHQUFULEVBREY7aUJBQUEsTUFBQTt5QkFHRSxjQUFBLENBQUEsRUFIRjs7Y0FEc0QsQ0FBeEQsRUFGRzthQUFBLE1BQUE7cUJBUUgsY0FBQSxDQUFBLEVBUkc7O1VBSDZDLENBQXBEO1FBVkksQ0FMTixDQTRCQSxDQUFDLElBNUJELENBNEJNLFNBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsS0FBaEI7aUJBQ0osUUFBQSxDQUFTLDhFQUFUO1FBREksQ0E1Qk47TUF2SnVCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtJQTBMekIsSUFBRyxlQUFBLElBQW9CLGVBQWUsQ0FBQyxHQUF2QztNQUVFLENBQUMsQ0FBQyxJQUFGLENBQU87UUFDTCxJQUFBLEVBQU0sS0FERDtRQUVMLEdBQUEsRUFBSyxlQUFlLENBQUMsR0FGaEI7UUFHTCxRQUFBLEVBQVUsTUFITDtRQUlMLFNBQUEsRUFDRTtVQUFBLGVBQUEsRUFBaUIsSUFBakI7U0FMRztPQUFQLENBT0EsQ0FBQyxJQVBELENBT00sQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLElBQUQsRUFBTyxNQUFQLEVBQWUsS0FBZjtBQUNKLGNBQUE7VUFBQSxRQUFBLEdBQVc7WUFDVCxTQUFBLEVBQVcsTUFERjtZQUVULFdBQUEsRUFBYSxlQUFlLENBQUMsR0FGcEI7WUFHVCxVQUFBLEVBQVksZUFBZSxDQUFDLE1BSG5COztVQUtYLElBQTJELDBEQUEzRDtZQUFBLFFBQVEsQ0FBQyxtQkFBVCxHQUErQixJQUFJLENBQUMsb0JBQXBDOztVQUNBLEtBQUMsQ0FBQSxXQUFELENBQWEsUUFBYjtpQkFDQSxzQkFBQSxDQUF1QixlQUFlLENBQUMsR0FBdkMsRUFBNEMsZUFBZSxDQUFDLE1BQTVELEVBQW9FLGVBQWUsQ0FBQyxXQUFwRixFQUFpRyxJQUFqRztRQVJJO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQVBOLENBZ0JBLENBQUMsSUFoQkQsQ0FnQk0sU0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixLQUFoQjtlQUNKLFFBQUEsQ0FBUyw0RUFBVDtNQURJLENBaEJOO0FBbUJBLGFBckJGOztXQXVCQSxRQUFBLENBQVMsb0NBQVQ7RUExT1M7O3lCQTRPWCxrQkFBQSxHQUFvQixTQUFDLFFBQUQ7QUFDbEIsUUFBQTtJQUFBLE1BQUEsR0FBWSxJQUFDLENBQUEsZUFBSixHQUNQLElBQUMsQ0FBQSxlQURNLEdBRUQsSUFBQyxDQUFBLFVBQUosR0FDSDtNQUFBLEdBQUEsRUFBSyxJQUFDLENBQUEsVUFBVSxDQUFDLEdBQWpCO01BQ0EsTUFBQSxFQUFRLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFEcEI7S0FERyxHQUlIO1dBQ0YsSUFBQyxDQUFBLFlBQUQsQ0FBYyxNQUFkO0VBUmtCOzs7O0dBN1pLOztBQXVhM0IsTUFBTSxDQUFDLE9BQVAsR0FBaUI7Ozs7QUN2YmpCLElBQUEsMEhBQUE7RUFBQTs7O0FBQUEsTUFBdUIsS0FBSyxDQUFDLEdBQTdCLEVBQUMsYUFBRCxFQUFNLGlCQUFOLEVBQWE7O0FBQ2IsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFFTCxpQkFBQSxHQUFvQixDQUFDLE9BQUEsQ0FBUSxzQkFBUixDQUFELENBQWdDLENBQUM7O0FBQ3JELG1CQUFBLEdBQXNCLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFDdkQsZ0JBQUEsR0FBbUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLG1DQUFSLENBQXBCOztBQUNuQixnQkFBQSxHQUFtQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsbUNBQVIsQ0FBcEI7O0FBRWI7OztFQUVTLDJCQUFDLE9BQUQsRUFBZ0IsTUFBaEI7SUFBQyxJQUFDLENBQUEsNEJBQUQsVUFBVztJQUFJLElBQUMsQ0FBQSxTQUFEO0lBQzNCLG1EQUNFO01BQUEsSUFBQSxFQUFNLGlCQUFpQixDQUFDLElBQXhCO01BQ0EsV0FBQSxFQUFhLElBQUMsQ0FBQSxPQUFPLENBQUMsV0FBVCxJQUF3QixDQUFDLEVBQUEsQ0FBRyxzQkFBSCxDQUFELENBRHJDO01BRUEsWUFBQSxFQUNFO1FBQUEsSUFBQSxFQUFNLElBQU47UUFDQSxNQUFBLEVBQVEsS0FEUjtRQUVBLENBQUEsTUFBQSxDQUFBLEVBQVEsSUFGUjtRQUdBLElBQUEsRUFBTSxJQUhOO1FBSUEsSUFBQSxFQUFNLElBSk47UUFLQSxNQUFBLEVBQVEsS0FMUjtRQU1BLE1BQUEsRUFBUSxLQU5SO1FBT0EsS0FBQSxFQUFPLEtBUFA7T0FIRjtLQURGO0VBRFc7O0VBY2IsaUJBQUMsQ0FBQSxJQUFELEdBQU87OzhCQUVQLGtCQUFBLEdBQW9CLFNBQUMsVUFBRCxFQUFhLGdCQUFiO0lBQ2xCLElBQUcsVUFBQSxLQUFjLE1BQWpCO2FBQ0UsaUJBREY7S0FBQSxNQUVLLElBQUcsQ0FBQyxVQUFBLEtBQWMsTUFBZixDQUFBLElBQTBCLENBQUMsVUFBQSxLQUFjLFFBQWYsQ0FBN0I7YUFDSCxpQkFERztLQUFBLE1BQUE7YUFHSCxpQkFIRzs7RUFIYTs7OEJBUXBCLElBQUEsR0FBTSxTQUFDLFFBQUQsRUFBVyxRQUFYLEdBQUE7OzhCQUdOLElBQUEsR0FBTSxTQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFFBQXBCOzRDQUVKLFNBQVU7RUFGTjs7OEJBSU4sSUFBQSxHQUFNLFNBQUMsUUFBRCxFQUFXLFFBQVg7QUFDSixRQUFBO0lBQUEsTUFBQSxHQUFTLElBQUksVUFBSixDQUFBO0lBQ1QsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsU0FBQyxNQUFEO2FBQ2QsUUFBQSxDQUFTLElBQVQsRUFBZSxtQkFBbUIsQ0FBQywyQkFBcEIsQ0FBZ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUE5RCxDQUFmO0lBRGM7V0FFaEIsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUF4QztFQUpJOzs4QkFNTixZQUFBLEdBQWMsU0FBQTtXQUVaO0VBRlk7Ozs7R0F2Q2dCOztBQTJDaEMsTUFBTSxDQUFDLE9BQVAsR0FBaUI7Ozs7QUNuRGpCLElBQUEsK0VBQUE7RUFBQTs7OztBQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBRUwsaUJBQUEsR0FBb0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUNyRCxtQkFBQSxHQUFzQixDQUFDLE9BQUEsQ0FBUSxzQkFBUixDQUFELENBQWdDLENBQUM7O0FBQ3ZELGFBQUEsR0FBZ0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUUzQzs7O0VBRVMsOEJBQUMsT0FBRCxFQUFnQixNQUFoQjtJQUFDLElBQUMsQ0FBQSw0QkFBRCxVQUFXO0lBQUksSUFBQyxDQUFBLFNBQUQ7SUFDM0Isc0RBQ0U7TUFBQSxJQUFBLEVBQU0sb0JBQW9CLENBQUMsSUFBM0I7TUFDQSxXQUFBLEVBQWEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxXQUFULElBQXdCLENBQUMsRUFBQSxDQUFHLHlCQUFILENBQUQsQ0FEckM7TUFFQSxjQUFBLEVBQWdCLElBQUMsQ0FBQSxPQUFPLENBQUMsY0FGekI7TUFHQSxZQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sSUFBTjtRQUNBLE1BQUEsRUFBUSxJQURSO1FBRUEsQ0FBQSxNQUFBLENBQUEsRUFBUSxJQUZSO1FBR0EsSUFBQSxFQUFNLElBSE47UUFJQSxJQUFBLEVBQU0sSUFKTjtRQUtBLE1BQUEsRUFBUSxJQUxSO1FBTUEsTUFBQSxFQUFRLElBTlI7UUFPQSxLQUFBLEVBQU8sS0FQUDtPQUpGO0tBREY7RUFEVzs7RUFlYixvQkFBQyxDQUFBLElBQUQsR0FBTzs7RUFDUCxvQkFBQyxDQUFBLFNBQUQsR0FBWSxTQUFBO0FBQ1YsUUFBQTtXQUFBLE1BQUE7QUFBUztRQUNQLElBQUEsR0FBTztRQUNQLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBcEIsQ0FBNEIsSUFBNUIsRUFBa0MsSUFBbEM7UUFDQSxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQXBCLENBQStCLElBQS9CO2VBQ0EsS0FKTztPQUFBLGFBQUE7ZUFNUCxNQU5POzs7RUFEQzs7aUNBU1osSUFBQSxHQUFNLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEI7QUFDSixRQUFBO0FBQUE7TUFDRSxPQUFBLEdBQVUsSUFBQyxDQUFBLE9BQUQsQ0FBUyxRQUFRLENBQUMsUUFBbEI7TUFDVixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQXBCLENBQTRCLE9BQTVCLG9EQUFzQyxPQUFPLENBQUMsNEJBQVIsSUFBK0IsT0FBckU7OENBQ0EsU0FBVSxlQUhaO0tBQUEsYUFBQTtNQUlNO2FBQ0osUUFBQSxDQUFTLGtCQUFBLEdBQW1CLENBQUMsQ0FBQyxPQUE5QixFQUxGOztFQURJOztpQ0FRTixJQUFBLEdBQU0sU0FBQyxRQUFELEVBQVcsUUFBWDtBQUNKLFFBQUE7QUFBQTtNQUNFLE9BQUEsR0FBVSxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQXBCLENBQTRCLElBQUMsQ0FBQSxPQUFELENBQVMsUUFBUSxDQUFDLFFBQWxCLENBQTVCO2FBQ1YsUUFBQSxDQUFTLElBQVQsRUFBZSxtQkFBbUIsQ0FBQywyQkFBcEIsQ0FBZ0QsT0FBaEQsQ0FBZixFQUZGO0tBQUEsYUFBQTtNQUdNO2FBQ0osUUFBQSxDQUFTLGtCQUFBLEdBQW1CLFFBQVEsQ0FBQyxJQUE1QixHQUFpQyxLQUFqQyxHQUFzQyxDQUFDLENBQUMsT0FBakQsRUFKRjs7RUFESTs7aUNBT04sSUFBQSxHQUFNLFNBQUMsUUFBRCxFQUFXLFFBQVg7QUFDSixRQUFBO0lBQUEsSUFBQSxHQUFPO0lBQ1AsTUFBQSxHQUFTLElBQUMsQ0FBQSxPQUFELENBQVMscUJBQUMsUUFBUSxDQUFFLElBQVYsQ0FBQSxXQUFBLElBQW9CLEVBQXJCLENBQXdCLENBQUMsSUFBekIsQ0FBOEIsR0FBOUIsQ0FBVDtBQUNUO0FBQUEsU0FBQSxVQUFBOztNQUNFLElBQUcsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFYLEVBQWMsTUFBTSxDQUFDLE1BQXJCLENBQUEsS0FBZ0MsTUFBbkM7UUFDRSxPQUEyQixHQUFHLENBQUMsTUFBSixDQUFXLE1BQU0sQ0FBQyxNQUFsQixDQUF5QixDQUFDLEtBQTFCLENBQWdDLEdBQWhDLENBQTNCLEVBQUMsa0JBQUQsRUFBVztRQUNYLElBQUEsR0FBTyxHQUFHLENBQUMsTUFBSixDQUFXLE1BQU0sQ0FBQyxNQUFsQjtRQUNQLElBQUcsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQWxCLENBQUg7VUFDRSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksYUFBSixDQUNSO1lBQUEsSUFBQSxFQUFNLElBQU47WUFDQSxJQUFBLEVBQVMsU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBdEIsR0FBNkIsYUFBYSxDQUFDLE1BQTNDLEdBQXVELGFBQWEsQ0FBQyxJQUQzRTtZQUVBLE1BQUEsRUFBUSxRQUZSO1lBR0EsUUFBQSxFQUFVLElBSFY7V0FEUSxDQUFWLEVBREY7U0FIRjs7QUFERjtXQVVBLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZjtFQWJJOztpQ0FlTixNQUFBLEdBQVEsU0FBQyxRQUFELEVBQVcsUUFBWDtBQUNOO01BQ0UsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFwQixDQUErQixJQUFDLENBQUEsT0FBRCxDQUFTLFFBQVEsQ0FBQyxRQUFsQixDQUEvQjs4Q0FDQSxTQUFVLGVBRlo7S0FBQSxhQUFBOzhDQUlFLFNBQVUsNkJBSlo7O0VBRE07O2lDQU9SLE1BQUEsR0FBUSxTQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLFFBQXBCO0FBQ04sUUFBQTtBQUFBO01BQ0UsT0FBQSxHQUFVLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBcEIsQ0FBNEIsSUFBQyxDQUFBLE9BQUQsQ0FBUyxRQUFRLENBQUMsUUFBbEIsQ0FBNUI7TUFDVixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQXBCLENBQTRCLElBQUMsQ0FBQSxPQUFELENBQVMsYUFBYSxDQUFDLGFBQWQsQ0FBNEIsT0FBNUIsQ0FBVCxDQUE1QixFQUEyRSxPQUEzRTtNQUNBLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBcEIsQ0FBK0IsSUFBQyxDQUFBLE9BQUQsQ0FBUyxRQUFRLENBQUMsUUFBbEIsQ0FBL0I7TUFDQSxRQUFRLENBQUMsTUFBVCxDQUFnQixPQUFoQjthQUNBLFFBQUEsQ0FBUyxJQUFULEVBQWUsUUFBZixFQUxGO0tBQUEsYUFBQTs4Q0FPRSxTQUFVLDZCQVBaOztFQURNOztpQ0FVUixZQUFBLEdBQWMsU0FBQTtXQUFHO0VBQUg7O2lDQUVkLFNBQUEsR0FBVyxTQUFDLGVBQUQsRUFBa0IsUUFBbEI7QUFDVCxRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO01BQUEsSUFBQSxFQUFNLGVBQU47TUFDQSxJQUFBLEVBQU0sYUFBYSxDQUFDLElBRHBCO01BRUEsTUFBQSxFQUFRLElBRlI7TUFHQSxRQUFBLEVBQVUsSUFIVjtLQURTO1dBS1gsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFOLEVBQWdCLFNBQUMsR0FBRCxFQUFNLE9BQU47YUFDZCxRQUFBLENBQVMsR0FBVCxFQUFjLE9BQWQsRUFBdUIsUUFBdkI7SUFEYyxDQUFoQjtFQU5TOztpQ0FTWCxrQkFBQSxHQUFvQixTQUFDLFFBQUQ7V0FDbEIsUUFBUSxDQUFDO0VBRFM7O2lDQUdwQixPQUFBLEdBQVMsU0FBQyxJQUFEOztNQUFDLE9BQU87O1dBQ2YsT0FBQSxHQUFPLENBQUMsSUFBSSxDQUFDLE9BQUwsQ0FBYSxLQUFiLEVBQW9CLEdBQXBCLENBQUQ7RUFEQTs7OztHQXhGd0I7O0FBMkZuQyxNQUFNLENBQUMsT0FBUCxHQUFpQjs7OztBQzdGakIsSUFBQTs7QUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBRUQ7RUFFUywwQkFBQyxlQUFELEVBQW1CLFlBQW5CO0lBQUMsSUFBQyxDQUFBLGtCQUFEO0lBQWtCLElBQUMsQ0FBQSxlQUFEO0VBQW5COzs2QkFFYixXQUFBLEdBQWEsU0FBQyxPQUFELEVBQVUsUUFBVjtBQUNYLFFBQUE7SUFBQSxJQUFBLEdBQVUsUUFBQSxJQUFhLElBQUMsQ0FBQSxZQUFqQixHQUFtQyxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUMsQ0FBQSxZQUFkLEVBQTRCLE9BQTVCLENBQW5DLEdBQUE7SUFDUCxNQUFBLEdBQ0U7TUFBQSxXQUFBLEVBQWEsS0FBYjtNQUNBLFFBQUEsRUFBVSxrQkFEVjtNQUVBLFdBQUEsRUFBYSxJQUFJLENBQUMsU0FBTCxDQUFlLE9BQWYsQ0FGYjtNQUdBLFVBQUEsRUFBWSxJQUFBLElBQVMsSUFBSSxDQUFDLE1BSDFCO01BSUEsUUFBQSxFQUFVLElBQUEsSUFBUyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FKbkI7O0lBUUYsSUFBRyxRQUFBLElBQWEseUJBQWIsSUFBa0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFoQixHQUF5QixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQWpGO01BQ0UsTUFBTSxDQUFDLFdBQVAsR0FBcUI7TUFDckIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsTUFBTSxDQUFDO01BQzVCLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLDhCQUhwQjtLQUFBLE1BQUE7TUFLRSxNQUFNLENBQUMsV0FBUCxHQUFxQixNQUFNLENBQUMsWUFMOUI7O1dBT0E7RUFsQlc7OzZCQW9CYixhQUFBLEdBQWUsU0FBQyxPQUFEO1dBQ2IsSUFBQyxDQUFBLFlBQUQsR0FBZ0I7RUFESDs7NkJBR2YsV0FBQSxHQUFhLFNBQUMsSUFBRCxFQUFPLElBQVA7QUFDWCxRQUFBO0FBQUE7TUFDRSxJQUFBLEdBQU87UUFDTCxJQUFBLEVBQTBCLE9BQU8sSUFBQyxDQUFBLGVBQVIsS0FBMkIsVUFBL0MsR0FBQSxJQUFDLENBQUEsZUFBRCxHQUFBLE1BREQ7UUFFTCxVQUFBLEVBQVksS0FGUDs7TUFLUCxXQUFBLEdBQWMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBWDtNQUNkLFdBQUEsR0FBYyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUFYO01BQ2QsSUFBQSxHQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsV0FBVixFQUF1QixXQUF2QixFQUFvQyxJQUFwQztBQUNQLGFBQU8sS0FUVDtLQUFBLGFBQUE7QUFXRSxhQUFPLEtBWFQ7O0VBRFc7Ozs7OztBQWNmLE1BQU0sQ0FBQyxPQUFQLEdBQWlCOzs7O0FDL0NqQixJQUFBLHFEQUFBO0VBQUE7OztBQUFBLGlCQUFBLEdBQW9CLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFDckQsYUFBQSxHQUFnQixPQUFBLENBQVEsMEJBQVI7O0FBRVY7OztFQUVKLG1CQUFDLENBQUEsSUFBRCxHQUFPOztFQUVNLDZCQUFDLE9BQUQsRUFBZ0IsTUFBaEI7SUFBQyxJQUFDLENBQUEsNEJBQUQsVUFBVztJQUFJLElBQUMsQ0FBQSxTQUFEO0lBQzNCLHFEQUNFO01BQUEsWUFBQSxFQUNFO1FBQUEsSUFBQSxFQUFNLEtBQU47UUFDQSxNQUFBLEVBQVEsS0FEUjtRQUVBLENBQUEsTUFBQSxDQUFBLEVBQVcsYUFBQSxDQUFjLGlDQUFkLENBQUgsR0FBd0QsTUFBeEQsR0FBb0UsS0FGNUU7UUFHQSxJQUFBLEVBQU0sS0FITjtRQUlBLElBQUEsRUFBTSxLQUpOO1FBS0EsTUFBQSxFQUFRLEtBTFI7UUFNQSxNQUFBLEVBQVEsS0FOUjtRQU9BLEtBQUEsRUFBTyxLQVBQO09BREY7S0FERjtFQURXOztnQ0FZYixZQUFBLEdBQWMsU0FBQTtXQUFHO0VBQUg7O2dDQUVkLFlBQUEsR0FBYyxTQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFFBQXBCO0lBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFkLENBQTBCO01BQ3hCLE1BQUEsRUFBUSxtQkFEZ0I7TUFFeEIsU0FBQSxFQUFXLFFBQVEsQ0FBQyxTQUZJO01BR3hCLFFBQUEsRUFBVSxRQUFRLENBQUMsUUFISztNQUl4QixPQUFBLEVBQVMsT0FKZTtLQUExQixFQUtHLEdBTEg7NENBTUEsU0FBVTtFQVBFOzs7O0dBbEJrQjs7QUEyQmxDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCOzs7O0FDOUJqQixJQUFBLDZGQUFBO0VBQUE7O0FBQUMsTUFBTyxLQUFLLENBQUM7O0FBRWQsUUFBQSxHQUFXLE9BQUEsQ0FBUSxvQkFBUjs7QUFFTDtFQUNTLG1CQUFDLE9BQUQ7SUFDVixJQUFDLENBQUEsa0JBQUEsT0FBRixFQUFXLElBQUMsQ0FBQSxtQkFBQTtFQUREOzs7Ozs7QUFHVDtFQUNTLHVCQUFDLE9BQUQ7QUFDWCxRQUFBO0lBQUMsSUFBQyxDQUFBLGVBQUEsSUFBRixFQUFRLElBQUMsQ0FBQSxlQUFBLElBQVQsRUFBZSxJQUFDLENBQUEsc0JBQUEsV0FBaEIsRUFBNkIsSUFBQyxDQUFBLGtCQUFBLE9BQTlCLEVBQXVDLElBQUMsQ0FBQSxjQUFBLEdBQXhDLEVBQTZDLElBQUMsQ0FBQSxvREFBVyxJQUF6RCxFQUErRCxJQUFDLENBQUEsa0RBQVMsSUFBekUsRUFBK0UsSUFBQyxDQUFBLDhEQUFhLEVBQTdGLEVBQWlHLElBQUMsQ0FBQSx1QkFBQSxZQUFsRyxFQUFnSCxJQUFDLENBQUEsMEJBQUEsZUFBakgsRUFBa0ksSUFBQyxDQUFBLGlDQUFBLHNCQUFuSSxFQUEySixJQUFDLENBQUEsbUJBQUE7SUFDNUosSUFBQyxDQUFBLGVBQUQsQ0FBQTtFQUZXOztFQUliLGFBQUMsQ0FBQSxNQUFELEdBQVM7O0VBQ1QsYUFBQyxDQUFBLElBQUQsR0FBTzs7RUFDUCxhQUFDLENBQUEsS0FBRCxHQUFROztFQUVSLGFBQUMsQ0FBQSxTQUFELEdBQVk7O0VBRVosYUFBQyxDQUFBLDBCQUFELEdBQTZCLFNBQUMsS0FBRDtXQUUzQixLQUFBLElBQVMsSUFBQyxDQUFBO0VBRmlCOztFQUk3QixhQUFDLENBQUEsYUFBRCxHQUFnQixTQUFDLElBQUQsRUFBTyxnQkFBUCxFQUF5QixxQkFBekI7QUFDZCxRQUFBO0lBQUEsSUFBRyxxQkFBQSxJQUEwQixDQUFDLElBQUksQ0FBQyxPQUFMLENBQWEsR0FBYixDQUE5QjtBQUNFLGFBQU8sS0FEVDs7SUFFQSxTQUFBLEdBQVksYUFBYSxDQUFDLFNBQWQsSUFBMkI7SUFDdkMsSUFBRyxTQUFIO2FBQ0UsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFkLEVBQW9CLFNBQXBCLEVBREY7S0FBQSxNQUFBO2FBR0UsS0FIRjs7RUFKYzs7RUFTaEIsYUFBQyxDQUFBLFlBQUQsR0FBZSxTQUFDLElBQUQsRUFBTyxTQUFQO0lBRWIsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQVksQ0FBWixFQUFlLElBQUksQ0FBQyxXQUFMLENBQWlCLEdBQWpCLENBQWYsQ0FBQSxJQUF5QztXQUNoRCxJQUFBLEdBQU8sR0FBUCxHQUFhO0VBSEE7OzBCQUtmLElBQUEsR0FBTSxTQUFBO0FBQ0osUUFBQTtJQUFBLEtBQUEsR0FBUTtJQUNSLE1BQUEsR0FBUyxJQUFDLENBQUE7QUFDVixXQUFNLE1BQUEsS0FBWSxJQUFsQjtNQUNFLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZDtNQUNBLE1BQUEsR0FBUyxNQUFNLENBQUM7SUFGbEI7V0FHQTtFQU5JOzswQkFRTixNQUFBLEdBQVEsU0FBQyxPQUFEO0lBQ04sSUFBQyxDQUFBLElBQUQsR0FBUTtXQUNSLElBQUMsQ0FBQSxlQUFELENBQUE7RUFGTTs7MEJBSVIsZUFBQSxHQUFpQixTQUFBO0FBQ2YsUUFBQTtJQUFBLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBQyxDQUFBO0lBQ2IsSUFBRywyREFBQSxJQUFtQixpQ0FBbkIsSUFBZ0QsSUFBQyxDQUFBLElBQUQsS0FBUyxhQUFhLENBQUMsSUFBMUU7TUFDRSxNQUFBLEdBQVMsYUFBYSxDQUFDLFNBQVMsQ0FBQztNQUNqQyxJQUFzRCxJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU4sQ0FBYSxDQUFDLE1BQUQsR0FBUSxDQUFyQixDQUFBLEtBQTJCLENBQUEsR0FBQSxHQUFJLGFBQWEsQ0FBQyxTQUFsQixDQUFqRjtRQUFBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLElBQUksQ0FBQyxNQUFOLENBQWEsQ0FBYixFQUFnQixJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU4sR0FBZSxDQUFDLE1BQUEsR0FBTyxDQUFSLENBQS9CLEVBQVI7O2FBQ0EsSUFBQyxDQUFBLFFBQUQsR0FBWSxhQUFhLENBQUMsYUFBZCxDQUE0QixJQUFDLENBQUEsSUFBN0IsRUFBbUMsSUFBbkMsRUFBeUMsSUFBekMsRUFIZDs7RUFGZTs7Ozs7O0FBUWI7RUFDUyw2QkFBQTtJQUNYLElBQUMsQ0FBQSxnQkFBRCxHQUFvQjtFQURUOztnQ0FJYixtQkFBQSxHQUFxQixTQUFDLGdCQUFEO0FBQ25CLFFBQUE7QUFBQTtTQUFBLHVCQUFBO21CQUNFLElBQUMsQ0FBQSxnQkFBaUIsQ0FBQSxHQUFBLENBQWxCLEdBQXlCLGdCQUFpQixDQUFBLEdBQUE7QUFENUM7O0VBRG1COztnQ0FLckIsMkJBQUEsR0FBNkIsU0FBQyxPQUFEO1dBQzNCLElBQUksWUFBSixDQUFrQixJQUFDLENBQUEsY0FBRCxDQUFnQixPQUFoQixDQUFsQixFQUE2QyxJQUFDLENBQUEsc0JBQUQsQ0FBd0IsT0FBeEIsQ0FBN0M7RUFEMkI7O2dDQVE3QixjQUFBLEdBQWdCLFNBQUMsT0FBRDtBQUNkLFFBQUE7SUFBQSxxQkFBQSxHQUF3QixJQUFDLENBQUEsYUFBRCxDQUFlLE9BQWY7QUFDeEIsU0FBQSw0QkFBQTs7UUFDRSxxQkFBc0IsQ0FBQSxHQUFBLElBQVEsSUFBQyxDQUFBLGdCQUFpQixDQUFBLEdBQUE7O0FBRGxEO0FBRUEsV0FBTztFQUpPOztnQ0FNaEIsc0JBQUEsR0FBd0IsU0FBQyxPQUFEO0FBQ3RCLFFBQUE7SUFBQSxJQUFjLGVBQWQ7QUFBQSxhQUFBOztJQUNBLE1BQUEsR0FBUztNQUFFLFlBQUEsRUFBYyxLQUFoQjtNQUF1QixjQUFBLEVBQWdCLEtBQXZDOztJQUNULElBQUcsUUFBQSxDQUFTLE9BQVQsQ0FBSDtBQUNFO1FBQUksT0FBQSxHQUFVLElBQUksQ0FBQyxLQUFMLENBQVcsT0FBWCxFQUFkO09BQUEsaUJBREY7O0lBTUEsSUFBRyxPQUFPLENBQUMsUUFBWDtBQUNFLGFBQU8sT0FEVDs7SUFFQSxJQUFHLDRCQUFBLElBQXVCLHlCQUExQjtNQUNFLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLEtBRHhCO0tBQUEsTUFBQTtNQUdFLE1BQU0sQ0FBQyxjQUFQLEdBQXdCLEtBSDFCOztXQUlBO0VBZnNCOztnQ0FrQnhCLGFBQUEsR0FBZSxTQUFDLE9BQUQ7SUFDYixJQUFHLFFBQUEsQ0FBUyxPQUFULENBQUg7QUFDRTtRQUFJLE9BQUEsR0FBVSxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQVgsRUFBZDtPQUFBLGlCQURGOztJQUVBLElBQUcsdUJBQUg7QUFDRSxhQUFPLFFBRFQ7S0FBQSxNQUFBO0FBR0UsYUFBTztRQUFDLFNBQUEsT0FBRDtRQUhUOztFQUhhOzs7Ozs7QUFRWDtFQUVKLFlBQUMsQ0FBQSxlQUFELEdBQWtCOztFQUVMLHNCQUFDLEVBQUQsRUFBVSxjQUFWO0lBQUMsSUFBQyxDQUFBLGlCQUFELEtBQUs7SUFBSSxJQUFDLENBQUEsaUJBQUQ7RUFBVjs7eUJBR2IsVUFBQSxHQUFZLFNBQUE7SUFDVixJQUFHLFlBQVksQ0FBQyxlQUFoQjthQUFxQyxJQUFDLENBQUEsRUFBdEM7S0FBQSxNQUFBO2FBQTZDLElBQUMsQ0FBQSxDQUFDLENBQUMsUUFBaEQ7O0VBRFU7O3lCQUVaLGdCQUFBLEdBQWtCLFNBQUE7V0FDaEIsSUFBSSxDQUFDLFNBQUwsQ0FBa0IsWUFBWSxDQUFDLGVBQWhCLEdBQXFDLElBQUMsQ0FBQSxDQUF0QyxHQUE2QyxJQUFDLENBQUEsQ0FBQyxDQUFDLE9BQS9EO0VBRGdCOzt5QkFJbEIsZ0JBQUEsR0FBa0IsU0FBQTtXQUNoQixJQUFDLENBQUEsQ0FBQyxDQUFDO0VBRGE7O3lCQUdsQixrQkFBQSxHQUFvQixTQUFBO0FBQ2xCLFFBQUE7V0FBQSxDQUFDLFlBQVksQ0FBQyxlQUFiLCtDQUFpRCxDQUFFLHNCQUFwRCxDQUFBLGdEQUFvRixDQUFFO0VBRHBFOzt5QkFHcEIsS0FBQSxHQUFPLFNBQUE7V0FBRyxJQUFJLFlBQUosQ0FBa0IsQ0FBQyxDQUFDLFNBQUYsQ0FBWSxJQUFDLENBQUEsQ0FBYixDQUFsQixFQUFvQyxDQUFDLENBQUMsU0FBRixDQUFZLElBQUMsQ0FBQSxjQUFiLENBQXBDO0VBQUg7O3lCQUVQLE9BQUEsR0FBUyxTQUFDLElBQUQ7V0FBVSxJQUFDLENBQUEsQ0FBQyxDQUFDLE9BQUgsR0FBYTtFQUF2Qjs7eUJBQ1QsT0FBQSxHQUFTLFNBQUE7SUFBRyxJQUFHLElBQUMsQ0FBQSxDQUFDLENBQUMsT0FBSCxLQUFjLElBQWpCO2FBQTJCLEdBQTNCO0tBQUEsTUFBbUMsSUFBRyxRQUFBLENBQVMsSUFBQyxDQUFBLENBQUMsQ0FBQyxPQUFaLENBQUg7YUFBNkIsSUFBQyxDQUFBLENBQUMsQ0FBQyxRQUFoQztLQUFBLE1BQUE7YUFBNkMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFDLENBQUEsQ0FBQyxDQUFDLE9BQWxCLEVBQTdDOztFQUF0Qzs7eUJBRVQsV0FBQSxHQUFhLFNBQUMsUUFBRDtBQUFjLFFBQUE7QUFBQTtTQUFBLGVBQUE7bUJBQUEsSUFBQyxDQUFBLENBQUUsQ0FBQSxHQUFBLENBQUgsR0FBVSxRQUFTLENBQUEsR0FBQTtBQUFuQjs7RUFBZDs7eUJBQ2IsR0FBQSxHQUFLLFNBQUMsSUFBRDtXQUFVLElBQUMsQ0FBQSxDQUFFLENBQUEsSUFBQTtFQUFiOzt5QkFDTCxHQUFBLEdBQUssU0FBQyxJQUFELEVBQU8sS0FBUDtXQUFpQixJQUFDLENBQUEsQ0FBRSxDQUFBLElBQUEsQ0FBSCxHQUFXO0VBQTVCOzt5QkFDTCxNQUFBLEdBQVEsU0FBQyxJQUFEO1dBQVUsT0FBTyxJQUFDLENBQUEsQ0FBRSxDQUFBLElBQUE7RUFBcEI7O3lCQUVSLGlCQUFBLEdBQW1CLFNBQUE7QUFFakIsUUFBQTtJQUFBLE1BQUEsR0FBUztJQUNULElBQXlDLDJCQUF6QztNQUFBLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLElBQUMsQ0FBQSxDQUFDLENBQUMsYUFBekI7O0lBQ0EsSUFBeUMsMkJBQXpDO01BQUEsTUFBTSxDQUFDLFlBQVAsR0FBc0IsSUFBQyxDQUFBLENBQUMsQ0FBQyxhQUF6Qjs7SUFDQSxJQUFpRCwrQkFBakQ7TUFBQSxNQUFNLENBQUMsZ0JBQVAsR0FBMEIsSUFBQyxDQUFBLENBQUMsQ0FBQyxpQkFBN0I7O0lBQ0EsSUFBcUMseUJBQXJDO01BQUEsTUFBTSxDQUFDLFVBQVAsR0FBb0IsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUF2Qjs7V0FDQTtFQVBpQjs7eUJBU25CLGNBQUEsR0FBZ0IsU0FBQyxFQUFEO0FBQ2QsUUFBQTtJQUFBLFFBQUEsR0FBVztBQUNYO0FBQUEsU0FBQSxVQUFBOzs7TUFDRSxJQUFHLEdBQUEsS0FBUyxTQUFaO1FBQ0UsUUFBUyxDQUFBLEdBQUEsQ0FBVCxHQUFnQixNQURsQjs7QUFERjtXQUdBLEVBQUUsQ0FBQyxXQUFILENBQWUsUUFBZjtFQUxjOzs7Ozs7QUFPWjtFQUVTLDJCQUFDLE9BQUQ7SUFDVixJQUFDLENBQUEsZUFBQSxJQUFGLEVBQVEsSUFBQyxDQUFBLHNCQUFBLFdBQVQsRUFBc0IsSUFBQyxDQUFBLHlCQUFBLGNBQXZCLEVBQXVDLElBQUMsQ0FBQSx1QkFBQTtFQUQ3Qjs7RUFHYixpQkFBQyxDQUFBLFNBQUQsR0FBWSxTQUFBO1dBQUc7RUFBSDs7OEJBRVosR0FBQSxHQUFLLFNBQUMsVUFBRDtXQUNILENBQUMsQ0FBQyxJQUFDLENBQUEsWUFBYSxDQUFBLFVBQUE7RUFEYjs7OEJBR0wsT0FBQSxHQUFTLFNBQUMsVUFBRDtXQUNQLElBQUMsQ0FBQSxZQUFhLENBQUEsVUFBQSxDQUFkLEtBQTZCO0VBRHRCOzs4QkFHVCx1QkFBQSxHQUF5QixTQUFBO1dBQ3ZCO0VBRHVCOzs4QkFHekIsVUFBQSxHQUFZLFNBQUMsUUFBRDtJQUNWLElBQUcsUUFBSDthQUNFLFFBQUEsQ0FBUyxJQUFULEVBREY7S0FBQSxNQUFBO2FBR0UsS0FIRjs7RUFEVTs7OEJBTVoseUJBQUEsR0FBMkIsU0FBQTtXQUN4QixpQ0FBQSxDQUFrQztNQUFDLFFBQUEsRUFBVSxJQUFYO0tBQWxDO0VBRHdCOzs4QkFHM0IsVUFBQSxHQUFZLFNBQUE7V0FDVjtFQURVOzs4QkFHWixrQkFBQSxHQUFvQixTQUFDLFVBQUQsRUFBYSxnQkFBYjtXQUNsQjtFQURrQjs7OEJBR3BCLGdCQUFBLEdBQWtCLFNBQUMsSUFBRDtBQUNoQixRQUFBO0lBQUEsSUFBZ0IsQ0FBSSxJQUFwQjtBQUFBLGFBQU8sTUFBUDs7SUFDQSxJQUFHLDBDQUFBLElBQXNDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFqQyxHQUEwQyxDQUFuRjtBQUNFO0FBQUEsV0FBQSxxQ0FBQTs7UUFDRSxJQUFlLElBQUksQ0FBQyxNQUFMLENBQVksQ0FBQyxTQUFTLENBQUMsTUFBdkIsQ0FBQSxLQUFrQyxTQUFqRDtBQUFBLGlCQUFPLEtBQVA7O1FBQ0EsSUFBRyxTQUFBLEtBQWEsRUFBaEI7VUFDRSxJQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTCxDQUFhLEdBQWIsQ0FBakI7QUFBQSxtQkFBTyxLQUFQO1dBREY7O0FBRkY7QUFJQSxhQUFPLE1BTFQ7S0FBQSxNQUFBO2FBUUUsS0FSRjs7RUFGZ0I7OzhCQVlsQixlQUFBLEdBQWlCLFNBQUE7V0FDZjtFQURlOzs4QkFHakIsTUFBQSxHQUFRLFNBQUMsUUFBRDtXQUNOLElBQUMsQ0FBQSxlQUFELENBQWlCLFFBQWpCO0VBRE07OzhCQUdSLElBQUEsR0FBTSxTQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFFBQXBCO1dBQ0osSUFBQyxDQUFBLGVBQUQsQ0FBaUIsTUFBakI7RUFESTs7OEJBR04sWUFBQSxHQUFjLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEI7SUFFWixJQUFHLElBQUMsQ0FBQSxHQUFELENBQUssTUFBTCxFQUFhLFFBQWIsQ0FBSDthQUNFLElBQUMsQ0FBQSxJQUFELENBQU0sT0FBTixFQUFlLFFBQWYsRUFBeUIsUUFBekIsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsZUFBRCxDQUFpQixjQUFqQixFQUhGOztFQUZZOzs4QkFPZCxJQUFBLEdBQU0sU0FBQyxRQUFEO1dBQ0osSUFBQyxDQUFBLGVBQUQsQ0FBaUIsTUFBakI7RUFESTs7OEJBR04sSUFBQSxHQUFNLFNBQUMsUUFBRCxFQUFXLFFBQVg7V0FDSixJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFqQjtFQURJOzs4QkFHTixNQUFBLEdBQVEsU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNOLElBQUMsQ0FBQSxlQUFELENBQWlCLFFBQWpCO0VBRE07OzhCQUdSLE1BQUEsR0FBUSxTQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLFFBQXBCO1dBQ04sSUFBQyxDQUFBLGVBQUQsQ0FBaUIsUUFBakI7RUFETTs7OEJBR1IsS0FBQSxHQUFPLFNBQUMsUUFBRCxFQUFXLFFBQVg7V0FDTCxJQUFDLENBQUEsZUFBRCxDQUFpQixPQUFqQjtFQURLOzs4QkFHUCxTQUFBLEdBQVcsU0FBQyxRQUFEO1dBQ1QsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsV0FBakI7RUFEUzs7OEJBR1gsWUFBQSxHQUFjLFNBQUE7V0FBRztFQUFIOzs4QkFFZCxTQUFBLEdBQVcsU0FBQyxlQUFELEVBQWtCLFFBQWxCO1dBQ1QsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsV0FBakI7RUFEUzs7OEJBR1gsa0JBQUEsR0FBb0IsU0FBQyxRQUFEO1dBQ2xCLElBQUMsQ0FBQSxlQUFELENBQWlCLG9CQUFqQjtFQURrQjs7OEJBR3BCLFVBQUEsR0FBWSxTQUFBLEdBQUE7OzhCQUdaLGVBQUEsR0FBaUIsU0FBQyxVQUFEO1dBRWYsS0FBQSxDQUFTLFVBQUQsR0FBWSx1QkFBWixHQUFtQyxJQUFDLENBQUEsSUFBcEMsR0FBeUMsV0FBakQ7RUFGZTs7Ozs7O0FBSW5CLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxTQUFBLEVBQVcsU0FBWDtFQUNBLGFBQUEsRUFBZSxhQURmO0VBRUEsWUFBQSxFQUFjLFlBRmQ7RUFHQSxtQkFBQSxFQUFxQixJQUFJLG1CQUFKLENBQUEsQ0FIckI7RUFJQSxpQkFBQSxFQUFtQixpQkFKbkI7Ozs7O0FDclBGLElBQUEsOEZBQUE7RUFBQTs7O0FBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFDTCxRQUFBLEdBQVcsT0FBQSxDQUFRLG9CQUFSOztBQUNYLE9BQUEsR0FBVSxPQUFBLENBQVEsbUJBQVI7O0FBRVYsaUJBQUEsR0FBb0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUNyRCxtQkFBQSxHQUFzQixDQUFDLE9BQUEsQ0FBUSxzQkFBUixDQUFELENBQWdDLENBQUM7O0FBQ3ZELGFBQUEsR0FBZ0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUUzQzs7O0VBRVMsMEJBQUMsT0FBRCxFQUFnQixNQUFoQjtJQUFDLElBQUMsQ0FBQSw0QkFBRCxVQUFXO0lBQUksSUFBQyxDQUFBLFNBQUQ7SUFDM0Isa0RBQ0U7TUFBQSxJQUFBLEVBQU0sZ0JBQWdCLENBQUMsSUFBdkI7TUFDQSxXQUFBLEVBQWEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxXQUFULElBQXdCLENBQUMsRUFBQSxDQUFHLHFCQUFILENBQUQsQ0FEckM7TUFFQSxjQUFBLEVBQWdCLElBQUMsQ0FBQSxPQUFPLENBQUMsY0FGekI7TUFHQSxZQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sS0FBTjtRQUNBLE1BQUEsRUFBUSxLQURSO1FBRUEsQ0FBQSxNQUFBLENBQUEsRUFBUSxLQUZSO1FBR0EsSUFBQSxFQUFNLElBSE47UUFJQSxJQUFBLEVBQU0sSUFKTjtRQUtBLE1BQUEsRUFBUSxLQUxSO1FBTUEsTUFBQSxFQUFRLEtBTlI7UUFPQSxLQUFBLEVBQU8sS0FQUDtPQUpGO0tBREY7SUFhQSxJQUFDLENBQUEsSUFBRCxHQUFRO0lBQ1IsSUFBQyxDQUFBLFFBQUQsR0FBWTtFQWZEOztFQWlCYixnQkFBQyxDQUFBLElBQUQsR0FBTzs7NkJBRVAsSUFBQSxHQUFNLFNBQUMsUUFBRCxFQUFXLFFBQVg7SUFDSixJQUFHLFFBQUEsSUFBYSxDQUFJLE9BQUEsQ0FBUSxRQUFBLElBQWEsUUFBUSxDQUFDLElBQVQsS0FBaUIsYUFBYSxDQUFDLElBQXBELENBQXBCO01BQ0UsSUFBRyx3QkFBSDtRQUNFLFFBQUEsQ0FBUyxJQUFULEVBQWUsUUFBUSxDQUFDLE9BQXhCLEVBREY7T0FBQSxNQUdLLElBQUcsb0JBQUg7UUFDSCxDQUFDLENBQUMsSUFBRixDQUNFO1VBQUEsUUFBQSxFQUFVLE1BQVY7VUFDQSxHQUFBLEVBQUssUUFBUSxDQUFDLEdBRGQ7VUFFQSxPQUFBLEVBQVMsU0FBQyxJQUFEO21CQUNQLFFBQUEsQ0FBUyxJQUFULEVBQWUsbUJBQW1CLENBQUMsMkJBQXBCLENBQWdELElBQWhELENBQWY7VUFETyxDQUZUO1VBSUEsS0FBQSxFQUFPLFNBQUE7bUJBQUcsUUFBQSxDQUFTLGtCQUFBLEdBQW1CLFFBQVEsQ0FBQyxJQUE1QixHQUFpQyxHQUExQztVQUFILENBSlA7U0FERixFQURHO09BQUEsTUFRQSxJQUFHLG1EQUFIO2VBQ0gsSUFBQyxDQUFBLFNBQUQsQ0FBVyxDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEdBQUQsRUFBTSxJQUFOO0FBQ1QsZ0JBQUE7WUFBQSxJQUF1QixHQUF2QjtBQUFBLHFCQUFPLFFBQUEsQ0FBUyxHQUFULEVBQVA7O1lBQ0EsSUFBQSxHQUFPLEtBQUMsQ0FBQSxTQUFELENBQVcsSUFBWCxFQUFpQixRQUFRLENBQUMsSUFBMUI7WUFDUCxJQUFHLFlBQUg7Y0FDRSxLQUFDLENBQUEsSUFBRCxDQUFNLElBQU4sRUFBWSxRQUFaLEVBREY7YUFBQSxNQUFBO2NBR0UsUUFBQSxDQUFTLGtCQUFBLEdBQW1CLFFBQVEsQ0FBQyxJQUE1QixHQUFpQyxHQUExQyxFQUhGOztVQUhTO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFYLEVBREc7T0FaUDtLQUFBLE1BQUE7YUFzQkUsUUFBQSxDQUFTLGtDQUFULEVBdEJGOztFQURJOzs2QkF5Qk4sSUFBQSxHQUFNLFNBQUMsUUFBRCxFQUFXLFFBQVg7V0FDSixJQUFDLENBQUEsU0FBRCxDQUFXLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxHQUFELEVBQU0sSUFBTjtBQUNULFlBQUE7UUFBQSxJQUF1QixHQUF2QjtBQUFBLGlCQUFPLFFBQUEsQ0FBUyxHQUFULEVBQVA7O1FBQ0EsS0FBQSx1QkFBVyxRQUFRLENBQUUsY0FBVixLQUFrQixhQUFhLENBQUMsTUFBbkMsR0FBK0MsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFyRSxHQUFtRixLQUFDLENBQUE7ZUFFNUYsUUFBQSxDQUFTLElBQVQsRUFBZSxDQUFDLENBQUMsR0FBRixDQUFNLEtBQU4sRUFBYSxTQUFDLFlBQUQ7aUJBQWtCLElBQUksYUFBSixDQUFrQixZQUFsQjtRQUFsQixDQUFiLENBQWY7TUFKUztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWDtFQURJOzs2QkFPTixZQUFBLEdBQWMsU0FBQTtXQUFHO0VBQUg7OzZCQUVkLFNBQUEsR0FBVyxTQUFDLGVBQUQsRUFBa0IsUUFBbEI7QUFDVCxRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksYUFBSixDQUNUO01BQUEsSUFBQSxFQUFNLFFBQUEsQ0FBUyxlQUFULENBQU47TUFDQSxJQUFBLEVBQU0sYUFBYSxDQUFDLElBRHBCO01BRUEsTUFBQSxFQUFRLElBRlI7TUFHQSxRQUFBLEVBQVUsSUFIVjtLQURTO1dBS1gsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFOLEVBQWdCLFNBQUMsR0FBRCxFQUFNLE9BQU47YUFDZCxRQUFBLENBQVMsR0FBVCxFQUFjLE9BQWQsRUFBdUIsUUFBdkI7SUFEYyxDQUFoQjtFQU5TOzs2QkFTWCxrQkFBQSxHQUFvQixTQUFDLFFBQUQ7V0FDbEIsUUFBUSxDQUFDO0VBRFM7OzZCQUdwQixTQUFBLEdBQVcsU0FBQyxRQUFEO0FBRVQsUUFBQTtJQUFBLFFBQUEsR0FBVyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsS0FBRDtlQUNULE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBQyxDQUFBLFFBQWIsQ0FDRSxDQUFDLElBREgsQ0FDUSxDQUFDLFNBQUE7VUFDTCxJQUFHLGFBQUg7bUJBQ0UsUUFBQSxDQUFTLElBQVQsRUFBZSxLQUFmLEVBREY7V0FBQSxNQUFBOztjQUlFLE9BQU8sQ0FBQyxNQUFPLHdCQUFBLEdBQXlCLElBQUMsQ0FBQSxXQUExQixHQUFzQzs7bUJBQ3JELFFBQUEsQ0FBUyxJQUFULEVBQWUsRUFBZixFQUxGOztRQURLLENBQUQsQ0FEUixFQVVFLENBQUMsU0FBQTtpQkFBRyxRQUFBLENBQVMsd0JBQUEsR0FBeUIsSUFBQyxDQUFBLFdBQTFCLEdBQXNDLFdBQS9DO1FBQUgsQ0FBRCxDQVZGO01BRFM7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0lBYVgsSUFBRyxJQUFDLENBQUEsSUFBRCxLQUFXLElBQWQ7YUFDRSxRQUFBLENBQVMsSUFBQyxDQUFBLElBQVYsRUFERjtLQUFBLE1BRUssSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLElBQVo7TUFDSCxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSwwQkFBRCxDQUE0QixJQUFDLENBQUEsT0FBTyxDQUFDLElBQXJDO2FBQ1IsUUFBQSxDQUFTLElBQUMsQ0FBQSxJQUFWLEVBRkc7S0FBQSxNQUdBLElBQUcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxZQUFaO2FBQ0gsSUFBQyxDQUFBLE9BQU8sQ0FBQyxZQUFULENBQXNCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxHQUFELEVBQU0sSUFBTjtVQUNwQixJQUFHLEdBQUg7bUJBQ0UsUUFBQSxDQUFTLEdBQVQsRUFERjtXQUFBLE1BQUE7WUFHRSxLQUFDLENBQUEsSUFBRCxHQUFRLEtBQUMsQ0FBQSwwQkFBRCxDQUE0QixLQUFDLENBQUEsT0FBTyxDQUFDLElBQXJDO21CQUNSLFFBQUEsQ0FBUyxLQUFDLENBQUEsSUFBVixFQUpGOztRQURvQjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEIsRUFERztLQUFBLE1BT0EsSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVo7YUFDSCxDQUFDLENBQUMsSUFBRixDQUNFO1FBQUEsUUFBQSxFQUFVLE1BQVY7UUFDQSxHQUFBLEVBQUssSUFBQyxDQUFBLE9BQU8sQ0FBQyxHQURkO1FBRUEsT0FBQSxFQUFTLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsU0FBRDtZQUNQLEtBQUMsQ0FBQSxJQUFELEdBQVEsS0FBQyxDQUFBLDBCQUFELENBQTRCLFNBQTVCO1lBRVIsSUFBRyxLQUFDLENBQUEsT0FBTyxDQUFDLFdBQVo7Y0FDRSxLQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxTQUFDLE1BQUQsRUFBUyxNQUFUO2dCQUNULElBQWEsTUFBTSxDQUFDLElBQVAsR0FBYyxNQUFNLENBQUMsSUFBbEM7QUFBQSx5QkFBTyxDQUFDLEVBQVI7O2dCQUNBLElBQWEsTUFBTSxDQUFDLElBQVAsR0FBYyxNQUFNLENBQUMsSUFBbEM7QUFBQSx5QkFBUSxFQUFSOztBQUNBLHVCQUFRO2NBSEMsQ0FBWCxFQURGOzttQkFLQSxRQUFBLENBQVMsS0FBQyxDQUFBLElBQVY7VUFSTztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FGVDtRQVdBLEtBQUEsRUFBTyxDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEtBQUQsRUFBUSxVQUFSLEVBQW9CLFdBQXBCO0FBQ0wsZ0JBQUE7WUFBQSxhQUFBLEdBQWdCLEtBQUMsQ0FBQSxvQkFBRCxDQUFzQixJQUF0QjtZQUNoQixLQUFDLENBQUEsSUFBRCxHQUFRLENBQUUsYUFBRjttQkFDUixRQUFBLENBQVMsS0FBQyxDQUFBLElBQVY7VUFISztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FYUDtPQURGLEVBREc7S0FBQSxNQUFBO2FBa0JILFFBQUEsQ0FBUyxJQUFULEVBbEJHOztFQTNCSTs7NkJBK0NYLDBCQUFBLEdBQTRCLFNBQUMsSUFBRCxFQUFPLE1BQVA7QUFDMUIsUUFBQTs7TUFEaUMsU0FBUzs7SUFDMUMsSUFBQSxHQUFPO0lBRVAsSUFBRyxPQUFBLENBQVEsSUFBUixDQUFIO0FBR0UsV0FBQSxzQ0FBQTs7UUFDRSxJQUFBLEdBQU8sYUFBYSxDQUFDLDBCQUFkLENBQXlDLElBQUksQ0FBQyxJQUE5QztRQUNQLFFBQUEsR0FBVyxJQUFJLGFBQUosQ0FDVDtVQUFBLElBQUEsRUFBTSxJQUFJLENBQUMsSUFBWDtVQUNBLElBQUEsRUFBTSxJQUROO1VBRUEsV0FBQSxFQUFhLElBQUksQ0FBQyxXQUZsQjtVQUdBLE9BQUEsRUFBWSxvQkFBSCxHQUFzQixtQkFBbUIsQ0FBQywyQkFBcEIsQ0FBZ0QsSUFBSSxDQUFDLE9BQXJELENBQXRCLEdBQXdGLE1BSGpHO1VBSUEsR0FBQSxFQUFLLElBQUksQ0FBQyxHQUFMLElBQVksSUFBSSxDQUFDLFFBSnRCO1VBS0EsTUFBQSxFQUFRLE1BTFI7VUFNQSxRQUFBLEVBQVUsSUFOVjtVQU9BLFlBQUEsRUFDRTtZQUFBLFFBQUEsRUFBVSxJQUFWO1dBUkY7U0FEUztRQVVYLElBQUcsSUFBQSxLQUFRLGFBQWEsQ0FBQyxNQUF6QjtVQUNFLGdCQUFBLEdBQW1CLENBQUEsU0FBQSxLQUFBO21CQUFBLFNBQUMsS0FBRCxFQUFRLFNBQVI7QUFDakIscUJBQU8sSUFBSSxPQUFKLENBQVksU0FBQyxPQUFELEVBQVUsTUFBVjtnQkFDakIsSUFBRyxzQkFBSDtrQkFDRSxTQUFTLENBQUMsWUFBWSxDQUFDLFFBQXZCLEdBQWtDLEtBQUMsQ0FBQSwwQkFBRCxDQUE0QixLQUFLLENBQUMsUUFBbEMsRUFBNEMsU0FBNUM7eUJBQ2xDLE9BQUEsQ0FBUSxTQUFSLEVBRkY7aUJBQUEsTUFHSyxJQUFHLGlCQUFIO3lCQUNILENBQUMsQ0FBQyxJQUFGLENBQ0U7b0JBQUEsUUFBQSxFQUFVLE1BQVY7b0JBQ0EsR0FBQSxFQUFLLEtBQUssQ0FBQyxHQURYO29CQUVBLE9BQUEsRUFBUyxTQUFDLFNBQUQ7c0JBQ1AsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUF2QixHQUFrQyxLQUFDLENBQUEsMEJBQUQsQ0FBNEIsU0FBNUIsRUFBdUMsU0FBdkM7c0JBRWxDLElBQUcsS0FBQyxDQUFBLE9BQU8sQ0FBQyxXQUFULElBQXdCLEtBQUssQ0FBQyxXQUFqQzt3QkFDRSxTQUFTLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFoQyxDQUFxQyxTQUFDLE1BQUQsRUFBUyxNQUFUOzBCQUNuQyxJQUFhLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLElBQWxDO0FBQUEsbUNBQU8sQ0FBQyxFQUFSOzswQkFDQSxJQUFhLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLElBQWxDO0FBQUEsbUNBQVEsRUFBUjs7QUFDQSxpQ0FBUTt3QkFIMkIsQ0FBckMsRUFERjs7NkJBS0EsT0FBQSxDQUFRLFNBQVI7b0JBUk8sQ0FGVDtvQkFXQSxLQUFBLEVBQU8sU0FBQyxLQUFELEVBQVEsVUFBUixFQUFvQixXQUFwQjtBQUNMLDBCQUFBO3NCQUFBLGFBQUEsR0FBZ0IsS0FBQyxDQUFBLG9CQUFELENBQXNCLFNBQXRCO3NCQUNoQixTQUFTLENBQUMsWUFBWSxDQUFDLFFBQXZCLEdBQWtDLENBQUUsYUFBRjs2QkFDbEMsT0FBQSxDQUFRLFNBQVI7b0JBSEssQ0FYUDttQkFERixFQURHOztjQUpZLENBQVo7WUFEVTtVQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7VUFzQm5CLElBQUMsQ0FBQSxRQUFRLENBQUMsSUFBVixDQUFlLGdCQUFBLENBQWlCLElBQWpCLEVBQXVCLFFBQXZCLENBQWYsRUF2QkY7O1FBeUJBLElBQUksQ0FBQyxJQUFMLENBQVUsUUFBVjtBQXJDRixPQUhGO0tBQUEsTUFBQTtBQTRDRSxXQUFBLGdCQUFBOztRQUNFLFdBQUEsR0FBYyxJQUFLLENBQUEsUUFBQTtRQUNuQixJQUFBLEdBQVUsUUFBQSxDQUFTLFdBQVQsQ0FBSCxHQUE2QixhQUFhLENBQUMsSUFBM0MsR0FBcUQsYUFBYSxDQUFDO1FBQzFFLFFBQUEsR0FBVyxJQUFJLGFBQUosQ0FDVDtVQUFBLElBQUEsRUFBTSxRQUFOO1VBQ0EsSUFBQSxFQUFNLElBRE47VUFFQSxPQUFBLEVBQVMsbUJBQW1CLENBQUMsMkJBQXBCLENBQWdELFdBQWhELENBRlQ7VUFHQSxNQUFBLEVBQVEsTUFIUjtVQUlBLFFBQUEsRUFBVSxJQUpWO1VBS0EsWUFBQSxFQUNFO1lBQUEsUUFBQSxFQUFVLElBQVY7V0FORjtTQURTO1FBUVgsSUFBRyxJQUFBLEtBQVEsYUFBYSxDQUFDLE1BQXpCO1VBQ0UsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUF0QixHQUFpQyxJQUFDLENBQUEsMEJBQUQsQ0FBNEIsV0FBNUIsRUFBeUMsUUFBekMsRUFEbkM7O1FBRUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxRQUFWO0FBYkYsT0E1Q0Y7O1dBMkRBO0VBOUQwQjs7NkJBZ0U1QixTQUFBLEdBQVcsU0FBQyxHQUFELEVBQU0sUUFBTjtBQUNULFFBQUE7QUFBQSxTQUFBLHFDQUFBOztNQUNFLElBQUcsSUFBSSxDQUFDLElBQUwsS0FBYSxhQUFhLENBQUMsSUFBOUI7UUFDRSxvQkFBRyxJQUFJLENBQUUsY0FBTixLQUFjLFFBQWpCO0FBQ0UsaUJBQU8sS0FEVDtTQURGO09BQUEsTUFHSyw0RUFBOEIsQ0FBRSx3QkFBaEM7UUFDSCxVQUFBLEdBQWEsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQTdCLEVBQXVDLFFBQXZDO1FBQ2IsSUFBRyxrQkFBSDtBQUFvQixpQkFBTyxXQUEzQjtTQUZHOztBQUpQO0FBT0EsV0FBTztFQVJFOzs2QkFnQlgsb0JBQUEsR0FBc0IsU0FBQyxPQUFEO1dBQ3BCLElBQUksYUFBSixDQUNFO01BQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRyxnQ0FBSCxDQUFOO01BQ0EsSUFBQSxFQUFNLGFBQWEsQ0FBQyxLQURwQjtNQUVBLE9BQUEsRUFBUyxFQUZUO01BR0EsTUFBQSxFQUFRLE9BSFI7TUFJQSxRQUFBLEVBQVUsSUFKVjtNQUtBLFlBQUEsRUFDRTtRQUFBLFFBQUEsRUFBVSxJQUFWO09BTkY7S0FERjtFQURvQjs7OztHQWxNTzs7QUE0TS9CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCOzs7O0FDcE5qQixJQUFBLGtFQUFBO0VBQUE7OztBQUFBLGlCQUFBLEdBQW9CLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFDckQsbUJBQUEsR0FBc0IsQ0FBQyxPQUFBLENBQVEsc0JBQVIsQ0FBRCxDQUFnQyxDQUFDOztBQUN2RCxhQUFBLEdBQWdCLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FBZ0MsQ0FBQzs7QUFLM0M7OztFQUVTLHFCQUFDLE9BQUQsRUFBZ0IsTUFBaEI7SUFBQyxJQUFDLENBQUEsNEJBQUQsVUFBVztJQUFJLElBQUMsQ0FBQSxTQUFEO0lBQzNCLDZDQUNFO01BQUEsWUFBQSxFQUNFO1FBQUEsSUFBQSxFQUFNLEtBQU47UUFDQSxNQUFBLEVBQVEsS0FEUjtRQUVBLENBQUEsTUFBQSxDQUFBLEVBQVEsS0FGUjtRQUdBLElBQUEsRUFBTSxLQUhOO1FBSUEsSUFBQSxFQUFNLEtBSk47UUFLQSxNQUFBLEVBQVEsS0FMUjtRQU1BLE1BQUEsRUFBUSxLQU5SO1FBT0EsS0FBQSxFQUFPLEtBUFA7T0FERjtLQURGO0VBRFc7O3dCQVliLFlBQUEsR0FBYyxTQUFBO1dBQUc7RUFBSDs7d0JBRWQsZUFBQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxRQUFOO0FBQ2YsUUFBQTtJQUFBLFFBQUEsR0FBVyxJQUFJLGFBQUosQ0FDVDtNQUFBLElBQUEsRUFBTSxhQUFhLENBQUMsSUFBcEI7TUFDQSxHQUFBLEVBQUssR0FETDtNQUVBLE1BQUEsRUFBUSxJQUZSO01BR0EsUUFBQSxFQUFVLElBSFY7S0FEUztXQU1YLENBQUMsQ0FBQyxJQUFGLENBQ0U7TUFBQSxRQUFBLEVBQVUsTUFBVjtNQUNBLEdBQUEsRUFBSyxRQUFRLENBQUMsR0FEZDtNQUVBLE9BQUEsRUFBUyxTQUFDLElBQUQ7ZUFDUCxRQUFBLENBQVMsSUFBVCxFQUFlLG1CQUFtQixDQUFDLDJCQUFwQixDQUFnRCxJQUFoRCxDQUFmLEVBQXNFLFFBQXRFO01BRE8sQ0FGVDtNQUlBLEtBQUEsRUFBTyxTQUFBO2VBQUcsUUFBQSxDQUFTLGdDQUFBLEdBQWlDLFFBQVEsQ0FBQyxHQUExQyxHQUE4QyxHQUF2RDtNQUFILENBSlA7S0FERjtFQVBlOzs7O0dBaEJPOztBQThCMUIsTUFBTSxDQUFDLE9BQVAsR0FBaUI7Ozs7QUNyQ2pCLElBQUE7O0FBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxtQkFBUjs7QUFDTCxRQUFBLEdBQVcsT0FBQSxDQUFRLG1CQUFSOztBQUVMO0VBRVMsaUNBQUMsSUFBRCxFQUFRLEtBQVI7SUFBQyxJQUFDLENBQUEsT0FBRDtJQUFPLElBQUMsQ0FBQSx1QkFBRCxRQUFRO0VBQWhCOzs7Ozs7QUFFVDtFQUVKLHNCQUFDLENBQUEsV0FBRCxHQUFjLENBQUMsZUFBRCxFQUFrQixnQkFBbEIsRUFBb0MsZUFBcEMsRUFBcUQsV0FBckQsRUFBa0UsTUFBbEUsRUFBMEUsWUFBMUUsRUFBd0YsY0FBeEYsRUFBd0csY0FBeEc7O0VBRUQsZ0NBQUMsT0FBRCxFQUFVLE1BQVY7SUFDWCxJQUFDLENBQUEsT0FBRCxHQUFXO0lBQ1gsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsY0FBRCxDQUFnQixPQUFPLENBQUMsSUFBeEIsRUFBOEIsTUFBOUI7RUFGRTs7bUNBSWIsY0FBQSxHQUFnQixTQUFDLFNBQUQsRUFBWSxNQUFaO0FBQ2QsUUFBQTtJQUFBLFNBQUEsR0FBWSxTQUFDLE1BQUQ7QUFDVixVQUFBO2tEQUFjLENBQUUsSUFBaEIsQ0FBcUIsTUFBckIsV0FBQSxJQUFnQyxDQUFDLFNBQUE7ZUFBRyxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUEsR0FBTSxNQUFOLEdBQWEsb0NBQTFCO01BQUgsQ0FBRDtJQUR0QjtJQUdaLFVBQUEsR0FBYSxTQUFDLE1BQUQ7QUFDWCxjQUFPLE1BQVA7QUFBQSxhQUNPLGVBRFA7aUJBR0ksU0FBQTttQkFBRyxDQUFDLG9DQUFBLElBQWdDLCtCQUFqQyxDQUFBLElBQTRELE1BQU0sQ0FBQyxhQUFQLENBQUE7VUFBL0Q7QUFISixhQUlPLDBCQUpQO2lCQUtJLFNBQUE7bUJBQUcsb0NBQUEsSUFBZ0M7VUFBbkM7QUFMSixhQU1PLGNBTlA7QUFBQSxhQU11QixjQU52QjtpQkFPSSxTQUFBO21CQUFHO1VBQUg7QUFQSixhQVFPLHNCQVJQO2lCQVVJLFNBQUE7bUJBQUcsTUFBTSxDQUFDLFFBQVAsQ0FBQTtVQUFIO0FBVkosYUFXTyxhQVhQO2lCQWFJLFNBQUE7bUJBQUcsTUFBTSxDQUFDLGFBQVAsQ0FBQTtVQUFIO0FBYko7aUJBZUk7QUFmSjtJQURXO0lBa0JiLFFBQUEsR0FBVyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsWUFBRDtRQUNULElBQUcsWUFBSDtpQkFDRSxLQUFDLENBQUEsY0FBRCxDQUFnQixZQUFoQixFQUE4QixNQUE5QixFQURGO1NBQUEsTUFBQTtpQkFHRSxLQUhGOztNQURTO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtJQU1YLEtBQUEsR0FDRTtNQUFBLGFBQUEsRUFBZSxFQUFBLENBQUcsV0FBSCxDQUFmO01BQ0EsY0FBQSxFQUFnQixFQUFBLENBQUcsWUFBSCxDQURoQjtNQUVBLGVBQUEsRUFBaUIsRUFBQSxDQUFHLGFBQUgsQ0FGakI7TUFHQSx3QkFBQSxFQUEwQixFQUFBLENBQUcsNkJBQUgsQ0FIMUI7TUFJQSxvQkFBQSxFQUFzQixFQUFBLENBQUcsNkJBQUgsQ0FKdEI7TUFLQSxJQUFBLEVBQU0sRUFBQSxDQUFHLFlBQUgsQ0FMTjtNQU1BLGdCQUFBLEVBQWtCLEVBQUEsQ0FBRyxlQUFILENBTmxCO01BT0EseUJBQUEsRUFBMkIsRUFBQSxDQUFHLGlCQUFILENBUDNCO01BUUEsVUFBQSxFQUFZLEVBQUEsQ0FBRyxtQkFBSCxDQVJaO01BU0EsWUFBQSxFQUFjLEVBQUEsQ0FBRyxzQkFBSCxDQVRkO01BVUEsV0FBQSxFQUFhLEVBQUEsQ0FBRyxvQkFBSCxDQVZiO01BV0EsY0FBQSxFQUFnQixFQUFBLENBQUcsZ0JBQUgsQ0FYaEI7TUFZQSxZQUFBLEVBQWMsRUFBQSxDQUFHLGNBQUgsQ0FaZDtNQWFBLGFBQUEsRUFBZSxFQUFBLENBQUcsaUJBQUgsQ0FiZjtNQWNBLFlBQUEsRUFBYyxFQUFBLENBQUcsYUFBSCxDQWRkOztJQWdCRixRQUFBLEdBQ0U7TUFBQSxhQUFBLEVBQWUsQ0FBQywwQkFBRCxFQUE2QixzQkFBN0IsQ0FBZjtNQUNBLFlBQUEsRUFBYyxDQUFDLGNBQUQsRUFBaUIsYUFBakIsQ0FEZDs7SUFHRixLQUFBLEdBQVE7QUFDUixTQUFBLG1EQUFBOztNQUNFLElBQUcsSUFBQSxLQUFRLFdBQVg7UUFDRSxRQUFBLEdBQ0U7VUFBQSxHQUFBLEVBQUssV0FBQSxHQUFZLENBQWpCO1VBQ0EsU0FBQSxFQUFXLElBRFg7VUFGSjtPQUFBLE1BSUssSUFBRyxRQUFBLENBQVMsSUFBVCxDQUFIO1FBQ0gsUUFBQSxHQUNFO1VBQUEsR0FBQSxFQUFLLElBQUw7VUFDQSxJQUFBLCtDQUEwQixDQUFBLElBQUEsV0FBcEIsSUFBNkIsS0FBTSxDQUFBLElBQUEsQ0FBbkMsSUFBNEMsQ0FBQSxnQkFBQSxHQUFpQixJQUFqQixDQURsRDtVQUVBLE9BQUEsRUFBUyxVQUFBLENBQVcsSUFBWCxDQUZUO1VBR0EsS0FBQSxFQUFPLFFBQUEsQ0FBUyxRQUFTLENBQUEsSUFBQSxDQUFsQixDQUhQO1VBSUEsTUFBQSxFQUFRLFNBQUEsQ0FBVSxJQUFWLENBSlI7VUFGQztPQUFBLE1BQUE7UUFRSCxRQUFBLEdBQVc7UUFFWCxJQUFHLFFBQUEsQ0FBUyxJQUFJLENBQUMsTUFBZCxDQUFIO1VBQ0UsUUFBUSxDQUFDLEdBQVQsR0FBZSxJQUFJLENBQUM7VUFDcEIsUUFBUSxDQUFDLE9BQVQsR0FBbUIsVUFBQSxDQUFXLElBQUksQ0FBQyxNQUFoQjtVQUNuQixRQUFRLENBQUMsTUFBVCxHQUFrQixTQUFBLENBQVUsSUFBSSxDQUFDLE1BQWYsRUFIcEI7U0FBQSxNQUFBO1VBS0UsUUFBUSxDQUFDLFlBQVQsUUFBUSxDQUFDLFVBQVksTUFMdkI7O1FBTUEsSUFBeUMsSUFBSSxDQUFDLEtBQTlDO1VBQUEsUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBQSxDQUFTLElBQUksQ0FBQyxLQUFkLEVBQWpCO1NBaEJHOztNQWlCTCxLQUFLLENBQUMsSUFBTixDQUFXLFFBQVg7QUF0QkY7V0F1QkE7RUF6RWM7Ozs7OztBQTJFWjtFQUVTLDRCQUFDLE9BQUQ7SUFBQyxJQUFDLENBQUEsU0FBRDtJQUNaLElBQUMsQ0FBQSxJQUFELEdBQVE7SUFDUixJQUFDLENBQUEsaUJBQUQsR0FBcUI7RUFGVjs7K0JBSWIsSUFBQSxHQUFNLFNBQUMsT0FBRDtJQUNKLE9BQUEsR0FBVSxPQUFBLElBQVc7SUFFckIsSUFBRyxPQUFPLENBQUMsSUFBUixLQUFrQixJQUFyQjtNQUNFLElBQUcsT0FBTyxPQUFPLENBQUMsSUFBZixLQUF1QixXQUExQjtRQUNFLE9BQU8sQ0FBQyxJQUFSLEdBQWUsc0JBQXNCLENBQUMsWUFEeEM7O2FBRUEsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLHNCQUFKLENBQTJCLE9BQTNCLEVBQW9DLElBQUMsQ0FBQSxNQUFyQyxFQUhWOztFQUhJOzsrQkFTTixNQUFBLEdBQVEsU0FBQyxRQUFEO1dBQ04sSUFBQyxDQUFBLGlCQUFpQixDQUFDLElBQW5CLENBQXdCLFFBQXhCO0VBRE07OytCQUdSLGdCQUFBLEdBQWtCLFNBQUMsR0FBRDtBQUNoQixRQUFBO0FBQUE7QUFBQTtTQUFBLHFDQUFBOzttQkFDRSxRQUFBLENBQVMsR0FBVDtBQURGOztFQURnQjs7K0JBSWxCLGNBQUEsR0FBZ0IsU0FBQyxJQUFEO1dBQ2QsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsZ0JBQTVCLEVBQThDLElBQTlDLENBQWxCO0VBRGM7OytCQUdoQixlQUFBLEdBQWlCLFNBQUMsSUFBRDtXQUNmLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFJLHVCQUFKLENBQTRCLGlCQUE1QixFQUErQyxJQUEvQyxDQUFsQjtFQURlOzsrQkFHakIsZUFBQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxJQUFOO1dBQ2YsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsaUJBQTVCLEVBQ2hCO01BQUEsR0FBQSxFQUFLLEdBQUw7TUFDQSxJQUFBLEVBQU0sSUFETjtLQURnQixDQUFsQjtFQURlOzsrQkFLakIsb0JBQUEsR0FBc0IsU0FBQyxHQUFELEVBQU0sSUFBTjtXQUNwQixJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBSSx1QkFBSixDQUE0QixzQkFBNUIsRUFDaEI7TUFBQSxHQUFBLEVBQUssR0FBTDtNQUNBLElBQUEsRUFBTSxJQUROO0tBRGdCLENBQWxCO0VBRG9COzsrQkFLdEIsbUJBQUEsR0FBcUIsU0FBQyxHQUFELEVBQU0sSUFBTjtXQUNuQixJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBSSx1QkFBSixDQUE0QixxQkFBNUIsRUFDaEI7TUFBQSxHQUFBLEVBQUssR0FBTDtNQUNBLElBQUEsRUFBTSxJQUROO0tBRGdCLENBQWxCO0VBRG1COzsrQkFLckIsY0FBQSxHQUFnQixTQUFDLElBQUQ7V0FDZCxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBSSx1QkFBSixDQUE0QixnQkFBNUIsRUFBOEMsSUFBOUMsQ0FBbEI7RUFEYzs7K0JBR2hCLGNBQUEsR0FBZ0IsU0FBQyxRQUFEO1dBQ2QsSUFBQyxDQUFBLG1CQUFELENBQXFCLFVBQXJCLEVBQWtDLEVBQUEsQ0FBRyxjQUFILENBQWxDLEVBQXNELFFBQXREO0VBRGM7OytCQUdoQixnQkFBQSxHQUFrQixTQUFDLFFBQUQ7V0FDaEIsSUFBQyxDQUFBLG1CQUFELENBQXFCLFlBQXJCLEVBQW9DLEVBQUEsQ0FBRyxpQkFBSCxDQUFwQyxFQUEyRCxRQUEzRDtFQURnQjs7K0JBR2xCLHlCQUFBLEdBQTJCLFNBQUMsSUFBRCxFQUFPLFFBQVA7V0FDekIsSUFBQyxDQUFBLG1CQUFELENBQXFCLHFCQUFyQixFQUE2QyxFQUFBLENBQUcsbUJBQUgsQ0FBN0MsRUFBc0UsUUFBdEUsRUFBZ0YsSUFBaEY7RUFEeUI7OytCQUczQixjQUFBLEdBQWdCLFNBQUMsUUFBRDtXQUNkLElBQUMsQ0FBQSxtQkFBRCxDQUFxQixVQUFyQixFQUFrQyxFQUFBLENBQUcsY0FBSCxDQUFsQyxFQUFzRCxRQUF0RDtFQURjOzsrQkFHaEIsZ0JBQUEsR0FBa0IsU0FBQyxRQUFEO1dBQ2hCLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFJLHVCQUFKLENBQTRCLGtCQUE1QixFQUNoQjtNQUFBLFFBQUEsRUFBVSxRQUFWO0tBRGdCLENBQWxCO0VBRGdCOzsrQkFJbEIsY0FBQSxHQUFnQixTQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLFFBQXBCO1dBQ2QsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsb0JBQTVCLEVBQ2hCO01BQUEsUUFBQSxFQUFVLFFBQVY7TUFDQSxPQUFBLEVBQVMsT0FEVDtNQUVBLFFBQUEsRUFBVSxRQUZWO0tBRGdCLENBQWxCO0VBRGM7OytCQU1oQixZQUFBLEdBQWMsU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNaLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFJLHVCQUFKLENBQTRCLGtCQUE1QixFQUNoQjtNQUFBLFFBQUEsRUFBVSxRQUFWO01BQ0EsUUFBQSxFQUFVLFFBRFY7S0FEZ0IsQ0FBbEI7RUFEWTs7K0JBS2QsV0FBQSxHQUFhLFNBQUMsTUFBRCxFQUFTLGlCQUFUOztNQUFTLG9CQUFrQjs7V0FDdEMsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsaUJBQTVCLEVBQ2hCO01BQUEsTUFBQSxFQUFRLE1BQVI7TUFDQSxpQkFBQSxFQUFtQixpQkFEbkI7S0FEZ0IsQ0FBbEI7RUFEVzs7K0JBS2IsaUJBQUEsR0FBbUIsU0FBQyxVQUFEO1dBQ2pCLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFJLHVCQUFKLENBQTRCLG1CQUE1QixFQUFpRCxVQUFqRCxDQUFsQjtFQURpQjs7K0JBR25CLGlCQUFBLEdBQW1CLFNBQUE7V0FDakIsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsbUJBQTVCLENBQWxCO0VBRGlCOzsrQkFHbkIsbUJBQUEsR0FBcUIsU0FBQTtXQUNuQixJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBSSx1QkFBSixDQUE0QixxQkFBNUIsQ0FBbEI7RUFEbUI7OytCQUdyQixXQUFBLEdBQWEsU0FBQyxPQUFELEVBQVUsS0FBVixFQUFpQixRQUFqQjtXQUNYLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFJLHVCQUFKLENBQTRCLGlCQUE1QixFQUNoQjtNQUFBLEtBQUEsRUFBTyxLQUFQO01BQ0EsT0FBQSxFQUFTLE9BRFQ7TUFFQSxRQUFBLEVBQVUsUUFGVjtLQURnQixDQUFsQjtFQURXOzsrQkFNYixhQUFBLEdBQWUsU0FBQyxNQUFEO1dBQ2IsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsbUJBQTVCLEVBQWlELE1BQWpELENBQWxCO0VBRGE7OytCQUdmLG1CQUFBLEdBQXFCLFNBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsUUFBaEIsRUFBMEIsSUFBMUI7V0FDbkIsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUksdUJBQUosQ0FBNEIsb0JBQTVCLEVBQ2hCO01BQUEsTUFBQSxFQUFRLE1BQVI7TUFDQSxLQUFBLEVBQU8sS0FEUDtNQUVBLFFBQUEsRUFBVSxRQUZWO01BR0EsSUFBQSxFQUFNLElBSE47S0FEZ0IsQ0FBbEI7RUFEbUI7Ozs7OztBQU92QixNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsdUJBQUEsRUFBeUIsdUJBQXpCO0VBQ0Esa0JBQUEsRUFBb0Isa0JBRHBCO0VBRUEsc0JBQUEsRUFBd0Isc0JBRnhCOzs7OztBQ2xNRixNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLEtBQUQ7QUFDZixNQUFBO0VBQUEsR0FBQSxHQUFNO0VBQ04sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFkLENBQXFCLENBQXJCLENBQXVCLENBQUMsS0FBeEIsQ0FBOEIsR0FBOUIsQ0FBa0MsQ0FBQyxJQUFuQyxDQUF3QyxTQUFDLElBQUQ7QUFDdEMsUUFBQTtJQUFBLEdBQUEsR0FBTSxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBZ0IsQ0FBQSxDQUFBO0lBQ3RCLElBQUcsR0FBQSxLQUFPLEtBQVY7TUFDRSxLQUFBLEdBQVEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQWdCLENBQUEsQ0FBQTtBQUN4QixhQUFBLElBQUE7UUFDRSxLQUFBLEdBQVEsa0JBQUEsQ0FBbUIsS0FBbkI7UUFFUixJQUFBLENBQWEsU0FBUyxDQUFDLElBQVYsQ0FBZSxLQUFmLENBQWI7QUFBQSxnQkFBQTs7TUFIRjthQUlBLEdBQUEsR0FBTSxNQU5SOztFQUZzQyxDQUF4QztTQVNBO0FBWGU7Ozs7QUNBakIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxLQUFEO0FBQ2YsTUFBQTtFQUFBLEtBQUEsR0FBUSxLQUFLLENBQUMsT0FBTixDQUFjLE1BQWQsRUFBc0IsS0FBdEIsQ0FBNEIsQ0FBQyxPQUE3QixDQUFxQyxNQUFyQyxFQUE2QyxLQUE3QztFQUNSLE1BQUEsR0FBUyxRQUFBLEdBQVcsS0FBWCxHQUFtQjtFQUM1QixLQUFBLEdBQVEsSUFBSSxNQUFKLENBQVcsTUFBWDtFQUNSLE9BQUEsR0FBVSxLQUFLLENBQUMsSUFBTixDQUFXLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBM0I7RUFDVix1QkFBRyxPQUFPLENBQUUsZ0JBQVQsR0FBa0IsQ0FBckI7QUFDRSxXQUFPLGtCQUFBLENBQW1CLE9BQVEsQ0FBQSxDQUFBLENBQTNCLEVBRFQ7R0FBQSxNQUFBO0FBR0UsV0FBTyxLQUhUOztBQUxlOzs7O0FDQ2pCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsS0FBRDtTQUFXLEtBQUssQ0FBQyxPQUFOLENBQWMsS0FBQSxJQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBWixDQUFpQixLQUFBLEtBQVMsZ0JBQTFCLENBQXZCO0FBQVg7Ozs7QUNEakIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxLQUFEO1NBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBMUIsQ0FBK0IsS0FBL0IsQ0FBQSxLQUF5QztBQUFwRDs7OztBQ0FqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUF4QjtlQUNFLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQWQsQ0FBb0IsRUFBQSxDQUFHLG1DQUFILENBQXBCLEVBREY7T0FBQSxNQUVLLElBQUcsV0FBVyxDQUFDLE1BQVosS0FBc0IsQ0FBekI7ZUFDSCxJQUFDLENBQUEsU0FBRCxDQUFXLFdBQVksQ0FBQSxDQUFBLENBQXZCLEVBQTJCLE1BQTNCLEVBREc7T0FKUDs7RUFGSSxDQTNCTjtFQW9DQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxTQUFBLEdBQVksYUFBQSxHQUFhLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFWLEdBQXFCLFlBQXJCLEdBQXVDLEVBQXhDO1dBQ3hCLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxxQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFNBQVo7TUFBdUIsV0FBQSxFQUFhLElBQUMsQ0FBQSxTQUFyQztNQUFnRCxXQUFBLEVBQWEsSUFBQyxDQUFBLFNBQTlEO01BQXlFLE1BQUEsRUFBUSxJQUFDLENBQUEsSUFBbEY7S0FBSixFQUNFLEVBQUEsQ0FBRyx3QkFBSCxDQURGLENBREYsRUFJRSxLQUFBLENBQU07TUFBQyxHQUFBLEVBQUssS0FBTjtNQUFhLFdBQUEsRUFBYSxLQUExQjtLQUFOLENBSkYsRUFLRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsU0FBWjtLQUFKLEVBQ0UsTUFBQSxDQUFPO01BQUMsT0FBQSxFQUFTLElBQUMsRUFBQSxNQUFBLEVBQVg7S0FBUCxFQUE0QixFQUFBLENBQUcsaUJBQUgsQ0FBNUIsQ0FERixFQUVFLE1BQUEsQ0FBTztNQUFDLE9BQUEsRUFBUyxJQUFDLENBQUEsTUFBWDtLQUFQLEVBQTRCLEVBQUEsQ0FBRyxxQkFBSCxDQUE1QixDQUZGLENBTEY7RUFGSyxDQXBDUjtDQUZlIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIHBsYWNlSG9sZGVyc0NvdW50IChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcbiAgLy8gcmVwcmVzZW50IG9uZSBieXRlXG4gIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG4gIHJldHVybiBiNjRbbGVuIC0gMl0gPT09ICc9JyA/IDIgOiBiNjRbbGVuIC0gMV0gPT09ICc9JyA/IDEgOiAwXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICAvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAgcmV0dXJuIGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0NvdW50KGI2NClcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG5cbiAgYXJyID0gbmV3IEFycihsZW4gKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8vIFNlZTogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL3dpa2kvQVBJXG5leHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb0RNUChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXSxcbiAgICAgIGNoYW5nZSxcbiAgICAgIG9wZXJhdGlvbjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICBvcGVyYXRpb24gPSAxO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIG9wZXJhdGlvbiA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVyYXRpb24gPSAwO1xuICAgIH1cblxuICAgIHJldC5wdXNoKFtvcGVyYXRpb24sIGNoYW5nZS52YWx1ZV0pO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb1hNTChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoYW5nZSA9IGNoYW5nZXNbaV07XG4gICAgaWYgKGNoYW5nZS5hZGRlZCkge1xuICAgICAgcmV0LnB1c2goJzxpbnM+Jyk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2UucmVtb3ZlZCkge1xuICAgICAgcmV0LnB1c2goJzxkZWw+Jyk7XG4gICAgfVxuXG4gICAgcmV0LnB1c2goZXNjYXBlSFRNTChjaGFuZ2UudmFsdWUpKTtcblxuICAgIGlmIChjaGFuZ2UuYWRkZWQpIHtcbiAgICAgIHJldC5wdXNoKCc8L2lucz4nKTtcbiAgICB9IGVsc2UgaWYgKGNoYW5nZS5yZW1vdmVkKSB7XG4gICAgICByZXQucHVzaCgnPC9kZWw+Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUhUTUwocykge1xuICBsZXQgbiA9IHM7XG4gIG4gPSBuLnJlcGxhY2UoLyYvZywgJyZhbXA7Jyk7XG4gIG4gPSBuLnJlcGxhY2UoLzwvZywgJyZsdDsnKTtcbiAgbiA9IG4ucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICBuID0gbi5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG5cbiAgcmV0dXJuIG47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWZmKCkge31cblxuRGlmZi5wcm90b3R5cGUgPSB7XG4gIGRpZmYob2xkU3RyaW5nLCBuZXdTdHJpbmcsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBkb25lKHZhbHVlKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sodW5kZWZpbmVkLCB2YWx1ZSk7IH0sIDApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbGxvdyBzdWJjbGFzc2VzIHRvIG1hc3NhZ2UgdGhlIGlucHV0IHByaW9yIHRvIHJ1bm5pbmdcbiAgICBvbGRTdHJpbmcgPSB0aGlzLmNhc3RJbnB1dChvbGRTdHJpbmcpO1xuICAgIG5ld1N0cmluZyA9IHRoaXMuY2FzdElucHV0KG5ld1N0cmluZyk7XG5cbiAgICBvbGRTdHJpbmcgPSB0aGlzLnJlbW92ZUVtcHR5KHRoaXMudG9rZW5pemUob2xkU3RyaW5nKSk7XG4gICAgbmV3U3RyaW5nID0gdGhpcy5yZW1vdmVFbXB0eSh0aGlzLnRva2VuaXplKG5ld1N0cmluZykpO1xuXG4gICAgbGV0IG5ld0xlbiA9IG5ld1N0cmluZy5sZW5ndGgsIG9sZExlbiA9IG9sZFN0cmluZy5sZW5ndGg7XG4gICAgbGV0IGVkaXRMZW5ndGggPSAxO1xuICAgIGxldCBtYXhFZGl0TGVuZ3RoID0gbmV3TGVuICsgb2xkTGVuO1xuICAgIGxldCBiZXN0UGF0aCA9IFt7IG5ld1BvczogLTEsIGNvbXBvbmVudHM6IFtdIH1dO1xuXG4gICAgLy8gU2VlZCBlZGl0TGVuZ3RoID0gMCwgaS5lLiB0aGUgY29udGVudCBzdGFydHMgd2l0aCB0aGUgc2FtZSB2YWx1ZXNcbiAgICBsZXQgb2xkUG9zID0gdGhpcy5leHRyYWN0Q29tbW9uKGJlc3RQYXRoWzBdLCBuZXdTdHJpbmcsIG9sZFN0cmluZywgMCk7XG4gICAgaWYgKGJlc3RQYXRoWzBdLm5ld1BvcyArIDEgPj0gbmV3TGVuICYmIG9sZFBvcyArIDEgPj0gb2xkTGVuKSB7XG4gICAgICAvLyBJZGVudGl0eSBwZXIgdGhlIGVxdWFsaXR5IGFuZCB0b2tlbml6ZXJcbiAgICAgIHJldHVybiBkb25lKFt7dmFsdWU6IG5ld1N0cmluZy5qb2luKCcnKSwgY291bnQ6IG5ld1N0cmluZy5sZW5ndGh9XSk7XG4gICAgfVxuXG4gICAgLy8gTWFpbiB3b3JrZXIgbWV0aG9kLiBjaGVja3MgYWxsIHBlcm11dGF0aW9ucyBvZiBhIGdpdmVuIGVkaXQgbGVuZ3RoIGZvciBhY2NlcHRhbmNlLlxuICAgIGZ1bmN0aW9uIGV4ZWNFZGl0TGVuZ3RoKCkge1xuICAgICAgZm9yIChsZXQgZGlhZ29uYWxQYXRoID0gLTEgKiBlZGl0TGVuZ3RoOyBkaWFnb25hbFBhdGggPD0gZWRpdExlbmd0aDsgZGlhZ29uYWxQYXRoICs9IDIpIHtcbiAgICAgICAgbGV0IGJhc2VQYXRoO1xuICAgICAgICBsZXQgYWRkUGF0aCA9IGJlc3RQYXRoW2RpYWdvbmFsUGF0aCAtIDFdLFxuICAgICAgICAgICAgcmVtb3ZlUGF0aCA9IGJlc3RQYXRoW2RpYWdvbmFsUGF0aCArIDFdLFxuICAgICAgICAgICAgb2xkUG9zID0gKHJlbW92ZVBhdGggPyByZW1vdmVQYXRoLm5ld1BvcyA6IDApIC0gZGlhZ29uYWxQYXRoO1xuICAgICAgICBpZiAoYWRkUGF0aCkge1xuICAgICAgICAgIC8vIE5vIG9uZSBlbHNlIGlzIGdvaW5nIHRvIGF0dGVtcHQgdG8gdXNlIHRoaXMgdmFsdWUsIGNsZWFyIGl0XG4gICAgICAgICAgYmVzdFBhdGhbZGlhZ29uYWxQYXRoIC0gMV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2FuQWRkID0gYWRkUGF0aCAmJiBhZGRQYXRoLm5ld1BvcyArIDEgPCBuZXdMZW4sXG4gICAgICAgICAgICBjYW5SZW1vdmUgPSByZW1vdmVQYXRoICYmIDAgPD0gb2xkUG9zICYmIG9sZFBvcyA8IG9sZExlbjtcbiAgICAgICAgaWYgKCFjYW5BZGQgJiYgIWNhblJlbW92ZSkge1xuICAgICAgICAgIC8vIElmIHRoaXMgcGF0aCBpcyBhIHRlcm1pbmFsIHRoZW4gcHJ1bmVcbiAgICAgICAgICBiZXN0UGF0aFtkaWFnb25hbFBhdGhdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VsZWN0IHRoZSBkaWFnb25hbCB0aGF0IHdlIHdhbnQgdG8gYnJhbmNoIGZyb20uIFdlIHNlbGVjdCB0aGUgcHJpb3JcbiAgICAgICAgLy8gcGF0aCB3aG9zZSBwb3NpdGlvbiBpbiB0aGUgbmV3IHN0cmluZyBpcyB0aGUgZmFydGhlc3QgZnJvbSB0aGUgb3JpZ2luXG4gICAgICAgIC8vIGFuZCBkb2VzIG5vdCBwYXNzIHRoZSBib3VuZHMgb2YgdGhlIGRpZmYgZ3JhcGhcbiAgICAgICAgaWYgKCFjYW5BZGQgfHwgKGNhblJlbW92ZSAmJiBhZGRQYXRoLm5ld1BvcyA8IHJlbW92ZVBhdGgubmV3UG9zKSkge1xuICAgICAgICAgIGJhc2VQYXRoID0gY2xvbmVQYXRoKHJlbW92ZVBhdGgpO1xuICAgICAgICAgIHNlbGYucHVzaENvbXBvbmVudChiYXNlUGF0aC5jb21wb25lbnRzLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VQYXRoID0gYWRkUGF0aDsgICAvLyBObyBuZWVkIHRvIGNsb25lLCB3ZSd2ZSBwdWxsZWQgaXQgZnJvbSB0aGUgbGlzdFxuICAgICAgICAgIGJhc2VQYXRoLm5ld1BvcysrO1xuICAgICAgICAgIHNlbGYucHVzaENvbXBvbmVudChiYXNlUGF0aC5jb21wb25lbnRzLCB0cnVlLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2xkUG9zID0gc2VsZi5leHRyYWN0Q29tbW9uKGJhc2VQYXRoLCBuZXdTdHJpbmcsIG9sZFN0cmluZywgZGlhZ29uYWxQYXRoKTtcblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGhpdCB0aGUgZW5kIG9mIGJvdGggc3RyaW5ncywgdGhlbiB3ZSBhcmUgZG9uZVxuICAgICAgICBpZiAoYmFzZVBhdGgubmV3UG9zICsgMSA+PSBuZXdMZW4gJiYgb2xkUG9zICsgMSA+PSBvbGRMZW4pIHtcbiAgICAgICAgICByZXR1cm4gZG9uZShidWlsZFZhbHVlcyhzZWxmLCBiYXNlUGF0aC5jb21wb25lbnRzLCBuZXdTdHJpbmcsIG9sZFN0cmluZywgc2VsZi51c2VMb25nZXN0VG9rZW4pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgdHJhY2sgdGhpcyBwYXRoIGFzIGEgcG90ZW50aWFsIGNhbmRpZGF0ZSBhbmQgY29udGludWUuXG4gICAgICAgICAgYmVzdFBhdGhbZGlhZ29uYWxQYXRoXSA9IGJhc2VQYXRoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVkaXRMZW5ndGgrKztcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtcyB0aGUgbGVuZ3RoIG9mIGVkaXQgaXRlcmF0aW9uLiBJcyBhIGJpdCBmdWdseSBhcyB0aGlzIGhhcyB0byBzdXBwb3J0IHRoZVxuICAgIC8vIHN5bmMgYW5kIGFzeW5jIG1vZGUgd2hpY2ggaXMgbmV2ZXIgZnVuLiBMb29wcyBvdmVyIGV4ZWNFZGl0TGVuZ3RoIHVudGlsIGEgdmFsdWVcbiAgICAvLyBpcyBwcm9kdWNlZC5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIChmdW5jdGlvbiBleGVjKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBoYXBwZW4sIGJ1dCB3ZSB3YW50IHRvIGJlIHNhZmUuXG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICBpZiAoZWRpdExlbmd0aCA+IG1heEVkaXRMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXhlY0VkaXRMZW5ndGgoKSkge1xuICAgICAgICAgICAgZXhlYygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICB9KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoZWRpdExlbmd0aCA8PSBtYXhFZGl0TGVuZ3RoKSB7XG4gICAgICAgIGxldCByZXQgPSBleGVjRWRpdExlbmd0aCgpO1xuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBwdXNoQ29tcG9uZW50KGNvbXBvbmVudHMsIGFkZGVkLCByZW1vdmVkKSB7XG4gICAgbGV0IGxhc3QgPSBjb21wb25lbnRzW2NvbXBvbmVudHMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3QgJiYgbGFzdC5hZGRlZCA9PT0gYWRkZWQgJiYgbGFzdC5yZW1vdmVkID09PSByZW1vdmVkKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGNsb25lIGhlcmUgYXMgdGhlIGNvbXBvbmVudCBjbG9uZSBvcGVyYXRpb24gaXMganVzdFxuICAgICAgLy8gYXMgc2hhbGxvdyBhcnJheSBjbG9uZVxuICAgICAgY29tcG9uZW50c1tjb21wb25lbnRzLmxlbmd0aCAtIDFdID0ge2NvdW50OiBsYXN0LmNvdW50ICsgMSwgYWRkZWQ6IGFkZGVkLCByZW1vdmVkOiByZW1vdmVkIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudHMucHVzaCh7Y291bnQ6IDEsIGFkZGVkOiBhZGRlZCwgcmVtb3ZlZDogcmVtb3ZlZCB9KTtcbiAgICB9XG4gIH0sXG4gIGV4dHJhY3RDb21tb24oYmFzZVBhdGgsIG5ld1N0cmluZywgb2xkU3RyaW5nLCBkaWFnb25hbFBhdGgpIHtcbiAgICBsZXQgbmV3TGVuID0gbmV3U3RyaW5nLmxlbmd0aCxcbiAgICAgICAgb2xkTGVuID0gb2xkU3RyaW5nLmxlbmd0aCxcbiAgICAgICAgbmV3UG9zID0gYmFzZVBhdGgubmV3UG9zLFxuICAgICAgICBvbGRQb3MgPSBuZXdQb3MgLSBkaWFnb25hbFBhdGgsXG5cbiAgICAgICAgY29tbW9uQ291bnQgPSAwO1xuICAgIHdoaWxlIChuZXdQb3MgKyAxIDwgbmV3TGVuICYmIG9sZFBvcyArIDEgPCBvbGRMZW4gJiYgdGhpcy5lcXVhbHMobmV3U3RyaW5nW25ld1BvcyArIDFdLCBvbGRTdHJpbmdbb2xkUG9zICsgMV0pKSB7XG4gICAgICBuZXdQb3MrKztcbiAgICAgIG9sZFBvcysrO1xuICAgICAgY29tbW9uQ291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY29tbW9uQ291bnQpIHtcbiAgICAgIGJhc2VQYXRoLmNvbXBvbmVudHMucHVzaCh7Y291bnQ6IGNvbW1vbkNvdW50fSk7XG4gICAgfVxuXG4gICAgYmFzZVBhdGgubmV3UG9zID0gbmV3UG9zO1xuICAgIHJldHVybiBvbGRQb3M7XG4gIH0sXG5cbiAgZXF1YWxzKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0O1xuICB9LFxuICByZW1vdmVFbXB0eShhcnJheSkge1xuICAgIGxldCByZXQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0pIHtcbiAgICAgICAgcmV0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICBjYXN0SW5wdXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHRva2VuaXplKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnNwbGl0KCcnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYnVpbGRWYWx1ZXMoZGlmZiwgY29tcG9uZW50cywgbmV3U3RyaW5nLCBvbGRTdHJpbmcsIHVzZUxvbmdlc3RUb2tlbikge1xuICBsZXQgY29tcG9uZW50UG9zID0gMCxcbiAgICAgIGNvbXBvbmVudExlbiA9IGNvbXBvbmVudHMubGVuZ3RoLFxuICAgICAgbmV3UG9zID0gMCxcbiAgICAgIG9sZFBvcyA9IDA7XG5cbiAgZm9yICg7IGNvbXBvbmVudFBvcyA8IGNvbXBvbmVudExlbjsgY29tcG9uZW50UG9zKyspIHtcbiAgICBsZXQgY29tcG9uZW50ID0gY29tcG9uZW50c1tjb21wb25lbnRQb3NdO1xuICAgIGlmICghY29tcG9uZW50LnJlbW92ZWQpIHtcbiAgICAgIGlmICghY29tcG9uZW50LmFkZGVkICYmIHVzZUxvbmdlc3RUb2tlbikge1xuICAgICAgICBsZXQgdmFsdWUgPSBuZXdTdHJpbmcuc2xpY2UobmV3UG9zLCBuZXdQb3MgKyBjb21wb25lbnQuY291bnQpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbih2YWx1ZSwgaSkge1xuICAgICAgICAgIGxldCBvbGRWYWx1ZSA9IG9sZFN0cmluZ1tvbGRQb3MgKyBpXTtcbiAgICAgICAgICByZXR1cm4gb2xkVmFsdWUubGVuZ3RoID4gdmFsdWUubGVuZ3RoID8gb2xkVmFsdWUgOiB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29tcG9uZW50LnZhbHVlID0gdmFsdWUuam9pbignJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wb25lbnQudmFsdWUgPSBuZXdTdHJpbmcuc2xpY2UobmV3UG9zLCBuZXdQb3MgKyBjb21wb25lbnQuY291bnQpLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgbmV3UG9zICs9IGNvbXBvbmVudC5jb3VudDtcblxuICAgICAgLy8gQ29tbW9uIGNhc2VcbiAgICAgIGlmICghY29tcG9uZW50LmFkZGVkKSB7XG4gICAgICAgIG9sZFBvcyArPSBjb21wb25lbnQuY291bnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudC52YWx1ZSA9IG9sZFN0cmluZy5zbGljZShvbGRQb3MsIG9sZFBvcyArIGNvbXBvbmVudC5jb3VudCkuam9pbignJyk7XG4gICAgICBvbGRQb3MgKz0gY29tcG9uZW50LmNvdW50O1xuXG4gICAgICAvLyBSZXZlcnNlIGFkZCBhbmQgcmVtb3ZlIHNvIHJlbW92ZXMgYXJlIG91dHB1dCBmaXJzdCB0byBtYXRjaCBjb21tb24gY29udmVudGlvblxuICAgICAgLy8gVGhlIGRpZmZpbmcgYWxnb3JpdGhtIGlzIHRpZWQgdG8gYWRkIHRoZW4gcmVtb3ZlIG91dHB1dCBhbmQgdGhpcyBpcyB0aGUgc2ltcGxlc3RcbiAgICAgIC8vIHJvdXRlIHRvIGdldCB0aGUgZGVzaXJlZCBvdXRwdXQgd2l0aCBtaW5pbWFsIG92ZXJoZWFkLlxuICAgICAgaWYgKGNvbXBvbmVudFBvcyAmJiBjb21wb25lbnRzW2NvbXBvbmVudFBvcyAtIDFdLmFkZGVkKSB7XG4gICAgICAgIGxldCB0bXAgPSBjb21wb25lbnRzW2NvbXBvbmVudFBvcyAtIDFdO1xuICAgICAgICBjb21wb25lbnRzW2NvbXBvbmVudFBvcyAtIDFdID0gY29tcG9uZW50c1tjb21wb25lbnRQb3NdO1xuICAgICAgICBjb21wb25lbnRzW2NvbXBvbmVudFBvc10gPSB0bXA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGhhbmRsZSBmb3Igd2hlbiBvbmUgdGVybWluYWwgaXMgaWdub3JlZC4gRm9yIHRoaXMgY2FzZSB3ZSBtZXJnZSB0aGVcbiAgLy8gdGVybWluYWwgaW50byB0aGUgcHJpb3Igc3RyaW5nIGFuZCBkcm9wIHRoZSBjaGFuZ2UuXG4gIGxldCBsYXN0Q29tcG9uZW50ID0gY29tcG9uZW50c1tjb21wb25lbnRMZW4gLSAxXTtcbiAgaWYgKGNvbXBvbmVudExlbiA+IDFcbiAgICAgICYmIChsYXN0Q29tcG9uZW50LmFkZGVkIHx8IGxhc3RDb21wb25lbnQucmVtb3ZlZClcbiAgICAgICYmIGRpZmYuZXF1YWxzKCcnLCBsYXN0Q29tcG9uZW50LnZhbHVlKSkge1xuICAgIGNvbXBvbmVudHNbY29tcG9uZW50TGVuIC0gMl0udmFsdWUgKz0gbGFzdENvbXBvbmVudC52YWx1ZTtcbiAgICBjb21wb25lbnRzLnBvcCgpO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBvbmVudHM7XG59XG5cbmZ1bmN0aW9uIGNsb25lUGF0aChwYXRoKSB7XG4gIHJldHVybiB7IG5ld1BvczogcGF0aC5uZXdQb3MsIGNvbXBvbmVudHM6IHBhdGguY29tcG9uZW50cy5zbGljZSgwKSB9O1xufVxuIiwiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IGNoYXJhY3RlckRpZmYgPSBuZXcgRGlmZigpO1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZDaGFycyhvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spIHsgcmV0dXJuIGNoYXJhY3RlckRpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spOyB9XG4iLCJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgY29uc3QgY3NzRGlmZiA9IG5ldyBEaWZmKCk7XG5jc3NEaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnNwbGl0KC8oW3t9OjssXXxcXHMrKS8pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZDc3Mob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBjc3NEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuIiwiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7bGluZURpZmZ9IGZyb20gJy4vbGluZSc7XG5cbmNvbnN0IG9iamVjdFByb3RvdHlwZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuXG5leHBvcnQgY29uc3QganNvbkRpZmYgPSBuZXcgRGlmZigpO1xuLy8gRGlzY3JpbWluYXRlIGJldHdlZW4gdHdvIGxpbmVzIG9mIHByZXR0eS1wcmludGVkLCBzZXJpYWxpemVkIEpTT04gd2hlcmUgb25lIG9mIHRoZW0gaGFzIGFcbi8vIGRhbmdsaW5nIGNvbW1hIGFuZCB0aGUgb3RoZXIgZG9lc24ndC4gVHVybnMgb3V0IGluY2x1ZGluZyB0aGUgZGFuZ2xpbmcgY29tbWEgeWllbGRzIHRoZSBuaWNlc3Qgb3V0cHV0OlxuanNvbkRpZmYudXNlTG9uZ2VzdFRva2VuID0gdHJ1ZTtcblxuanNvbkRpZmYudG9rZW5pemUgPSBsaW5lRGlmZi50b2tlbml6ZTtcbmpzb25EaWZmLmNhc3RJbnB1dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeShjYW5vbmljYWxpemUodmFsdWUpLCB1bmRlZmluZWQsICcgICcpO1xufTtcbmpzb25EaWZmLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiBEaWZmLnByb3RvdHlwZS5lcXVhbHMobGVmdC5yZXBsYWNlKC8sKFtcXHJcXG5dKS9nLCAnJDEnKSwgcmlnaHQucmVwbGFjZSgvLChbXFxyXFxuXSkvZywgJyQxJykpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZKc29uKG9sZE9iaiwgbmV3T2JqLCBjYWxsYmFjaykgeyByZXR1cm4ganNvbkRpZmYuZGlmZihvbGRPYmosIG5ld09iaiwgY2FsbGJhY2spOyB9XG5cblxuLy8gVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBwcmVzZW5jZSBvZiBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IGJhaWxpbmcgb3V0IHdoZW4gZW5jb3VudGVyaW5nIGFuXG4vLyBvYmplY3QgdGhhdCBpcyBhbHJlYWR5IG9uIHRoZSBcInN0YWNrXCIgb2YgaXRlbXMgYmVpbmcgcHJvY2Vzc2VkLlxuZXhwb3J0IGZ1bmN0aW9uIGNhbm9uaWNhbGl6ZShvYmosIHN0YWNrLCByZXBsYWNlbWVudFN0YWNrKSB7XG4gIHN0YWNrID0gc3RhY2sgfHwgW107XG4gIHJlcGxhY2VtZW50U3RhY2sgPSByZXBsYWNlbWVudFN0YWNrIHx8IFtdO1xuXG4gIGxldCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChzdGFja1tpXSA9PT0gb2JqKSB7XG4gICAgICByZXR1cm4gcmVwbGFjZW1lbnRTdGFja1tpXTtcbiAgICB9XG4gIH1cblxuICBsZXQgY2Fub25pY2FsaXplZE9iajtcblxuICBpZiAoJ1tvYmplY3QgQXJyYXldJyA9PT0gb2JqZWN0UHJvdG90eXBlVG9TdHJpbmcuY2FsbChvYmopKSB7XG4gICAgc3RhY2sucHVzaChvYmopO1xuICAgIGNhbm9uaWNhbGl6ZWRPYmogPSBuZXcgQXJyYXkob2JqLmxlbmd0aCk7XG4gICAgcmVwbGFjZW1lbnRTdGFjay5wdXNoKGNhbm9uaWNhbGl6ZWRPYmopO1xuICAgIGZvciAoaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNhbm9uaWNhbGl6ZWRPYmpbaV0gPSBjYW5vbmljYWxpemUob2JqW2ldLCBzdGFjaywgcmVwbGFjZW1lbnRTdGFjayk7XG4gICAgfVxuICAgIHN0YWNrLnBvcCgpO1xuICAgIHJlcGxhY2VtZW50U3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIGNhbm9uaWNhbGl6ZWRPYmo7XG4gIH1cblxuICBpZiAob2JqICYmIG9iai50b0pTT04pIHtcbiAgICBvYmogPSBvYmoudG9KU09OKCk7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsKSB7XG4gICAgc3RhY2sucHVzaChvYmopO1xuICAgIGNhbm9uaWNhbGl6ZWRPYmogPSB7fTtcbiAgICByZXBsYWNlbWVudFN0YWNrLnB1c2goY2Fub25pY2FsaXplZE9iaik7XG4gICAgbGV0IHNvcnRlZEtleXMgPSBbXSxcbiAgICAgICAga2V5O1xuICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzb3J0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGVkS2V5cy5zb3J0KCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNvcnRlZEtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGtleSA9IHNvcnRlZEtleXNbaV07XG4gICAgICBjYW5vbmljYWxpemVkT2JqW2tleV0gPSBjYW5vbmljYWxpemUob2JqW2tleV0sIHN0YWNrLCByZXBsYWNlbWVudFN0YWNrKTtcbiAgICB9XG4gICAgc3RhY2sucG9wKCk7XG4gICAgcmVwbGFjZW1lbnRTdGFjay5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBjYW5vbmljYWxpemVkT2JqID0gb2JqO1xuICB9XG4gIHJldHVybiBjYW5vbmljYWxpemVkT2JqO1xufVxuIiwiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7Z2VuZXJhdGVPcHRpb25zfSBmcm9tICcuLi91dGlsL3BhcmFtcyc7XG5cbmV4cG9ydCBjb25zdCBsaW5lRGlmZiA9IG5ldyBEaWZmKCk7XG5saW5lRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGxldCByZXRMaW5lcyA9IFtdLFxuICAgICAgbGluZXNBbmROZXdsaW5lcyA9IHZhbHVlLnNwbGl0KC8oXFxufFxcclxcbikvKTtcblxuICAvLyBJZ25vcmUgdGhlIGZpbmFsIGVtcHR5IHRva2VuIHRoYXQgb2NjdXJzIGlmIHRoZSBzdHJpbmcgZW5kcyB3aXRoIGEgbmV3IGxpbmVcbiAgaWYgKCFsaW5lc0FuZE5ld2xpbmVzW2xpbmVzQW5kTmV3bGluZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBsaW5lc0FuZE5ld2xpbmVzLnBvcCgpO1xuICB9XG5cbiAgLy8gTWVyZ2UgdGhlIGNvbnRlbnQgYW5kIGxpbmUgc2VwYXJhdG9ycyBpbnRvIHNpbmdsZSB0b2tlbnNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lc0FuZE5ld2xpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGxpbmUgPSBsaW5lc0FuZE5ld2xpbmVzW2ldO1xuXG4gICAgaWYgKGkgJSAyICYmICF0aGlzLm9wdGlvbnMubmV3bGluZUlzVG9rZW4pIHtcbiAgICAgIHJldExpbmVzW3JldExpbmVzLmxlbmd0aCAtIDFdICs9IGxpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlV2hpdGVzcGFjZSkge1xuICAgICAgICBsaW5lID0gbGluZS50cmltKCk7XG4gICAgICB9XG4gICAgICByZXRMaW5lcy5wdXNoKGxpbmUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXRMaW5lcztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmTGluZXMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBsaW5lRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7IH1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmVHJpbW1lZExpbmVzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykge1xuICBsZXQgb3B0aW9ucyA9IGdlbmVyYXRlT3B0aW9ucyhjYWxsYmFjaywge2lnbm9yZVdoaXRlc3BhY2U6IHRydWV9KTtcbiAgcmV0dXJuIGxpbmVEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIG9wdGlvbnMpO1xufVxuIiwiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcblxuXG5leHBvcnQgY29uc3Qgc2VudGVuY2VEaWZmID0gbmV3IERpZmYoKTtcbnNlbnRlbmNlRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5zcGxpdCgvKFxcUy4rP1suIT9dKSg/PVxccyt8JCkvKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmU2VudGVuY2VzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykgeyByZXR1cm4gc2VudGVuY2VEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuIiwiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7Z2VuZXJhdGVPcHRpb25zfSBmcm9tICcuLi91dGlsL3BhcmFtcyc7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX3NjcmlwdF9pbl9Vbmljb2RlXG4vL1xuLy8gUmFuZ2VzIGFuZCBleGNlcHRpb25zOlxuLy8gTGF0aW4tMSBTdXBwbGVtZW50LCAwMDgw4oCTMDBGRlxuLy8gIC0gVSswMEQ3ICDDlyBNdWx0aXBsaWNhdGlvbiBzaWduXG4vLyAgLSBVKzAwRjcgIMO3IERpdmlzaW9uIHNpZ25cbi8vIExhdGluIEV4dGVuZGVkLUEsIDAxMDDigJMwMTdGXG4vLyBMYXRpbiBFeHRlbmRlZC1CLCAwMTgw4oCTMDI0RlxuLy8gSVBBIEV4dGVuc2lvbnMsIDAyNTDigJMwMkFGXG4vLyBTcGFjaW5nIE1vZGlmaWVyIExldHRlcnMsIDAyQjDigJMwMkZGXG4vLyAgLSBVKzAyQzcgIMuHICYjNzExOyAgQ2Fyb25cbi8vICAtIFUrMDJEOCAgy5ggJiM3Mjg7ICBCcmV2ZVxuLy8gIC0gVSswMkQ5ICDLmSAmIzcyOTsgIERvdCBBYm92ZVxuLy8gIC0gVSswMkRBICDLmiAmIzczMDsgIFJpbmcgQWJvdmVcbi8vICAtIFUrMDJEQiAgy5sgJiM3MzE7ICBPZ29uZWtcbi8vICAtIFUrMDJEQyAgy5wgJiM3MzI7ICBTbWFsbCBUaWxkZVxuLy8gIC0gVSswMkREICDLnSAmIzczMzsgIERvdWJsZSBBY3V0ZSBBY2NlbnRcbi8vIExhdGluIEV4dGVuZGVkIEFkZGl0aW9uYWwsIDFFMDDigJMxRUZGXG5jb25zdCBleHRlbmRlZFdvcmRDaGFycyA9IC9eW2EtekEtWlxcdXtDMH0tXFx1e0ZGfVxcdXtEOH0tXFx1e0Y2fVxcdXtGOH0tXFx1ezJDNn1cXHV7MkM4fS1cXHV7MkQ3fVxcdXsyREV9LVxcdXsyRkZ9XFx1ezFFMDB9LVxcdXsxRUZGfV0rJC91O1xuXG5jb25zdCByZVdoaXRlc3BhY2UgPSAvXFxTLztcblxuZXhwb3J0IGNvbnN0IHdvcmREaWZmID0gbmV3IERpZmYoKTtcbndvcmREaWZmLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCAodGhpcy5vcHRpb25zLmlnbm9yZVdoaXRlc3BhY2UgJiYgIXJlV2hpdGVzcGFjZS50ZXN0KGxlZnQpICYmICFyZVdoaXRlc3BhY2UudGVzdChyaWdodCkpO1xufTtcbndvcmREaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgbGV0IHRva2VucyA9IHZhbHVlLnNwbGl0KC8oXFxzK3xcXGIpLyk7XG5cbiAgLy8gSm9pbiB0aGUgYm91bmRhcnkgc3BsaXRzIHRoYXQgd2UgZG8gbm90IGNvbnNpZGVyIHRvIGJlIGJvdW5kYXJpZXMuIFRoaXMgaXMgcHJpbWFyaWx5IHRoZSBleHRlbmRlZCBMYXRpbiBjaGFyYWN0ZXIgc2V0LlxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAvLyBJZiB3ZSBoYXZlIGFuIGVtcHR5IHN0cmluZyBpbiB0aGUgbmV4dCBmaWVsZCBhbmQgd2UgaGF2ZSBvbmx5IHdvcmQgY2hhcnMgYmVmb3JlIGFuZCBhZnRlciwgbWVyZ2VcbiAgICBpZiAoIXRva2Vuc1tpICsgMV0gJiYgdG9rZW5zW2kgKyAyXVxuICAgICAgICAgICYmIGV4dGVuZGVkV29yZENoYXJzLnRlc3QodG9rZW5zW2ldKVxuICAgICAgICAgICYmIGV4dGVuZGVkV29yZENoYXJzLnRlc3QodG9rZW5zW2kgKyAyXSkpIHtcbiAgICAgIHRva2Vuc1tpXSArPSB0b2tlbnNbaSArIDJdO1xuICAgICAgdG9rZW5zLnNwbGljZShpICsgMSwgMik7XG4gICAgICBpLS07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmV29yZHMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7XG4gIGxldCBvcHRpb25zID0gZ2VuZXJhdGVPcHRpb25zKGNhbGxiYWNrLCB7aWdub3JlV2hpdGVzcGFjZTogdHJ1ZX0pO1xuICByZXR1cm4gd29yZERpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGlmZldvcmRzV2l0aFNwYWNlKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykge1xuICByZXR1cm4gd29yZERpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spO1xufVxuIiwiLyogU2VlIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMgb2YgdXNlICovXG5cbi8qXG4gKiBUZXh0IGRpZmYgaW1wbGVtZW50YXRpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgQVBJUzpcbiAqIEpzRGlmZi5kaWZmQ2hhcnM6IENoYXJhY3RlciBieSBjaGFyYWN0ZXIgZGlmZlxuICogSnNEaWZmLmRpZmZXb3JkczogV29yZCAoYXMgZGVmaW5lZCBieSBcXGIgcmVnZXgpIGRpZmYgd2hpY2ggaWdub3JlcyB3aGl0ZXNwYWNlXG4gKiBKc0RpZmYuZGlmZkxpbmVzOiBMaW5lIGJhc2VkIGRpZmZcbiAqXG4gKiBKc0RpZmYuZGlmZkNzczogRGlmZiB0YXJnZXRlZCBhdCBDU1MgY29udGVudFxuICpcbiAqIFRoZXNlIG1ldGhvZHMgYXJlIGJhc2VkIG9uIHRoZSBpbXBsZW1lbnRhdGlvbiBwcm9wb3NlZCBpblxuICogXCJBbiBPKE5EKSBEaWZmZXJlbmNlIEFsZ29yaXRobSBhbmQgaXRzIFZhcmlhdGlvbnNcIiAoTXllcnMsIDE5ODYpLlxuICogaHR0cDovL2NpdGVzZWVyeC5pc3QucHN1LmVkdS92aWV3ZG9jL3N1bW1hcnk/ZG9pPTEwLjEuMS40LjY5MjdcbiAqL1xuaW1wb3J0IERpZmYgZnJvbSAnLi9kaWZmL2Jhc2UnO1xuaW1wb3J0IHtkaWZmQ2hhcnN9IGZyb20gJy4vZGlmZi9jaGFyYWN0ZXInO1xuaW1wb3J0IHtkaWZmV29yZHMsIGRpZmZXb3Jkc1dpdGhTcGFjZX0gZnJvbSAnLi9kaWZmL3dvcmQnO1xuaW1wb3J0IHtkaWZmTGluZXMsIGRpZmZUcmltbWVkTGluZXN9IGZyb20gJy4vZGlmZi9saW5lJztcbmltcG9ydCB7ZGlmZlNlbnRlbmNlc30gZnJvbSAnLi9kaWZmL3NlbnRlbmNlJztcblxuaW1wb3J0IHtkaWZmQ3NzfSBmcm9tICcuL2RpZmYvY3NzJztcbmltcG9ydCB7ZGlmZkpzb24sIGNhbm9uaWNhbGl6ZX0gZnJvbSAnLi9kaWZmL2pzb24nO1xuXG5pbXBvcnQge2FwcGx5UGF0Y2gsIGFwcGx5UGF0Y2hlc30gZnJvbSAnLi9wYXRjaC9hcHBseSc7XG5pbXBvcnQge3BhcnNlUGF0Y2h9IGZyb20gJy4vcGF0Y2gvcGFyc2UnO1xuaW1wb3J0IHtzdHJ1Y3R1cmVkUGF0Y2gsIGNyZWF0ZVR3b0ZpbGVzUGF0Y2gsIGNyZWF0ZVBhdGNofSBmcm9tICcuL3BhdGNoL2NyZWF0ZSc7XG5cbmltcG9ydCB7Y29udmVydENoYW5nZXNUb0RNUH0gZnJvbSAnLi9jb252ZXJ0L2RtcCc7XG5pbXBvcnQge2NvbnZlcnRDaGFuZ2VzVG9YTUx9IGZyb20gJy4vY29udmVydC94bWwnO1xuXG5leHBvcnQge1xuICBEaWZmLFxuXG4gIGRpZmZDaGFycyxcbiAgZGlmZldvcmRzLFxuICBkaWZmV29yZHNXaXRoU3BhY2UsXG4gIGRpZmZMaW5lcyxcbiAgZGlmZlRyaW1tZWRMaW5lcyxcbiAgZGlmZlNlbnRlbmNlcyxcblxuICBkaWZmQ3NzLFxuICBkaWZmSnNvbixcblxuICBzdHJ1Y3R1cmVkUGF0Y2gsXG4gIGNyZWF0ZVR3b0ZpbGVzUGF0Y2gsXG4gIGNyZWF0ZVBhdGNoLFxuICBhcHBseVBhdGNoLFxuICBhcHBseVBhdGNoZXMsXG4gIHBhcnNlUGF0Y2gsXG4gIGNvbnZlcnRDaGFuZ2VzVG9ETVAsXG4gIGNvbnZlcnRDaGFuZ2VzVG9YTUwsXG4gIGNhbm9uaWNhbGl6ZVxufTtcbiIsImltcG9ydCB7cGFyc2VQYXRjaH0gZnJvbSAnLi9wYXJzZSc7XG5pbXBvcnQgZGlzdGFuY2VJdGVyYXRvciBmcm9tICcuLi91dGlsL2Rpc3RhbmNlLWl0ZXJhdG9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGF0Y2goc291cmNlLCB1bmlEaWZmLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKHR5cGVvZiB1bmlEaWZmID09PSAnc3RyaW5nJykge1xuICAgIHVuaURpZmYgPSBwYXJzZVBhdGNoKHVuaURpZmYpO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodW5pRGlmZikpIHtcbiAgICBpZiAodW5pRGlmZi5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FwcGx5UGF0Y2ggb25seSB3b3JrcyB3aXRoIGEgc2luZ2xlIGlucHV0LicpO1xuICAgIH1cblxuICAgIHVuaURpZmYgPSB1bmlEaWZmWzBdO1xuICB9XG5cbiAgLy8gQXBwbHkgdGhlIGRpZmYgdG8gdGhlIGlucHV0XG4gIGxldCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgnXFxuJyksXG4gICAgICBodW5rcyA9IHVuaURpZmYuaHVua3MsXG5cbiAgICAgIGNvbXBhcmVMaW5lID0gb3B0aW9ucy5jb21wYXJlTGluZSB8fCAoKGxpbmVOdW1iZXIsIGxpbmUsIG9wZXJhdGlvbiwgcGF0Y2hDb250ZW50KSA9PiBsaW5lID09PSBwYXRjaENvbnRlbnQpLFxuICAgICAgZXJyb3JDb3VudCA9IDAsXG4gICAgICBmdXp6RmFjdG9yID0gb3B0aW9ucy5mdXp6RmFjdG9yIHx8IDAsXG4gICAgICBtaW5MaW5lID0gMCxcbiAgICAgIG9mZnNldCA9IDAsXG5cbiAgICAgIHJlbW92ZUVPRk5MLFxuICAgICAgYWRkRU9GTkw7XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgaHVuayBleGFjdGx5IGZpdHMgb24gdGhlIHByb3ZpZGVkIGxvY2F0aW9uXG4gICAqL1xuICBmdW5jdGlvbiBodW5rRml0cyhodW5rLCB0b1Bvcykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaHVuay5saW5lcy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGxpbmUgPSBodW5rLmxpbmVzW2pdLFxuICAgICAgICAgIG9wZXJhdGlvbiA9IGxpbmVbMF0sXG4gICAgICAgICAgY29udGVudCA9IGxpbmUuc3Vic3RyKDEpO1xuXG4gICAgICBpZiAob3BlcmF0aW9uID09PSAnICcgfHwgb3BlcmF0aW9uID09PSAnLScpIHtcbiAgICAgICAgLy8gQ29udGV4dCBzYW5pdHkgY2hlY2tcbiAgICAgICAgaWYgKCFjb21wYXJlTGluZSh0b1BvcyArIDEsIGxpbmVzW3RvUG9zXSwgb3BlcmF0aW9uLCBjb250ZW50KSkge1xuICAgICAgICAgIGVycm9yQ291bnQrKztcblxuICAgICAgICAgIGlmIChlcnJvckNvdW50ID4gZnV6ekZhY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0b1BvcysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gU2VhcmNoIGJlc3QgZml0IG9mZnNldHMgZm9yIGVhY2ggaHVuayBiYXNlZCBvbiB0aGUgcHJldmlvdXMgb25lc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGh1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGh1bmsgPSBodW5rc1tpXSxcbiAgICAgICAgbWF4TGluZSA9IGxpbmVzLmxlbmd0aCAtIGh1bmsub2xkTGluZXMsXG4gICAgICAgIGxvY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgdG9Qb3MgPSBvZmZzZXQgKyBodW5rLm9sZFN0YXJ0IC0gMTtcblxuICAgIGxldCBpdGVyYXRvciA9IGRpc3RhbmNlSXRlcmF0b3IodG9Qb3MsIG1pbkxpbmUsIG1heExpbmUpO1xuXG4gICAgZm9yICg7IGxvY2FsT2Zmc2V0ICE9PSB1bmRlZmluZWQ7IGxvY2FsT2Zmc2V0ID0gaXRlcmF0b3IoKSkge1xuICAgICAgaWYgKGh1bmtGaXRzKGh1bmssIHRvUG9zICsgbG9jYWxPZmZzZXQpKSB7XG4gICAgICAgIGh1bmsub2Zmc2V0ID0gb2Zmc2V0ICs9IGxvY2FsT2Zmc2V0O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobG9jYWxPZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFNldCBsb3dlciB0ZXh0IGxpbWl0IHRvIGVuZCBvZiB0aGUgY3VycmVudCBodW5rLCBzbyBuZXh0IG9uZXMgZG9uJ3QgdHJ5XG4gICAgLy8gdG8gZml0IG92ZXIgYWxyZWFkeSBwYXRjaGVkIHRleHRcbiAgICBtaW5MaW5lID0gaHVuay5vZmZzZXQgKyBodW5rLm9sZFN0YXJ0ICsgaHVuay5vbGRMaW5lcztcbiAgfVxuXG4gIC8vIEFwcGx5IHBhdGNoIGh1bmtzXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaHVuayA9IGh1bmtzW2ldLFxuICAgICAgICB0b1BvcyA9IGh1bmsub2Zmc2V0ICsgaHVuay5uZXdTdGFydCAtIDE7XG4gICAgaWYgKGh1bmsubmV3TGluZXMgPT0gMCkgeyB0b1BvcysrOyB9XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGh1bmsubGluZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCBsaW5lID0gaHVuay5saW5lc1tqXSxcbiAgICAgICAgICBvcGVyYXRpb24gPSBsaW5lWzBdLFxuICAgICAgICAgIGNvbnRlbnQgPSBsaW5lLnN1YnN0cigxKTtcblxuICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gJyAnKSB7XG4gICAgICAgIHRvUG9zKys7XG4gICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbiA9PT0gJy0nKSB7XG4gICAgICAgIGxpbmVzLnNwbGljZSh0b1BvcywgMSk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT09ICcrJykge1xuICAgICAgICBsaW5lcy5zcGxpY2UodG9Qb3MsIDAsIGNvbnRlbnQpO1xuICAgICAgICB0b1BvcysrO1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT09ICdcXFxcJykge1xuICAgICAgICBsZXQgcHJldmlvdXNPcGVyYXRpb24gPSBodW5rLmxpbmVzW2ogLSAxXSA/IGh1bmsubGluZXNbaiAtIDFdWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKHByZXZpb3VzT3BlcmF0aW9uID09PSAnKycpIHtcbiAgICAgICAgICByZW1vdmVFT0ZOTCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNPcGVyYXRpb24gPT09ICctJykge1xuICAgICAgICAgIGFkZEVPRk5MID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEhhbmRsZSBFT0ZOTCBpbnNlcnRpb24vcmVtb3ZhbFxuICBpZiAocmVtb3ZlRU9GTkwpIHtcbiAgICB3aGlsZSAoIWxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICBsaW5lcy5wb3AoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYWRkRU9GTkwpIHtcbiAgICBsaW5lcy5wdXNoKCcnKTtcbiAgfVxuICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59XG5cbi8vIFdyYXBwZXIgdGhhdCBzdXBwb3J0cyBtdWx0aXBsZSBmaWxlIHBhdGNoZXMgdmlhIGNhbGxiYWNrcy5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhdGNoZXModW5pRGlmZiwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHVuaURpZmYgPT09ICdzdHJpbmcnKSB7XG4gICAgdW5pRGlmZiA9IHBhcnNlUGF0Y2godW5pRGlmZik7XG4gIH1cblxuICBsZXQgY3VycmVudEluZGV4ID0gMDtcbiAgZnVuY3Rpb24gcHJvY2Vzc0luZGV4KCkge1xuICAgIGxldCBpbmRleCA9IHVuaURpZmZbY3VycmVudEluZGV4KytdO1xuICAgIGlmICghaW5kZXgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5sb2FkRmlsZShpbmRleCwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmNvbXBsZXRlKGVycik7XG4gICAgICB9XG5cbiAgICAgIGxldCB1cGRhdGVkQ29udGVudCA9IGFwcGx5UGF0Y2goZGF0YSwgaW5kZXgsIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5wYXRjaGVkKGluZGV4LCB1cGRhdGVkQ29udGVudCk7XG5cbiAgICAgIHNldFRpbWVvdXQocHJvY2Vzc0luZGV4LCAwKTtcbiAgICB9KTtcbiAgfVxuICBwcm9jZXNzSW5kZXgoKTtcbn1cbiIsImltcG9ydCB7ZGlmZkxpbmVzfSBmcm9tICcuLi9kaWZmL2xpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RydWN0dXJlZFBhdGNoKG9sZEZpbGVOYW1lLCBuZXdGaWxlTmFtZSwgb2xkU3RyLCBuZXdTdHIsIG9sZEhlYWRlciwgbmV3SGVhZGVyLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IGNvbnRleHQ6IDQgfTtcbiAgfVxuXG4gIGNvbnN0IGRpZmYgPSBkaWZmTGluZXMob2xkU3RyLCBuZXdTdHIpO1xuICBkaWZmLnB1c2goe3ZhbHVlOiAnJywgbGluZXM6IFtdfSk7ICAgLy8gQXBwZW5kIGFuIGVtcHR5IHZhbHVlIHRvIG1ha2UgY2xlYW51cCBlYXNpZXJcblxuICBmdW5jdGlvbiBjb250ZXh0TGluZXMobGluZXMpIHtcbiAgICByZXR1cm4gbGluZXMubWFwKGZ1bmN0aW9uKGVudHJ5KSB7IHJldHVybiAnICcgKyBlbnRyeTsgfSk7XG4gIH1cblxuICBsZXQgaHVua3MgPSBbXTtcbiAgbGV0IG9sZFJhbmdlU3RhcnQgPSAwLCBuZXdSYW5nZVN0YXJ0ID0gMCwgY3VyUmFuZ2UgPSBbXSxcbiAgICAgIG9sZExpbmUgPSAxLCBuZXdMaW5lID0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaWZmLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY3VycmVudCA9IGRpZmZbaV0sXG4gICAgICAgICAgbGluZXMgPSBjdXJyZW50LmxpbmVzIHx8IGN1cnJlbnQudmFsdWUucmVwbGFjZSgvXFxuJC8sICcnKS5zcGxpdCgnXFxuJyk7XG4gICAgY3VycmVudC5saW5lcyA9IGxpbmVzO1xuXG4gICAgaWYgKGN1cnJlbnQuYWRkZWQgfHwgY3VycmVudC5yZW1vdmVkKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIHByZXZpb3VzIGNvbnRleHQsIHN0YXJ0IHdpdGggdGhhdFxuICAgICAgaWYgKCFvbGRSYW5nZVN0YXJ0KSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBkaWZmW2kgLSAxXTtcbiAgICAgICAgb2xkUmFuZ2VTdGFydCA9IG9sZExpbmU7XG4gICAgICAgIG5ld1JhbmdlU3RhcnQgPSBuZXdMaW5lO1xuXG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgY3VyUmFuZ2UgPSBvcHRpb25zLmNvbnRleHQgPiAwID8gY29udGV4dExpbmVzKHByZXYubGluZXMuc2xpY2UoLW9wdGlvbnMuY29udGV4dCkpIDogW107XG4gICAgICAgICAgb2xkUmFuZ2VTdGFydCAtPSBjdXJSYW5nZS5sZW5ndGg7XG4gICAgICAgICAgbmV3UmFuZ2VTdGFydCAtPSBjdXJSYW5nZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3V0cHV0IG91ciBjaGFuZ2VzXG4gICAgICBjdXJSYW5nZS5wdXNoKC4uLiBsaW5lcy5tYXAoZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIChjdXJyZW50LmFkZGVkID8gJysnIDogJy0nKSArIGVudHJ5O1xuICAgICAgfSkpO1xuXG4gICAgICAvLyBUcmFjayB0aGUgdXBkYXRlZCBmaWxlIHBvc2l0aW9uXG4gICAgICBpZiAoY3VycmVudC5hZGRlZCkge1xuICAgICAgICBuZXdMaW5lICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9sZExpbmUgKz0gbGluZXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZGVudGljYWwgY29udGV4dCBsaW5lcy4gVHJhY2sgbGluZSBjaGFuZ2VzXG4gICAgICBpZiAob2xkUmFuZ2VTdGFydCkge1xuICAgICAgICAvLyBDbG9zZSBvdXQgYW55IGNoYW5nZXMgdGhhdCBoYXZlIGJlZW4gb3V0cHV0IChvciBqb2luIG92ZXJsYXBwaW5nKVxuICAgICAgICBpZiAobGluZXMubGVuZ3RoIDw9IG9wdGlvbnMuY29udGV4dCAqIDIgJiYgaSA8IGRpZmYubGVuZ3RoIC0gMikge1xuICAgICAgICAgIC8vIE92ZXJsYXBwaW5nXG4gICAgICAgICAgY3VyUmFuZ2UucHVzaCguLi4gY29udGV4dExpbmVzKGxpbmVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZW5kIHRoZSByYW5nZSBhbmQgb3V0cHV0XG4gICAgICAgICAgbGV0IGNvbnRleHRTaXplID0gTWF0aC5taW4obGluZXMubGVuZ3RoLCBvcHRpb25zLmNvbnRleHQpO1xuICAgICAgICAgIGN1clJhbmdlLnB1c2goLi4uIGNvbnRleHRMaW5lcyhsaW5lcy5zbGljZSgwLCBjb250ZXh0U2l6ZSkpKTtcblxuICAgICAgICAgIGxldCBodW5rID0ge1xuICAgICAgICAgICAgb2xkU3RhcnQ6IG9sZFJhbmdlU3RhcnQsXG4gICAgICAgICAgICBvbGRMaW5lczogKG9sZExpbmUgLSBvbGRSYW5nZVN0YXJ0ICsgY29udGV4dFNpemUpLFxuICAgICAgICAgICAgbmV3U3RhcnQ6IG5ld1JhbmdlU3RhcnQsXG4gICAgICAgICAgICBuZXdMaW5lczogKG5ld0xpbmUgLSBuZXdSYW5nZVN0YXJ0ICsgY29udGV4dFNpemUpLFxuICAgICAgICAgICAgbGluZXM6IGN1clJhbmdlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoaSA+PSBkaWZmLmxlbmd0aCAtIDIgJiYgbGluZXMubGVuZ3RoIDw9IG9wdGlvbnMuY29udGV4dCkge1xuICAgICAgICAgICAgLy8gRU9GIGlzIGluc2lkZSB0aGlzIGh1bmtcbiAgICAgICAgICAgIGxldCBvbGRFT0ZOZXdsaW5lID0gKC9cXG4kLy50ZXN0KG9sZFN0cikpO1xuICAgICAgICAgICAgbGV0IG5ld0VPRk5ld2xpbmUgPSAoL1xcbiQvLnRlc3QobmV3U3RyKSk7XG4gICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID09IDAgJiYgIW9sZEVPRk5ld2xpbmUpIHtcbiAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlOiBvbGQgaGFzIG5vIGVvbCBhbmQgbm8gdHJhaWxpbmcgY29udGV4dDsgbm8tbmwgY2FuIGVuZCB1cCBiZWZvcmUgYWRkc1xuICAgICAgICAgICAgICBjdXJSYW5nZS5zcGxpY2UoaHVuay5vbGRMaW5lcywgMCwgJ1xcXFwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghb2xkRU9GTmV3bGluZSB8fCAhbmV3RU9GTmV3bGluZSkge1xuICAgICAgICAgICAgICBjdXJSYW5nZS5wdXNoKCdcXFxcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaHVua3MucHVzaChodW5rKTtcblxuICAgICAgICAgIG9sZFJhbmdlU3RhcnQgPSAwO1xuICAgICAgICAgIG5ld1JhbmdlU3RhcnQgPSAwO1xuICAgICAgICAgIGN1clJhbmdlID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9sZExpbmUgKz0gbGluZXMubGVuZ3RoO1xuICAgICAgbmV3TGluZSArPSBsaW5lcy5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbGRGaWxlTmFtZTogb2xkRmlsZU5hbWUsIG5ld0ZpbGVOYW1lOiBuZXdGaWxlTmFtZSxcbiAgICBvbGRIZWFkZXI6IG9sZEhlYWRlciwgbmV3SGVhZGVyOiBuZXdIZWFkZXIsXG4gICAgaHVua3M6IGh1bmtzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUd29GaWxlc1BhdGNoKG9sZEZpbGVOYW1lLCBuZXdGaWxlTmFtZSwgb2xkU3RyLCBuZXdTdHIsIG9sZEhlYWRlciwgbmV3SGVhZGVyLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRpZmYgPSBzdHJ1Y3R1cmVkUGF0Y2gob2xkRmlsZU5hbWUsIG5ld0ZpbGVOYW1lLCBvbGRTdHIsIG5ld1N0ciwgb2xkSGVhZGVyLCBuZXdIZWFkZXIsIG9wdGlvbnMpO1xuXG4gIGNvbnN0IHJldCA9IFtdO1xuICBpZiAob2xkRmlsZU5hbWUgPT0gbmV3RmlsZU5hbWUpIHtcbiAgICByZXQucHVzaCgnSW5kZXg6ICcgKyBvbGRGaWxlTmFtZSk7XG4gIH1cbiAgcmV0LnB1c2goJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKTtcbiAgcmV0LnB1c2goJy0tLSAnICsgZGlmZi5vbGRGaWxlTmFtZSArICh0eXBlb2YgZGlmZi5vbGRIZWFkZXIgPT09ICd1bmRlZmluZWQnID8gJycgOiAnXFx0JyArIGRpZmYub2xkSGVhZGVyKSk7XG4gIHJldC5wdXNoKCcrKysgJyArIGRpZmYubmV3RmlsZU5hbWUgKyAodHlwZW9mIGRpZmYubmV3SGVhZGVyID09PSAndW5kZWZpbmVkJyA/ICcnIDogJ1xcdCcgKyBkaWZmLm5ld0hlYWRlcikpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZi5odW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGh1bmsgPSBkaWZmLmh1bmtzW2ldO1xuICAgIHJldC5wdXNoKFxuICAgICAgJ0BAIC0nICsgaHVuay5vbGRTdGFydCArICcsJyArIGh1bmsub2xkTGluZXNcbiAgICAgICsgJyArJyArIGh1bmsubmV3U3RhcnQgKyAnLCcgKyBodW5rLm5ld0xpbmVzXG4gICAgICArICcgQEAnXG4gICAgKTtcbiAgICByZXQucHVzaC5hcHBseShyZXQsIGh1bmsubGluZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJldC5qb2luKCdcXG4nKSArICdcXG4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGF0Y2goZmlsZU5hbWUsIG9sZFN0ciwgbmV3U3RyLCBvbGRIZWFkZXIsIG5ld0hlYWRlciwgb3B0aW9ucykge1xuICByZXR1cm4gY3JlYXRlVHdvRmlsZXNQYXRjaChmaWxlTmFtZSwgZmlsZU5hbWUsIG9sZFN0ciwgbmV3U3RyLCBvbGRIZWFkZXIsIG5ld0hlYWRlciwgb3B0aW9ucyk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VQYXRjaCh1bmlEaWZmLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IGRpZmZzdHIgPSB1bmlEaWZmLnNwbGl0KCdcXG4nKSxcbiAgICAgIGxpc3QgPSBbXSxcbiAgICAgIGkgPSAwO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSW5kZXgoKSB7XG4gICAgbGV0IGluZGV4ID0ge307XG4gICAgbGlzdC5wdXNoKGluZGV4KTtcblxuICAgIC8vIFBhcnNlIGRpZmYgbWV0YWRhdGFcbiAgICB3aGlsZSAoaSA8IGRpZmZzdHIubGVuZ3RoKSB7XG4gICAgICBsZXQgbGluZSA9IGRpZmZzdHJbaV07XG5cbiAgICAgIC8vIEZpbGUgaGVhZGVyIGZvdW5kLCBlbmQgcGFyc2luZyBkaWZmIG1ldGFkYXRhXG4gICAgICBpZiAoL14oXFwtXFwtXFwtfFxcK1xcK1xcK3xAQClcXHMvLnRlc3QobGluZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIERpZmYgaW5kZXhcbiAgICAgIGxldCBoZWFkZXIgPSAoL14oPzpJbmRleDp8ZGlmZig/OiAtciBcXHcrKSspXFxzKyguKz8pXFxzKiQvKS5leGVjKGxpbmUpO1xuICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICBpbmRleC5pbmRleCA9IGhlYWRlclsxXTtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIGZpbGUgaGVhZGVycyBpZiB0aGV5IGFyZSBkZWZpbmVkLiBVbmlmaWVkIGRpZmYgcmVxdWlyZXMgdGhlbSwgYnV0XG4gICAgLy8gdGhlcmUncyBubyB0ZWNobmljYWwgaXNzdWVzIHRvIGhhdmUgYW4gaXNvbGF0ZWQgaHVuayB3aXRob3V0IGZpbGUgaGVhZGVyXG4gICAgcGFyc2VGaWxlSGVhZGVyKGluZGV4KTtcbiAgICBwYXJzZUZpbGVIZWFkZXIoaW5kZXgpO1xuXG4gICAgLy8gUGFyc2UgaHVua3NcbiAgICBpbmRleC5odW5rcyA9IFtdO1xuXG4gICAgd2hpbGUgKGkgPCBkaWZmc3RyLmxlbmd0aCkge1xuICAgICAgbGV0IGxpbmUgPSBkaWZmc3RyW2ldO1xuXG4gICAgICBpZiAoL14oSW5kZXg6fGRpZmZ8XFwtXFwtXFwtfFxcK1xcK1xcKylcXHMvLnRlc3QobGluZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKC9eQEAvLnRlc3QobGluZSkpIHtcbiAgICAgICAgaW5kZXguaHVua3MucHVzaChwYXJzZUh1bmsoKSk7XG4gICAgICB9IGVsc2UgaWYgKGxpbmUgJiYgb3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgICAgLy8gSWdub3JlIHVuZXhwZWN0ZWQgY29udGVudCB1bmxlc3MgaW4gc3RyaWN0IG1vZGVcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGxpbmUgJyArIChpICsgMSkgKyAnICcgKyBKU09OLnN0cmluZ2lmeShsaW5lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyc2VzIHRoZSAtLS0gYW5kICsrKyBoZWFkZXJzLCBpZiBub25lIGFyZSBmb3VuZCwgbm8gbGluZXNcbiAgLy8gYXJlIGNvbnN1bWVkLlxuICBmdW5jdGlvbiBwYXJzZUZpbGVIZWFkZXIoaW5kZXgpIHtcbiAgICBsZXQgZmlsZUhlYWRlciA9ICgvXihcXC1cXC1cXC18XFwrXFwrXFwrKVxccysoXFxTKilcXHM/KC4qPylcXHMqJC8pLmV4ZWMoZGlmZnN0cltpXSk7XG4gICAgaWYgKGZpbGVIZWFkZXIpIHtcbiAgICAgIGxldCBrZXlQcmVmaXggPSBmaWxlSGVhZGVyWzFdID09PSAnLS0tJyA/ICdvbGQnIDogJ25ldyc7XG4gICAgICBpbmRleFtrZXlQcmVmaXggKyAnRmlsZU5hbWUnXSA9IGZpbGVIZWFkZXJbMl07XG4gICAgICBpbmRleFtrZXlQcmVmaXggKyAnSGVhZGVyJ10gPSBmaWxlSGVhZGVyWzNdO1xuXG4gICAgICBpKys7XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyc2VzIGEgaHVua1xuICAvLyBUaGlzIGFzc3VtZXMgdGhhdCB3ZSBhcmUgYXQgdGhlIHN0YXJ0IG9mIGEgaHVuay5cbiAgZnVuY3Rpb24gcGFyc2VIdW5rKCkge1xuICAgIGxldCBjaHVua0hlYWRlckluZGV4ID0gaSxcbiAgICAgICAgY2h1bmtIZWFkZXJMaW5lID0gZGlmZnN0cltpKytdLFxuICAgICAgICBjaHVua0hlYWRlciA9IGNodW5rSGVhZGVyTGluZS5zcGxpdCgvQEAgLShcXGQrKSg/OiwoXFxkKykpPyBcXCsoXFxkKykoPzosKFxcZCspKT8gQEAvKTtcblxuICAgIGxldCBodW5rID0ge1xuICAgICAgb2xkU3RhcnQ6ICtjaHVua0hlYWRlclsxXSxcbiAgICAgIG9sZExpbmVzOiArY2h1bmtIZWFkZXJbMl0gfHwgMSxcbiAgICAgIG5ld1N0YXJ0OiArY2h1bmtIZWFkZXJbM10sXG4gICAgICBuZXdMaW5lczogK2NodW5rSGVhZGVyWzRdIHx8IDEsXG4gICAgICBsaW5lczogW11cbiAgICB9O1xuXG4gICAgbGV0IGFkZENvdW50ID0gMCxcbiAgICAgICAgcmVtb3ZlQ291bnQgPSAwO1xuICAgIGZvciAoOyBpIDwgZGlmZnN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG9wZXJhdGlvbiA9IGRpZmZzdHJbaV1bMF07XG5cbiAgICAgIGlmIChvcGVyYXRpb24gPT09ICcrJyB8fCBvcGVyYXRpb24gPT09ICctJyB8fCBvcGVyYXRpb24gPT09ICcgJyB8fCBvcGVyYXRpb24gPT09ICdcXFxcJykge1xuICAgICAgICBodW5rLmxpbmVzLnB1c2goZGlmZnN0cltpXSk7XG5cbiAgICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gJysnKSB7XG4gICAgICAgICAgYWRkQ291bnQrKztcbiAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT09ICctJykge1xuICAgICAgICAgIHJlbW92ZUNvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09PSAnICcpIHtcbiAgICAgICAgICBhZGRDb3VudCsrO1xuICAgICAgICAgIHJlbW92ZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgZW1wdHkgYmxvY2sgY291bnQgY2FzZVxuICAgIGlmICghYWRkQ291bnQgJiYgaHVuay5uZXdMaW5lcyA9PT0gMSkge1xuICAgICAgaHVuay5uZXdMaW5lcyA9IDA7XG4gICAgfVxuICAgIGlmICghcmVtb3ZlQ291bnQgJiYgaHVuay5vbGRMaW5lcyA9PT0gMSkge1xuICAgICAgaHVuay5vbGRMaW5lcyA9IDA7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBvcHRpb25hbCBzYW5pdHkgY2hlY2tpbmdcbiAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIGlmIChhZGRDb3VudCAhPT0gaHVuay5uZXdMaW5lcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FkZGVkIGxpbmUgY291bnQgZGlkIG5vdCBtYXRjaCBmb3IgaHVuayBhdCBsaW5lICcgKyAoY2h1bmtIZWFkZXJJbmRleCArIDEpKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1vdmVDb3VudCAhPT0gaHVuay5vbGRMaW5lcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbW92ZWQgbGluZSBjb3VudCBkaWQgbm90IG1hdGNoIGZvciBodW5rIGF0IGxpbmUgJyArIChjaHVua0hlYWRlckluZGV4ICsgMSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBodW5rO1xuICB9XG5cbiAgd2hpbGUgKGkgPCBkaWZmc3RyLmxlbmd0aCkge1xuICAgIHBhcnNlSW5kZXgoKTtcbiAgfVxuXG4gIHJldHVybiBsaXN0O1xufVxuIiwiLy8gSXRlcmF0b3IgdGhhdCB0cmF2ZXJzZXMgaW4gdGhlIHJhbmdlIG9mIFttaW4sIG1heF0sIHN0ZXBwaW5nXG4vLyBieSBkaXN0YW5jZSBmcm9tIGEgZ2l2ZW4gc3RhcnQgcG9zaXRpb24uIEkuZS4gZm9yIFswLCA0XSwgd2l0aFxuLy8gc3RhcnQgb2YgMiwgdGhpcyB3aWxsIGl0ZXJhdGUgMiwgMywgMSwgNCwgMC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBtaW5MaW5lLCBtYXhMaW5lKSB7XG4gIGxldCB3YW50Rm9yd2FyZCA9IHRydWUsXG4gICAgICBiYWNrd2FyZEV4aGF1c3RlZCA9IGZhbHNlLFxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IGZhbHNlLFxuICAgICAgbG9jYWxPZmZzZXQgPSAxO1xuXG4gIHJldHVybiBmdW5jdGlvbiBpdGVyYXRvcigpIHtcbiAgICBpZiAod2FudEZvcndhcmQgJiYgIWZvcndhcmRFeGhhdXN0ZWQpIHtcbiAgICAgIGlmIChiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgICBsb2NhbE9mZnNldCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FudEZvcndhcmQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZXlvbmQgdGV4dCBsZW5ndGgsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGFmdGVyIG9mZnNldCBsb2NhdGlvbiAob3IgZGVzaXJlZCBsb2NhdGlvbiBvbiBmaXJzdCBpdGVyYXRpb24pXG4gICAgICBpZiAoc3RhcnQgKyBsb2NhbE9mZnNldCA8PSBtYXhMaW5lKSB7XG4gICAgICAgIHJldHVybiBsb2NhbE9mZnNldDtcbiAgICAgIH1cblxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgaWYgKCFmb3J3YXJkRXhoYXVzdGVkKSB7XG4gICAgICAgIHdhbnRGb3J3YXJkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZWZvcmUgdGV4dCBiZWdpbm5pbmcsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGJlZm9yZSBvZmZzZXQgbG9jYXRpb25cbiAgICAgIGlmIChtaW5MaW5lIDw9IHN0YXJ0IC0gbG9jYWxPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIC1sb2NhbE9mZnNldCsrO1xuICAgICAgfVxuXG4gICAgICBiYWNrd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgICByZXR1cm4gaXRlcmF0b3IoKTtcbiAgICB9XG5cbiAgICAvLyBXZSB0cmllZCB0byBmaXQgaHVuayBiZWZvcmUgdGV4dCBiZWdpbm5pbmcgYW5kIGJleW9uZCB0ZXh0IGxlbmdodCwgdGhlblxuICAgIC8vIGh1bmsgY2FuJ3QgZml0IG9uIHRoZSB0ZXh0LiBSZXR1cm4gdW5kZWZpbmVkXG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVPcHRpb25zKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlZmF1bHRzLmNhbGxiYWNrID0gb3B0aW9ucztcbiAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZGVmYXVsdHNbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdHM7XG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbnZhciBsY3MgPSByZXF1aXJlKCcuL2xpYi9sY3MnKTtcbnZhciBhcnJheSA9IHJlcXVpcmUoJy4vbGliL2FycmF5Jyk7XG52YXIgcGF0Y2ggPSByZXF1aXJlKCcuL2xpYi9qc29uUGF0Y2gnKTtcbnZhciBpbnZlcnNlID0gcmVxdWlyZSgnLi9saWIvaW52ZXJzZScpO1xudmFyIGpzb25Qb2ludGVyID0gcmVxdWlyZSgnLi9saWIvanNvblBvaW50ZXInKTtcbnZhciBlbmNvZGVTZWdtZW50ID0ganNvblBvaW50ZXIuZW5jb2RlU2VnbWVudDtcblxuZXhwb3J0cy5kaWZmID0gZGlmZjtcbmV4cG9ydHMucGF0Y2ggPSBwYXRjaC5hcHBseTtcbmV4cG9ydHMucGF0Y2hJblBsYWNlID0gcGF0Y2guYXBwbHlJblBsYWNlO1xuZXhwb3J0cy5pbnZlcnNlID0gaW52ZXJzZTtcbmV4cG9ydHMuY2xvbmUgPSBwYXRjaC5jbG9uZTtcblxuLy8gRXJyb3JzXG5leHBvcnRzLkludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yID0gcmVxdWlyZSgnLi9saWIvSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3InKTtcbmV4cG9ydHMuVGVzdEZhaWxlZEVycm9yID0gcmVxdWlyZSgnLi9saWIvVGVzdEZhaWxlZEVycm9yJyk7XG5leHBvcnRzLlBhdGNoTm90SW52ZXJ0aWJsZUVycm9yID0gcmVxdWlyZSgnLi9saWIvUGF0Y2hOb3RJbnZlcnRpYmxlRXJyb3InKTtcblxudmFyIGlzVmFsaWRPYmplY3QgPSBwYXRjaC5pc1ZhbGlkT2JqZWN0O1xudmFyIGRlZmF1bHRIYXNoID0gcGF0Y2guZGVmYXVsdEhhc2g7XG5cbi8qKlxuICogQ29tcHV0ZSBhIEpTT04gUGF0Y2ggcmVwcmVzZW50aW5nIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGEgYW5kIGIuXG4gKiBAcGFyYW0ge29iamVjdHxhcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IGFcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fHN0cmluZ3xudW1iZXJ8bnVsbH0gYlxuICogQHBhcmFtIHs/ZnVuY3Rpb258P29iamVjdH0gb3B0aW9ucyBpZiBhIGZ1bmN0aW9uLCBzZWUgb3B0aW9ucy5oYXNoXG4gKiBAcGFyYW0gez9mdW5jdGlvbih4OiopOlN0cmluZ3xOdW1iZXJ9IG9wdGlvbnMuaGFzaCB1c2VkIHRvIGhhc2ggYXJyYXkgaXRlbXNcbiAqICBpbiBvcmRlciB0byByZWNvZ25pemUgaWRlbnRpY2FsIG9iamVjdHMsIGRlZmF1bHRzIHRvIEpTT04uc3RyaW5naWZ5XG4gKiBAcGFyYW0gez9mdW5jdGlvbihpbmRleDpOdW1iZXIsIGFycmF5OkFycmF5KTpvYmplY3R9IG9wdGlvbnMubWFrZUNvbnRleHRcbiAqICB1c2VkIHRvIGdlbmVyYXRlIHBhdGNoIGNvbnRleHQuIElmIG5vdCBwcm92aWRlZCwgY29udGV4dCB3aWxsIG5vdCBiZSBnZW5lcmF0ZWRcbiAqIEByZXR1cm5zIHthcnJheX0gSlNPTiBQYXRjaCBzdWNoIHRoYXQgcGF0Y2goZGlmZihhLCBiKSwgYSkgfiBiXG4gKi9cbmZ1bmN0aW9uIGRpZmYoYSwgYiwgb3B0aW9ucykge1xuXHRyZXR1cm4gYXBwZW5kQ2hhbmdlcyhhLCBiLCAnJywgaW5pdFN0YXRlKG9wdGlvbnMsIFtdKSkucGF0Y2g7XG59XG5cbi8qKlxuICogQ3JlYXRlIGluaXRpYWwgZGlmZiBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCBvcHRpb25zXG4gKiBAcGFyYW0gez9mdW5jdGlvbnw/b2JqZWN0fSBvcHRpb25zIEBzZWUgZGlmZiBvcHRpb25zIGFib3ZlXG4gKiBAcGFyYW0ge2FycmF5fSBwYXRjaCBhbiBlbXB0eSBvciBleGlzdGluZyBKU09OIFBhdGNoIGFycmF5IGludG8gd2hpY2hcbiAqICB0aGUgZGlmZiBzaG91bGQgZ2VuZXJhdGUgbmV3IHBhdGNoIG9wZXJhdGlvbnNcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluaXRpYWxpemVkIGRpZmYgc3RhdGVcbiAqL1xuZnVuY3Rpb24gaW5pdFN0YXRlKG9wdGlvbnMsIHBhdGNoKSB7XG5cdGlmKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiB7XG5cdFx0XHRwYXRjaDogcGF0Y2gsXG5cdFx0XHRoYXNoOiBvckVsc2UoaXNGdW5jdGlvbiwgb3B0aW9ucy5oYXNoLCBkZWZhdWx0SGFzaCksXG5cdFx0XHRtYWtlQ29udGV4dDogb3JFbHNlKGlzRnVuY3Rpb24sIG9wdGlvbnMubWFrZUNvbnRleHQsIGRlZmF1bHRDb250ZXh0KSxcblx0XHRcdGludmVydGlibGU6ICEob3B0aW9ucy5pbnZlcnRpYmxlID09PSBmYWxzZSlcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiB7XG5cdFx0XHRwYXRjaDogcGF0Y2gsXG5cdFx0XHRoYXNoOiBvckVsc2UoaXNGdW5jdGlvbiwgb3B0aW9ucywgZGVmYXVsdEhhc2gpLFxuXHRcdFx0bWFrZUNvbnRleHQ6IGRlZmF1bHRDb250ZXh0LFxuXHRcdFx0aW52ZXJ0aWJsZTogdHJ1ZVxuXHRcdH07XG5cdH1cbn1cblxuLyoqXG4gKiBHaXZlbiB0d28gSlNPTiB2YWx1ZXMgKG9iamVjdCwgYXJyYXksIG51bWJlciwgc3RyaW5nLCBldGMuKSwgZmluZCB0aGVpclxuICogZGlmZmVyZW5jZXMgYW5kIGFwcGVuZCB0aGVtIHRvIHRoZSBkaWZmIHN0YXRlXG4gKiBAcGFyYW0ge29iamVjdHxhcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IGFcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fHN0cmluZ3xudW1iZXJ8bnVsbH0gYlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZVxuICogQHJldHVybnMge09iamVjdH0gdXBkYXRlZCBkaWZmIHN0YXRlXG4gKi9cbmZ1bmN0aW9uIGFwcGVuZENoYW5nZXMoYSwgYiwgcGF0aCwgc3RhdGUpIHtcblx0aWYoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG5cdFx0cmV0dXJuIGFwcGVuZEFycmF5Q2hhbmdlcyhhLCBiLCBwYXRoLCBzdGF0ZSk7XG5cdH1cblxuXHRpZihpc1ZhbGlkT2JqZWN0KGEpICYmIGlzVmFsaWRPYmplY3QoYikpIHtcblx0XHRyZXR1cm4gYXBwZW5kT2JqZWN0Q2hhbmdlcyhhLCBiLCBwYXRoLCBzdGF0ZSk7XG5cdH1cblxuXHRyZXR1cm4gYXBwZW5kVmFsdWVDaGFuZ2VzKGEsIGIsIHBhdGgsIHN0YXRlKTtcbn1cblxuLyoqXG4gKiBHaXZlbiB0d28gb2JqZWN0cywgZmluZCB0aGVpciBkaWZmZXJlbmNlcyBhbmQgYXBwZW5kIHRoZW0gdG8gdGhlIGRpZmYgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvMVxuICogQHBhcmFtIHtvYmplY3R9IG8yXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB1cGRhdGVkIGRpZmYgc3RhdGVcbiAqL1xuZnVuY3Rpb24gYXBwZW5kT2JqZWN0Q2hhbmdlcyhvMSwgbzIsIHBhdGgsIHN0YXRlKSB7XG5cdHZhciBrZXlzID0gT2JqZWN0LmtleXMobzIpO1xuXHR2YXIgcGF0Y2ggPSBzdGF0ZS5wYXRjaDtcblx0dmFyIGksIGtleTtcblxuXHRmb3IoaT1rZXlzLmxlbmd0aC0xOyBpPj0wOyAtLWkpIHtcblx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdHZhciBrZXlQYXRoID0gcGF0aCArICcvJyArIGVuY29kZVNlZ21lbnQoa2V5KTtcblx0XHRpZihvMVtrZXldICE9PSB2b2lkIDApIHtcblx0XHRcdGFwcGVuZENoYW5nZXMobzFba2V5XSwgbzJba2V5XSwga2V5UGF0aCwgc3RhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwYXRjaC5wdXNoKHsgb3A6ICdhZGQnLCBwYXRoOiBrZXlQYXRoLCB2YWx1ZTogbzJba2V5XSB9KTtcblx0XHR9XG5cdH1cblxuXHRrZXlzID0gT2JqZWN0LmtleXMobzEpO1xuXHRmb3IoaT1rZXlzLmxlbmd0aC0xOyBpPj0wOyAtLWkpIHtcblx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdGlmKG8yW2tleV0gPT09IHZvaWQgMCkge1xuXHRcdFx0dmFyIHAgPSBwYXRoICsgJy8nICsgZW5jb2RlU2VnbWVudChrZXkpO1xuXHRcdFx0aWYoc3RhdGUuaW52ZXJ0aWJsZSkge1xuXHRcdFx0XHRwYXRjaC5wdXNoKHsgb3A6ICd0ZXN0JywgcGF0aDogcCwgdmFsdWU6IG8xW2tleV0gfSk7XG5cdFx0XHR9XG5cdFx0XHRwYXRjaC5wdXNoKHsgb3A6ICdyZW1vdmUnLCBwYXRoOiBwIH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBHaXZlbiB0d28gYXJyYXlzLCBmaW5kIHRoZWlyIGRpZmZlcmVuY2VzIGFuZCBhcHBlbmQgdGhlbSB0byB0aGUgZGlmZiBzdGF0ZVxuICogQHBhcmFtIHthcnJheX0gYTFcbiAqIEBwYXJhbSB7YXJyYXl9IGEyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB1cGRhdGVkIGRpZmYgc3RhdGVcbiAqL1xuZnVuY3Rpb24gYXBwZW5kQXJyYXlDaGFuZ2VzKGExLCBhMiwgcGF0aCwgc3RhdGUpIHtcblx0dmFyIGExaGFzaCA9IGFycmF5Lm1hcChzdGF0ZS5oYXNoLCBhMSk7XG5cdHZhciBhMmhhc2ggPSBhcnJheS5tYXAoc3RhdGUuaGFzaCwgYTIpO1xuXG5cdHZhciBsY3NNYXRyaXggPSBsY3MuY29tcGFyZShhMWhhc2gsIGEyaGFzaCk7XG5cblx0cmV0dXJuIGxjc1RvSnNvblBhdGNoKGExLCBhMiwgcGF0aCwgc3RhdGUsIGxjc01hdHJpeCk7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGxjc01hdHJpeCBpbnRvIEpTT04gUGF0Y2ggb3BlcmF0aW9ucyBhbmQgYXBwZW5kXG4gKiB0aGVtIHRvIHN0YXRlLnBhdGNoLCByZWN1cnNpbmcgaW50byBhcnJheSBlbGVtZW50cyBhcyBuZWNlc3NhcnlcbiAqIEBwYXJhbSB7YXJyYXl9IGExXG4gKiBAcGFyYW0ge2FycmF5fSBhMlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGxjc01hdHJpeFxuICogQHJldHVybnMge29iamVjdH0gbmV3IHN0YXRlIHdpdGggSlNPTiBQYXRjaCBvcGVyYXRpb25zIGFkZGVkIGJhc2VkXG4gKiAgb24gdGhlIHByb3ZpZGVkIGxjc01hdHJpeFxuICovXG5mdW5jdGlvbiBsY3NUb0pzb25QYXRjaChhMSwgYTIsIHBhdGgsIHN0YXRlLCBsY3NNYXRyaXgpIHtcblx0dmFyIG9mZnNldCA9IDA7XG5cdHJldHVybiBsY3MucmVkdWNlKGZ1bmN0aW9uKHN0YXRlLCBvcCwgaSwgaikge1xuXHRcdHZhciBsYXN0LCBjb250ZXh0O1xuXHRcdHZhciBwYXRjaCA9IHN0YXRlLnBhdGNoO1xuXHRcdHZhciBwID0gcGF0aCArICcvJyArIChqICsgb2Zmc2V0KTtcblxuXHRcdGlmIChvcCA9PT0gbGNzLlJFTU9WRSkge1xuXHRcdFx0Ly8gQ29hbGVzY2UgYWRqYWNlbnQgcmVtb3ZlICsgYWRkIGludG8gcmVwbGFjZVxuXHRcdFx0bGFzdCA9IHBhdGNoW3BhdGNoLmxlbmd0aC0xXTtcblx0XHRcdGNvbnRleHQgPSBzdGF0ZS5tYWtlQ29udGV4dChqLCBhMSk7XG5cblx0XHRcdGlmKHN0YXRlLmludmVydGlibGUpIHtcblx0XHRcdFx0cGF0Y2gucHVzaCh7IG9wOiAndGVzdCcsIHBhdGg6IHAsIHZhbHVlOiBhMVtqXSwgY29udGV4dDogY29udGV4dCB9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYobGFzdCAhPT0gdm9pZCAwICYmIGxhc3Qub3AgPT09ICdhZGQnICYmIGxhc3QucGF0aCA9PT0gcCkge1xuXHRcdFx0XHRsYXN0Lm9wID0gJ3JlcGxhY2UnO1xuXHRcdFx0XHRsYXN0LmNvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGF0Y2gucHVzaCh7IG9wOiAncmVtb3ZlJywgcGF0aDogcCwgY29udGV4dDogY29udGV4dCB9KTtcblx0XHRcdH1cblxuXHRcdFx0b2Zmc2V0IC09IDE7XG5cblx0XHR9IGVsc2UgaWYgKG9wID09PSBsY3MuQUREKSB7XG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY5MDIjc2VjdGlvbi00LjFcblx0XHRcdC8vIE1heSB1c2UgZWl0aGVyIGluZGV4PT09bGVuZ3RoICpvciogJy0nIHRvIGluZGljYXRlIGFwcGVuZGluZyB0byBhcnJheVxuXHRcdFx0cGF0Y2gucHVzaCh7IG9wOiAnYWRkJywgcGF0aDogcCwgdmFsdWU6IGEyW2ldLFxuXHRcdFx0XHRjb250ZXh0OiBzdGF0ZS5tYWtlQ29udGV4dChqLCBhMSlcblx0XHRcdH0pO1xuXG5cdFx0XHRvZmZzZXQgKz0gMTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRhcHBlbmRDaGFuZ2VzKGExW2pdLCBhMltpXSwgcCwgc3RhdGUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBzdGF0ZTtcblxuXHR9LCBzdGF0ZSwgbGNzTWF0cml4KTtcbn1cblxuLyoqXG4gKiBHaXZlbiB0d28gbnVtYmVyfHN0cmluZ3xudWxsIHZhbHVlcywgaWYgdGhleSBkaWZmZXIsIGFwcGVuZCB0byBkaWZmIHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8bnVsbH0gYVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IGJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGVcbiAqIEByZXR1cm5zIHtvYmplY3R9IHVwZGF0ZWQgZGlmZiBzdGF0ZVxuICovXG5mdW5jdGlvbiBhcHBlbmRWYWx1ZUNoYW5nZXMoYSwgYiwgcGF0aCwgc3RhdGUpIHtcblx0aWYoYSAhPT0gYikge1xuXHRcdGlmKHN0YXRlLmludmVydGlibGUpIHtcblx0XHRcdHN0YXRlLnBhdGNoLnB1c2goeyBvcDogJ3Rlc3QnLCBwYXRoOiBwYXRoLCB2YWx1ZTogYSB9KTtcblx0XHR9XG5cblx0XHRzdGF0ZS5wYXRjaC5wdXNoKHsgb3A6ICdyZXBsYWNlJywgcGF0aDogcGF0aCwgdmFsdWU6IGIgfSk7XG5cdH1cblxuXHRyZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJlZGljYXRlXG4gKiBAcGFyYW0geyp9IHhcbiAqIEBwYXJhbSB7Kn0geVxuICogQHJldHVybnMgeyp9IHggaWYgcHJlZGljYXRlKHgpIGlzIHRydXRoeSwgb3RoZXJ3aXNlIHlcbiAqL1xuZnVuY3Rpb24gb3JFbHNlKHByZWRpY2F0ZSwgeCwgeSkge1xuXHRyZXR1cm4gcHJlZGljYXRlKHgpID8geCA6IHk7XG59XG5cbi8qKlxuICogRGVmYXVsdCBwYXRjaCBjb250ZXh0IGdlbmVyYXRvclxuICogQHJldHVybnMge3VuZGVmaW5lZH0gdW5kZWZpbmVkIGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdENvbnRleHQoKSB7XG5cdHJldHVybiB2b2lkIDA7XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSB4XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB4IGlzIGEgZnVuY3Rpb24sIGZhbHNlIG90aGVyd2lzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcblx0cmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBJbnZhbGlkUGF0Y2hPcGVyYXRpb25FcnJvcjtcblxuZnVuY3Rpb24gSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3IobWVzc2FnZSkge1xuXHRFcnJvci5jYWxsKHRoaXMpO1xuXHR0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG5cdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdGlmKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuXHR9XG59XG5cbkludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbkludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yOyIsIm1vZHVsZS5leHBvcnRzID0gUGF0Y2hOb3RJbnZlcnRpYmxlRXJyb3I7XG5cbmZ1bmN0aW9uIFBhdGNoTm90SW52ZXJ0aWJsZUVycm9yKG1lc3NhZ2UpIHtcblx0RXJyb3IuY2FsbCh0aGlzKTtcblx0dGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRpZih0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcblx0fVxufVxuXG5QYXRjaE5vdEludmVydGlibGVFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5QYXRjaE5vdEludmVydGlibGVFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQYXRjaE5vdEludmVydGlibGVFcnJvcjsiLCJtb2R1bGUuZXhwb3J0cyA9IFRlc3RGYWlsZWRFcnJvcjtcblxuZnVuY3Rpb24gVGVzdEZhaWxlZEVycm9yKG1lc3NhZ2UpIHtcblx0RXJyb3IuY2FsbCh0aGlzKTtcblx0dGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRpZih0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcblx0fVxufVxuXG5UZXN0RmFpbGVkRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuVGVzdEZhaWxlZEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRlc3RGYWlsZWRFcnJvcjsiLCIvKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxuZXhwb3J0cy5jb25zID0gY29ucztcbmV4cG9ydHMudGFpbCA9IHRhaWw7XG5leHBvcnRzLm1hcCA9IG1hcDtcblxuLyoqXG4gKiBQcmVwZW5kIHggdG8gYSwgd2l0aG91dCBtdXRhdGluZyBhLiBGYXN0ZXIgdGhhbiBhLnVuc2hpZnQoeClcbiAqIEBwYXJhbSB7Kn0geFxuICogQHBhcmFtIHtBcnJheX0gYSBhcnJheS1saWtlXG4gKiBAcmV0dXJucyB7QXJyYXl9IG5ldyBBcnJheSB3aXRoIHggcHJlcGVuZGVkXG4gKi9cbmZ1bmN0aW9uIGNvbnMoeCwgYSkge1xuXHR2YXIgbCA9IGEubGVuZ3RoO1xuXHR2YXIgYiA9IG5ldyBBcnJheShsKzEpO1xuXHRiWzBdID0geDtcblx0Zm9yKHZhciBpPTA7IGk8bDsgKytpKSB7XG5cdFx0YltpKzFdID0gYVtpXTtcblx0fVxuXG5cdHJldHVybiBiO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBBcnJheSBjb250YWluaW5nIGFsbCBlbGVtZW50cyBpbiBhLCBleGNlcHQgdGhlIGZpcnN0LlxuICogIEZhc3RlciB0aGFuIGEuc2xpY2UoMSlcbiAqIEBwYXJhbSB7QXJyYXl9IGEgYXJyYXktbGlrZVxuICogQHJldHVybnMge0FycmF5fSBuZXcgQXJyYXksIHRoZSBlcXVpdmFsZW50IG9mIGEuc2xpY2UoMSlcbiAqL1xuZnVuY3Rpb24gdGFpbChhKSB7XG5cdHZhciBsID0gYS5sZW5ndGgtMTtcblx0dmFyIGIgPSBuZXcgQXJyYXkobCk7XG5cdGZvcih2YXIgaT0wOyBpPGw7ICsraSkge1xuXHRcdGJbaV0gPSBhW2krMV07XG5cdH1cblxuXHRyZXR1cm4gYjtcbn1cblxuLyoqXG4gKiBNYXAgYW55IGFycmF5LWxpa2UuIEZhc3RlciB0aGFuIEFycmF5LnByb3RvdHlwZS5tYXBcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcbiAqIEBwYXJhbSB7QXJyYXl9IGEgYXJyYXktbGlrZVxuICogQHJldHVybnMge0FycmF5fSBuZXcgQXJyYXkgbWFwcGVkIGJ5IGZcbiAqL1xuZnVuY3Rpb24gbWFwKGYsIGEpIHtcblx0dmFyIGIgPSBuZXcgQXJyYXkoYS5sZW5ndGgpO1xuXHRmb3IodmFyIGk9MDsgaTwgYS5sZW5ndGg7ICsraSkge1xuXHRcdGJbaV0gPSBmKGFbaV0pO1xuXHR9XG5cdHJldHVybiBiO1xufSIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIGRlZXAgY29weSBvZiB4IHdoaWNoIG11c3QgYmUgYSBsZWdhbCBKU09OIG9iamVjdC9hcnJheS92YWx1ZVxuICogQHBhcmFtIHtvYmplY3R8YXJyYXl8c3RyaW5nfG51bWJlcnxudWxsfSB4IG9iamVjdC9hcnJheS92YWx1ZSB0byBjbG9uZVxuICogQHJldHVybnMge29iamVjdHxhcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IGNsb25lIG9mIHhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcblxuZnVuY3Rpb24gY2xvbmUoeCkge1xuXHRpZih4ID09IG51bGwgfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIHg7XG5cdH1cblxuXHRpZihBcnJheS5pc0FycmF5KHgpKSB7XG5cdFx0cmV0dXJuIGNsb25lQXJyYXkoeCk7XG5cdH1cblxuXHRyZXR1cm4gY2xvbmVPYmplY3QoeCk7XG59XG5cbmZ1bmN0aW9uIGNsb25lQXJyYXkgKHgpIHtcblx0dmFyIGwgPSB4Lmxlbmd0aDtcblx0dmFyIHkgPSBuZXcgQXJyYXkobCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsOyArK2kpIHtcblx0XHR5W2ldID0gY2xvbmUoeFtpXSk7XG5cdH1cblxuXHRyZXR1cm4geTtcbn1cblxuZnVuY3Rpb24gY2xvbmVPYmplY3QgKHgpIHtcblx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyh4KTtcblx0dmFyIHkgPSB7fTtcblxuXHRmb3IgKHZhciBrLCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG5cdFx0ayA9IGtleXNbaV07XG5cdFx0eVtrXSA9IGNsb25lKHhba10pO1xuXHR9XG5cblx0cmV0dXJuIHk7XG59XG4iLCJ2YXIganNvblBvaW50ZXIgPSByZXF1aXJlKCcuL2pzb25Qb2ludGVyJyk7XG5cbi8qKlxuICogY29tbXV0ZSB0aGUgcGF0Y2ggc2VxdWVuY2UgYSxiIHRvIGIsYVxuICogQHBhcmFtIHtvYmplY3R9IGEgcGF0Y2ggb3BlcmF0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gYiBwYXRjaCBvcGVyYXRpb25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21tdXRlUGF0aHMoYSwgYikge1xuXHQvLyBUT0RPOiBjYXNlcyBmb3Igc3BlY2lhbCBwYXRoczogJycgYW5kICcvJ1xuXHR2YXIgbGVmdCA9IGpzb25Qb2ludGVyLnBhcnNlKGEucGF0aCk7XG5cdHZhciByaWdodCA9IGpzb25Qb2ludGVyLnBhcnNlKGIucGF0aCk7XG5cdHZhciBwcmVmaXggPSBnZXRDb21tb25QYXRoUHJlZml4KGxlZnQsIHJpZ2h0KTtcblx0dmFyIGlzQXJyYXkgPSBpc0FycmF5UGF0aChsZWZ0LCByaWdodCwgcHJlZml4Lmxlbmd0aCk7XG5cblx0Ly8gTmV2ZXIgbXV0YXRlIHRoZSBvcmlnaW5hbHNcblx0dmFyIGFjID0gY29weVBhdGNoKGEpO1xuXHR2YXIgYmMgPSBjb3B5UGF0Y2goYik7XG5cblx0aWYocHJlZml4Lmxlbmd0aCA9PT0gMCAmJiAhaXNBcnJheSkge1xuXHRcdC8vIFBhdGhzIHNoYXJlIG5vIGNvbW1vbiBhbmNlc3Rvciwgc2ltcGxlIHN3YXBcblx0XHRyZXR1cm4gW2JjLCBhY107XG5cdH1cblxuXHRpZihpc0FycmF5KSB7XG5cdFx0cmV0dXJuIGNvbW11dGVBcnJheVBhdGhzKGFjLCBsZWZ0LCBiYywgcmlnaHQpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBjb21tdXRlVHJlZVBhdGhzKGFjLCBsZWZ0LCBiYywgcmlnaHQpO1xuXHR9XG59O1xuXG5mdW5jdGlvbiBjb21tdXRlVHJlZVBhdGhzKGEsIGxlZnQsIGIsIHJpZ2h0KSB7XG5cdGlmKGEucGF0aCA9PT0gYi5wYXRoKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IGNvbW11dGUgJyArIGEub3AgKyAnLCcgKyBiLm9wICsgJyB3aXRoIGlkZW50aWNhbCBvYmplY3QgcGF0aHMnKTtcblx0fVxuXHQvLyBGSVhNRTogSW1wbGVtZW50IHRyZWUgcGF0aCBjb21tdXRhdGlvblxuXHRyZXR1cm4gW2IsIGFdO1xufVxuXG4vKipcbiAqIENvbW11dGUgdHdvIHBhdGNoZXMgd2hvc2UgY29tbW9uIGFuY2VzdG9yICh3aGljaCBtYXkgYmUgdGhlIGltbWVkaWF0ZSBwYXJlbnQpXG4gKiBpcyBhbiBhcnJheVxuICogQHBhcmFtIGFcbiAqIEBwYXJhbSBsZWZ0XG4gKiBAcGFyYW0gYlxuICogQHBhcmFtIHJpZ2h0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gY29tbXV0ZUFycmF5UGF0aHMoYSwgbGVmdCwgYiwgcmlnaHQpIHtcblx0aWYobGVmdC5sZW5ndGggPT09IHJpZ2h0Lmxlbmd0aCkge1xuXHRcdHJldHVybiBjb21tdXRlQXJyYXlTaWJsaW5ncyhhLCBsZWZ0LCBiLCByaWdodCk7XG5cdH1cblxuXHRpZiAobGVmdC5sZW5ndGggPiByaWdodC5sZW5ndGgpIHtcblx0XHQvLyBsZWZ0IGlzIGxvbmdlciwgY29tbXV0ZSBieSBcIm1vdmluZ1wiIGl0IHRvIHRoZSByaWdodFxuXHRcdGxlZnQgPSBjb21tdXRlQXJyYXlBbmNlc3RvcihiLCByaWdodCwgYSwgbGVmdCwgLTEpO1xuXHRcdGEucGF0aCA9IGpzb25Qb2ludGVyLmFic29sdXRlKGpzb25Qb2ludGVyLmpvaW4obGVmdCkpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIHJpZ2h0IGlzIGxvbmdlciwgY29tbXV0ZSBieSBcIm1vdmluZ1wiIGl0IHRvIHRoZSBsZWZ0XG5cdFx0cmlnaHQgPSBjb21tdXRlQXJyYXlBbmNlc3RvcihhLCBsZWZ0LCBiLCByaWdodCwgMSk7XG5cdFx0Yi5wYXRoID0ganNvblBvaW50ZXIuYWJzb2x1dGUoanNvblBvaW50ZXIuam9pbihyaWdodCkpO1xuXHR9XG5cblx0cmV0dXJuIFtiLCBhXTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheVBhdGgobGVmdCwgcmlnaHQsIGluZGV4KSB7XG5cdHJldHVybiBqc29uUG9pbnRlci5pc1ZhbGlkQXJyYXlJbmRleChsZWZ0W2luZGV4XSlcblx0XHQmJiBqc29uUG9pbnRlci5pc1ZhbGlkQXJyYXlJbmRleChyaWdodFtpbmRleF0pO1xufVxuXG4vKipcbiAqIENvbW11dGUgdHdvIHBhdGNoZXMgcmVmZXJyaW5nIHRvIGl0ZW1zIGluIHRoZSBzYW1lIGFycmF5XG4gKiBAcGFyYW0gbFxuICogQHBhcmFtIGxwYXRoXG4gKiBAcGFyYW0gclxuICogQHBhcmFtIHJwYXRoXG4gKiBAcmV0dXJucyB7KltdfVxuICovXG5mdW5jdGlvbiBjb21tdXRlQXJyYXlTaWJsaW5ncyhsLCBscGF0aCwgciwgcnBhdGgpIHtcblxuXHR2YXIgdGFyZ2V0ID0gbHBhdGgubGVuZ3RoLTE7XG5cdHZhciBsaW5kZXggPSArbHBhdGhbdGFyZ2V0XTtcblx0dmFyIHJpbmRleCA9ICtycGF0aFt0YXJnZXRdO1xuXG5cdHZhciBjb21tdXRlZDtcblxuXHRpZihsaW5kZXggPCByaW5kZXgpIHtcblx0XHQvLyBBZGp1c3QgcmlnaHQgcGF0aFxuXHRcdGlmKGwub3AgPT09ICdhZGQnIHx8IGwub3AgPT09ICdjb3B5Jykge1xuXHRcdFx0Y29tbXV0ZWQgPSBycGF0aC5zbGljZSgpO1xuXHRcdFx0Y29tbXV0ZWRbdGFyZ2V0XSA9IE1hdGgubWF4KDAsIHJpbmRleCAtIDEpO1xuXHRcdFx0ci5wYXRoID0ganNvblBvaW50ZXIuYWJzb2x1dGUoanNvblBvaW50ZXIuam9pbihjb21tdXRlZCkpO1xuXHRcdH0gZWxzZSBpZihsLm9wID09PSAncmVtb3ZlJykge1xuXHRcdFx0Y29tbXV0ZWQgPSBycGF0aC5zbGljZSgpO1xuXHRcdFx0Y29tbXV0ZWRbdGFyZ2V0XSA9IHJpbmRleCArIDE7XG5cdFx0XHRyLnBhdGggPSBqc29uUG9pbnRlci5hYnNvbHV0ZShqc29uUG9pbnRlci5qb2luKGNvbW11dGVkKSk7XG5cdFx0fVxuXHR9IGVsc2UgaWYoci5vcCA9PT0gJ2FkZCcgfHwgci5vcCA9PT0gJ2NvcHknKSB7XG5cdFx0Ly8gQWRqdXN0IGxlZnQgcGF0aFxuXHRcdGNvbW11dGVkID0gbHBhdGguc2xpY2UoKTtcblx0XHRjb21tdXRlZFt0YXJnZXRdID0gbGluZGV4ICsgMTtcblx0XHRsLnBhdGggPSBqc29uUG9pbnRlci5hYnNvbHV0ZShqc29uUG9pbnRlci5qb2luKGNvbW11dGVkKSk7XG5cdH0gZWxzZSBpZiAobGluZGV4ID4gcmluZGV4ICYmIHIub3AgPT09ICdyZW1vdmUnKSB7XG5cdFx0Ly8gQWRqdXN0IGxlZnQgcGF0aCBvbmx5IGlmIHJlbW92ZSB3YXMgYXQgYSAoc3RyaWN0bHkpIGxvd2VyIGluZGV4XG5cdFx0Y29tbXV0ZWQgPSBscGF0aC5zbGljZSgpO1xuXHRcdGNvbW11dGVkW3RhcmdldF0gPSBNYXRoLm1heCgwLCBsaW5kZXggLSAxKTtcblx0XHRsLnBhdGggPSBqc29uUG9pbnRlci5hYnNvbHV0ZShqc29uUG9pbnRlci5qb2luKGNvbW11dGVkKSk7XG5cdH1cblxuXHRyZXR1cm4gW3IsIGxdO1xufVxuXG4vKipcbiAqIENvbW11dGUgdHdvIHBhdGNoZXMgd2l0aCBhIGNvbW1vbiBhcnJheSBhbmNlc3RvclxuICogQHBhcmFtIGxcbiAqIEBwYXJhbSBscGF0aFxuICogQHBhcmFtIHJcbiAqIEBwYXJhbSBycGF0aFxuICogQHBhcmFtIGRpcmVjdGlvblxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGNvbW11dGVBcnJheUFuY2VzdG9yKGwsIGxwYXRoLCByLCBycGF0aCwgZGlyZWN0aW9uKSB7XG5cdC8vIHJwYXRoIGlzIGxvbmdlciBvciBzYW1lIGxlbmd0aFxuXG5cdHZhciB0YXJnZXQgPSBscGF0aC5sZW5ndGgtMTtcblx0dmFyIGxpbmRleCA9ICtscGF0aFt0YXJnZXRdO1xuXHR2YXIgcmluZGV4ID0gK3JwYXRoW3RhcmdldF07XG5cblx0Ly8gQ29weSBycGF0aCwgdGhlbiBhZGp1c3QgaXRzIGFycmF5IGluZGV4XG5cdHZhciByYyA9IHJwYXRoLnNsaWNlKCk7XG5cblx0aWYobGluZGV4ID4gcmluZGV4KSB7XG5cdFx0cmV0dXJuIHJjO1xuXHR9XG5cblx0aWYobC5vcCA9PT0gJ2FkZCcgfHwgbC5vcCA9PT0gJ2NvcHknKSB7XG5cdFx0cmNbdGFyZ2V0XSA9IE1hdGgubWF4KDAsIHJpbmRleCAtIGRpcmVjdGlvbik7XG5cdH0gZWxzZSBpZihsLm9wID09PSAncmVtb3ZlJykge1xuXHRcdHJjW3RhcmdldF0gPSBNYXRoLm1heCgwLCByaW5kZXggKyBkaXJlY3Rpb24pO1xuXHR9XG5cblx0cmV0dXJuIHJjO1xufVxuXG5mdW5jdGlvbiBnZXRDb21tb25QYXRoUHJlZml4KHAxLCBwMikge1xuXHR2YXIgcDFsID0gcDEubGVuZ3RoO1xuXHR2YXIgcDJsID0gcDIubGVuZ3RoO1xuXHRpZihwMWwgPT09IDAgfHwgcDJsID09PSAwIHx8IChwMWwgPCAyICYmIHAybCA8IDIpKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Ly8gSWYgcGF0aHMgYXJlIHNhbWUgbGVuZ3RoLCB0aGUgbGFzdCBzZWdtZW50IGNhbm5vdCBiZSBwYXJ0XG5cdC8vIG9mIGEgY29tbW9uIHByZWZpeC4gIElmIG5vdCB0aGUgc2FtZSBsZW5ndGgsIHRoZSBwcmVmaXggY2Fubm90XG5cdC8vIGJlIGxvbmdlciB0aGFuIHRoZSBzaG9ydGVyIHBhdGguXG5cdHZhciBsID0gcDFsID09PSBwMmxcblx0XHQ/IHAxbCAtIDFcblx0XHQ6IE1hdGgubWluKHAxbCwgcDJsKTtcblxuXHR2YXIgaSA9IDA7XG5cdHdoaWxlKGkgPCBsICYmIHAxW2ldID09PSBwMltpXSkge1xuXHRcdCsraVxuXHR9XG5cblx0cmV0dXJuIHAxLnNsaWNlKDAsIGkpO1xufVxuXG5mdW5jdGlvbiBjb3B5UGF0Y2gocCkge1xuXHRpZihwLm9wID09PSAncmVtb3ZlJykge1xuXHRcdHJldHVybiB7IG9wOiBwLm9wLCBwYXRoOiBwLnBhdGggfTtcblx0fVxuXG5cdGlmKHAub3AgPT09ICdjb3B5JyB8fCBwLm9wID09PSAnbW92ZScpIHtcblx0XHRyZXR1cm4geyBvcDogcC5vcCwgcGF0aDogcC5wYXRoLCBmcm9tOiBwLmZyb20gfTtcblx0fVxuXG5cdC8vIHRlc3QsIGFkZCwgcmVwbGFjZVxuXHRyZXR1cm4geyBvcDogcC5vcCwgcGF0aDogcC5wYXRoLCB2YWx1ZTogcC52YWx1ZSB9O1xufSIsIm1vZHVsZS5leHBvcnRzID0gZGVlcEVxdWFscztcblxuLyoqXG4gKiBDb21wYXJlIDIgSlNPTiB2YWx1ZXMsIG9yIHJlY3Vyc2l2ZWx5IGNvbXBhcmUgMiBKU09OIG9iamVjdHMgb3IgYXJyYXlzXG4gKiBAcGFyYW0ge29iamVjdHxhcnJheXxzdHJpbmd8bnVtYmVyfGJvb2xlYW58bnVsbH0gYVxuICogQHBhcmFtIHtvYmplY3R8YXJyYXl8c3RyaW5nfG51bWJlcnxib29sZWFufG51bGx9IGJcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmZiBhIGFuZCBiIGFyZSByZWN1cnNpdmVseSBlcXVhbFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWxzKGEsIGIpIHtcblx0aWYoYSA9PT0gYikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG5cdFx0cmV0dXJuIGNvbXBhcmVBcnJheXMoYSwgYik7XG5cdH1cblxuXHRpZih0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGNvbXBhcmVPYmplY3RzKGEsIGIpO1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlQXJyYXlzKGEsIGIpIHtcblx0aWYoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Zm9yKHZhciBpID0gMDsgaTxhLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoIWRlZXBFcXVhbHMoYVtpXSwgYltpXSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZU9iamVjdHMoYSwgYikge1xuXHRpZigoYSA9PT0gbnVsbCAmJiBiICE9PSBudWxsKSB8fCAoYSAhPT0gbnVsbCAmJiBiID09PSBudWxsKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBha2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuXHR2YXIgYmtleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuXHRpZihha2V5cy5sZW5ndGggIT09IGJrZXlzLmxlbmd0aCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZvcih2YXIgaSA9IDAsIGs7IGk8YWtleXMubGVuZ3RoOyArK2kpIHtcblx0XHRrID0gYWtleXNbaV07XG5cdFx0aWYoIShrIGluIGIgJiYgZGVlcEVxdWFscyhhW2tdLCBiW2tdKSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn0iLCJ2YXIgcGF0Y2hlcyA9IHJlcXVpcmUoJy4vcGF0Y2hlcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGludmVyc2UocCkge1xuXHR2YXIgcHIgPSBbXTtcblx0dmFyIGksIHNraXA7XG5cdGZvcihpID0gcC5sZW5ndGgtMTsgaT49IDA7IGkgLT0gc2tpcCkge1xuXHRcdHNraXAgPSBpbnZlcnRPcChwciwgcFtpXSwgaSwgcCk7XG5cdH1cblxuXHRyZXR1cm4gcHI7XG59O1xuXG5mdW5jdGlvbiBpbnZlcnRPcChwYXRjaCwgYywgaSwgY29udGV4dCkge1xuXHR2YXIgb3AgPSBwYXRjaGVzW2Mub3BdO1xuXHRyZXR1cm4gb3AgIT09IHZvaWQgMCAmJiB0eXBlb2Ygb3AuaW52ZXJzZSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdD8gb3AuaW52ZXJzZShwYXRjaCwgYywgaSwgY29udGV4dClcblx0XHQ6IDE7XG59XG4iLCIvKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxudmFyIHBhdGNoZXMgPSByZXF1aXJlKCcuL3BhdGNoZXMnKTtcbnZhciBjbG9uZSA9IHJlcXVpcmUoJy4vY2xvbmUnKTtcbnZhciBJbnZhbGlkUGF0Y2hPcGVyYXRpb25FcnJvciA9IHJlcXVpcmUoJy4vSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3InKTtcblxuZXhwb3J0cy5hcHBseSA9IHBhdGNoO1xuZXhwb3J0cy5hcHBseUluUGxhY2UgPSBwYXRjaEluUGxhY2U7XG5leHBvcnRzLmNsb25lID0gY2xvbmU7XG5leHBvcnRzLmlzVmFsaWRPYmplY3QgPSBpc1ZhbGlkT2JqZWN0O1xuZXhwb3J0cy5kZWZhdWx0SGFzaCA9IGRlZmF1bHRIYXNoO1xuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuLyoqXG4gKiBBcHBseSB0aGUgc3VwcGxpZWQgSlNPTiBQYXRjaCB0byB4XG4gKiBAcGFyYW0ge2FycmF5fSBjaGFuZ2VzIEpTT04gUGF0Y2hcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fHN0cmluZ3xudW1iZXJ9IHggb2JqZWN0L2FycmF5L3ZhbHVlIHRvIHBhdGNoXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtmdW5jdGlvbihpbmRleDpOdW1iZXIsIGFycmF5OkFycmF5LCBjb250ZXh0Om9iamVjdCk6TnVtYmVyfSBvcHRpb25zLmZpbmRDb250ZXh0XG4gKiAgZnVuY3Rpb24gdXNlZCBhZGp1c3QgYXJyYXkgaW5kZXhlcyBmb3Igc21hcnR5L2Z1enp5IHBhdGNoaW5nLCBmb3JcbiAqICBwYXRjaGVzIGNvbnRhaW5pbmcgY29udGV4dFxuICogQHJldHVybnMge29iamVjdHxhcnJheXxzdHJpbmd8bnVtYmVyfSBwYXRjaGVkIHZlcnNpb24gb2YgeC4gSWYgeCBpc1xuICogIGFuIGFycmF5IG9yIG9iamVjdCwgaXQgd2lsbCBiZSBtdXRhdGVkIGFuZCByZXR1cm5lZC4gT3RoZXJ3aXNlLCBpZlxuICogIHggaXMgYSB2YWx1ZSwgdGhlIG5ldyB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLlxuICovXG5mdW5jdGlvbiBwYXRjaChjaGFuZ2VzLCB4LCBvcHRpb25zKSB7XG5cdHJldHVybiBwYXRjaEluUGxhY2UoY2hhbmdlcywgY2xvbmUoeCksIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBwYXRjaEluUGxhY2UoY2hhbmdlcywgeCwgb3B0aW9ucykge1xuXHRpZighb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcblx0fVxuXG5cdC8vIFRPRE86IENvbnNpZGVyIHRocm93aW5nIGlmIGNoYW5nZXMgaXMgbm90IGFuIGFycmF5XG5cdGlmKCFBcnJheS5pc0FycmF5KGNoYW5nZXMpKSB7XG5cdFx0cmV0dXJuIHg7XG5cdH1cblxuXHR2YXIgcGF0Y2gsIHA7XG5cdGZvcih2YXIgaT0wOyBpPGNoYW5nZXMubGVuZ3RoOyArK2kpIHtcblx0XHRwID0gY2hhbmdlc1tpXTtcblx0XHRwYXRjaCA9IHBhdGNoZXNbcC5vcF07XG5cblx0XHRpZihwYXRjaCA9PT0gdm9pZCAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3IoJ2ludmFsaWQgb3AgJyArIEpTT04uc3RyaW5naWZ5KHApKTtcblx0XHR9XG5cblx0XHR4ID0gcGF0Y2guYXBwbHkoeCwgcCwgb3B0aW9ucyk7XG5cdH1cblxuXHRyZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEhhc2goeCkge1xuXHRyZXR1cm4gaXNWYWxpZE9iamVjdCh4KSB8fCBpc0FycmF5KHgpID8gSlNPTi5zdHJpbmdpZnkoeCkgOiB4O1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkT2JqZWN0ICh4KSB7XG5cdHJldHVybiB4ICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkgKHgpIHtcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbiIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG52YXIgX3BhcnNlID0gcmVxdWlyZSgnLi9qc29uUG9pbnRlclBhcnNlJyk7XG5cbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuZXhwb3J0cy5hYnNvbHV0ZSA9IGFic29sdXRlO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5jb250YWlucyA9IGNvbnRhaW5zO1xuZXhwb3J0cy5lbmNvZGVTZWdtZW50ID0gZW5jb2RlU2VnbWVudDtcbmV4cG9ydHMuZGVjb2RlU2VnbWVudCA9IGRlY29kZVNlZ21lbnQ7XG5leHBvcnRzLnBhcnNlQXJyYXlJbmRleCA9IHBhcnNlQXJyYXlJbmRleDtcbmV4cG9ydHMuaXNWYWxpZEFycmF5SW5kZXggPSBpc1ZhbGlkQXJyYXlJbmRleDtcblxuLy8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjkwMSNwYWdlLTJcbnZhciBzZXBhcmF0b3IgPSAnLyc7XG52YXIgc2VwYXJhdG9yUnggPSAvXFwvL2c7XG52YXIgZW5jb2RlZFNlcGFyYXRvciA9ICd+MSc7XG52YXIgZW5jb2RlZFNlcGFyYXRvclJ4ID0gL34xL2c7XG5cbnZhciBlc2NhcGVDaGFyID0gJ34nO1xudmFyIGVzY2FwZVJ4ID0gL34vZztcbnZhciBlbmNvZGVkRXNjYXBlID0gJ34wJztcbnZhciBlbmNvZGVkRXNjYXBlUnggPSAvfjAvZztcblxuLyoqXG4gKiBGaW5kIHRoZSBwYXJlbnQgb2YgdGhlIHNwZWNpZmllZCBwYXRoIGluIHggYW5kIHJldHVybiBhIGRlc2NyaXB0b3JcbiAqIGNvbnRhaW5pbmcgdGhlIHBhcmVudCBhbmQgYSBrZXkuICBJZiB0aGUgcGFyZW50IGRvZXMgbm90IGV4aXN0IGluIHgsXG4gKiByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkLlxuICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IHggb2JqZWN0IG9yIGFycmF5IGluIHdoaWNoIHRvIHNlYXJjaFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggSlNPTiBQb2ludGVyIHN0cmluZyAoZW5jb2RlZClcbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKGluZGV4Ok51bWJlciwgYXJyYXk6QXJyYXksIGNvbnRleHQ6b2JqZWN0KTpOdW1iZXJ9IGZpbmRDb250ZXh0XG4gKiAgb3B0aW9uYWwgZnVuY3Rpb24gdXNlZCBhZGp1c3QgYXJyYXkgaW5kZXhlcyBmb3Igc21hcnR5L2Z1enp5IHBhdGNoaW5nLCBmb3JcbiAqICBwYXRjaGVzIGNvbnRhaW5pbmcgY29udGV4dC4gIElmIHByb3ZpZGVkLCBjb250ZXh0IE1VU1QgYWxzbyBiZSBwcm92aWRlZC5cbiAqIEBwYXJhbSB7P3tiZWZvcmU6QXJyYXksIGFmdGVyOkFycmF5fX0gY29udGV4dCBvcHRpb25hbCBwYXRjaCBjb250ZXh0IGZvclxuICogIGZpbmRDb250ZXh0IHRvIHVzZSB0byBhZGp1c3QgYXJyYXkgaW5kaWNlcy4gIElmIHByb3ZpZGVkLCBmaW5kQ29udGV4dCBNVVNUXG4gKiAgYWxzbyBiZSBwcm92aWRlZC5cbiAqIEByZXR1cm5zIHt7dGFyZ2V0Om9iamVjdHxhcnJheXxudW1iZXJ8c3RyaW5nLCBrZXk6c3RyaW5nfXx1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIGZpbmQoeCwgcGF0aCwgZmluZENvbnRleHQsIGNvbnRleHQpIHtcblx0aWYodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYocGF0aCA9PT0gJycpIHtcblx0XHQvLyB3aG9sZSBkb2N1bWVudFxuXHRcdHJldHVybiB7IHRhcmdldDogeCwga2V5OiB2b2lkIDAgfTtcblx0fVxuXG5cdGlmKHBhdGggPT09IHNlcGFyYXRvcikge1xuXHRcdHJldHVybiB7IHRhcmdldDogeCwga2V5OiAnJyB9O1xuXHR9XG5cblx0dmFyIHBhcmVudCA9IHgsIGtleTtcblx0dmFyIGhhc0NvbnRleHQgPSBjb250ZXh0ICE9PSB2b2lkIDA7XG5cblx0X3BhcnNlKHBhdGgsIGZ1bmN0aW9uKHNlZ21lbnQpIHtcblx0XHQvLyBobS4uLiB0aGlzIHNlZW1zIGxpa2UgaXQgc2hvdWxkIGJlIGlmKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJylcblx0XHRpZih4ID09IG51bGwpIHtcblx0XHRcdC8vIFNpZ25hbCB0aGF0IHdlIHByZW1hdHVyZWx5IGhpdCB0aGUgZW5kIG9mIHRoZSBwYXRoIGhpZXJhcmNoeS5cblx0XHRcdHBhcmVudCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYoQXJyYXkuaXNBcnJheSh4KSkge1xuXHRcdFx0a2V5ID0gaGFzQ29udGV4dFxuXHRcdFx0XHQ/IGZpbmRJbmRleChmaW5kQ29udGV4dCwgcGFyc2VBcnJheUluZGV4KHNlZ21lbnQpLCB4LCBjb250ZXh0KVxuXHRcdFx0XHQ6IHNlZ21lbnQgPT09ICctJyA/IHNlZ21lbnQgOiBwYXJzZUFycmF5SW5kZXgoc2VnbWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGtleSA9IHNlZ21lbnQ7XG5cdFx0fVxuXG5cdFx0cGFyZW50ID0geDtcblx0XHR4ID0geFtrZXldO1xuXHR9KTtcblxuXHRyZXR1cm4gcGFyZW50ID09PSBudWxsXG5cdFx0PyB2b2lkIDBcblx0XHQ6IHsgdGFyZ2V0OiBwYXJlbnQsIGtleToga2V5IH07XG59XG5cbmZ1bmN0aW9uIGFic29sdXRlKHBhdGgpIHtcblx0cmV0dXJuIHBhdGhbMF0gPT09IHNlcGFyYXRvciA/IHBhdGggOiBzZXBhcmF0b3IgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBqb2luKHNlZ21lbnRzKSB7XG5cdHJldHVybiBzZWdtZW50cy5qb2luKHNlcGFyYXRvcik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHBhdGgpIHtcblx0dmFyIHNlZ21lbnRzID0gW107XG5cdF9wYXJzZShwYXRoLCBzZWdtZW50cy5wdXNoLmJpbmQoc2VnbWVudHMpKTtcblx0cmV0dXJuIHNlZ21lbnRzO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhhLCBiKSB7XG5cdHJldHVybiBiLmluZGV4T2YoYSkgPT09IDAgJiYgYlthLmxlbmd0aF0gPT09IHNlcGFyYXRvcjtcbn1cblxuLyoqXG4gKiBEZWNvZGUgYSBKU09OIFBvaW50ZXIgcGF0aCBzZWdtZW50XG4gKiBAc2VlIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY5MDEjcGFnZS0zXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBlbmNvZGVkIHNlZ21lbnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGRlY29kZWQgc2VnbWVudFxuICovXG5mdW5jdGlvbiBkZWNvZGVTZWdtZW50KHMpIHtcblx0Ly8gU2VlOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTAxI3BhZ2UtM1xuXHRyZXR1cm4gcy5yZXBsYWNlKGVuY29kZWRTZXBhcmF0b3JSeCwgc2VwYXJhdG9yKS5yZXBsYWNlKGVuY29kZWRFc2NhcGVSeCwgZXNjYXBlQ2hhcik7XG59XG5cbi8qKlxuICogRW5jb2RlIGEgSlNPTiBQb2ludGVyIHBhdGggc2VnbWVudFxuICogQHNlZSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTAxI3BhZ2UtM1xuICogQHBhcmFtIHtzdHJpbmd9IHMgZGVjb2RlZCBzZWdtZW50XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBlbmNvZGVkIHNlZ21lbnRcbiAqL1xuZnVuY3Rpb24gZW5jb2RlU2VnbWVudChzKSB7XG5cdHJldHVybiBzLnJlcGxhY2UoZXNjYXBlUngsIGVuY29kZWRFc2NhcGUpLnJlcGxhY2Uoc2VwYXJhdG9yUngsIGVuY29kZWRTZXBhcmF0b3IpO1xufVxuXG52YXIgYXJyYXlJbmRleFJ4ID0gL14oMHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgcyBpcyBhIHZhbGlkIEpTT04gUG9pbnRlciBhcnJheSBpbmRleFxuICogQHBhcmFtIHtTdHJpbmd9IHNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleChzKSB7XG5cdHJldHVybiBhcnJheUluZGV4UngudGVzdChzKTtcbn1cblxuLyoqXG4gKiBTYWZlbHkgcGFyc2UgYSBzdHJpbmcgaW50byBhIG51bWJlciA+PSAwLiBEb2VzIG5vdCBjaGVjayBmb3IgZGVjaW1hbCBudW1iZXJzXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBudW1lcmljIHN0cmluZ1xuICogQHJldHVybnMge251bWJlcn0gbnVtYmVyID49IDBcbiAqL1xuZnVuY3Rpb24gcGFyc2VBcnJheUluZGV4IChzKSB7XG5cdGlmKGlzVmFsaWRBcnJheUluZGV4KHMpKSB7XG5cdFx0cmV0dXJuICtzO1xuXHR9XG5cblx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdpbnZhbGlkIGFycmF5IGluZGV4ICcgKyBzKTtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4IChmaW5kQ29udGV4dCwgc3RhcnQsIGFycmF5LCBjb250ZXh0KSB7XG5cdHZhciBpbmRleCA9IHN0YXJ0O1xuXG5cdGlmKGluZGV4IDwgMCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignYXJyYXkgaW5kZXggb3V0IG9mIGJvdW5kcyAnICsgaW5kZXgpO1xuXHR9XG5cblx0aWYoY29udGV4dCAhPT0gdm9pZCAwICYmIHR5cGVvZiBmaW5kQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGluZGV4ID0gZmluZENvbnRleHQoc3RhcnQsIGFycmF5LCBjb250ZXh0KTtcblx0XHRpZihpbmRleCA8IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgcGF0Y2ggY29udGV4dCAnICsgY29udGV4dCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGluZGV4O1xufSIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzb25Qb2ludGVyUGFyc2U7XG5cbnZhciBwYXJzZVJ4ID0gL1xcL3x+MXx+MC9nO1xudmFyIHNlcGFyYXRvciA9ICcvJztcbnZhciBlc2NhcGVDaGFyID0gJ34nO1xudmFyIGVuY29kZWRTZXBhcmF0b3IgPSAnfjEnO1xuXG4vKipcbiAqIFBhcnNlIHRocm91Z2ggYW4gZW5jb2RlZCBKU09OIFBvaW50ZXIgc3RyaW5nLCBkZWNvZGluZyBlYWNoIHBhdGggc2VnbWVudFxuICogYW5kIHBhc3NpbmcgaXQgdG8gYW4gb25TZWdtZW50IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjkwMSNzZWN0aW9uLTRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIGVuY29kZWQgSlNPTiBQb2ludGVyIHN0cmluZ1xuICogQHBhcmFtIHt7ZnVuY3Rpb24oc2VnbWVudDpzdHJpbmcpOmJvb2xlYW59fSBvblNlZ21lbnQgY2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtzdHJpbmd9IG9yaWdpbmFsIHBhdGhcbiAqL1xuZnVuY3Rpb24ganNvblBvaW50ZXJQYXJzZShwYXRoLCBvblNlZ21lbnQpIHtcblx0dmFyIHBvcywgYWNjdW0sIG1hdGNoZXMsIG1hdGNoO1xuXG5cdHBvcyA9IHBhdGguY2hhckF0KDApID09PSBzZXBhcmF0b3IgPyAxIDogMDtcblx0YWNjdW0gPSAnJztcblx0cGFyc2VSeC5sYXN0SW5kZXggPSBwb3M7XG5cblx0d2hpbGUobWF0Y2hlcyA9IHBhcnNlUnguZXhlYyhwYXRoKSkge1xuXG5cdFx0bWF0Y2ggPSBtYXRjaGVzWzBdO1xuXHRcdGFjY3VtICs9IHBhdGguc2xpY2UocG9zLCBwYXJzZVJ4Lmxhc3RJbmRleCAtIG1hdGNoLmxlbmd0aCk7XG5cdFx0cG9zID0gcGFyc2VSeC5sYXN0SW5kZXg7XG5cblx0XHRpZihtYXRjaCA9PT0gc2VwYXJhdG9yKSB7XG5cdFx0XHRpZiAob25TZWdtZW50KGFjY3VtKSA9PT0gZmFsc2UpIHJldHVybiBwYXRoO1xuXHRcdFx0YWNjdW0gPSAnJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWNjdW0gKz0gbWF0Y2ggPT09IGVuY29kZWRTZXBhcmF0b3IgPyBzZXBhcmF0b3IgOiBlc2NhcGVDaGFyO1xuXHRcdH1cblx0fVxuXG5cdGFjY3VtICs9IHBhdGguc2xpY2UocG9zKTtcblx0b25TZWdtZW50KGFjY3VtKTtcblxuXHRyZXR1cm4gcGF0aDtcbn1cbiIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG5leHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlO1xuZXhwb3J0cy5yZWR1Y2UgPSByZWR1Y2U7XG5cbnZhciBSRU1PVkUsIFJJR0hULCBBREQsIERPV04sIFNLSVA7XG5cbmV4cG9ydHMuUkVNT1ZFID0gUkVNT1ZFID0gUklHSFQgPSAtMTtcbmV4cG9ydHMuQUREICAgID0gQUREICAgID0gRE9XTiAgPSAgMTtcbmV4cG9ydHMuRVFVQUwgID0gU0tJUCAgID0gMDtcblxuLyoqXG4gKiBDcmVhdGUgYW4gbGNzIGNvbXBhcmlzb24gbWF0cml4IGRlc2NyaWJpbmcgdGhlIGRpZmZlcmVuY2VzXG4gKiBiZXR3ZWVuIHR3byBhcnJheS1saWtlIHNlcXVlbmNlc1xuICogQHBhcmFtIHthcnJheX0gYSBhcnJheS1saWtlXG4gKiBAcGFyYW0ge2FycmF5fSBiIGFycmF5LWxpa2VcbiAqIEByZXR1cm5zIHtvYmplY3R9IGxjcyBkZXNjcmlwdG9yLCBzdWl0YWJsZSBmb3IgcGFzc2luZyB0byByZWR1Y2UoKVxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcblx0dmFyIGNvbHMgPSBhLmxlbmd0aDtcblx0dmFyIHJvd3MgPSBiLmxlbmd0aDtcblxuXHR2YXIgcHJlZml4ID0gZmluZFByZWZpeChhLCBiKTtcblx0dmFyIHN1ZmZpeCA9IHByZWZpeCA8IGNvbHMgJiYgcHJlZml4IDwgcm93c1xuXHRcdD8gZmluZFN1ZmZpeChhLCBiLCBwcmVmaXgpXG5cdFx0OiAwO1xuXG5cdHZhciByZW1vdmUgPSBzdWZmaXggKyBwcmVmaXggLSAxO1xuXHRjb2xzIC09IHJlbW92ZTtcblx0cm93cyAtPSByZW1vdmU7XG5cdHZhciBtYXRyaXggPSBjcmVhdGVNYXRyaXgoY29scywgcm93cyk7XG5cblx0Zm9yICh2YXIgaiA9IGNvbHMgLSAxOyBqID49IDA7IC0taikge1xuXHRcdGZvciAodmFyIGkgPSByb3dzIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRcdG1hdHJpeFtpXVtqXSA9IGJhY2t0cmFjayhtYXRyaXgsIGEsIGIsIHByZWZpeCwgaiwgaSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRwcmVmaXg6IHByZWZpeCxcblx0XHRtYXRyaXg6IG1hdHJpeCxcblx0XHRzdWZmaXg6IHN1ZmZpeFxuXHR9O1xufVxuXG4vKipcbiAqIFJlZHVjZSBhIHNldCBvZiBsY3MgY2hhbmdlcyBwcmV2aW91c2x5IGNyZWF0ZWQgdXNpbmcgY29tcGFyZVxuICogQHBhcmFtIHtmdW5jdGlvbihyZXN1bHQ6KiwgdHlwZTpudW1iZXIsIGk6bnVtYmVyLCBqOm51bWJlcil9IGZcbiAqICByZWR1Y2VyIGZ1bmN0aW9uLCB3aGVyZTpcbiAqICAtIHJlc3VsdCBpcyB0aGUgY3VycmVudCByZWR1Y2UgdmFsdWUsXG4gKiAgLSB0eXBlIGlzIHRoZSB0eXBlIG9mIGNoYW5nZTogQURELCBSRU1PVkUsIG9yIFNLSVBcbiAqICAtIGkgaXMgdGhlIGluZGV4IG9mIHRoZSBjaGFuZ2UgbG9jYXRpb24gaW4gYlxuICogIC0gaiBpcyB0aGUgaW5kZXggb2YgdGhlIGNoYW5nZSBsb2NhdGlvbiBpbiBhXG4gKiBAcGFyYW0geyp9IHIgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IGxjcyByZXN1bHRzIHJldHVybmVkIGJ5IGNvbXBhcmUoKVxuICogQHJldHVybnMgeyp9IHRoZSBmaW5hbCByZWR1Y2VkIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHJlZHVjZShmLCByLCBsY3MpIHtcblx0dmFyIGksIGosIGssIG9wO1xuXG5cdHZhciBtID0gbGNzLm1hdHJpeDtcblxuXHQvLyBSZWR1Y2Ugc2hhcmVkIHByZWZpeFxuXHR2YXIgbCA9IGxjcy5wcmVmaXg7XG5cdGZvcihpID0gMDtpIDwgbDsgKytpKSB7XG5cdFx0ciA9IGYociwgU0tJUCwgaSwgaSk7XG5cdH1cblxuXHQvLyBSZWR1Y2UgbG9uZ2VzdCBjaGFuZ2Ugc3BhblxuXHRrID0gaTtcblx0bCA9IG0ubGVuZ3RoO1xuXHRpID0gMDtcblx0aiA9IDA7XG5cdHdoaWxlKGkgPCBsKSB7XG5cdFx0b3AgPSBtW2ldW2pdLnR5cGU7XG5cdFx0ciA9IGYociwgb3AsIGkraywgaitrKTtcblxuXHRcdHN3aXRjaChvcCkge1xuXHRcdFx0Y2FzZSBTS0lQOiAgKytpOyArK2o7IGJyZWFrO1xuXHRcdFx0Y2FzZSBSSUdIVDogKytqOyBicmVhaztcblx0XHRcdGNhc2UgRE9XTjogICsraTsgYnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVkdWNlIHNoYXJlZCBzdWZmaXhcblx0aSArPSBrO1xuXHRqICs9IGs7XG5cdGwgPSBsY3Muc3VmZml4O1xuXHRmb3IoayA9IDA7ayA8IGw7ICsraykge1xuXHRcdHIgPSBmKHIsIFNLSVAsIGkraywgaitrKTtcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBmaW5kUHJlZml4KGEsIGIpIHtcblx0dmFyIGkgPSAwO1xuXHR2YXIgbCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG5cdHdoaWxlKGkgPCBsICYmIGFbaV0gPT09IGJbaV0pIHtcblx0XHQrK2k7XG5cdH1cblx0cmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGZpbmRTdWZmaXgoYSwgYikge1xuXHR2YXIgYWwgPSBhLmxlbmd0aCAtIDE7XG5cdHZhciBibCA9IGIubGVuZ3RoIC0gMTtcblx0dmFyIGwgPSBNYXRoLm1pbihhbCwgYmwpO1xuXHR2YXIgaSA9IDA7XG5cdHdoaWxlKGkgPCBsICYmIGFbYWwtaV0gPT09IGJbYmwtaV0pIHtcblx0XHQrK2k7XG5cdH1cblx0cmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGJhY2t0cmFjayhtYXRyaXgsIGEsIGIsIHN0YXJ0LCBqLCBpKSB7XG5cdGlmIChhW2orc3RhcnRdID09PSBiW2krc3RhcnRdKSB7XG5cdFx0cmV0dXJuIHsgdmFsdWU6IG1hdHJpeFtpICsgMV1baiArIDFdLnZhbHVlLCB0eXBlOiBTS0lQIH07XG5cdH1cblx0aWYgKG1hdHJpeFtpXVtqICsgMV0udmFsdWUgPCBtYXRyaXhbaSArIDFdW2pdLnZhbHVlKSB7XG5cdFx0cmV0dXJuIHsgdmFsdWU6IG1hdHJpeFtpXVtqICsgMV0udmFsdWUgKyAxLCB0eXBlOiBSSUdIVCB9O1xuXHR9XG5cblx0cmV0dXJuIHsgdmFsdWU6IG1hdHJpeFtpICsgMV1bal0udmFsdWUgKyAxLCB0eXBlOiBET1dOIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdHJpeCAoY29scywgcm93cykge1xuXHR2YXIgbSA9IFtdLCBpLCBqLCBsYXN0cm93O1xuXG5cdC8vIEZpbGwgdGhlIGxhc3Qgcm93XG5cdGxhc3Ryb3cgPSBtW3Jvd3NdID0gW107XG5cdGZvciAoaiA9IDA7IGo8Y29sczsgKytqKSB7XG5cdFx0bGFzdHJvd1tqXSA9IHsgdmFsdWU6IGNvbHMgLSBqLCB0eXBlOiBSSUdIVCB9O1xuXHR9XG5cblx0Ly8gRmlsbCB0aGUgbGFzdCBjb2xcblx0Zm9yIChpID0gMDsgaTxyb3dzOyArK2kpIHtcblx0XHRtW2ldID0gW107XG5cdFx0bVtpXVtjb2xzXSA9IHsgdmFsdWU6IHJvd3MgLSBpLCB0eXBlOiBET1dOIH07XG5cdH1cblxuXHQvLyBGaWxsIHRoZSBsYXN0IGNlbGxcblx0bVtyb3dzXVtjb2xzXSA9IHsgdmFsdWU6IDAsIHR5cGU6IFNLSVAgfTtcblxuXHRyZXR1cm4gbTtcbn1cbiIsInZhciBqc29uUG9pbnRlciA9IHJlcXVpcmUoJy4vanNvblBvaW50ZXInKTtcbnZhciBjbG9uZSA9IHJlcXVpcmUoJy4vY2xvbmUnKTtcbnZhciBkZWVwRXF1YWxzID0gcmVxdWlyZSgnLi9kZWVwRXF1YWxzJyk7XG52YXIgY29tbXV0ZVBhdGhzID0gcmVxdWlyZSgnLi9jb21tdXRlUGF0aHMnKTtcblxudmFyIGFycmF5ID0gcmVxdWlyZSgnLi9hcnJheScpO1xuXG52YXIgVGVzdEZhaWxlZEVycm9yID0gcmVxdWlyZSgnLi9UZXN0RmFpbGVkRXJyb3InKTtcbnZhciBJbnZhbGlkUGF0Y2hPcGVyYXRpb25FcnJvciA9IHJlcXVpcmUoJy4vSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3InKTtcbnZhciBQYXRjaE5vdEludmVydGlibGVFcnJvciA9IHJlcXVpcmUoJy4vUGF0Y2hOb3RJbnZlcnRpYmxlRXJyb3InKTtcblxudmFyIGZpbmQgPSBqc29uUG9pbnRlci5maW5kO1xudmFyIHBhcnNlQXJyYXlJbmRleCA9IGpzb25Qb2ludGVyLnBhcnNlQXJyYXlJbmRleDtcblxuZXhwb3J0cy50ZXN0ID0ge1xuXHRhcHBseTogYXBwbHlUZXN0LFxuXHRpbnZlcnNlOiBpbnZlcnRUZXN0LFxuXHRjb21tdXRlOiBjb21tdXRlVGVzdFxufTtcblxuZXhwb3J0cy5hZGQgPSB7XG5cdGFwcGx5OiBhcHBseUFkZCxcblx0aW52ZXJzZTogaW52ZXJ0QWRkLFxuXHRjb21tdXRlOiBjb21tdXRlQWRkT3JDb3B5XG59O1xuXG5leHBvcnRzLnJlbW92ZSA9IHtcblx0YXBwbHk6IGFwcGx5UmVtb3ZlLFxuXHRpbnZlcnNlOiBpbnZlcnRSZW1vdmUsXG5cdGNvbW11dGU6IGNvbW11dGVSZW1vdmVcbn07XG5cbmV4cG9ydHMucmVwbGFjZSA9IHtcblx0YXBwbHk6IGFwcGx5UmVwbGFjZSxcblx0aW52ZXJzZTogaW52ZXJ0UmVwbGFjZSxcblx0Y29tbXV0ZTogY29tbXV0ZVJlcGxhY2Vcbn07XG5cbmV4cG9ydHMubW92ZSA9IHtcblx0YXBwbHk6IGFwcGx5TW92ZSxcblx0aW52ZXJzZTogaW52ZXJ0TW92ZSxcblx0Y29tbXV0ZTogY29tbXV0ZU1vdmVcbn07XG5cbmV4cG9ydHMuY29weSA9IHtcblx0YXBwbHk6IGFwcGx5Q29weSxcblx0aW52ZXJzZTogbm90SW52ZXJ0aWJsZSxcblx0Y29tbXV0ZTogY29tbXV0ZUFkZE9yQ29weVxufTtcblxuLyoqXG4gKiBBcHBseSBhIHRlc3Qgb3BlcmF0aW9uIHRvIHhcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSB4XG4gKiBAcGFyYW0ge29iamVjdH0gdGVzdCB0ZXN0IG9wZXJhdGlvblxuICogQHRocm93cyB7VGVzdEZhaWxlZEVycm9yfSBpZiB0aGUgdGVzdCBvcGVyYXRpb24gZmFpbHNcbiAqL1xuXG5mdW5jdGlvbiBhcHBseVRlc3QoeCwgdGVzdCwgb3B0aW9ucykge1xuXHR2YXIgcG9pbnRlciA9IGZpbmQoeCwgdGVzdC5wYXRoLCBvcHRpb25zLmZpbmRDb250ZXh0LCB0ZXN0LmNvbnRleHQpO1xuXHR2YXIgdGFyZ2V0ID0gcG9pbnRlci50YXJnZXQ7XG5cdHZhciBpbmRleCwgdmFsdWU7XG5cblx0aWYoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG5cdFx0aW5kZXggPSBwYXJzZUFycmF5SW5kZXgocG9pbnRlci5rZXkpO1xuXHRcdC8vaW5kZXggPSBmaW5kSW5kZXgob3B0aW9ucy5maW5kQ29udGV4dCwgaW5kZXgsIHRhcmdldCwgdGVzdC5jb250ZXh0KTtcblx0XHR2YWx1ZSA9IHRhcmdldFtpbmRleF07XG5cdH0gZWxzZSB7XG5cdFx0dmFsdWUgPSBwb2ludGVyLmtleSA9PT0gdm9pZCAwID8gcG9pbnRlci50YXJnZXQgOiBwb2ludGVyLnRhcmdldFtwb2ludGVyLmtleV07XG5cdH1cblxuXHRpZighZGVlcEVxdWFscyh2YWx1ZSwgdGVzdC52YWx1ZSkpIHtcblx0XHR0aHJvdyBuZXcgVGVzdEZhaWxlZEVycm9yKCd0ZXN0IGZhaWxlZCAnICsgSlNPTi5zdHJpbmdpZnkodGVzdCkpO1xuXHR9XG5cblx0cmV0dXJuIHg7XG59XG5cbi8qKlxuICogSW52ZXJ0IHRoZSBwcm92aWRlZCB0ZXN0IGFuZCBhZGQgaXQgdG8gdGhlIGludmVydGVkIHBhdGNoIHNlcXVlbmNlXG4gKiBAcGFyYW0gcHJcbiAqIEBwYXJhbSB0ZXN0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBpbnZlcnRUZXN0KHByLCB0ZXN0KSB7XG5cdHByLnB1c2godGVzdCk7XG5cdHJldHVybiAxO1xufVxuXG5mdW5jdGlvbiBjb21tdXRlVGVzdCh0ZXN0LCBiKSB7XG5cdGlmKHRlc3QucGF0aCA9PT0gYi5wYXRoICYmIGIub3AgPT09ICdyZW1vdmUnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2FuXFwndCBjb21tdXRlIHRlc3QscmVtb3ZlIC0+IHJlbW92ZSx0ZXN0IGZvciBzYW1lIHBhdGgnKTtcblx0fVxuXG5cdGlmKGIub3AgPT09ICd0ZXN0JyB8fCBiLm9wID09PSAncmVwbGFjZScpIHtcblx0XHRyZXR1cm4gW2IsIHRlc3RdO1xuXHR9XG5cblx0cmV0dXJuIGNvbW11dGVQYXRocyh0ZXN0LCBiKTtcbn1cblxuLyoqXG4gKiBBcHBseSBhbiBhZGQgb3BlcmF0aW9uIHRvIHhcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSB4XG4gKiBAcGFyYW0ge29iamVjdH0gY2hhbmdlIGFkZCBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gYXBwbHlBZGQoeCwgY2hhbmdlLCBvcHRpb25zKSB7XG5cdHZhciBwb2ludGVyID0gZmluZCh4LCBjaGFuZ2UucGF0aCwgb3B0aW9ucy5maW5kQ29udGV4dCwgY2hhbmdlLmNvbnRleHQpO1xuXG5cdGlmKG5vdEZvdW5kKHBvaW50ZXIpKSB7XG5cdFx0dGhyb3cgbmV3IEludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yKCdwYXRoIGRvZXMgbm90IGV4aXN0ICcgKyBjaGFuZ2UucGF0aCk7XG5cdH1cblxuXHRpZihjaGFuZ2UudmFsdWUgPT09IHZvaWQgMCkge1xuXHRcdHRocm93IG5ldyBJbnZhbGlkUGF0Y2hPcGVyYXRpb25FcnJvcignbWlzc2luZyB2YWx1ZScpO1xuXHR9XG5cblx0dmFyIHZhbCA9IGNsb25lKGNoYW5nZS52YWx1ZSk7XG5cblx0Ly8gSWYgcG9pbnRlciByZWZlcnMgdG8gd2hvbGUgZG9jdW1lbnQsIHJlcGxhY2Ugd2hvbGUgZG9jdW1lbnRcblx0aWYocG9pbnRlci5rZXkgPT09IHZvaWQgMCkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRfYWRkKHBvaW50ZXIsIHZhbCk7XG5cdHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBfYWRkKHBvaW50ZXIsIHZhbHVlKSB7XG5cdHZhciB0YXJnZXQgPSBwb2ludGVyLnRhcmdldDtcblxuXHRpZihBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcblx0XHQvLyAnLScgaW5kaWNhdGVzICdhcHBlbmQnIHRvIGFycmF5XG5cdFx0aWYocG9pbnRlci5rZXkgPT09ICctJykge1xuXHRcdFx0dGFyZ2V0LnB1c2godmFsdWUpO1xuXHRcdH0gZWxzZSBpZiAocG9pbnRlci5rZXkgPiB0YXJnZXQubGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBuZXcgSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3IoJ3RhcmdldCBvZiBhZGQgb3V0c2lkZSBvZiBhcnJheSBib3VuZHMnKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuc3BsaWNlKHBvaW50ZXIua2V5LCAwLCB2YWx1ZSk7XG5cdFx0fVxuXHR9IGVsc2UgaWYoaXNWYWxpZE9iamVjdCh0YXJnZXQpKSB7XG5cdFx0dGFyZ2V0W3BvaW50ZXIua2V5XSA9IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBJbnZhbGlkUGF0Y2hPcGVyYXRpb25FcnJvcigndGFyZ2V0IG9mIGFkZCBtdXN0IGJlIGFuIG9iamVjdCBvciBhcnJheSAnICsgcG9pbnRlci5rZXkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGludmVydEFkZChwciwgYWRkKSB7XG5cdHZhciBjb250ZXh0ID0gYWRkLmNvbnRleHQ7XG5cdGlmKGNvbnRleHQgIT09IHZvaWQgMCkge1xuXHRcdGNvbnRleHQgPSB7XG5cdFx0XHRiZWZvcmU6IGNvbnRleHQuYmVmb3JlLFxuXHRcdFx0YWZ0ZXI6IGFycmF5LmNvbnMoYWRkLnZhbHVlLCBjb250ZXh0LmFmdGVyKVxuXHRcdH1cblx0fVxuXHRwci5wdXNoKHsgb3A6ICd0ZXN0JywgcGF0aDogYWRkLnBhdGgsIHZhbHVlOiBhZGQudmFsdWUsIGNvbnRleHQ6IGNvbnRleHQgfSk7XG5cdHByLnB1c2goeyBvcDogJ3JlbW92ZScsIHBhdGg6IGFkZC5wYXRoLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuXHRyZXR1cm4gMTtcbn1cblxuZnVuY3Rpb24gY29tbXV0ZUFkZE9yQ29weShhZGQsIGIpIHtcblx0aWYoYWRkLnBhdGggPT09IGIucGF0aCAmJiBiLm9wID09PSAncmVtb3ZlJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhblxcJ3QgY29tbXV0ZSBhZGQscmVtb3ZlIC0+IHJlbW92ZSxhZGQgZm9yIHNhbWUgcGF0aCcpO1xuXHR9XG5cblx0cmV0dXJuIGNvbW11dGVQYXRocyhhZGQsIGIpO1xufVxuXG4vKipcbiAqIEFwcGx5IGEgcmVwbGFjZSBvcGVyYXRpb24gdG8geFxuICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IHhcbiAqIEBwYXJhbSB7b2JqZWN0fSBjaGFuZ2UgcmVwbGFjZSBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gYXBwbHlSZXBsYWNlKHgsIGNoYW5nZSwgb3B0aW9ucykge1xuXHR2YXIgcG9pbnRlciA9IGZpbmQoeCwgY2hhbmdlLnBhdGgsIG9wdGlvbnMuZmluZENvbnRleHQsIGNoYW5nZS5jb250ZXh0KTtcblxuXHRpZihub3RGb3VuZChwb2ludGVyKSB8fCBtaXNzaW5nVmFsdWUocG9pbnRlcikpIHtcblx0XHR0aHJvdyBuZXcgSW52YWxpZFBhdGNoT3BlcmF0aW9uRXJyb3IoJ3BhdGggZG9lcyBub3QgZXhpc3QgJyArIGNoYW5nZS5wYXRoKTtcblx0fVxuXG5cdGlmKGNoYW5nZS52YWx1ZSA9PT0gdm9pZCAwKSB7XG5cdFx0dGhyb3cgbmV3IEludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yKCdtaXNzaW5nIHZhbHVlJyk7XG5cdH1cblxuXHR2YXIgdmFsdWUgPSBjbG9uZShjaGFuZ2UudmFsdWUpO1xuXG5cdC8vIElmIHBvaW50ZXIgcmVmZXJzIHRvIHdob2xlIGRvY3VtZW50LCByZXBsYWNlIHdob2xlIGRvY3VtZW50XG5cdGlmKHBvaW50ZXIua2V5ID09PSB2b2lkIDApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHR2YXIgdGFyZ2V0ID0gcG9pbnRlci50YXJnZXQ7XG5cblx0aWYoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG5cdFx0dGFyZ2V0W3BhcnNlQXJyYXlJbmRleChwb2ludGVyLmtleSldID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W3BvaW50ZXIua2V5XSA9IHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIGludmVydFJlcGxhY2UocHIsIGMsIGksIHBhdGNoKSB7XG5cdHZhciBwcmV2ID0gcGF0Y2hbaS0xXTtcblx0aWYocHJldiA9PT0gdm9pZCAwIHx8IHByZXYub3AgIT09ICd0ZXN0JyB8fCBwcmV2LnBhdGggIT09IGMucGF0aCkge1xuXHRcdHRocm93IG5ldyBQYXRjaE5vdEludmVydGlibGVFcnJvcignY2Fubm90IGludmVydCByZXBsYWNlIHcvbyB0ZXN0Jyk7XG5cdH1cblxuXHR2YXIgY29udGV4dCA9IHByZXYuY29udGV4dDtcblx0aWYoY29udGV4dCAhPT0gdm9pZCAwKSB7XG5cdFx0Y29udGV4dCA9IHtcblx0XHRcdGJlZm9yZTogY29udGV4dC5iZWZvcmUsXG5cdFx0XHRhZnRlcjogYXJyYXkuY29ucyhwcmV2LnZhbHVlLCBhcnJheS50YWlsKGNvbnRleHQuYWZ0ZXIpKVxuXHRcdH1cblx0fVxuXG5cdHByLnB1c2goeyBvcDogJ3Rlc3QnLCBwYXRoOiBwcmV2LnBhdGgsIHZhbHVlOiBjLnZhbHVlIH0pO1xuXHRwci5wdXNoKHsgb3A6ICdyZXBsYWNlJywgcGF0aDogcHJldi5wYXRoLCB2YWx1ZTogcHJldi52YWx1ZSB9KTtcblx0cmV0dXJuIDI7XG59XG5cbmZ1bmN0aW9uIGNvbW11dGVSZXBsYWNlKHJlcGxhY2UsIGIpIHtcblx0aWYocmVwbGFjZS5wYXRoID09PSBiLnBhdGggJiYgYi5vcCA9PT0gJ3JlbW92ZScpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5cXCd0IGNvbW11dGUgcmVwbGFjZSxyZW1vdmUgLT4gcmVtb3ZlLHJlcGxhY2UgZm9yIHNhbWUgcGF0aCcpO1xuXHR9XG5cblx0aWYoYi5vcCA9PT0gJ3Rlc3QnIHx8IGIub3AgPT09ICdyZXBsYWNlJykge1xuXHRcdHJldHVybiBbYiwgcmVwbGFjZV07XG5cdH1cblxuXHRyZXR1cm4gY29tbXV0ZVBhdGhzKHJlcGxhY2UsIGIpO1xufVxuXG4vKipcbiAqIEFwcGx5IGEgcmVtb3ZlIG9wZXJhdGlvbiB0byB4XG4gKiBAcGFyYW0ge29iamVjdHxhcnJheX0geFxuICogQHBhcmFtIHtvYmplY3R9IGNoYW5nZSByZW1vdmUgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGFwcGx5UmVtb3ZlKHgsIGNoYW5nZSwgb3B0aW9ucykge1xuXHR2YXIgcG9pbnRlciA9IGZpbmQoeCwgY2hhbmdlLnBhdGgsIG9wdGlvbnMuZmluZENvbnRleHQsIGNoYW5nZS5jb250ZXh0KTtcblxuXHQvLyBrZXkgbXVzdCBleGlzdCBmb3IgcmVtb3ZlXG5cdGlmKG5vdEZvdW5kKHBvaW50ZXIpIHx8IHBvaW50ZXIudGFyZ2V0W3BvaW50ZXIua2V5XSA9PT0gdm9pZCAwKSB7XG5cdFx0dGhyb3cgbmV3IEludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yKCdwYXRoIGRvZXMgbm90IGV4aXN0ICcgKyBjaGFuZ2UucGF0aCk7XG5cdH1cblxuXHRfcmVtb3ZlKHBvaW50ZXIpO1xuXHRyZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gX3JlbW92ZSAocG9pbnRlcikge1xuXHR2YXIgdGFyZ2V0ID0gcG9pbnRlci50YXJnZXQ7XG5cblx0dmFyIHJlbW92ZWQ7XG5cdGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcblx0XHRyZW1vdmVkID0gdGFyZ2V0LnNwbGljZShwYXJzZUFycmF5SW5kZXgocG9pbnRlci5rZXkpLCAxKTtcblx0XHRyZXR1cm4gcmVtb3ZlZFswXTtcblxuXHR9IGVsc2UgaWYgKGlzVmFsaWRPYmplY3QodGFyZ2V0KSkge1xuXHRcdHJlbW92ZWQgPSB0YXJnZXRbcG9pbnRlci5rZXldO1xuXHRcdGRlbGV0ZSB0YXJnZXRbcG9pbnRlci5rZXldO1xuXHRcdHJldHVybiByZW1vdmVkO1xuXG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yKCd0YXJnZXQgb2YgcmVtb3ZlIG11c3QgYmUgYW4gb2JqZWN0IG9yIGFycmF5Jyk7XG5cdH1cbn1cblxuZnVuY3Rpb24gaW52ZXJ0UmVtb3ZlKHByLCBjLCBpLCBwYXRjaCkge1xuXHR2YXIgcHJldiA9IHBhdGNoW2ktMV07XG5cdGlmKHByZXYgPT09IHZvaWQgMCB8fCBwcmV2Lm9wICE9PSAndGVzdCcgfHwgcHJldi5wYXRoICE9PSBjLnBhdGgpIHtcblx0XHR0aHJvdyBuZXcgUGF0Y2hOb3RJbnZlcnRpYmxlRXJyb3IoJ2Nhbm5vdCBpbnZlcnQgcmVtb3ZlIHcvbyB0ZXN0Jyk7XG5cdH1cblxuXHR2YXIgY29udGV4dCA9IHByZXYuY29udGV4dDtcblx0aWYoY29udGV4dCAhPT0gdm9pZCAwKSB7XG5cdFx0Y29udGV4dCA9IHtcblx0XHRcdGJlZm9yZTogY29udGV4dC5iZWZvcmUsXG5cdFx0XHRhZnRlcjogYXJyYXkudGFpbChjb250ZXh0LmFmdGVyKVxuXHRcdH1cblx0fVxuXG5cdHByLnB1c2goeyBvcDogJ2FkZCcsIHBhdGg6IHByZXYucGF0aCwgdmFsdWU6IHByZXYudmFsdWUsIGNvbnRleHQ6IGNvbnRleHQgfSk7XG5cdHJldHVybiAyO1xufVxuXG5mdW5jdGlvbiBjb21tdXRlUmVtb3ZlKHJlbW92ZSwgYikge1xuXHRpZihyZW1vdmUucGF0aCA9PT0gYi5wYXRoICYmIGIub3AgPT09ICdyZW1vdmUnKSB7XG5cdFx0cmV0dXJuIFtiLCByZW1vdmVdO1xuXHR9XG5cblx0cmV0dXJuIGNvbW11dGVQYXRocyhyZW1vdmUsIGIpO1xufVxuXG4vKipcbiAqIEFwcGx5IGEgbW92ZSBvcGVyYXRpb24gdG8geFxuICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IHhcbiAqIEBwYXJhbSB7b2JqZWN0fSBjaGFuZ2UgbW92ZSBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gYXBwbHlNb3ZlKHgsIGNoYW5nZSwgb3B0aW9ucykge1xuXHRpZihqc29uUG9pbnRlci5jb250YWlucyhjaGFuZ2UucGF0aCwgY2hhbmdlLmZyb20pKSB7XG5cdFx0dGhyb3cgbmV3IEludmFsaWRQYXRjaE9wZXJhdGlvbkVycm9yKCdtb3ZlLmZyb20gY2Fubm90IGJlIGFuY2VzdG9yIG9mIG1vdmUucGF0aCcpO1xuXHR9XG5cblx0dmFyIHB0byA9IGZpbmQoeCwgY2hhbmdlLnBhdGgsIG9wdGlvbnMuZmluZENvbnRleHQsIGNoYW5nZS5jb250ZXh0KTtcblx0dmFyIHBmcm9tID0gZmluZCh4LCBjaGFuZ2UuZnJvbSwgb3B0aW9ucy5maW5kQ29udGV4dCwgY2hhbmdlLmZyb21Db250ZXh0KTtcblxuXHRfYWRkKHB0bywgX3JlbW92ZShwZnJvbSkpO1xuXHRyZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gaW52ZXJ0TW92ZShwciwgYykge1xuXHRwci5wdXNoKHsgb3A6ICdtb3ZlJyxcblx0XHRwYXRoOiBjLmZyb20sIGNvbnRleHQ6IGMuZnJvbUNvbnRleHQsXG5cdFx0ZnJvbTogYy5wYXRoLCBmcm9tQ29udGV4dDogYy5jb250ZXh0IH0pO1xuXHRyZXR1cm4gMTtcbn1cblxuZnVuY3Rpb24gY29tbXV0ZU1vdmUobW92ZSwgYikge1xuXHRpZihtb3ZlLnBhdGggPT09IGIucGF0aCAmJiBiLm9wID09PSAncmVtb3ZlJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhblxcJ3QgY29tbXV0ZSBtb3ZlLHJlbW92ZSAtPiBtb3ZlLHJlcGxhY2UgZm9yIHNhbWUgcGF0aCcpO1xuXHR9XG5cblx0cmV0dXJuIGNvbW11dGVQYXRocyhtb3ZlLCBiKTtcbn1cblxuLyoqXG4gKiBBcHBseSBhIGNvcHkgb3BlcmF0aW9uIHRvIHhcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSB4XG4gKiBAcGFyYW0ge29iamVjdH0gY2hhbmdlIGNvcHkgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29weSh4LCBjaGFuZ2UsIG9wdGlvbnMpIHtcblx0dmFyIHB0byA9IGZpbmQoeCwgY2hhbmdlLnBhdGgsIG9wdGlvbnMuZmluZENvbnRleHQsIGNoYW5nZS5jb250ZXh0KTtcblx0dmFyIHBmcm9tID0gZmluZCh4LCBjaGFuZ2UuZnJvbSwgb3B0aW9ucy5maW5kQ29udGV4dCwgY2hhbmdlLmZyb21Db250ZXh0KTtcblxuXHRpZihub3RGb3VuZChwZnJvbSkgfHwgbWlzc2luZ1ZhbHVlKHBmcm9tKSkge1xuXHRcdHRocm93IG5ldyBJbnZhbGlkUGF0Y2hPcGVyYXRpb25FcnJvcignY29weS5mcm9tIG11c3QgZXhpc3QnKTtcblx0fVxuXG5cdHZhciB0YXJnZXQgPSBwZnJvbS50YXJnZXQ7XG5cdHZhciB2YWx1ZTtcblxuXHRpZihBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcblx0XHR2YWx1ZSA9IHRhcmdldFtwYXJzZUFycmF5SW5kZXgocGZyb20ua2V5KV07XG5cdH0gZWxzZSB7XG5cdFx0dmFsdWUgPSB0YXJnZXRbcGZyb20ua2V5XTtcblx0fVxuXG5cdF9hZGQocHRvLCBjbG9uZSh2YWx1ZSkpO1xuXHRyZXR1cm4geDtcbn1cblxuLy8gTk9URTogQ29weSBpcyBub3QgaW52ZXJ0aWJsZVxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvamlmZi9pc3N1ZXMvOVxuLy8gVGhpcyBuZWVkcyBtb3JlIHRob3VnaHQuIFdlIG1heSBoYXZlIHRvIGV4dGVuZC9hbWVuZCBKU09OIFBhdGNoLlxuLy8gQXQgZmlyc3QgZ2xhbmNlLCB0aGlzIHNlZW1zIGxpa2UgaXQgc2hvdWxkIGp1c3QgYmUgYSByZW1vdmUuXG4vLyBIb3dldmVyLCB0aGF0J3Mgbm90IGNvcnJlY3QuICBJdCB2aW9sYXRlcyB0aGUgaW52b2x1dGlvbjpcbi8vIGludmVydChpbnZlcnQocCkpIH49IHAuICBGb3IgZXhhbXBsZTpcbi8vIGludmVydChjb3B5KSAtPiByZW1vdmVcbi8vIGludmVydChyZW1vdmUpIC0+IGFkZFxuLy8gdGh1czogaW52ZXJ0KGludmVydChjb3B5KSkgLT4gYWRkIChET0ghIHRoaXMgc2hvdWxkIGJlIGNvcHkhKVxuXG5mdW5jdGlvbiBub3RJbnZlcnRpYmxlKF8sIGMpIHtcblx0dGhyb3cgbmV3IFBhdGNoTm90SW52ZXJ0aWJsZUVycm9yKCdjYW5ub3QgaW52ZXJ0ICcgKyBjLm9wKTtcbn1cblxuZnVuY3Rpb24gbm90Rm91bmQgKHBvaW50ZXIpIHtcblx0cmV0dXJuIHBvaW50ZXIgPT09IHZvaWQgMCB8fCAocG9pbnRlci50YXJnZXQgPT0gbnVsbCAmJiBwb2ludGVyLmtleSAhPT0gdm9pZCAwKTtcbn1cblxuZnVuY3Rpb24gbWlzc2luZ1ZhbHVlKHBvaW50ZXIpIHtcblx0cmV0dXJuIHBvaW50ZXIua2V5ICE9PSB2b2lkIDAgJiYgcG9pbnRlci50YXJnZXRbcG9pbnRlci5rZXldID09PSB2b2lkIDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgeCBpcyBhIG5vbi1udWxsIG9iamVjdFxuICogQHBhcmFtIHsqfSB4XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE9iamVjdCAoeCkge1xuXHRyZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG4iLCIvKlxuICogJElkOiBiYXNlNjQuanMsdiAyLjE1IDIwMTQvMDQvMDUgMTI6NTg6NTcgZGFua29nYWkgRXhwIGRhbmtvZ2FpICRcbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKlxuICogIFJlZmVyZW5jZXM6XG4gKiAgICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NFxuICovXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gZXhpc3RpbmcgdmVyc2lvbiBmb3Igbm9Db25mbGljdCgpXG4gICAgdmFyIF9CYXNlNjQgPSBnbG9iYWwuQmFzZTY0O1xuICAgIHZhciB2ZXJzaW9uID0gXCIyLjEuOVwiO1xuICAgIC8vIGlmIG5vZGUuanMsIHdlIHVzZSBCdWZmZXJcbiAgICB2YXIgYnVmZmVyO1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuICAgIC8vIGNvbnN0YW50c1xuICAgIHZhciBiNjRjaGFyc1xuICAgICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbiAgICB2YXIgYjY0dGFiID0gZnVuY3Rpb24oYmluKSB7XG4gICAgICAgIHZhciB0ID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYmluLmxlbmd0aDsgaSA8IGw7IGkrKykgdFtiaW4uY2hhckF0KGkpXSA9IGk7XG4gICAgICAgIHJldHVybiB0O1xuICAgIH0oYjY0Y2hhcnMpO1xuICAgIHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuICAgIC8vIGVuY29kZXIgc3R1ZmZcbiAgICB2YXIgY2JfdXRvYiA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgaWYgKGMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdmFyIGNjID0gYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgcmV0dXJuIGNjIDwgMHg4MCA/IGNcbiAgICAgICAgICAgICAgICA6IGNjIDwgMHg4MDAgPyAoZnJvbUNoYXJDb2RlKDB4YzAgfCAoY2MgPj4+IDYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKGNjICYgMHgzZikpKVxuICAgICAgICAgICAgICAgIDogKGZyb21DaGFyQ29kZSgweGUwIHwgKChjYyA+Pj4gMTIpICYgMHgwZikpXG4gICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICgoY2MgPj4+ICA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoIGNjICAgICAgICAgJiAweDNmKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNjID0gMHgxMDAwMFxuICAgICAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgwKSAtIDB4RDgwMCkgKiAweDQwMFxuICAgICAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgxKSAtIDB4REMwMCk7XG4gICAgICAgICAgICByZXR1cm4gKGZyb21DaGFyQ29kZSgweGYwIHwgKChjYyA+Pj4gMTgpICYgMHgwNykpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiAxMikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICgoY2MgPj4+ICA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKCBjYyAgICAgICAgICYgMHgzZikpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlX3V0b2IgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGRl18W15cXHgwMC1cXHg3Rl0vZztcbiAgICB2YXIgdXRvYiA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgcmV0dXJuIHUucmVwbGFjZShyZV91dG9iLCBjYl91dG9iKTtcbiAgICB9O1xuICAgIHZhciBjYl9lbmNvZGUgPSBmdW5jdGlvbihjY2MpIHtcbiAgICAgICAgdmFyIHBhZGxlbiA9IFswLCAyLCAxXVtjY2MubGVuZ3RoICUgM10sXG4gICAgICAgIG9yZCA9IGNjYy5jaGFyQ29kZUF0KDApIDw8IDE2XG4gICAgICAgICAgICB8ICgoY2NjLmxlbmd0aCA+IDEgPyBjY2MuY2hhckNvZGVBdCgxKSA6IDApIDw8IDgpXG4gICAgICAgICAgICB8ICgoY2NjLmxlbmd0aCA+IDIgPyBjY2MuY2hhckNvZGVBdCgyKSA6IDApKSxcbiAgICAgICAgY2hhcnMgPSBbXG4gICAgICAgICAgICBiNjRjaGFycy5jaGFyQXQoIG9yZCA+Pj4gMTgpLFxuICAgICAgICAgICAgYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDEyKSAmIDYzKSxcbiAgICAgICAgICAgIHBhZGxlbiA+PSAyID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDYpICYgNjMpLFxuICAgICAgICAgICAgcGFkbGVuID49IDEgPyAnPScgOiBiNjRjaGFycy5jaGFyQXQob3JkICYgNjMpXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBidG9hID0gZ2xvYmFsLmJ0b2EgPyBmdW5jdGlvbihiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWwuYnRvYShiKTtcbiAgICB9IDogZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gYi5yZXBsYWNlKC9bXFxzXFxTXXsxLDN9L2csIGNiX2VuY29kZSk7XG4gICAgfTtcbiAgICB2YXIgX2VuY29kZSA9IGJ1ZmZlciA/IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgIHJldHVybiAodS5jb25zdHJ1Y3RvciA9PT0gYnVmZmVyLmNvbnN0cnVjdG9yID8gdSA6IG5ldyBidWZmZXIodSkpXG4gICAgICAgIC50b1N0cmluZygnYmFzZTY0JylcbiAgICB9XG4gICAgOiBmdW5jdGlvbiAodSkgeyByZXR1cm4gYnRvYSh1dG9iKHUpKSB9XG4gICAgO1xuICAgIHZhciBlbmNvZGUgPSBmdW5jdGlvbih1LCB1cmlzYWZlKSB7XG4gICAgICAgIHJldHVybiAhdXJpc2FmZVxuICAgICAgICAgICAgPyBfZW5jb2RlKFN0cmluZyh1KSlcbiAgICAgICAgICAgIDogX2VuY29kZShTdHJpbmcodSkpLnJlcGxhY2UoL1srXFwvXS9nLCBmdW5jdGlvbihtMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtMCA9PSAnKycgPyAnLScgOiAnXyc7XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC89L2csICcnKTtcbiAgICB9O1xuICAgIHZhciBlbmNvZGVVUkkgPSBmdW5jdGlvbih1KSB7IHJldHVybiBlbmNvZGUodSwgdHJ1ZSkgfTtcbiAgICAvLyBkZWNvZGVyIHN0dWZmXG4gICAgdmFyIHJlX2J0b3UgPSBuZXcgUmVnRXhwKFtcbiAgICAgICAgJ1tcXHhDMC1cXHhERl1bXFx4ODAtXFx4QkZdJyxcbiAgICAgICAgJ1tcXHhFMC1cXHhFRl1bXFx4ODAtXFx4QkZdezJ9JyxcbiAgICAgICAgJ1tcXHhGMC1cXHhGN11bXFx4ODAtXFx4QkZdezN9J1xuICAgIF0uam9pbignfCcpLCAnZycpO1xuICAgIHZhciBjYl9idG91ID0gZnVuY3Rpb24oY2NjYykge1xuICAgICAgICBzd2l0Y2goY2NjYy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgdmFyIGNwID0gKCgweDA3ICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCAxOClcbiAgICAgICAgICAgICAgICB8ICAgICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgfCAgICAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpIDw8ICA2KVxuICAgICAgICAgICAgICAgIHwgICAgICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKSxcbiAgICAgICAgICAgIG9mZnNldCA9IGNwIC0gMHgxMDAwMDtcbiAgICAgICAgICAgIHJldHVybiAoZnJvbUNoYXJDb2RlKChvZmZzZXQgID4+PiAxMCkgKyAweEQ4MDApXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKChvZmZzZXQgJiAweDNGRikgKyAweERDMDApKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZShcbiAgICAgICAgICAgICAgICAoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgfCAgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpXG4gICAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICBmcm9tQ2hhckNvZGUoXG4gICAgICAgICAgICAgICAgKCgweDFmICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCA2KVxuICAgICAgICAgICAgICAgICAgICB8ICAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBidG91ID0gZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuICAgIH07XG4gICAgdmFyIGNiX2RlY29kZSA9IGZ1bmN0aW9uKGNjY2MpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNjY2MubGVuZ3RoLFxuICAgICAgICBwYWRsZW4gPSBsZW4gJSA0LFxuICAgICAgICBuID0gKGxlbiA+IDAgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMCldIDw8IDE4IDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDEgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMSldIDw8IDEyIDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDIgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMildIDw8ICA2IDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDMgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMyldICAgICAgIDogMCksXG4gICAgICAgIGNoYXJzID0gW1xuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKCBuID4+PiAxNiksXG4gICAgICAgICAgICBmcm9tQ2hhckNvZGUoKG4gPj4+ICA4KSAmIDB4ZmYpLFxuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKCBuICAgICAgICAgJiAweGZmKVxuICAgICAgICBdO1xuICAgICAgICBjaGFycy5sZW5ndGggLT0gWzAsIDAsIDIsIDFdW3BhZGxlbl07XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBhdG9iID0gZ2xvYmFsLmF0b2IgPyBmdW5jdGlvbihhKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWwuYXRvYihhKTtcbiAgICB9IDogZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBhLnJlcGxhY2UoL1tcXHNcXFNdezEsNH0vZywgY2JfZGVjb2RlKTtcbiAgICB9O1xuICAgIHZhciBfZGVjb2RlID0gYnVmZmVyID8gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gKGEuY29uc3RydWN0b3IgPT09IGJ1ZmZlci5jb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgID8gYSA6IG5ldyBidWZmZXIoYSwgJ2Jhc2U2NCcpKS50b1N0cmluZygpO1xuICAgIH1cbiAgICA6IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGJ0b3UoYXRvYihhKSkgfTtcbiAgICB2YXIgZGVjb2RlID0gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBfZGVjb2RlKFxuICAgICAgICAgICAgU3RyaW5nKGEpLnJlcGxhY2UoL1stX10vZywgZnVuY3Rpb24obTApIHsgcmV0dXJuIG0wID09ICctJyA/ICcrJyA6ICcvJyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZywgJycpXG4gICAgICAgICk7XG4gICAgfTtcbiAgICB2YXIgbm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICAgICAgZ2xvYmFsLkJhc2U2NCA9IF9CYXNlNjQ7XG4gICAgICAgIHJldHVybiBCYXNlNjQ7XG4gICAgfTtcbiAgICAvLyBleHBvcnQgQmFzZTY0XG4gICAgZ2xvYmFsLkJhc2U2NCA9IHtcbiAgICAgICAgVkVSU0lPTjogdmVyc2lvbixcbiAgICAgICAgYXRvYjogYXRvYixcbiAgICAgICAgYnRvYTogYnRvYSxcbiAgICAgICAgZnJvbUJhc2U2NDogZGVjb2RlLFxuICAgICAgICB0b0Jhc2U2NDogZW5jb2RlLFxuICAgICAgICB1dG9iOiB1dG9iLFxuICAgICAgICBlbmNvZGU6IGVuY29kZSxcbiAgICAgICAgZW5jb2RlVVJJOiBlbmNvZGVVUkksXG4gICAgICAgIGJ0b3U6IGJ0b3UsXG4gICAgICAgIGRlY29kZTogZGVjb2RlLFxuICAgICAgICBub0NvbmZsaWN0OiBub0NvbmZsaWN0XG4gICAgfTtcbiAgICAvLyBpZiBFUzUgaXMgYXZhaWxhYmxlLCBtYWtlIEJhc2U2NC5leHRlbmRTdHJpbmcoKSBhdmFpbGFibGVcbiAgICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgbm9FbnVtID0gZnVuY3Rpb24odil7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbHVlOnYsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfTtcbiAgICAgICAgfTtcbiAgICAgICAgZ2xvYmFsLkJhc2U2NC5leHRlbmRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ2Zyb21CYXNlNjQnLCBub0VudW0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlKHRoaXMpXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgICAgICAgIFN0cmluZy5wcm90b3R5cGUsICd0b0Jhc2U2NCcsIG5vRW51bShmdW5jdGlvbiAodXJpc2FmZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlKHRoaXMsIHVyaXNhZmUpXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgICAgICAgIFN0cmluZy5wcm90b3R5cGUsICd0b0Jhc2U2NFVSSScsIG5vRW51bShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGUodGhpcywgdHJ1ZSlcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHRoYXQncyBpdCFcbiAgICBpZiAoZ2xvYmFsWydNZXRlb3InXSkge1xuICAgICAgIEJhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7IC8vIGZvciBub3JtYWwgZXhwb3J0IGluIE1ldGVvci5qc1xuICAgIH1cbn0pKHRoaXMpO1xuIiwiLy8gVG9wIGxldmVsIGZpbGUgaXMganVzdCBhIG1peGluIG9mIHN1Ym1vZHVsZXMgJiBjb25zdGFudHNcbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiAgICA9IHJlcXVpcmUoJy4vbGliL3V0aWxzL2NvbW1vbicpLmFzc2lnbjtcblxudmFyIGRlZmxhdGUgICA9IHJlcXVpcmUoJy4vbGliL2RlZmxhdGUnKTtcbnZhciBpbmZsYXRlICAgPSByZXF1aXJlKCcuL2xpYi9pbmZsYXRlJyk7XG52YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9saWIvemxpYi9jb25zdGFudHMnKTtcblxudmFyIHBha28gPSB7fTtcblxuYXNzaWduKHBha28sIGRlZmxhdGUsIGluZmxhdGUsIGNvbnN0YW50cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFrbztcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgemxpYl9kZWZsYXRlID0gcmVxdWlyZSgnLi96bGliL2RlZmxhdGUnKTtcbnZhciB1dGlscyAgICAgICAgPSByZXF1aXJlKCcuL3V0aWxzL2NvbW1vbicpO1xudmFyIHN0cmluZ3MgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvc3RyaW5ncycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG52YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbnZhciBaX0ZJTklTSCAgICAgICAgPSA0O1xuXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xudmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7XG5cbnZhciBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTtcblxudmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgICA9IDA7XG5cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBEZWZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbZGVmbGF0ZV1dLFxuICogW1tkZWZsYXRlUmF3XV0gYW5kIFtbZ3ppcF1dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogRGVmbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGVuLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8QXJyYXlcbiAqXG4gKiBDb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tEZWZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tEZWZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0RlZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkgIG9yIGlmIHlvdVxuICogcHVzaCBhIGNodW5rIHdpdGggZXhwbGljaXQgZmx1c2ggKGNhbGwgW1tEZWZsYXRlI3B1c2hdXSB3aXRoXG4gKiBgWl9TWU5DX0ZMVVNIYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBkZWZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogWW91IHdpbGwgbm90IG5lZWQgaXQgaW4gcmVhbCBsaWZlLCBiZWNhdXNlIGRlZmxhdGUgZXJyb3JzXG4gKiBhcmUgcG9zc2libGUgb25seSBvbiB3cm9uZyBvcHRpb25zIG9yIGJhZCBgb25EYXRhYCAvIGBvbkVuZGBcbiAqIGN1c3RvbSBoYW5kbGVycy5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLm1zZyAtPiBTdHJpbmdcbiAqXG4gKiBFcnJvciBtZXNzYWdlLCBpZiBbW0RlZmxhdGUuZXJyXV0gIT0gMFxuICoqL1xuXG5cbi8qKlxuICogbmV3IERlZmxhdGUob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ3JlYXRlcyBuZXcgZGVmbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG4gKiBvbiBiYWQgcGFyYW1zLiBTdXBwb3J0ZWQgb3B0aW9uczpcbiAqXG4gKiAtIGBsZXZlbGBcbiAqIC0gYHdpbmRvd0JpdHNgXG4gKiAtIGBtZW1MZXZlbGBcbiAqIC0gYHN0cmF0ZWd5YFxuICogLSBgZGljdGlvbmFyeWBcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcbiAqXG4gKiAtIGBjaHVua1NpemVgIC0gc2l6ZSBvZiBnZW5lcmF0ZWQgZGF0YSBjaHVua3MgKDE2SyBieSBkZWZhdWx0KVxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgZGVmbGF0ZVxuICogLSBgZ3ppcGAgKEJvb2xlYW4pIC0gY3JlYXRlIGd6aXAgd3JhcHBlclxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgXCJiaW5hcnkgc3RyaW5nXCJcbiAqICAgIChlYWNoIGNoYXIgY29kZSBbMC4uMjU1XSlcbiAqIC0gYGhlYWRlcmAgKE9iamVjdCkgLSBjdXN0b20gaGVhZGVyIGZvciBnemlwXG4gKiAgIC0gYHRleHRgIChCb29sZWFuKSAtIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHRcbiAqICAgLSBgdGltZWAgKE51bWJlcikgLSBtb2RpZmljYXRpb24gdGltZSwgdW5peCB0aW1lc3RhbXBcbiAqICAgLSBgb3NgIChOdW1iZXIpIC0gb3BlcmF0aW9uIHN5c3RlbSBjb2RlXG4gKiAgIC0gYGV4dHJhYCAoQXJyYXkpIC0gYXJyYXkgb2YgYnl0ZXMgd2l0aCBleHRyYSBkYXRhIChtYXggNjU1MzYpXG4gKiAgIC0gYG5hbWVgIChTdHJpbmcpIC0gZmlsZSBuYW1lIChiaW5hcnkgc3RyaW5nKVxuICogICAtIGBjb21tZW50YCAoU3RyaW5nKSAtIGNvbW1lbnQgKGJpbmFyeSBzdHJpbmcpXG4gKiAgIC0gYGhjcmNgIChCb29sZWFuKSAtIHRydWUgaWYgaGVhZGVyIGNyYyBzaG91bGQgYmUgYWRkZWRcbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgY2h1bmsxID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogdmFyIGRlZmxhdGUgPSBuZXcgcGFrby5EZWZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBkZWZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBkZWZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChkZWZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoZGVmbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coZGVmbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBEZWZsYXRlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERlZmxhdGUpKSByZXR1cm4gbmV3IERlZmxhdGUob3B0aW9ucyk7XG5cbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHtcbiAgICBsZXZlbDogWl9ERUZBVUxUX0NPTVBSRVNTSU9OLFxuICAgIG1ldGhvZDogWl9ERUZMQVRFRCxcbiAgICBjaHVua1NpemU6IDE2Mzg0LFxuICAgIHdpbmRvd0JpdHM6IDE1LFxuICAgIG1lbUxldmVsOiA4LFxuICAgIHN0cmF0ZWd5OiBaX0RFRkFVTFRfU1RSQVRFR1ksXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIHZhciBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID4gMCkpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKG9wdC5nemlwICYmIChvcHQud2luZG93Qml0cyA+IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzICs9IDE2O1xuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtID0gbmV3IFpTdHJlYW0oKTtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cbiAgdmFyIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlSW5pdDIoXG4gICAgdGhpcy5zdHJtLFxuICAgIG9wdC5sZXZlbCxcbiAgICBvcHQubWV0aG9kLFxuICAgIG9wdC53aW5kb3dCaXRzLFxuICAgIG9wdC5tZW1MZXZlbCxcbiAgICBvcHQuc3RyYXRlZ3lcbiAgKTtcblxuICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgfVxuXG4gIGlmIChvcHQuaGVhZGVyKSB7XG4gICAgemxpYl9kZWZsYXRlLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLCBvcHQuaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChvcHQuZGljdGlvbmFyeSkge1xuICAgIHZhciBkaWN0O1xuICAgIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIG9wdC5kaWN0aW9uYXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gSWYgd2UgbmVlZCB0byBjb21wcmVzcyB0ZXh0LCBjaGFuZ2UgZW5jb2RpbmcgdG8gdXRmOC5cbiAgICAgIGRpY3QgPSBzdHJpbmdzLnN0cmluZzJidWYob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSBpZiAodG9TdHJpbmcuY2FsbChvcHQuZGljdGlvbmFyeSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICAgIGRpY3QgPSBuZXcgVWludDhBcnJheShvcHQuZGljdGlvbmFyeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpY3QgPSBvcHQuZGljdGlvbmFyeTtcbiAgICB9XG5cbiAgICBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBkaWN0KTtcblxuICAgIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZGljdF9zZXQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogRGVmbGF0ZSNwdXNoKGRhdGFbLCBtb2RlXSkgLT4gQm9vbGVhblxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fEFycmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGEuIFN0cmluZ3Mgd2lsbCBiZVxuICogICBjb252ZXJ0ZWQgdG8gdXRmOCBieXRlIHNlcXVlbmNlLlxuICogLSBtb2RlIChOdW1iZXJ8Qm9vbGVhbik6IDAuLjYgZm9yIGNvcnJlc3BvbmRpbmcgWl9OT19GTFVTSC4uWl9UUkVFIG1vZGVzLlxuICogICBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCwgYHRydWVgIG1lYW5zaCBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGRlZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0RlZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IGNvbXByZXNzZWQgY2h1bmtzLiBSZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzLiBUaGUgbGFzdCBkYXRhIGJsb2NrIG11c3QgaGF2ZVxuICogbW9kZSBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCB3aWxsIGZsdXNoIGludGVybmFsIHBlbmRpbmcgYnVmZmVycyBhbmQgY2FsbFxuICogW1tEZWZsYXRlI29uRW5kXV0uIEZvciBpbnRlcmltIGV4cGxpY2l0IGZsdXNoZXMgKHdpdGhvdXQgZW5kaW5nIHRoZSBzdHJlYW0pIHlvdVxuICogY2FuIHVzZSBtb2RlIFpfU1lOQ19GTFVTSCwga2VlcGluZyB0aGUgY29tcHJlc3Npb24gY29udGV4dC5cbiAqXG4gKiBPbiBmYWlsIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gKlxuICogV2Ugc3Ryb25nbHkgcmVjb21tZW5kIHRvIHVzZSBgVWludDhBcnJheWAgb24gaW5wdXQgZm9yIGJlc3Qgc3BlZWQgKG91dHB1dFxuICogYXJyYXkgZm9ybWF0IGlzIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkpLiBBbHNvLCBkb24ndCBza2lwIGxhc3QgcGFyYW0gYW5kIGFsd2F5c1xuICogdXNlIHRoZSBzYW1lIHR5cGUgaW4geW91ciBjb2RlIChib29sZWFuIG9yIG51bWJlcikuIFRoYXQgd2lsbCBpbXByb3ZlIEpTIHNwZWVkLlxuICpcbiAqIEZvciByZWd1bGFyIGBBcnJheWAtcyBtYWtlIHN1cmUgYWxsIGVsZW1lbnRzIGFyZSBbMC4uMjU1XS5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogcHVzaChjaHVuaywgZmFsc2UpOyAvLyBwdXNoIG9uZSBvZiBkYXRhIGNodW5rc1xuICogLi4uXG4gKiBwdXNoKGNodW5rLCB0cnVlKTsgIC8vIHB1c2ggbGFzdCBjaHVua1xuICogYGBgXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIG1vZGUpIHtcbiAgdmFyIHN0cm0gPSB0aGlzLnN0cm07XG4gIHZhciBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICB2YXIgc3RhdHVzLCBfbW9kZTtcblxuICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0gpO1xuXG4gIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgc3RybS5pbnB1dCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihkYXRhKTtcbiAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgc3RybS5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHN0cm0uaW5wdXQgPSBkYXRhO1xuICB9XG5cbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoO1xuXG4gIGRvIHtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTtcbiAgICAgIHN0cm0ubmV4dF9vdXQgPSAwO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG4gICAgfVxuICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlKHN0cm0sIF9tb2RlKTsgICAgLyogbm8gYmFkIHJldHVybiB2YWx1ZSAqL1xuXG4gICAgaWYgKHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCB8fCAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiAoX21vZGUgPT09IFpfRklOSVNIIHx8IF9tb2RlID09PSBaX1NZTkNfRkxVU0gpKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoc3RyaW5ncy5idWYyYmluc3RyaW5nKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25EYXRhKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAwKSAmJiBzdGF0dXMgIT09IFpfU1RSRUFNX0VORCk7XG5cbiAgLy8gRmluYWxpemUgb24gdGhlIGxhc3QgY2h1bmsuXG4gIGlmIChfbW9kZSA9PT0gWl9GSU5JU0gpIHtcbiAgICBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzID09PSBaX09LO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaW50ZXJpbSByZXN1bHRzIGlmIFpfU1lOQ19GTFVTSC5cbiAgaWYgKF9tb2RlID09PSBaX1NZTkNfRkxVU0gpIHtcbiAgICB0aGlzLm9uRW5kKFpfT0spO1xuICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIERlZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91cHV0IGRhdGEuIFR5cGUgb2YgYXJyYXkgZGVwZW5kc1xuICogICBvbiBqcyBlbmdpbmUgc3VwcG9ydC4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCwgZWFjaCBjaHVua1xuICogICB3aWxsIGJlIHN0cmluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBEZWZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICogLSBzdGF0dXMgKE51bWJlcik6IGRlZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuICogICBvdGhlciBpZiBub3QuXG4gKlxuICogQ2FsbGVkIG9uY2UgYWZ0ZXIgeW91IHRlbGwgZGVmbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXNcbiAqIGNvbXBsZXRlIChaX0ZJTklTSCkgb3Igc2hvdWxkIGJlIGZsdXNoZWQgKFpfU1lOQ19GTFVTSClcbiAqIG9yIGlmIGFuIGVycm9yIGhhcHBlbmVkLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBaX09LKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgfVxuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogZGVmbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ29tcHJlc3MgYGRhdGFgIHdpdGggZGVmbGF0ZSBhbGdvcml0aG0gYW5kIGBvcHRpb25zYC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSBsZXZlbFxuICogLSB3aW5kb3dCaXRzXG4gKiAtIG1lbUxldmVsXG4gKiAtIHN0cmF0ZWd5XG4gKiAtIGRpY3Rpb25hcnlcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBTdWdhciAob3B0aW9ucyk6XG4gKlxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuICogICBuZWdhdGl2ZSB3aW5kb3dCaXRzIGltcGxpY2l0bHkuXG4gKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBcImJpbmFyeSBzdHJpbmdcIlxuICogICAgKGVhY2ggY2hhciBjb2RlIFswLi4yNTVdKVxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBkYXRhID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhwYWtvLmRlZmxhdGUoZGF0YSkpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBkZWZsYXRvciA9IG5ldyBEZWZsYXRlKG9wdGlvbnMpO1xuXG4gIGRlZmxhdG9yLnB1c2goaW5wdXQsIHRydWUpO1xuXG4gIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gIGlmIChkZWZsYXRvci5lcnIpIHsgdGhyb3cgZGVmbGF0b3IubXNnIHx8IG1zZ1tkZWZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGRlZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGRlZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlcyByYXcgZGF0YSwgd2l0aG91dCB3cmFwcGVyXG4gKiAoaGVhZGVyIGFuZCBhZGxlcjMyIGNyYykuXG4gKiovXG5mdW5jdGlvbiBkZWZsYXRlUmF3KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLnJhdyA9IHRydWU7XG4gIHJldHVybiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIGd6aXAoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkIG9mXG4gKiBkZWZsYXRlIG9uZS5cbiAqKi9cbmZ1bmN0aW9uIGd6aXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuZ3ppcCA9IHRydWU7XG4gIHJldHVybiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG5leHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlO1xuZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcbmV4cG9ydHMuZGVmbGF0ZVJhdyA9IGRlZmxhdGVSYXc7XG5leHBvcnRzLmd6aXAgPSBnemlwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB6bGliX2luZmxhdGUgPSByZXF1aXJlKCcuL3psaWIvaW5mbGF0ZScpO1xudmFyIHV0aWxzICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7XG52YXIgc3RyaW5ncyAgICAgID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7XG52YXIgYyAgICAgICAgICAgID0gcmVxdWlyZSgnLi96bGliL2NvbnN0YW50cycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG52YXIgR1poZWFkZXIgICAgID0gcmVxdWlyZSgnLi96bGliL2d6aGVhZGVyJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogY2xhc3MgSW5mbGF0ZVxuICpcbiAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcbiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2luZmxhdGVdXVxuICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGVuLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKlxuICogVW5jb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tJbmZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tJbmZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0luZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkgb3IgaWYgeW91XG4gKiBwdXNoIGEgY2h1bmsgd2l0aCBleHBsaWNpdCBmbHVzaCAoY2FsbCBbW0luZmxhdGUjcHVzaF1dIHdpdGhcbiAqIGBaX1NZTkNfRkxVU0hgIHBhcmFtKS5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLmVyciAtPiBOdW1iZXJcbiAqXG4gKiBFcnJvciBjb2RlIGFmdGVyIGluZmxhdGUgZmluaXNoZWQuIDAgKFpfT0spIG9uIHN1Y2Nlc3MuXG4gKiBTaG91bGQgYmUgY2hlY2tlZCBpZiBicm9rZW4gZGF0YSBwb3NzaWJsZS5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLm1zZyAtPiBTdHJpbmdcbiAqXG4gKiBFcnJvciBtZXNzYWdlLCBpZiBbW0luZmxhdGUuZXJyXV0gIT0gMFxuICoqL1xuXG5cbi8qKlxuICogbmV3IEluZmxhdGUob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ3JlYXRlcyBuZXcgaW5mbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG4gKiBvbiBiYWQgcGFyYW1zLiBTdXBwb3J0ZWQgb3B0aW9uczpcbiAqXG4gKiAtIGB3aW5kb3dCaXRzYFxuICogLSBgZGljdGlvbmFyeWBcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcbiAqXG4gKiAtIGBjaHVua1NpemVgIC0gc2l6ZSBvZiBnZW5lcmF0ZWQgZGF0YSBjaHVua3MgKDE2SyBieSBkZWZhdWx0KVxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgaW5mbGF0ZVxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgY29udmVydGVkXG4gKiAgIGZyb20gdXRmOCB0byB1dGYxNiAoamF2YXNjcmlwdCkgc3RyaW5nLiBXaGVuIHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLFxuICogICBjaHVuayBsZW5ndGggY2FuIGRpZmZlciBmcm9tIGBjaHVua1NpemVgLCBkZXBlbmRpbmcgb24gY29udGVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB3aGVuIG5vIG9wdGlvbnMgc2V0LCBhdXRvZGV0ZWN0IGRlZmxhdGUvZ3ppcCBkYXRhIGZvcm1hdCB2aWFcbiAqIHdyYXBwZXIgaGVhZGVyLlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBjaHVuazEgPSBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG4gKiAgICwgY2h1bmsyID0gVWludDhBcnJheShbMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTldKTtcbiAqXG4gKiB2YXIgaW5mbGF0ZSA9IG5ldyBwYWtvLkluZmxhdGUoeyBsZXZlbDogM30pO1xuICpcbiAqIGluZmxhdGUucHVzaChjaHVuazEsIGZhbHNlKTtcbiAqIGluZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG4gKlxuICogaWYgKGluZmxhdGUuZXJyKSB7IHRocm93IG5ldyBFcnJvcihpbmZsYXRlLmVycik7IH1cbiAqXG4gKiBjb25zb2xlLmxvZyhpbmZsYXRlLnJlc3VsdCk7XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIEluZmxhdGUob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW5mbGF0ZSkpIHJldHVybiBuZXcgSW5mbGF0ZShvcHRpb25zKTtcblxuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5hc3NpZ24oe1xuICAgIGNodW5rU2l6ZTogMTYzODQsXG4gICAgd2luZG93Qml0czogMCxcbiAgICB0bzogJydcbiAgfSwgb3B0aW9ucyB8fCB7fSk7XG5cbiAgdmFyIG9wdCA9IHRoaXMub3B0aW9ucztcblxuICAvLyBGb3JjZSB3aW5kb3cgc2l6ZSBmb3IgYHJhd2AgZGF0YSwgaWYgbm90IHNldCBkaXJlY3RseSxcbiAgLy8gYmVjYXVzZSB3ZSBoYXZlIG5vIGhlYWRlciBmb3IgYXV0b2RldGVjdC5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzID0gLW9wdC53aW5kb3dCaXRzO1xuICAgIGlmIChvcHQud2luZG93Qml0cyA9PT0gMCkgeyBvcHQud2luZG93Qml0cyA9IC0xNTsgfVxuICB9XG5cbiAgLy8gSWYgYHdpbmRvd0JpdHNgIG5vdCBkZWZpbmVkIChhbmQgbW9kZSBub3QgcmF3KSAtIHNldCBhdXRvZGV0ZWN0IGZsYWcgZm9yIGd6aXAvZGVmbGF0ZVxuICBpZiAoKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSAmJlxuICAgICAgIShvcHRpb25zICYmIG9wdGlvbnMud2luZG93Qml0cykpIHtcbiAgICBvcHQud2luZG93Qml0cyArPSAzMjtcbiAgfVxuXG4gIC8vIEd6aXAgaGVhZGVyIGhhcyBubyBpbmZvIGFib3V0IHdpbmRvd3Mgc2l6ZSwgd2UgY2FuIGRvIGF1dG9kZXRlY3Qgb25seVxuICAvLyBmb3IgZGVmbGF0ZS4gU28sIGlmIHdpbmRvdyBzaXplIG5vdCBzZXQsIGZvcmNlIGl0IHRvIG1heCB3aGVuIGd6aXAgcG9zc2libGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+IDE1KSAmJiAob3B0LndpbmRvd0JpdHMgPCA0OCkpIHtcbiAgICAvLyBiaXQgMyAoMTYpIC0+IGd6aXBwZWQgZGF0YVxuICAgIC8vIGJpdCA0ICgzMikgLT4gYXV0b2RldGVjdCBnemlwL2RlZmxhdGVcbiAgICBpZiAoKG9wdC53aW5kb3dCaXRzICYgMTUpID09PSAwKSB7XG4gICAgICBvcHQud2luZG93Qml0cyB8PSAxNTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmVyciAgICA9IDA7ICAgICAgLy8gZXJyb3IgY29kZSwgaWYgaGFwcGVucyAoMCA9IFpfT0spXG4gIHRoaXMubXNnICAgID0gJyc7ICAgICAvLyBlcnJvciBtZXNzYWdlXG4gIHRoaXMuZW5kZWQgID0gZmFsc2U7ICAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHNcbiAgdGhpcy5jaHVua3MgPSBbXTsgICAgIC8vIGNodW5rcyBvZiBjb21wcmVzc2VkIGRhdGFcblxuICB0aGlzLnN0cm0gICA9IG5ldyBaU3RyZWFtKCk7XG4gIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuXG4gIHZhciBzdGF0dXMgID0gemxpYl9pbmZsYXRlLmluZmxhdGVJbml0MihcbiAgICB0aGlzLnN0cm0sXG4gICAgb3B0LndpbmRvd0JpdHNcbiAgKTtcblxuICBpZiAoc3RhdHVzICE9PSBjLlpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pO1xuICB9XG5cbiAgdGhpcy5oZWFkZXIgPSBuZXcgR1poZWFkZXIoKTtcblxuICB6bGliX2luZmxhdGUuaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sIHRoaXMuaGVhZGVyKTtcbn1cblxuLyoqXG4gKiBJbmZsYXRlI3B1c2goZGF0YVssIG1vZGVdKSAtPiBCb29sZWFuXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8QXJyYXlCdWZmZXJ8U3RyaW5nKTogaW5wdXQgZGF0YVxuICogLSBtb2RlIChOdW1iZXJ8Qm9vbGVhbik6IDAuLjYgZm9yIGNvcnJlc3BvbmRpbmcgWl9OT19GTFVTSC4uWl9UUkVFIG1vZGVzLlxuICogICBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCwgYHRydWVgIG1lYW5zaCBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlXG4gKiBtb2RlIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZyBidWZmZXJzIGFuZCBjYWxsXG4gKiBbW0luZmxhdGUjb25FbmRdXS4gRm9yIGludGVyaW0gZXhwbGljaXQgZmx1c2hlcyAod2l0aG91dCBlbmRpbmcgdGhlIHN0cmVhbSkgeW91XG4gKiBjYW4gdXNlIG1vZGUgWl9TWU5DX0ZMVVNILCBrZWVwaW5nIHRoZSBkZWNvbXByZXNzaW9uIGNvbnRleHQuXG4gKlxuICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgYFVpbnQ4QXJyYXlgIG9uIGlucHV0IGZvciBiZXN0IHNwZWVkIChvdXRwdXRcbiAqIGZvcm1hdCBpcyBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5KS4gQWxzbywgZG9uJ3Qgc2tpcCBsYXN0IHBhcmFtIGFuZCBhbHdheXNcbiAqIHVzZSB0aGUgc2FtZSB0eXBlIGluIHlvdXIgY29kZSAoYm9vbGVhbiBvciBudW1iZXIpLiBUaGF0IHdpbGwgaW1wcm92ZSBKUyBzcGVlZC5cbiAqXG4gKiBGb3IgcmVndWxhciBgQXJyYXlgLXMgbWFrZSBzdXJlIGFsbCBlbGVtZW50cyBhcmUgWzAuLjI1NV0uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuSW5mbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChkYXRhLCBtb2RlKSB7XG4gIHZhciBzdHJtID0gdGhpcy5zdHJtO1xuICB2YXIgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgdmFyIGRpY3Rpb25hcnkgPSB0aGlzLm9wdGlvbnMuZGljdGlvbmFyeTtcbiAgdmFyIHN0YXR1cywgX21vZGU7XG4gIHZhciBuZXh0X291dF91dGY4LCB0YWlsLCB1dGY4c3RyO1xuICB2YXIgZGljdDtcblxuICAvLyBGbGFnIHRvIHByb3Blcmx5IHByb2Nlc3MgWl9CVUZfRVJST1Igb24gdGVzdGluZyBpbmZsYXRlIGNhbGxcbiAgLy8gd2hlbiB3ZSBjaGVjayB0aGF0IGFsbCBvdXRwdXQgZGF0YSB3YXMgZmx1c2hlZC5cbiAgdmFyIGFsbG93QnVmRXJyb3IgPSBmYWxzZTtcblxuICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgX21vZGUgPSAobW9kZSA9PT0gfn5tb2RlKSA/IG1vZGUgOiAoKG1vZGUgPT09IHRydWUpID8gYy5aX0ZJTklTSCA6IGMuWl9OT19GTFVTSCk7XG5cbiAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gT25seSBiaW5hcnkgc3RyaW5ncyBjYW4gYmUgZGVjb21wcmVzc2VkIG9uIHByYWN0aWNlXG4gICAgc3RybS5pbnB1dCA9IHN0cmluZ3MuYmluc3RyaW5nMmJ1ZihkYXRhKTtcbiAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgc3RybS5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHN0cm0uaW5wdXQgPSBkYXRhO1xuICB9XG5cbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoO1xuXG4gIGRvIHtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTtcbiAgICAgIHN0cm0ubmV4dF9vdXQgPSAwO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGUoc3RybSwgYy5aX05PX0ZMVVNIKTsgICAgLyogbm8gYmFkIHJldHVybiB2YWx1ZSAqL1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gYy5aX05FRURfRElDVCAmJiBkaWN0aW9uYXJ5KSB7XG4gICAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgICBpZiAodHlwZW9mIGRpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRpY3QgPSBzdHJpbmdzLnN0cmluZzJidWYoZGljdGlvbmFyeSk7XG4gICAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGljdGlvbmFyeSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICAgICAgZGljdCA9IG5ldyBVaW50OEFycmF5KGRpY3Rpb25hcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGljdCA9IGRpY3Rpb25hcnk7XG4gICAgICB9XG5cbiAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIGRpY3QpO1xuXG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gYy5aX0JVRl9FUlJPUiAmJiBhbGxvd0J1ZkVycm9yID09PSB0cnVlKSB7XG4gICAgICBzdGF0dXMgPSBjLlpfT0s7XG4gICAgICBhbGxvd0J1ZkVycm9yID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyAhPT0gYy5aX1NUUkVBTV9FTkQgJiYgc3RhdHVzICE9PSBjLlpfT0spIHtcbiAgICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdHJtLm5leHRfb3V0KSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDAgfHwgc3RhdHVzID09PSBjLlpfU1RSRUFNX0VORCB8fCAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiAoX21vZGUgPT09IGMuWl9GSU5JU0ggfHwgX21vZGUgPT09IGMuWl9TWU5DX0ZMVVNIKSkpIHtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgbmV4dF9vdXRfdXRmOCA9IHN0cmluZ3MudXRmOGJvcmRlcihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCk7XG5cbiAgICAgICAgICB0YWlsID0gc3RybS5uZXh0X291dCAtIG5leHRfb3V0X3V0Zjg7XG4gICAgICAgICAgdXRmOHN0ciA9IHN0cmluZ3MuYnVmMnN0cmluZyhzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCk7XG5cbiAgICAgICAgICAvLyBtb3ZlIHRhaWxcbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gdGFpbDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZSAtIHRhaWw7XG4gICAgICAgICAgaWYgKHRhaWwpIHsgdXRpbHMuYXJyYXlTZXQoc3RybS5vdXRwdXQsIHN0cm0ub3V0cHV0LCBuZXh0X291dF91dGY4LCB0YWlsLCAwKTsgfVxuXG4gICAgICAgICAgdGhpcy5vbkRhdGEodXRmOHN0cik7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uRGF0YSh1dGlscy5zaHJpbmtCdWYoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdoZW4gbm8gbW9yZSBpbnB1dCBkYXRhLCB3ZSBzaG91bGQgY2hlY2sgdGhhdCBpbnRlcm5hbCBpbmZsYXRlIGJ1ZmZlcnNcbiAgICAvLyBhcmUgZmx1c2hlZC4gVGhlIG9ubHkgd2F5IHRvIGRvIGl0IHdoZW4gYXZhaWxfb3V0ID0gMCAtIHJ1biBvbmUgbW9yZVxuICAgIC8vIGluZmxhdGUgcGFzcy4gQnV0IGlmIG91dHB1dCBkYXRhIG5vdCBleGlzdHMsIGluZmxhdGUgcmV0dXJuIFpfQlVGX0VSUk9SLlxuICAgIC8vIEhlcmUgd2Ugc2V0IGZsYWcgdG8gcHJvY2VzcyB0aGlzIGVycm9yIHByb3Blcmx5LlxuICAgIC8vXG4gICAgLy8gTk9URS4gRGVmbGF0ZSBkb2VzIG5vdCByZXR1cm4gZXJyb3IgaW4gdGhpcyBjYXNlIGFuZCBkb2VzIG5vdCBuZWVkcyBzdWNoXG4gICAgLy8gbG9naWMuXG4gICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIGFsbG93QnVmRXJyb3IgPSB0cnVlO1xuICAgIH1cblxuICB9IHdoaWxlICgoc3RybS5hdmFpbF9pbiA+IDAgfHwgc3RybS5hdmFpbF9vdXQgPT09IDApICYmIHN0YXR1cyAhPT0gYy5aX1NUUkVBTV9FTkQpO1xuXG4gIGlmIChzdGF0dXMgPT09IGMuWl9TVFJFQU1fRU5EKSB7XG4gICAgX21vZGUgPSBjLlpfRklOSVNIO1xuICB9XG5cbiAgLy8gRmluYWxpemUgb24gdGhlIGxhc3QgY2h1bmsuXG4gIGlmIChfbW9kZSA9PT0gYy5aX0ZJTklTSCkge1xuICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlRW5kKHRoaXMuc3RybSk7XG4gICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0dXMgPT09IGMuWl9PSztcbiAgfVxuXG4gIC8vIGNhbGxiYWNrIGludGVyaW0gcmVzdWx0cyBpZiBaX1NZTkNfRkxVU0guXG4gIGlmIChfbW9kZSA9PT0gYy5aX1NZTkNfRkxVU0gpIHtcbiAgICB0aGlzLm9uRW5kKGMuWl9PSyk7XG4gICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogSW5mbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcbiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogb3VwdXQgZGF0YS4gVHlwZSBvZiBhcnJheSBkZXBlbmRzXG4gKiAgIG9uIGpzIGVuZ2luZSBzdXBwb3J0LiBXaGVuIHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLCBlYWNoIGNodW5rXG4gKiAgIHdpbGwgYmUgc3RyaW5nLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHN0b3JlcyBkYXRhIGJsb2NrcyBpbiBgY2h1bmtzW11gIHByb3BlcnR5IGFuZCBnbHVlXG4gKiB0aG9zZSBpbiBgb25FbmRgLiBPdmVycmlkZSB0aGlzIGhhbmRsZXIsIGlmIHlvdSBuZWVkIGFub3RoZXIgYmVoYXZpb3VyLlxuICoqL1xuSW5mbGF0ZS5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuXG4vKipcbiAqIEluZmxhdGUjb25FbmQoc3RhdHVzKSAtPiBWb2lkXG4gKiAtIHN0YXR1cyAoTnVtYmVyKTogaW5mbGF0ZSBzdGF0dXMuIDAgKFpfT0spIG9uIHN1Y2Nlc3MsXG4gKiAgIG90aGVyIGlmIG5vdC5cbiAqXG4gKiBDYWxsZWQgZWl0aGVyIGFmdGVyIHlvdSB0ZWxsIGluZmxhdGUgdGhhdCB0aGUgaW5wdXQgc3RyZWFtIGlzXG4gKiBjb21wbGV0ZSAoWl9GSU5JU0gpIG9yIHNob3VsZCBiZSBmbHVzaGVkIChaX1NZTkNfRkxVU0gpXG4gKiBvciBpZiBhbiBlcnJvciBoYXBwZW5lZC4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5JbmZsYXRlLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgLy8gT24gc3VjY2VzcyAtIGpvaW5cbiAgaWYgKHN0YXR1cyA9PT0gYy5aX09LKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIEdsdWUgJiBjb252ZXJ0IGhlcmUsIHVudGlsIHdlIHRlYWNoIHBha28gdG8gc2VuZFxuICAgICAgLy8gdXRmOCBhbGxpZ25lZCBzdHJpbmdzIHRvIG9uRGF0YVxuICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLmNodW5rcy5qb2luKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXN1bHQgPSB1dGlscy5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5jaHVua3MgPSBbXTtcbiAgdGhpcy5lcnIgPSBzdGF0dXM7XG4gIHRoaXMubXNnID0gdGhpcy5zdHJtLm1zZztcbn07XG5cblxuLyoqXG4gKiBpbmZsYXRlKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIERlY29tcHJlc3MgYGRhdGFgIHdpdGggaW5mbGF0ZS91bmd6aXAgYW5kIGBvcHRpb25zYC4gQXV0b2RldGVjdFxuICogZm9ybWF0IHZpYSB3cmFwcGVyIGhlYWRlciBieSBkZWZhdWx0LiBUaGF0J3Mgd2h5IHdlIGRvbid0IHByb3ZpZGVcbiAqIHNlcGFyYXRlIGB1bmd6aXBgIG1ldGhvZC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSB3aW5kb3dCaXRzXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogU3VnYXIgKG9wdGlvbnMpOlxuICpcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gc2F5IHRoYXQgd2Ugd29yayB3aXRoIHJhdyBzdHJlYW0sIGlmIHlvdSBkb24ndCB3aXNoIHRvIHNwZWNpZnlcbiAqICAgbmVnYXRpdmUgd2luZG93Qml0cyBpbXBsaWNpdGx5LlxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgY29udmVydGVkXG4gKiAgIGZyb20gdXRmOCB0byB1dGYxNiAoamF2YXNjcmlwdCkgc3RyaW5nLiBXaGVuIHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLFxuICogICBjaHVuayBsZW5ndGggY2FuIGRpZmZlciBmcm9tIGBjaHVua1NpemVgLCBkZXBlbmRpbmcgb24gY29udGVudC5cbiAqXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKVxuICogICAsIGlucHV0ID0gcGFrby5kZWZsYXRlKFsxLDIsMyw0LDUsNiw3LDgsOV0pXG4gKiAgICwgb3V0cHV0O1xuICpcbiAqIHRyeSB7XG4gKiAgIG91dHB1dCA9IHBha28uaW5mbGF0ZShpbnB1dCk7XG4gKiB9IGNhdGNoIChlcnIpXG4gKiAgIGNvbnNvbGUubG9nKGVycik7XG4gKiB9XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIGluZmxhdG9yID0gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgaW5mbGF0b3IucHVzaChpbnB1dCwgdHJ1ZSk7XG5cbiAgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOilcbiAgaWYgKGluZmxhdG9yLmVycikgeyB0aHJvdyBpbmZsYXRvci5tc2cgfHwgbXNnW2luZmxhdG9yLmVycl07IH1cblxuICByZXR1cm4gaW5mbGF0b3IucmVzdWx0O1xufVxuXG5cbi8qKlxuICogaW5mbGF0ZVJhdyhkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2luZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICoqL1xuZnVuY3Rpb24gaW5mbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gaW5mbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG59XG5cblxuLyoqXG4gKiB1bmd6aXAoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogSnVzdCBzaG9ydGN1dCB0byBbW2luZmxhdGVdXSwgYmVjYXVzZSBpdCBhdXRvZGV0ZWN0cyBmb3JtYXRcbiAqIGJ5IGhlYWRlci5jb250ZW50LiBEb25lIGZvciBjb252ZW5pZW5jZS5cbiAqKi9cblxuXG5leHBvcnRzLkluZmxhdGUgPSBJbmZsYXRlO1xuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbmV4cG9ydHMuaW5mbGF0ZVJhdyA9IGluZmxhdGVSYXc7XG5leHBvcnRzLnVuZ3ppcCAgPSBpbmZsYXRlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBUWVBFRF9PSyA9ICAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgVWludDE2QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpO1xuXG5cbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcbiAgICBpZiAoIXNvdXJjZSkgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICdtdXN0IGJlIG5vbi1vYmplY3QnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gcmVkdWNlIGJ1ZmZlciBzaXplLCBhdm9pZGluZyBtZW0gY29weVxuZXhwb3J0cy5zaHJpbmtCdWYgPSBmdW5jdGlvbiAoYnVmLCBzaXplKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XG4gIGJ1Zi5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYnVmO1xufTtcblxuXG52YXIgZm5UeXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGlmIChzcmMuc3ViYXJyYXkgJiYgZGVzdC5zdWJhcnJheSkge1xuICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIG9yZGluYXJ5IGFycmF5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgdmFyIGksIGwsIGxlbiwgcG9zLCBjaHVuaywgcmVzdWx0O1xuXG4gICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG4gICAgbGVuID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gam9pbiBjaHVua3NcbiAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIHBvcyA9IDA7XG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNodW5rID0gY2h1bmtzW2ldO1xuICAgICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTtcbiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZuVW50eXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcbiAgICB9XG4gIH0sXG4gIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cbiAgZmxhdHRlbkNodW5rczogZnVuY3Rpb24gKGNodW5rcykge1xuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XG4gIH1cbn07XG5cblxuLy8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3Rpbmdcbi8vXG5leHBvcnRzLnNldFR5cGVkID0gZnVuY3Rpb24gKG9uKSB7XG4gIGlmIChvbikge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBVaW50OEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMTYgPSBVaW50MTZBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjMyID0gSW50MzJBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJ1ZjggID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpO1xuICB9XG59O1xuXG5leHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcbiIsIi8vIFN0cmluZyBlbmNvZGUvZGVjb2RlIGhlbHBlcnNcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5cbi8vIFF1aWNrIGNoZWNrIGlmIHdlIGNhbiB1c2UgZmFzdCBhcnJheSB0byBiaW4gc3RyaW5nIGNvbnZlcnNpb25cbi8vXG4vLyAtIGFwcGx5KEFycmF5KSBjYW4gZmFpbCBvbiBBbmRyb2lkIDIuMlxuLy8gLSBhcHBseShVaW50OEFycmF5KSBjYW4gZmFpbCBvbiBpT1MgNS4xIFNhZmFyeVxuLy9cbnZhciBTVFJfQVBQTFlfT0sgPSB0cnVlO1xudmFyIFNUUl9BUFBMWV9VSUFfT0sgPSB0cnVlO1xuXG50cnkgeyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFsgMCBdKTsgfSBjYXRjaCAoX18pIHsgU1RSX0FQUExZX09LID0gZmFsc2U7IH1cbnRyeSB7IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoMSkpOyB9IGNhdGNoIChfXykgeyBTVFJfQVBQTFlfVUlBX09LID0gZmFsc2U7IH1cblxuXG4vLyBUYWJsZSB3aXRoIHV0ZjggbGVuZ3RocyAoY2FsY3VsYXRlZCBieSBmaXJzdCBieXRlIG9mIHNlcXVlbmNlKVxuLy8gTm90ZSwgdGhhdCA1ICYgNi1ieXRlIHZhbHVlcyBhbmQgc29tZSA0LWJ5dGUgdmFsdWVzIGNhbiBub3QgYmUgcmVwcmVzZW50ZWQgaW4gSlMsXG4vLyBiZWNhdXNlIG1heCBwb3NzaWJsZSBjb2RlcG9pbnQgaXMgMHgxMGZmZmZcbnZhciBfdXRmOGxlbiA9IG5ldyB1dGlscy5CdWY4KDI1Nik7XG5mb3IgKHZhciBxID0gMDsgcSA8IDI1NjsgcSsrKSB7XG4gIF91dGY4bGVuW3FdID0gKHEgPj0gMjUyID8gNiA6IHEgPj0gMjQ4ID8gNSA6IHEgPj0gMjQwID8gNCA6IHEgPj0gMjI0ID8gMyA6IHEgPj0gMTkyID8gMiA6IDEpO1xufVxuX3V0ZjhsZW5bMjU0XSA9IF91dGY4bGVuWzI1NF0gPSAxOyAvLyBJbnZhbGlkIHNlcXVlbmNlIHN0YXJ0XG5cblxuLy8gY29udmVydCBzdHJpbmcgdG8gYXJyYXkgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxuZXhwb3J0cy5zdHJpbmcyYnVmID0gZnVuY3Rpb24gKHN0cikge1xuICB2YXIgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDtcblxuICAvLyBjb3VudCBiaW5hcnkgc2l6ZVxuICBmb3IgKG1fcG9zID0gMDsgbV9wb3MgPCBzdHJfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0O1xuICB9XG5cbiAgLy8gYWxsb2NhdGUgYnVmZmVyXG4gIGJ1ZiA9IG5ldyB1dGlscy5CdWY4KGJ1Zl9sZW4pO1xuXG4gIC8vIGNvbnZlcnRcbiAgZm9yIChpID0gMCwgbV9wb3MgPSAwOyBpIDwgYnVmX2xlbjsgbV9wb3MrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChtX3Bvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcyArIDEgPCBzdHJfbGVuKSkge1xuICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpO1xuICAgICAgaWYgKChjMiAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xuICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgbV9wb3MrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAvKiBvbmUgYnl0ZSAqL1xuICAgICAgYnVmW2krK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAvKiB0d28gYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhDMCB8IChjID4+PiA2KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhFMCB8IChjID4+PiAxMik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZm91ciBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweGYwIHwgKGMgPj4+IDE4KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiAxMiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1Zjtcbn07XG5cbi8vIEhlbHBlciAodXNlZCBpbiAyIHBsYWNlcylcbmZ1bmN0aW9uIGJ1ZjJiaW5zdHJpbmcoYnVmLCBsZW4pIHtcbiAgLy8gdXNlIGZhbGxiYWNrIGZvciBiaWcgYXJyYXlzIHRvIGF2b2lkIHN0YWNrIG92ZXJmbG93XG4gIGlmIChsZW4gPCA2NTUzNykge1xuICAgIGlmICgoYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9VSUFfT0spIHx8ICghYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9PSykpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHV0aWxzLnNocmlua0J1ZihidWYsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG4vLyBDb252ZXJ0IGJ5dGUgYXJyYXkgdG8gYmluYXJ5IHN0cmluZ1xuZXhwb3J0cy5idWYyYmluc3RyaW5nID0gZnVuY3Rpb24gKGJ1Zikge1xuICByZXR1cm4gYnVmMmJpbnN0cmluZyhidWYsIGJ1Zi5sZW5ndGgpO1xufTtcblxuXG4vLyBDb252ZXJ0IGJpbmFyeSBzdHJpbmcgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxuZXhwb3J0cy5iaW5zdHJpbmcyYnVmID0gZnVuY3Rpb24gKHN0cikge1xuICB2YXIgYnVmID0gbmV3IHV0aWxzLkJ1Zjgoc3RyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufTtcblxuXG4vLyBjb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuZXhwb3J0cy5idWYyc3RyaW5nID0gZnVuY3Rpb24gKGJ1ZiwgbWF4KSB7XG4gIHZhciBpLCBvdXQsIGMsIGNfbGVuO1xuICB2YXIgbGVuID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG5cbiAgLy8gUmVzZXJ2ZSBtYXggcG9zc2libGUgbGVuZ3RoICgyIHdvcmRzIHBlciBjaGFyKVxuICAvLyBOQjogYnkgdW5rbm93biByZWFzb25zLCBBcnJheSBpcyBzaWduaWZpY2FudGx5IGZhc3RlciBmb3JcbiAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cbiAgdmFyIHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpO1xuXG4gIGZvciAob3V0ID0gMCwgaSA9IDA7IGkgPCBsZW47KSB7XG4gICAgYyA9IGJ1ZltpKytdO1xuICAgIC8vIHF1aWNrIHByb2Nlc3MgYXNjaWlcbiAgICBpZiAoYyA8IDB4ODApIHsgdXRmMTZidWZbb3V0KytdID0gYzsgY29udGludWU7IH1cblxuICAgIGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbmV4cG9ydHMudXRmOGJvcmRlciA9IGZ1bmN0aW9uIChidWYsIG1heCkge1xuICB2YXIgcG9zO1xuXG4gIG1heCA9IG1heCB8fCBidWYubGVuZ3RoO1xuICBpZiAobWF4ID4gYnVmLmxlbmd0aCkgeyBtYXggPSBidWYubGVuZ3RoOyB9XG5cbiAgLy8gZ28gYmFjayBmcm9tIGxhc3QgcG9zaXRpb24sIHVudGlsIHN0YXJ0IG9mIHNlcXVlbmNlIGZvdW5kXG4gIHBvcyA9IG1heCAtIDE7XG4gIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gIC8vIEZ1Y2t1cCAtIHZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcbiAgLy8gcmV0dXJuIG1heCwgYmVjYXVzZSB3ZSBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBhbnl3YXkuXG4gIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgdnVmZmVyIGlzIHRvbyBzbWFsbCxcbiAgLy8gcmV0dXJuIG1heCB0b28uXG4gIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGRvZXNuJ3Qgd29ydGggdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbmEgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gYWRsZXIzMihhZGxlciwgYnVmLCBsZW4sIHBvcykge1xuICB2YXIgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLFxuICAgICAgbiA9IDA7XG5cbiAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXG4gICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cbiAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XG4gICAgbGVuIC09IG47XG5cbiAgICBkbyB7XG4gICAgICBzMSA9IChzMSArIGJ1Zltwb3MrK10pIHwwO1xuICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIHMxICU9IDY1NTIxO1xuICAgIHMyICU9IDY1NTIxO1xuICB9XG5cbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4gIFpfTk9fRkxVU0g6ICAgICAgICAgMCxcbiAgWl9QQVJUSUFMX0ZMVVNIOiAgICAxLFxuICBaX1NZTkNfRkxVU0g6ICAgICAgIDIsXG4gIFpfRlVMTF9GTFVTSDogICAgICAgMyxcbiAgWl9GSU5JU0g6ICAgICAgICAgICA0LFxuICBaX0JMT0NLOiAgICAgICAgICAgIDUsXG4gIFpfVFJFRVM6ICAgICAgICAgICAgNixcblxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICAqL1xuICBaX09LOiAgICAgICAgICAgICAgIDAsXG4gIFpfU1RSRUFNX0VORDogICAgICAgMSxcbiAgWl9ORUVEX0RJQ1Q6ICAgICAgICAyLFxuICBaX0VSUk5POiAgICAgICAgICAgLTEsXG4gIFpfU1RSRUFNX0VSUk9SOiAgICAtMixcbiAgWl9EQVRBX0VSUk9SOiAgICAgIC0zLFxuICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsXG4gIFpfQlVGX0VSUk9SOiAgICAgICAtNSxcbiAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG4gIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICBaX05PX0NPTVBSRVNTSU9OOiAgICAgICAgIDAsXG4gIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcbiAgWl9CRVNUX0NPTVBSRVNTSU9OOiAgICAgICA5LFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT046ICAgLTEsXG5cblxuICBaX0ZJTFRFUkVEOiAgICAgICAgICAgICAgIDEsXG4gIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcbiAgWl9STEU6ICAgICAgICAgICAgICAgICAgICAzLFxuICBaX0ZJWEVEOiAgICAgICAgICAgICAgICAgIDQsXG4gIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcblxuICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4gIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcbiAgWl9URVhUOiAgICAgICAgICAgICAgICAgICAxLFxuICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKVxuICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXG5cbiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gIFpfREVGTEFURUQ6ICAgICAgICAgICAgICAgOFxuICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IHdlIGNhbid0IGdldCBzaWduaWZpY2FudCBzcGVlZCBib29zdCBoZXJlLlxuLy8gU28gd3JpdGUgY29kZSB0byBtaW5pbWl6ZSBzaXplIC0gbm8gcHJlZ2VuZXJhdGVkIHRhYmxlc1xuLy8gYW5kIGFycmF5IHRvb2xzIGRlcGVuZGVuY2llcy5cblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBVc2Ugb3JkaW5hcnkgYXJyYXksIHNpbmNlIHVudHlwZWQgbWFrZXMgbm8gYm9vc3QgaGVyZVxuZnVuY3Rpb24gbWFrZVRhYmxlKCkge1xuICB2YXIgYywgdGFibGUgPSBbXTtcblxuICBmb3IgKHZhciBuID0gMDsgbiA8IDI1NjsgbisrKSB7XG4gICAgYyA9IG47XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgIGMgPSAoKGMgJiAxKSA/ICgweEVEQjg4MzIwIF4gKGMgPj4+IDEpKSA6IChjID4+PiAxKSk7XG4gICAgfVxuICAgIHRhYmxlW25dID0gYztcbiAgfVxuXG4gIHJldHVybiB0YWJsZTtcbn1cblxuLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS5cbnZhciBjcmNUYWJsZSA9IG1ha2VUYWJsZSgpO1xuXG5cbmZ1bmN0aW9uIGNyYzMyKGNyYywgYnVmLCBsZW4sIHBvcykge1xuICB2YXIgdCA9IGNyY1RhYmxlLFxuICAgICAgZW5kID0gcG9zICsgbGVuO1xuXG4gIGNyYyBePSAtMTtcblxuICBmb3IgKHZhciBpID0gcG9zOyBpIDwgZW5kOyBpKyspIHtcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcbiAgfVxuXG4gIHJldHVybiAoY3JjIF4gKC0xKSk7IC8vID4+PiAwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gY3JjMzI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzICAgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcbnZhciB0cmVlcyAgID0gcmVxdWlyZSgnLi90cmVlcycpO1xudmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcbnZhciBjcmMzMiAgID0gcmVxdWlyZSgnLi9jcmMzMicpO1xudmFyIG1zZyAgICAgPSByZXF1aXJlKCcuL21lc3NhZ2VzJyk7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbnZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xudmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7XG4vL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xudmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7XG52YXIgWl9GSU5JU0ggICAgICAgID0gNDtcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xuLy92YXIgWl9UUkVFUyAgICAgICAgID0gNjtcblxuXG4vKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gKi9cbnZhciBaX09LICAgICAgICAgICAgPSAwO1xudmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG4vL3ZhciBaX05FRURfRElDVCAgICAgPSAyO1xuLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG52YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XG52YXIgWl9EQVRBX0VSUk9SICAgID0gLTM7XG4vL3ZhciBaX01FTV9FUlJPUiAgICAgPSAtNDtcbnZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xuXG5cbi8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuLy92YXIgWl9OT19DT01QUkVTU0lPTiAgICAgID0gMDtcbi8vdmFyIFpfQkVTVF9TUEVFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5O1xudmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG5cbnZhciBaX0ZJTFRFUkVEICAgICAgICAgICAgPSAxO1xudmFyIFpfSFVGRk1BTl9PTkxZICAgICAgICA9IDI7XG52YXIgWl9STEUgICAgICAgICAgICAgICAgID0gMztcbnZhciBaX0ZJWEVEICAgICAgICAgICAgICAgPSA0O1xudmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbi8vdmFyIFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG4vL3ZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbnZhciBaX1VOS05PV04gICAgICAgICAgICAgPSAyO1xuXG5cbi8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xudmFyIFpfREVGTEFURUQgID0gODtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG52YXIgTUFYX01FTV9MRVZFTCA9IDk7XG4vKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cbnZhciBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xudmFyIERFRl9NRU1fTEVWRUwgPSA4O1xuXG5cbnZhciBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cbnZhciBMSVRFUkFMUyAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xudmFyIERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xudmFyIEJMX0NPREVTICAgICAgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xudmFyIE1BWF9CSVRTICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBNSU5fTUFUQ0ggPSAzO1xudmFyIE1BWF9NQVRDSCA9IDI1ODtcbnZhciBNSU5fTE9PS0FIRUFEID0gKE1BWF9NQVRDSCArIE1JTl9NQVRDSCArIDEpO1xuXG52YXIgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG52YXIgSU5JVF9TVEFURSA9IDQyO1xudmFyIEVYVFJBX1NUQVRFID0gNjk7XG52YXIgTkFNRV9TVEFURSA9IDczO1xudmFyIENPTU1FTlRfU1RBVEUgPSA5MTtcbnZhciBIQ1JDX1NUQVRFID0gMTAzO1xudmFyIEJVU1lfU1RBVEUgPSAxMTM7XG52YXIgRklOSVNIX1NUQVRFID0gNjY2O1xuXG52YXIgQlNfTkVFRF9NT1JFICAgICAgPSAxOyAvKiBibG9jayBub3QgY29tcGxldGVkLCBuZWVkIG1vcmUgaW5wdXQgb3IgbW9yZSBvdXRwdXQgKi9cbnZhciBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xudmFyIEJTX0ZJTklTSF9TVEFSVEVEID0gMzsgLyogZmluaXNoIHN0YXJ0ZWQsIG5lZWQgb25seSBtb3JlIG91dHB1dCBhdCBuZXh0IGRlZmxhdGUgKi9cbnZhciBCU19GSU5JU0hfRE9ORSAgICA9IDQ7IC8qIGZpbmlzaCBkb25lLCBhY2NlcHQgbm8gbW9yZSBpbnB1dCBvciBvdXRwdXQgKi9cblxudmFyIE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LlxuXG5mdW5jdGlvbiBlcnIoc3RybSwgZXJyb3JDb2RlKSB7XG4gIHN0cm0ubXNnID0gbXNnW2Vycm9yQ29kZV07XG4gIHJldHVybiBlcnJvckNvZGU7XG59XG5cbmZ1bmN0aW9uIHJhbmsoZikge1xuICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApO1xufVxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG4gKiB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0XG4gKiB0byBhdm9pZCBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+b3V0cHV0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxuICogKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICovXG5mdW5jdGlvbiBmbHVzaF9wZW5kaW5nKHN0cm0pIHtcbiAgdmFyIHMgPSBzdHJtLnN0YXRlO1xuXG4gIC8vX3RyX2ZsdXNoX2JpdHMocyk7XG4gIHZhciBsZW4gPSBzLnBlbmRpbmc7XG4gIGlmIChsZW4gPiBzdHJtLmF2YWlsX291dCkge1xuICAgIGxlbiA9IHN0cm0uYXZhaWxfb3V0O1xuICB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgdXRpbHMuYXJyYXlTZXQoc3RybS5vdXRwdXQsIHMucGVuZGluZ19idWYsIHMucGVuZGluZ19vdXQsIGxlbiwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgKz0gbGVuO1xuICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gbGVuO1xuICBzdHJtLmF2YWlsX291dCAtPSBsZW47XG4gIHMucGVuZGluZyAtPSBsZW47XG4gIGlmIChzLnBlbmRpbmcgPT09IDApIHtcbiAgICBzLnBlbmRpbmdfb3V0ID0gMDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGZsdXNoX2Jsb2NrX29ubHkocywgbGFzdCkge1xuICB0cmVlcy5fdHJfZmx1c2hfYmxvY2socywgKHMuYmxvY2tfc3RhcnQgPj0gMCA/IHMuYmxvY2tfc3RhcnQgOiAtMSksIHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0LCBsYXN0KTtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIGZsdXNoX3BlbmRpbmcocy5zdHJtKTtcbn1cblxuXG5mdW5jdGlvbiBwdXRfYnl0ZShzLCBiKSB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQdXQgYSBzaG9ydCBpbiB0aGUgcGVuZGluZyBidWZmZXIuIFRoZSAxNi1iaXQgdmFsdWUgaXMgcHV0IGluIE1TQiBvcmRlci5cbiAqIElOIGFzc2VydGlvbjogdGhlIHN0cmVhbSBzdGF0ZSBpcyBjb3JyZWN0IGFuZCB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpblxuICogcGVuZGluZ19idWYuXG4gKi9cbmZ1bmN0aW9uIHB1dFNob3J0TVNCKHMsIGIpIHtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiA+PiA4KSk7XG4vLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgJiAweGZmKSk7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKGIgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAqIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICogKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG4gKi9cbmZ1bmN0aW9uIHJlYWRfYnVmKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpIHtcbiAgdmFyIGxlbiA9IHN0cm0uYXZhaWxfaW47XG5cbiAgaWYgKGxlbiA+IHNpemUpIHsgbGVuID0gc2l6ZTsgfVxuICBpZiAobGVuID09PSAwKSB7IHJldHVybiAwOyB9XG5cbiAgc3RybS5hdmFpbF9pbiAtPSBsZW47XG5cbiAgLy8gem1lbWNweShidWYsIHN0cm0tPm5leHRfaW4sIGxlbik7XG4gIHV0aWxzLmFycmF5U2V0KGJ1Ziwgc3RybS5pbnB1dCwgc3RybS5uZXh0X2luLCBsZW4sIHN0YXJ0KTtcbiAgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMSkge1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG4gIH1cblxuICBlbHNlIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDIpIHtcbiAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XG4gIHN0cm0udG90YWxfaW4gKz0gbGVuO1xuXG4gIHJldHVybiBsZW47XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmRcbiAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCxcbiAqIGluIHdoaWNoIGNhc2UgdGhlIHJlc3VsdCBpcyBlcXVhbCB0byBwcmV2X2xlbmd0aCBhbmQgbWF0Y2hfc3RhcnQgaXNcbiAqIGdhcmJhZ2UuXG4gKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50XG4gKiAgIHN0cmluZyAoc3Ryc3RhcnQpIGFuZCBpdHMgZGlzdGFuY2UgaXMgPD0gTUFYX0RJU1QsIGFuZCBwcmV2X2xlbmd0aCA+PSAxXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLlxuICovXG5mdW5jdGlvbiBsb25nZXN0X21hdGNoKHMsIGN1cl9tYXRjaCkge1xuICB2YXIgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAgICAgIC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqL1xuICB2YXIgc2NhbiA9IHMuc3Ryc3RhcnQ7IC8qIGN1cnJlbnQgc3RyaW5nICovXG4gIHZhciBtYXRjaDsgICAgICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi9cbiAgdmFyIGJlc3RfbGVuID0gcy5wcmV2X2xlbmd0aDsgICAgICAgICAgICAgIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xuICB2YXIgbmljZV9tYXRjaCA9IHMubmljZV9tYXRjaDsgICAgICAgICAgICAgLyogc3RvcCBpZiBtYXRjaCBsb25nIGVub3VnaCAqL1xuICB2YXIgbGltaXQgPSAocy5zdHJzdGFydCA+IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSA/XG4gICAgICBzLnN0cnN0YXJ0IC0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgOiAwLypOSUwqLztcblxuICB2YXIgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dFxuXG4gIHZhciB3bWFzayA9IHMud19tYXNrO1xuICB2YXIgcHJldiAgPSBzLnByZXY7XG5cbiAgLyogU3RvcCB3aGVuIGN1cl9tYXRjaCBiZWNvbWVzIDw9IGxpbWl0LiBUbyBzaW1wbGlmeSB0aGUgY29kZSxcbiAgICogd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZyBvZiB3aW5kb3cgaW5kZXggMC5cbiAgICovXG5cbiAgdmFyIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG4gIHZhciBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgdmFyIHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG5cbiAgLyogVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2YgMTYuXG4gICAqIEl0IGlzIGVhc3kgdG8gZ2V0IHJpZCBvZiB0aGlzIG9wdGltaXphdGlvbiBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICAvLyBBc3NlcnQocy0+aGFzaF9iaXRzID49IDggJiYgTUFYX01BVENIID09IDI1OCwgXCJDb2RlIHRvbyBjbGV2ZXJcIik7XG5cbiAgLyogRG8gbm90IHdhc3RlIHRvbyBtdWNoIHRpbWUgaWYgd2UgYWxyZWFkeSBoYXZlIGEgZ29vZCBtYXRjaDogKi9cbiAgaWYgKHMucHJldl9sZW5ndGggPj0gcy5nb29kX21hdGNoKSB7XG4gICAgY2hhaW5fbGVuZ3RoID4+PSAyO1xuICB9XG4gIC8qIERvIG5vdCBsb29rIGZvciBtYXRjaGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4gVGhpcyBpcyBuZWNlc3NhcnlcbiAgICogdG8gbWFrZSBkZWZsYXRlIGRldGVybWluaXN0aWMuXG4gICAqL1xuICBpZiAobmljZV9tYXRjaCA+IHMubG9va2FoZWFkKSB7IG5pY2VfbWF0Y2ggPSBzLmxvb2thaGVhZDsgfVxuXG4gIC8vIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplLU1JTl9MT09LQUhFQUQsIFwibmVlZCBsb29rYWhlYWRcIik7XG5cbiAgZG8ge1xuICAgIC8vIEFzc2VydChjdXJfbWF0Y2ggPCBzLT5zdHJzdGFydCwgXCJubyBmdXR1cmVcIik7XG4gICAgbWF0Y2ggPSBjdXJfbWF0Y2g7XG5cbiAgICAvKiBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2VcbiAgICAgKiBvciBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIGxlc3MgdGhhbiAyLiAgTm90ZSB0aGF0IHRoZSBjaGVja3MgYmVsb3dcbiAgICAgKiBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IG9jY3VyIG9jY2FzaW9uYWxseSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgKiByZWFzb25zLiAgVGhlcmVmb3JlIHVuaW5pdGlhbGl6ZWQgbWVtb3J5IHdpbGwgYmUgYWNjZXNzZWQsIGFuZFxuICAgICAqIGNvbmRpdGlvbmFsIGp1bXBzIHdpbGwgYmUgbWFkZSB0aGF0IGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMuXG4gICAgICogSG93ZXZlciB0aGUgbGVuZ3RoIG9mIHRoZSBtYXRjaCBpcyBsaW1pdGVkIHRvIHRoZSBsb29rYWhlYWQsIHNvXG4gICAgICogdGhlIG91dHB1dCBvZiBkZWZsYXRlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgdW5pbml0aWFsaXplZCB2YWx1ZXMuXG4gICAgICovXG5cbiAgICBpZiAoX3dpblttYXRjaCArIGJlc3RfbGVuXSAgICAgIT09IHNjYW5fZW5kICB8fFxuICAgICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XG4gICAgICAgIF93aW5bbWF0Y2hdICAgICAgICAgICAgICAgICE9PSBfd2luW3NjYW5dIHx8XG4gICAgICAgIF93aW5bKyttYXRjaF0gICAgICAgICAgICAgICE9PSBfd2luW3NjYW4gKyAxXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogVGhlIGNoZWNrIGF0IGJlc3RfbGVuLTEgY2FuIGJlIHJlbW92ZWQgYmVjYXVzZSBpdCB3aWxsIGJlIG1hZGVcbiAgICAgKiBhZ2FpbiBsYXRlci4gKFRoaXMgaGV1cmlzdGljIGlzIG5vdCBhbHdheXMgYSB3aW4uKVxuICAgICAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcGFyZSBzY2FuWzJdIGFuZCBtYXRjaFsyXSBzaW5jZSB0aGV5XG4gICAgICogYXJlIGFsd2F5cyBlcXVhbCB3aGVuIHRoZSBvdGhlciBieXRlcyBtYXRjaCwgZ2l2ZW4gdGhhdFxuICAgICAqIHRoZSBoYXNoIGtleXMgYXJlIGVxdWFsIGFuZCB0aGF0IEhBU0hfQklUUyA+PSA4LlxuICAgICAqL1xuICAgIHNjYW4gKz0gMjtcbiAgICBtYXRjaCsrO1xuICAgIC8vIEFzc2VydCgqc2NhbiA9PSAqbWF0Y2gsIFwibWF0Y2hbMl0/XCIpO1xuXG4gICAgLyogV2UgY2hlY2sgZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBldmVyeSA4dGggY29tcGFyaXNvbjtcbiAgICAgKiB0aGUgMjU2dGggY2hlY2sgd2lsbCBiZSBtYWRlIGF0IHN0cnN0YXJ0KzI1OC5cbiAgICAgKi9cbiAgICBkbyB7XG4gICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cbiAgICB9IHdoaWxlIChfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG5cbiAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG5cbiAgICBsZW4gPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcblxuICAgIGlmIChsZW4gPiBiZXN0X2xlbikge1xuICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDtcbiAgICAgIGJlc3RfbGVuID0gbGVuO1xuICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gICAgICBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuICAgIH1cbiAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTtcblxuICBpZiAoYmVzdF9sZW4gPD0gcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gYmVzdF9sZW47XG4gIH1cbiAgcmV0dXJuIHMubG9va2FoZWFkO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmlsbCB0aGUgd2luZG93IHdoZW4gdGhlIGxvb2thaGVhZCBiZWNvbWVzIGluc3VmZmljaWVudC5cbiAqIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC5cbiAqXG4gKiBJTiBhc3NlcnRpb246IGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQURcbiAqIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFEXG4gKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmVcbiAqICAgIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXG4gKiAgICBvcHRpb24gLS0gbm90IHN1cHBvcnRlZCBoZXJlKS5cbiAqL1xuZnVuY3Rpb24gZmlsbF93aW5kb3cocykge1xuICB2YXIgX3dfc2l6ZSA9IHMud19zaXplO1xuICB2YXIgcCwgbiwgbSwgbW9yZSwgc3RyO1xuXG4gIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsIFwiYWxyZWFkeSBlbm91Z2ggbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcbiAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqL1xuICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcbiAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplO1xuICAgIC8vXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xuICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWZcbiAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcbiAgICAvLyAgICAgICAgICovXG4gICAgLy8gICAgICAgIG1vcmUtLTtcbiAgICAvLyAgICB9XG4gICAgLy99XG5cblxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXG4gICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXG4gICAgICB1dGlscy5hcnJheVNldChzLndpbmRvdywgcy53aW5kb3csIF93X3NpemUsIF93X3NpemUsIDApO1xuICAgICAgcy5tYXRjaF9zdGFydCAtPSBfd19zaXplO1xuICAgICAgcy5zdHJzdGFydCAtPSBfd19zaXplO1xuICAgICAgLyogd2Ugbm93IGhhdmUgc3Ryc3RhcnQgPj0gTUFYX0RJU1QgKi9cbiAgICAgIHMuYmxvY2tfc3RhcnQgLT0gX3dfc2l6ZTtcblxuICAgICAgLyogU2xpZGUgdGhlIGhhc2ggdGFibGUgKGNvdWxkIGJlIGF2b2lkZWQgd2l0aCAzMiBiaXQgdmFsdWVzXG4gICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDBcbiAgICAgICB0byBrZWVwIHRoZSBoYXNoIHRhYmxlIGNvbnNpc3RlbnQgaWYgd2Ugc3dpdGNoIGJhY2sgdG8gbGV2ZWwgPiAwXG4gICAgICAgbGF0ZXIuIChVc2luZyBsZXZlbCAwIHBlcm1hbmVudGx5IGlzIG5vdCBhbiBvcHRpbWFsIHVzYWdlIG9mXG4gICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcbiAgICAgICAqL1xuXG4gICAgICBuID0gcy5oYXNoX3NpemU7XG4gICAgICBwID0gbjtcbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMuaGVhZFstLXBdO1xuICAgICAgICBzLmhlYWRbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG4gPSBfd19zaXplO1xuICAgICAgcCA9IG47XG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLnByZXZbLS1wXTtcbiAgICAgICAgcy5wcmV2W3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XG4gICAgICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgbW9yZSArPSBfd19zaXplO1xuICAgIH1cbiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzpcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKVxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cbiAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cbiAgICAgKi9cbiAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG4gICAgbiA9IHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCwgbW9yZSk7XG4gICAgcy5sb29rYWhlYWQgKz0gbjtcblxuICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkge1xuICAgICAgc3RyID0gcy5zdHJzdGFydCAtIHMuaW5zZXJ0O1xuICAgICAgcy5pbnNfaCA9IHMud2luZG93W3N0cl07XG5cbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgMV0pICYgcy5oYXNoX21hc2s7XG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgICBzdHIrKztcbiAgICAgICAgcy5pbnNlcnQtLTtcbiAgICAgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPCBNSU5fTUFUQ0gpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGUgd2hvbGUgaW5wdXQgaGFzIGxlc3MgdGhhbiBNSU5fTUFUQ0ggYnl0ZXMsIGluc19oIGlzIGdhcmJhZ2UsXG4gICAgICogYnV0IHRoaXMgaXMgbm90IGltcG9ydGFudCBzaW5jZSBvbmx5IGxpdGVyYWwgYnl0ZXMgd2lsbCBiZSBlbWl0dGVkLlxuICAgICAqL1xuXG4gIH0gd2hpbGUgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBzLnN0cm0uYXZhaWxfaW4gIT09IDApO1xuXG4gIC8qIElmIHRoZSBXSU5fSU5JVCBieXRlcyBhZnRlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGRhdGEgaGF2ZSBuZXZlciBiZWVuXG4gICAqIHdyaXR0ZW4sIHRoZW4gemVybyB0aG9zZSBieXRlcyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgcmVwb3J0cyBvZlxuICAgKiB0aGUgdXNlIG9mIHVuaW5pdGlhbGl6ZWQgKG9yIHVuaW5pdGlhbGlzZWQgYXMgSnVsaWFuIHdyaXRlcykgYnl0ZXMgYnlcbiAgICogdGhlIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMuICBVcGRhdGUgdGhlIGhpZ2ggd2F0ZXIgbWFyayBmb3IgdGhlIG5leHRcbiAgICogdGltZSB0aHJvdWdoIGhlcmUuICBXSU5fSU5JVCBpcyBzZXQgdG8gTUFYX01BVENIIHNpbmNlIHRoZSBsb25nZXN0IG1hdGNoXG4gICAqIHJvdXRpbmVzIGFsbG93IHNjYW5uaW5nIHRvIHN0cnN0YXJ0ICsgTUFYX01BVENILCBpZ25vcmluZyBsb29rYWhlYWQuXG4gICAqL1xuLy8gIGlmIChzLmhpZ2hfd2F0ZXIgPCBzLndpbmRvd19zaXplKSB7XG4vLyAgICB2YXIgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDtcbi8vICAgIHZhciBpbml0ID0gMDtcbi8vXG4vLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3Vycikge1xuLy8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcbi8vICAgICAgICogYnl0ZXMgb3IgdXAgdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXG4vLyAgICAgICAqL1xuLy8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG4vLyAgICAgIGlmIChpbml0ID4gV0lOX0lOSVQpXG4vLyAgICAgICAgaW5pdCA9IFdJTl9JTklUO1xuLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgPSBjdXJyICsgaW5pdDtcbi8vICAgIH1cbi8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuLy8gICAgICAvKiBIaWdoIHdhdGVyIG1hcmsgYXQgb3IgYWJvdmUgY3VycmVudCBkYXRhLCBidXQgYmVsb3cgY3VycmVudCBkYXRhXG4vLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwXG4vLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9ICh1bGcpY3VyciArIFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG4vLyAgICAgICAgaW5pdCA9IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG4vLyAgICB9XG4vLyAgfVxuLy9cbi8vICBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQsXG4vLyAgICBcIm5vdCBlbm91Z2ggcm9vbSBmb3Igc2VhcmNoXCIpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgd2l0aG91dCBjb21wcmVzc2lvbiBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuXG4gKiB0aGUgY3VycmVudCBibG9jayBzdGF0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IHNpbmNlXG4gKiB1bmNvbXByZXNzaWJsZSBkYXRhIGlzIHByb2JhYmx5IG5vdCB1c2VmdWwuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZFxuICogb25seSBmb3IgdGhlIGxldmVsPTAgY29tcHJlc3Npb24gb3B0aW9uLlxuICogTk9URTogdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgb3B0aW1pemVkIHRvIGF2b2lkIGV4dHJhIGNvcHlpbmcgZnJvbVxuICogd2luZG93IHRvIHBlbmRpbmdfYnVmLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3N0b3JlZChzLCBmbHVzaCkge1xuICAvKiBTdG9yZWQgYmxvY2tzIGFyZSBsaW1pdGVkIHRvIDB4ZmZmZiBieXRlcywgcGVuZGluZ19idWYgaXMgbGltaXRlZFxuICAgKiB0byBwZW5kaW5nX2J1Zl9zaXplLCBhbmQgZWFjaCBzdG9yZWQgYmxvY2sgaGFzIGEgNSBieXRlIGhlYWRlcjpcbiAgICovXG4gIHZhciBtYXhfYmxvY2tfc2l6ZSA9IDB4ZmZmZjtcblxuICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XG4gICAgbWF4X2Jsb2NrX3NpemUgPSBzLnBlbmRpbmdfYnVmX3NpemUgLSA1O1xuICB9XG5cbiAgLyogQ29weSBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gaW5wdXQgdG8gb3V0cHV0OiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogRmlsbCB0aGUgd2luZG93IGFzIG11Y2ggYXMgcG9zc2libGU6ICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IDEpIHtcblxuICAgICAgLy9Bc3NlcnQocy0+c3Ryc3RhcnQgPCBzLT53X3NpemUrTUFYX0RJU1QocykgfHxcbiAgICAgIC8vICBzLT5ibG9ja19zdGFydCA+PSAobG9uZylzLT53X3NpemUsIFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIGlmICghKHMuc3Ryc3RhcnQgPCBzLndfc2l6ZSArIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHx8XG4vLyAgICAgICAgcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSkpIHtcbi8vICAgICAgICB0aHJvdyAgbmV3IEVycm9yKFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIH1cblxuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG4gICAgLy9Bc3NlcnQocy0+YmxvY2tfc3RhcnQgPj0gMEwsIFwiYmxvY2sgZ29uZVwiKTtcbi8vICAgIGlmIChzLmJsb2NrX3N0YXJ0IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiYmxvY2sgZ29uZVwiKTtcblxuICAgIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gICAgcy5sb29rYWhlYWQgPSAwO1xuXG4gICAgLyogRW1pdCBhIHN0b3JlZCBibG9jayBpZiBwZW5kaW5nX2J1ZiB3aWxsIGJlIGZ1bGw6ICovXG4gICAgdmFyIG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcblxuICAgIGlmIChzLnN0cnN0YXJ0ID09PSAwIHx8IHMuc3Ryc3RhcnQgPj0gbWF4X3N0YXJ0KSB7XG4gICAgICAvKiBzdHJzdGFydCA9PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZSAqL1xuICAgICAgcy5sb29rYWhlYWQgPSBzLnN0cnN0YXJ0IC0gbWF4X3N0YXJ0O1xuICAgICAgcy5zdHJzdGFydCA9IG1heF9zdGFydDtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG5cblxuICAgIH1cbiAgICAvKiBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcbiAgICAgKiBuZWdhdGl2ZSBhbmQgdGhlIGRhdGEgd2lsbCBiZSBnb25lOlxuICAgICAqL1xuICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cblxuICBzLmluc2VydCA9IDA7XG5cbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG5cbiAgaWYgKHMuc3Ryc3RhcnQgPiBzLmJsb2NrX3N0YXJ0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX05FRURfTU9SRTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wcmVzcyBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuIHRoZSBjdXJyZW50XG4gKiBibG9jayBzdGF0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgcGVyZm9ybSBsYXp5IGV2YWx1YXRpb24gb2YgbWF0Y2hlcyBhbmQgaW5zZXJ0c1xuICogbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgb25seSBmb3IgdW5tYXRjaGVkIHN0cmluZ3Mgb3IgZm9yIHNob3J0XG4gKiBtYXRjaGVzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBmYXN0IGNvbXByZXNzaW9uIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfZmFzdChzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuICAgICAqL1xuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cbiAgICB9XG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seVxuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuICAgICAgICogaXMgbm90IHRvbyBsYXJnZS4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gvKm1heF9pbnNlcnRfbGVuZ3RoKi8gJiYgcy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoLS07IC8qIHN0cmluZyBhdCBzdHJzdGFydCBhbHJlYWR5IGluIHRhYmxlICovXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICAgIC8qIHN0cnN0YXJ0IG5ldmVyIGV4Y2VlZHMgV1NJWkUtTUFYX01BVENILCBzbyB0aGVyZSBhcmVcbiAgICAgICAgICAgKiBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLlxuICAgICAgICAgICAqL1xuICAgICAgICB9IHdoaWxlICgtLXMubWF0Y2hfbGVuZ3RoICE9PSAwKTtcbiAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgfSBlbHNlXG4gICAgICB7XG4gICAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdO1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0KzFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgICAgICAgICAgQ2FsbCBVUERBVEVfSEFTSCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXNcbi8vI2VuZGlmXG4gICAgICAgIC8qIElmIGxvb2thaGVhZCA8IE1JTl9NQVRDSCwgaW5zX2ggaXMgZ2FyYmFnZSwgYnV0IGl0IGRvZXMgbm90XG4gICAgICAgICAqIG1hdHRlciBzaW5jZSBpdCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgbmV4dCBkZWZsYXRlIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMud2luZG93W3Muc3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gKChzLnN0cnN0YXJ0IDwgKE1JTl9NQVRDSCAtIDEpKSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxKTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBhY2hpZXZlcyBiZXR0ZXIgY29tcHJlc3Npb24uIFdlIHVzZSBhIGxhenlcbiAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcbiAqIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW5kb3cgcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgICAvKiBoZWFkIG9mIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIHZhciBtYXhfaW5zZXJ0O1xuXG4gIC8qIFByb2Nlc3MgdGhlIGlucHV0IGJsb2NrLiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGVcbiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAvKioqL1xuICAgIH1cblxuICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG4gICAgICovXG4gICAgcy5wcmV2X2xlbmd0aCA9IHMubWF0Y2hfbGVuZ3RoO1xuICAgIHMucHJldl9tYXRjaCA9IHMubWF0Y2hfc3RhcnQ7XG4gICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgcy5wcmV2X2xlbmd0aCA8IHMubWF4X2xhenlfbWF0Y2ggJiZcbiAgICAgICAgcy5zdHJzdGFydCAtIGhhc2hfaGVhZCA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKS8qTUFYX0RJU1QocykqLykge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSA1ICYmXG4gICAgICAgICAocy5zdHJhdGVneSA9PT0gWl9GSUxURVJFRCB8fCAocy5tYXRjaF9sZW5ndGggPT09IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCA+IDQwOTYvKlRPT19GQVIqLykpKSB7XG5cbiAgICAgICAgLyogSWYgcHJldl9tYXRjaCBpcyBhbHNvIE1JTl9NQVRDSCwgbWF0Y2hfc3RhcnQgaXMgZ2FyYmFnZVxuICAgICAgICAgKiBidXQgd2Ugd2lsbCBpZ25vcmUgdGhlIGN1cnJlbnQgbWF0Y2ggYW55d2F5LlxuICAgICAgICAgKi9cbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBhdCB0aGUgcHJldmlvdXMgc3RlcCBhbmQgdGhlIGN1cnJlbnRcbiAgICAgKiBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOlxuICAgICAqL1xuICAgIGlmIChzLnByZXZfbGVuZ3RoID49IE1JTl9NQVRDSCAmJiBzLm1hdGNoX2xlbmd0aCA8PSBzLnByZXZfbGVuZ3RoKSB7XG4gICAgICBtYXhfaW5zZXJ0ID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkIC0gTUlOX01BVENIO1xuICAgICAgLyogRG8gbm90IGluc2VydCBzdHJpbmdzIGluIGhhc2ggdGFibGUgYmV5b25kIHRoaXMuICovXG5cbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydC0xLCBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGgpO1xuXG4gICAgICAvKioqX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgICBzLnByZXZfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCk7XG4gICAgICAvKiBJbnNlcnQgaW4gaGFzaCB0YWJsZSBhbGwgc3RyaW5ncyB1cCB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaC5cbiAgICAgICAqIHN0cnN0YXJ0LTEgYW5kIHN0cnN0YXJ0IGFyZSBhbHJlYWR5IGluc2VydGVkLiBJZiB0aGVyZSBpcyBub3RcbiAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW5cbiAgICAgICAqIHRoZSBoYXNoIHRhYmxlLlxuICAgICAgICovXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoIC0gMTtcbiAgICAgIHMucHJldl9sZW5ndGggLT0gMjtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApO1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgICAgfVxuICAgICAgICAvKioqL1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgICAgLyogSWYgdGhlcmUgd2FzIG5vIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiwgb3V0cHV0IGFcbiAgICAgICAqIHNpbmdsZSBsaXRlcmFsLiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBidXQgdGhlIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1hdGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuXG4gICAgICAgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DS19PTkxZKHMsIDApICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIC8qKiovXG4gICAgICB9XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogVGhlcmUgaXMgbm8gcHJldmlvdXMgbWF0Y2ggdG8gY29tcGFyZSB3aXRoLCB3YWl0IGZvclxuICAgICAgICogdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChmbHVzaCAhPSBaX05PX0ZMVVNILCBcIm5vIGZsdXNoP1wiKTtcbiAgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICB9XG4gIHMuaW5zZXJ0ID0gcy5zdHJzdGFydCA8IE1JTl9NQVRDSCAtIDEgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGb3IgWl9STEUsIHNpbXBseSBsb29rIGZvciBydW5zIG9mIGJ5dGVzLCBnZW5lcmF0ZSBtYXRjaGVzIG9ubHkgb2YgZGlzdGFuY2VcbiAqIG9uZS4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuICAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZlxuICogZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gWl9STEUuKVxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3JsZShzLCBmbHVzaCkge1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuICB2YXIgcHJldjsgICAgICAgICAgICAgIC8qIGJ5dGUgYXQgZGlzdGFuY2Ugb25lIHRvIG1hdGNoICovXG4gIHZhciBzY2FuLCBzdHJlbmQ7ICAgICAgLyogc2NhbiBnb2VzIHVwIHRvIHN0cmVuZCBmb3IgbGVuZ3RoIG9mIHJ1biAqL1xuXG4gIHZhciBfd2luID0gcy53aW5kb3c7XG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBsb25nZXN0IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0gpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogU2VlIGhvdyBtYW55IHRpbWVzIHRoZSBwcmV2aW91cyBieXRlIHJlcGVhdHMgKi9cbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0ID4gMCkge1xuICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxO1xuICAgICAgcHJldiA9IF93aW5bc2Nhbl07XG4gICAgICBpZiAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0pIHtcbiAgICAgICAgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqL1xuICAgICAgICB9IHdoaWxlIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1BWF9NQVRDSCAtIChzdHJlbmQgLSBzY2FuKTtcbiAgICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoID4gcy5sb29rYWhlYWQpIHtcbiAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IHMubG9va2FoZWFkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChzY2FuIDw9IHMtPndpbmRvdysodUludCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuICAgIH1cblxuICAgIC8qIEVtaXQgbWF0Y2ggaWYgaGF2ZSBydW4gb2YgTUlOX01BVENIIG9yIGxvbmdlciwgZWxzZSBlbWl0IGxpdGVyYWwgKi9cbiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMuc3Ryc3RhcnQgLSAxLCBzLm1hdGNoX2xlbmd0aCk7XG5cbiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3QocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gMDtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLlxuICogKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2YgZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gSHVmZm1hbi4pXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfaHVmZihzLCBmbHVzaCkge1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBhIGxpdGVyYWwgdG8gd3JpdGUuICovXG4gICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG4gICAgcy5sb29rYWhlYWQtLTtcbiAgICBzLnN0cnN0YXJ0Kys7XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuICB0aGlzLmdvb2RfbGVuZ3RoID0gZ29vZF9sZW5ndGg7XG4gIHRoaXMubWF4X2xhenkgPSBtYXhfbGF6eTtcbiAgdGhpcy5uaWNlX2xlbmd0aCA9IG5pY2VfbGVuZ3RoO1xuICB0aGlzLm1heF9jaGFpbiA9IG1heF9jaGFpbjtcbiAgdGhpcy5mdW5jID0gZnVuYztcbn1cblxudmFyIGNvbmZpZ3VyYXRpb25fdGFibGU7XG5cbmNvbmZpZ3VyYXRpb25fdGFibGUgPSBbXG4gIC8qICAgICAgZ29vZCBsYXp5IG5pY2UgY2hhaW4gKi9cbiAgbmV3IENvbmZpZygwLCAwLCAwLCAwLCBkZWZsYXRlX3N0b3JlZCksICAgICAgICAgIC8qIDAgc3RvcmUgb25seSAqL1xuICBuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIGRlZmxhdGVfZmFzdCksICAgICAgICAgICAgLyogMSBtYXggc3BlZWQsIG5vIGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDQsIDUsIDE2LCA4LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgLyogMiAqL1xuICBuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgLyogMyAqL1xuXG4gIG5ldyBDb25maWcoNCwgNCwgMTYsIDE2LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgICAvKiA0IGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAzMiwgMzIsIGRlZmxhdGVfc2xvdyksICAgICAgICAgLyogNSAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAxMjgsIDEyOCwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNiAqL1xuICBuZXcgQ29uZmlnKDgsIDMyLCAxMjgsIDI1NiwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNyAqL1xuICBuZXcgQ29uZmlnKDMyLCAxMjgsIDI1OCwgMTAyNCwgZGVmbGF0ZV9zbG93KSwgICAgLyogOCAqL1xuICBuZXcgQ29uZmlnKDMyLCAyNTgsIDI1OCwgNDA5NiwgZGVmbGF0ZV9zbG93KSAgICAgLyogOSBtYXggY29tcHJlc3Npb24gKi9cbl07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSBcImxvbmdlc3QgbWF0Y2hcIiByb3V0aW5lcyBmb3IgYSBuZXcgemxpYiBzdHJlYW1cbiAqL1xuZnVuY3Rpb24gbG1faW5pdChzKSB7XG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59XG5cblxuZnVuY3Rpb24gRGVmbGF0ZVN0YXRlKCkge1xuICB0aGlzLnN0cm0gPSBudWxsOyAgICAgICAgICAgIC8qIHBvaW50ZXIgYmFjayB0byB0aGlzIHpsaWIgc3RyZWFtICovXG4gIHRoaXMuc3RhdHVzID0gMDsgICAgICAgICAgICAvKiBhcyB0aGUgbmFtZSBpbXBsaWVzICovXG4gIHRoaXMucGVuZGluZ19idWYgPSBudWxsOyAgICAgIC8qIG91dHB1dCBzdGlsbCBwZW5kaW5nICovXG4gIHRoaXMucGVuZGluZ19idWZfc2l6ZSA9IDA7ICAvKiBzaXplIG9mIHBlbmRpbmdfYnVmICovXG4gIHRoaXMucGVuZGluZ19vdXQgPSAwOyAgICAgICAvKiBuZXh0IHBlbmRpbmcgYnl0ZSB0byBvdXRwdXQgdG8gdGhlIHN0cmVhbSAqL1xuICB0aGlzLnBlbmRpbmcgPSAwOyAgICAgICAgICAgLyogbmIgb2YgYnl0ZXMgaW4gdGhlIHBlbmRpbmcgYnVmZmVyICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG4gIHRoaXMuZ3poZWFkID0gbnVsbDsgICAgICAgICAvKiBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiB0byB3cml0ZSAqL1xuICB0aGlzLmd6aW5kZXggPSAwOyAgICAgICAgICAgLyogd2hlcmUgaW4gZXh0cmEsIG5hbWUsIG9yIGNvbW1lbnQgKi9cbiAgdGhpcy5tZXRob2QgPSBaX0RFRkxBVEVEOyAvKiBjYW4gb25seSBiZSBERUZMQVRFRCAqL1xuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXG5cbiAgdGhpcy53X3NpemUgPSAwOyAgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICovXG4gIHRoaXMud19iaXRzID0gMDsgIC8qIGxvZzIod19zaXplKSAgKDguLjE2KSAqL1xuICB0aGlzLndfbWFzayA9IDA7ICAvKiB3X3NpemUgLSAxICovXG5cbiAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAvKiBTbGlkaW5nIHdpbmRvdy4gSW5wdXQgYnl0ZXMgYXJlIHJlYWQgaW50byB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIHdpbmRvdyxcbiAgICogYW5kIG1vdmUgdG8gdGhlIGZpcnN0IGhhbGYgbGF0ZXIgdG8ga2VlcCBhIGRpY3Rpb25hcnkgb2YgYXQgbGVhc3Qgd1NpemVcbiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRpb24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZlxuICAgKiB3U2l6ZS1NQVhfTUFUQ0ggYnl0ZXMsIGJ1dCB0aGlzIGVuc3VyZXMgdGhhdCBJTyBpcyBhbHdheXNcbiAgICogcGVyZm9ybWVkIHdpdGggYSBsZW5ndGggbXVsdGlwbGUgb2YgdGhlIGJsb2NrIHNpemUuXG4gICAqL1xuXG4gIHRoaXMud2luZG93X3NpemUgPSAwO1xuICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuICAgKiBpcyBkaXJlY3RseSB1c2VkIGFzIHNsaWRpbmcgd2luZG93LlxuICAgKi9cblxuICB0aGlzLnByZXYgPSBudWxsO1xuICAvKiBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpc1xuICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxuICAgKiBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW5kb3cgaW5kZXggbW9kdWxvIDMySy5cbiAgICovXG5cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAvKiBIZWFkcyBvZiB0aGUgaGFzaCBjaGFpbnMgb3IgTklMLiAqL1xuXG4gIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xuICB0aGlzLmhhc2hfc2l6ZSA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi9cbiAgdGhpcy5oYXNoX2JpdHMgPSAwOyAgIC8qIGxvZzIoaGFzaF9zaXplKSAqL1xuICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cblxuICB0aGlzLmhhc2hfc2hpZnQgPSAwO1xuICAvKiBOdW1iZXIgb2YgYml0cyBieSB3aGljaCBpbnNfaCBtdXN0IGJlIHNoaWZ0ZWQgYXQgZWFjaCBpbnB1dFxuICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3RcbiAgICogYnl0ZSBubyBsb25nZXIgdGFrZXMgcGFydCBpbiB0aGUgaGFzaCBrZXksIHRoYXQgaXM6XG4gICAqICAgaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcbiAgICovXG5cbiAgdGhpcy5ibG9ja19zdGFydCA9IDA7XG4gIC8qIFdpbmRvdyBwb3NpdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjdXJyZW50IG91dHB1dCBibG9jay4gR2V0c1xuICAgKiBuZWdhdGl2ZSB3aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLlxuICAgKi9cblxuICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7ICAgICAgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi9cbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXG4gIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMDsgICAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovXG4gIHRoaXMuc3Ryc3RhcnQgPSAwOyAgICAgICAgICAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cbiAgdGhpcy5sb29rYWhlYWQgPSAwOyAgICAgICAgIC8qIG51bWJlciBvZiB2YWxpZCBieXRlcyBhaGVhZCBpbiB3aW5kb3cgKi9cblxuICB0aGlzLnByZXZfbGVuZ3RoID0gMDtcbiAgLyogTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAqIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLlxuICAgKi9cblxuICB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwO1xuICAvKiBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xuICAgKiBsZW5ndGguICBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlXG4gICAqIHNwZWVkLlxuICAgKi9cblxuICB0aGlzLm1heF9sYXp5X21hdGNoID0gMDtcbiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxuICAgKiBzbWFsbGVyIHRoYW4gdGhpcyB2YWx1ZS4gVGhpcyBtZWNoYW5pc20gaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvblxuICAgKiBsZXZlbHMgPj0gNC5cbiAgICovXG4gIC8vIFRoYXQncyBhbGlhcyB0byBtYXhfbGF6eV9tYXRjaCwgZG9uJ3QgdXNlIGRpcmVjdGx5XG4gIC8vdGhpcy5tYXhfaW5zZXJ0X2xlbmd0aCA9IDA7XG4gIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XG4gICAqIGdyZWF0ZXIgdGhhbiB0aGlzIGxlbmd0aC4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICogbWF4X2luc2VydF9sZW5ndGggaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvbiBsZXZlbHMgPD0gMy5cbiAgICovXG5cbiAgdGhpcy5sZXZlbCA9IDA7ICAgICAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi9cbiAgdGhpcy5zdHJhdGVneSA9IDA7ICAvKiBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZyovXG5cbiAgdGhpcy5nb29kX21hdGNoID0gMDtcbiAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovXG5cbiAgdGhpcy5uaWNlX21hdGNoID0gMDsgLyogU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpcyAqL1xuXG4gICAgICAgICAgICAgIC8qIHVzZWQgYnkgdHJlZXMuYzogKi9cblxuICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovXG5cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBibF90cmVlWzIqQkxfQ09ERVMrMV07ICAvKiBIdWZmbWFuIHRyZWUgZm9yIGJpdCBsZW5ndGhzICovXG5cbiAgLy8gVXNlIGZsYXQgYXJyYXkgb2YgRE9VQkxFIHNpemUsIHdpdGggaW50ZXJsZWF2ZWQgZmF0YSxcbiAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZVxuICB0aGlzLmR5bl9sdHJlZSAgPSBuZXcgdXRpbHMuQnVmMTYoSEVBUF9TSVpFICogMik7XG4gIHRoaXMuZHluX2R0cmVlICA9IG5ldyB1dGlscy5CdWYxNigoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgICAgPSBuZXcgdXRpbHMuQnVmMTYoKDIgKiBCTF9DT0RFUyArIDEpICogMik7XG4gIHplcm8odGhpcy5keW5fbHRyZWUpO1xuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyh0aGlzLmJsX3RyZWUpO1xuXG4gIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cbiAgdGhpcy5kX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGRpc3RhbmNlIHRyZWUgKi9cbiAgdGhpcy5ibF9kZXNjICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGJpdCBsZW5ndGggdHJlZSAqL1xuXG4gIC8vdXNoIGJsX2NvdW50W01BWF9CSVRTKzFdO1xuICB0aGlzLmJsX2NvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vaW50IGhlYXBbMipMX0NPREVTKzFdOyAgICAgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB0aGlzLmhlYXAgPSBuZXcgdXRpbHMuQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvKHRoaXMuaGVhcCk7XG5cbiAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXG4gIHRoaXMuaGVhcF9tYXggPSAwOyAgICAgICAgICAgICAgIC8qIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3kgKi9cbiAgLyogVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cbiAgICovXG5cbiAgdGhpcy5kZXB0aCA9IG5ldyB1dGlscy5CdWYxNigyICogTF9DT0RFUyArIDEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XG4gIHplcm8odGhpcy5kZXB0aCk7XG4gIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3lcbiAgICovXG5cbiAgdGhpcy5sX2J1ZiA9IDA7ICAgICAgICAgIC8qIGJ1ZmZlciBpbmRleCBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3RocyAqL1xuXG4gIHRoaXMubGl0X2J1ZnNpemUgPSAwO1xuICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcbiAgICogICAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuICAgKiAgICAgd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBmb3JcbiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cbiAgICogICAgIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cbiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG4gICAqICAgICBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG4gICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG4gICAqICAgICBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcbiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuICAgKi9cblxuICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cbiAgdGhpcy5kX2J1ZiA9IDA7XG4gIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmVcbiAgICogdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLiBUbyB1c2UgZGlmZmVyZW50IGxlbmd0aHMsIGFuIGV4dHJhIGZsYWdcbiAgICogYXJyYXkgd291bGQgYmUgbmVjZXNzYXJ5LlxuICAgKi9cblxuICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xuICB0aGlzLm1hdGNoZXMgPSAwOyAgICAgICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVudCBibG9jayAqL1xuICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuICB0aGlzLmJpX2J1ZiA9IDA7XG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG4gICAqIHNpZ25pZmljYW50IGJpdHMpLlxuICAgKi9cbiAgdGhpcy5iaV92YWxpZCA9IDA7XG4gIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuICAgKiBhcmUgYWx3YXlzIHplcm8uXG4gICAqL1xuXG4gIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cbiAgLy90aGlzLmhpZ2hfd2F0ZXIgPSAwO1xuICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cbiAgICogbG9uZ2VzdCBtYXRjaCByb3V0aW5lcyBhY2Nlc3MgYnl0ZXMgcGFzdCB0aGUgaW5wdXQuICBUaGlzIGlzIHRoZW5cbiAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cbiAgICovXG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKSB7XG4gIHZhciBzO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gMDtcbiAgc3RybS5kYXRhX3R5cGUgPSBaX1VOS05PV047XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG4gIHMucGVuZGluZyA9IDA7XG4gIHMucGVuZGluZ19vdXQgPSAwO1xuXG4gIGlmIChzLndyYXAgPCAwKSB7XG4gICAgcy53cmFwID0gLXMud3JhcDtcbiAgICAvKiB3YXMgbWFkZSBuZWdhdGl2ZSBieSBkZWZsYXRlKC4uLiwgWl9GSU5JU0gpOyAqL1xuICB9XG4gIHMuc3RhdHVzID0gKHMud3JhcCA/IElOSVRfU1RBVEUgOiBCVVNZX1NUQVRFKTtcbiAgc3RybS5hZGxlciA9IChzLndyYXAgPT09IDIpID9cbiAgICAwICAvLyBjcmMzMigwLCBaX05VTEwsIDApXG4gIDpcbiAgICAxOyAvLyBhZGxlcjMyKDAsIFpfTlVMTCwgMClcbiAgcy5sYXN0X2ZsdXNoID0gWl9OT19GTFVTSDtcbiAgdHJlZXMuX3RyX2luaXQocyk7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVSZXNldChzdHJtKSB7XG4gIHZhciByZXQgPSBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuICBpZiAocmV0ID09PSBaX09LKSB7XG4gICAgbG1faW5pdChzdHJtLnN0YXRlKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVTZXRIZWFkZXIoc3RybSwgaGVhZCkge1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIGlmIChzdHJtLnN0YXRlLndyYXAgIT09IDIpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBtZXRob2QsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSkge1xuICBpZiAoIXN0cm0pIHsgLy8gPT09IFpfTlVMTFxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICB2YXIgd3JhcCA9IDE7XG5cbiAgaWYgKGxldmVsID09PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04pIHtcbiAgICBsZXZlbCA9IDY7XG4gIH1cblxuICBpZiAod2luZG93Qml0cyA8IDApIHsgLyogc3VwcHJlc3MgemxpYiB3cmFwcGVyICovXG4gICAgd3JhcCA9IDA7XG4gICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzO1xuICB9XG5cbiAgZWxzZSBpZiAod2luZG93Qml0cyA+IDE1KSB7XG4gICAgd3JhcCA9IDI7ICAgICAgICAgICAvKiB3cml0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCAqL1xuICAgIHdpbmRvd0JpdHMgLT0gMTY7XG4gIH1cblxuXG4gIGlmIChtZW1MZXZlbCA8IDEgfHwgbWVtTGV2ZWwgPiBNQVhfTUVNX0xFVkVMIHx8IG1ldGhvZCAhPT0gWl9ERUZMQVRFRCB8fFxuICAgIHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSB8fCBsZXZlbCA8IDAgfHwgbGV2ZWwgPiA5IHx8XG4gICAgc3RyYXRlZ3kgPCAwIHx8IHN0cmF0ZWd5ID4gWl9GSVhFRCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cblxuICBpZiAod2luZG93Qml0cyA9PT0gOCkge1xuICAgIHdpbmRvd0JpdHMgPSA5O1xuICB9XG4gIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi9cblxuICB2YXIgcyA9IG5ldyBEZWZsYXRlU3RhdGUoKTtcblxuICBzdHJtLnN0YXRlID0gcztcbiAgcy5zdHJtID0gc3RybTtcblxuICBzLndyYXAgPSB3cmFwO1xuICBzLmd6aGVhZCA9IG51bGw7XG4gIHMud19iaXRzID0gd2luZG93Qml0cztcbiAgcy53X3NpemUgPSAxIDw8IHMud19iaXRzO1xuICBzLndfbWFzayA9IHMud19zaXplIC0gMTtcblxuICBzLmhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcbiAgcy5oYXNoX3NpemUgPSAxIDw8IHMuaGFzaF9iaXRzO1xuICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTtcbiAgcy5oYXNoX3NoaWZ0ID0gfn4oKHMuaGFzaF9iaXRzICsgTUlOX01BVENIIC0gMSkgLyBNSU5fTUFUQ0gpO1xuXG4gIHMud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUgKiAyKTtcbiAgcy5oZWFkID0gbmV3IHV0aWxzLkJ1ZjE2KHMuaGFzaF9zaXplKTtcbiAgcy5wcmV2ID0gbmV3IHV0aWxzLkJ1ZjE2KHMud19zaXplKTtcblxuICAvLyBEb24ndCBuZWVkIG1lbSBpbml0IG1hZ2ljIGZvciBKUy5cbiAgLy9zLmhpZ2hfd2F0ZXIgPSAwOyAgLyogbm90aGluZyB3cml0dGVuIHRvIHMtPndpbmRvdyB5ZXQgKi9cblxuICBzLmxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLyogMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHQgKi9cblxuICBzLnBlbmRpbmdfYnVmX3NpemUgPSBzLmxpdF9idWZzaXplICogNDtcblxuICAvL292ZXJsYXkgPSAodXNoZiAqKSBaQUxMT0Moc3RybSwgcy0+bGl0X2J1ZnNpemUsIHNpemVvZih1c2gpKzIpO1xuICAvL3MtPnBlbmRpbmdfYnVmID0gKHVjaGYgKikgb3ZlcmxheTtcbiAgcy5wZW5kaW5nX2J1ZiA9IG5ldyB1dGlscy5CdWY4KHMucGVuZGluZ19idWZfc2l6ZSk7XG5cbiAgLy8gSXQgaXMgb2Zmc2V0IGZyb20gYHMucGVuZGluZ19idWZgIChzaXplIGlzIGBzLmxpdF9idWZzaXplICogMmApXG4gIC8vcy0+ZF9idWYgPSBvdmVybGF5ICsgcy0+bGl0X2J1ZnNpemUvc2l6ZW9mKHVzaCk7XG4gIHMuZF9idWYgPSAxICogcy5saXRfYnVmc2l6ZTtcblxuICAvL3MtPmxfYnVmID0gcy0+cGVuZGluZ19idWYgKyAoMStzaXplb2YodXNoKSkqcy0+bGl0X2J1ZnNpemU7XG4gIHMubF9idWYgPSAoMSArIDIpICogcy5saXRfYnVmc2l6ZTtcblxuICBzLmxldmVsID0gbGV2ZWw7XG4gIHMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgcy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgcmV0dXJuIGRlZmxhdGVSZXNldChzdHJtKTtcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZUluaXQoc3RybSwgbGV2ZWwpIHtcbiAgcmV0dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCwgTUFYX1dCSVRTLCBERUZfTUVNX0xFVkVMLCBaX0RFRkFVTFRfU1RSQVRFR1kpO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGUoc3RybSwgZmx1c2gpIHtcbiAgdmFyIG9sZF9mbHVzaCwgcztcbiAgdmFyIGJlZywgdmFsOyAvLyBmb3IgZ3ppcCBoZWFkZXIgd3JpdGUgb25seVxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fFxuICAgIGZsdXNoID4gWl9CTE9DSyB8fCBmbHVzaCA8IDApIHtcbiAgICByZXR1cm4gc3RybSA/IGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUikgOiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHMgPSBzdHJtLnN0YXRlO1xuXG4gIGlmICghc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB8fFxuICAgICAgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgZmx1c2ggIT09IFpfRklOSVNIKSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSA/IFpfQlVGX0VSUk9SIDogWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgcy5zdHJtID0gc3RybTsgLyoganVzdCBpbiBjYXNlICovXG4gIG9sZF9mbHVzaCA9IHMubGFzdF9mbHVzaDtcbiAgcy5sYXN0X2ZsdXNoID0gZmx1c2g7XG5cbiAgLyogV3JpdGUgdGhlIGhlYWRlciAqL1xuICBpZiAocy5zdGF0dXMgPT09IElOSVRfU1RBVEUpIHtcblxuICAgIGlmIChzLndyYXAgPT09IDIpIHsgLy8gR1pJUCBoZWFkZXJcbiAgICAgIHN0cm0uYWRsZXIgPSAwOyAgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDMxKTtcbiAgICAgIHB1dF9ieXRlKHMsIDEzOSk7XG4gICAgICBwdXRfYnl0ZShzLCA4KTtcbiAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgT1NfQ09ERSk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGV4dCA/IDEgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzLmd6aGVhZC5oY3JjID8gMiA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQubmFtZSA/IDAgOiA4KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuY29tbWVudCA/IDAgOiAxNilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC50aW1lICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDgpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDE2KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAyNCkgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuICAgICAgICAgICAgICAgICAgICAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/XG4gICAgICAgICAgICAgICAgICAgICA0IDogMCkpO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5vcyAmIDB4ZmYpO1xuICAgICAgICBpZiAocy5nemhlYWQuZXh0cmEgJiYgcy5nemhlYWQuZXh0cmEubGVuZ3RoKSB7XG4gICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZik7XG4gICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBFWFRSQV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSAvLyBERUZMQVRFIGhlYWRlclxuICAgIHtcbiAgICAgIHZhciBoZWFkZXIgPSAoWl9ERUZMQVRFRCArICgocy53X2JpdHMgLSA4KSA8PCA0KSkgPDwgODtcbiAgICAgIHZhciBsZXZlbF9mbGFncyA9IC0xO1xuXG4gICAgICBpZiAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPCA2KSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMTtcbiAgICAgIH0gZWxzZSBpZiAocy5sZXZlbCA9PT0gNikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDM7XG4gICAgICB9XG4gICAgICBoZWFkZXIgfD0gKGxldmVsX2ZsYWdzIDw8IDYpO1xuICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHsgaGVhZGVyIHw9IFBSRVNFVF9ESUNUOyB9XG4gICAgICBoZWFkZXIgKz0gMzEgLSAoaGVhZGVyICUgMzEpO1xuXG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICBwdXRTaG9ydE1TQihzLCBoZWFkZXIpO1xuXG4gICAgICAvKiBTYXZlIHRoZSBhZGxlcjMyIG9mIHRoZSBwcmVzZXQgZGljdGlvbmFyeTogKi9cbiAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7XG4gICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcbiAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gICAgICB9XG4gICAgICBzdHJtLmFkbGVyID0gMTsgLy8gYWRsZXIzMigwTCwgWl9OVUxMLCAwKTtcbiAgICB9XG4gIH1cblxuLy8jaWZkZWYgR1pJUFxuICBpZiAocy5zdGF0dXMgPT09IEVYVFJBX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmV4dHJhLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cblxuICAgICAgd2hpbGUgKHMuZ3ppbmRleCA8IChzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmZmYpKSB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmFbcy5nemluZGV4XSAmIDB4ZmYpO1xuICAgICAgICBzLmd6aW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3ppbmRleCA9PT0gcy5nemhlYWQuZXh0cmEubGVuZ3RoKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gTkFNRV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5uYW1lLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIC8vaW50IHZhbDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgdmFsID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQubmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG4gICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmNvbW1lbnQvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5jb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xuICAgICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IEhDUkNfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuaGNyYykge1xuICAgICAgaWYgKHMucGVuZGluZyArIDIgPiBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyIDw9IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG4gICAgICAgIHN0cm0uYWRsZXIgPSAwOyAvL2NyYzMyKDBMLCBaX05VTEwsIDApO1xuICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgIH1cbiAgfVxuLy8jZW5kaWZcblxuICAvKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlICovXG4gIGlmIChzLnBlbmRpbmcgIT09IDApIHtcbiAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgLyogU2luY2UgYXZhaWxfb3V0IGlzIDAsIGRlZmxhdGUgd2lsbCBiZSBjYWxsZWQgYWdhaW4gd2l0aFxuICAgICAgICogbW9yZSBvdXRwdXQgc3BhY2UsIGJ1dCBwb3NzaWJseSB3aXRoIGJvdGggcGVuZGluZyBhbmRcbiAgICAgICAqIGF2YWlsX2luIGVxdWFsIHRvIHplcm8uIFRoZXJlIHdvbid0IGJlIGFueXRoaW5nIHRvIGRvLFxuICAgICAgICogYnV0IHRoaXMgaXMgbm90IGFuIGVycm9yIHNpdHVhdGlvbiBzbyBtYWtlIHN1cmUgd2VcbiAgICAgICAqIHJldHVybiBPSyBpbnN0ZWFkIG9mIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwgb2YgZGVmbGF0ZTpcbiAgICAgICAqL1xuICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICByZXR1cm4gWl9PSztcbiAgICB9XG5cbiAgICAvKiBNYWtlIHN1cmUgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGRvIGFuZCBhdm9pZCBkdXBsaWNhdGUgY29uc2VjdXRpdmVcbiAgICAgKiBmbHVzaGVzLiBGb3IgcmVwZWF0ZWQgYW5kIHVzZWxlc3MgY2FsbHMgd2l0aCBaX0ZJTklTSCwgd2Uga2VlcFxuICAgICAqIHJldHVybmluZyBaX1NUUkVBTV9FTkQgaW5zdGVhZCBvZiBaX0JVRl9FUlJPUi5cbiAgICAgKi9cbiAgfSBlbHNlIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHJhbmsoZmx1c2gpIDw9IHJhbmsob2xkX2ZsdXNoKSAmJlxuICAgIGZsdXNoICE9PSBaX0ZJTklTSCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpO1xuICB9XG5cbiAgLyogVXNlciBtdXN0IG5vdCBwcm92aWRlIG1vcmUgaW5wdXQgYWZ0ZXIgdGhlIGZpcnN0IEZJTklTSDogKi9cbiAgaWYgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpO1xuICB9XG5cbiAgLyogU3RhcnQgYSBuZXcgYmxvY2sgb3IgY29udGludWUgdGhlIGN1cnJlbnQgb25lLlxuICAgKi9cbiAgaWYgKHN0cm0uYXZhaWxfaW4gIT09IDAgfHwgcy5sb29rYWhlYWQgIT09IDAgfHxcbiAgICAoZmx1c2ggIT09IFpfTk9fRkxVU0ggJiYgcy5zdGF0dXMgIT09IEZJTklTSF9TVEFURSkpIHtcbiAgICB2YXIgYnN0YXRlID0gKHMuc3RyYXRlZ3kgPT09IFpfSFVGRk1BTl9PTkxZKSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOlxuICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfUkxFID8gZGVmbGF0ZV9ybGUocywgZmx1c2gpIDpcbiAgICAgICAgY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5mdW5jKHMsIGZsdXNoKSk7XG5cbiAgICBpZiAoYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9ET05FKSB7XG4gICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTtcbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfTkVFRF9NT1JFIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQpIHtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgLyogYXZvaWQgQlVGX0VSUk9SIG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICB9XG4gICAgICByZXR1cm4gWl9PSztcbiAgICAgIC8qIElmIGZsdXNoICE9IFpfTk9fRkxVU0ggJiYgYXZhaWxfb3V0ID09IDAsIHRoZSBuZXh0IGNhbGxcbiAgICAgICAqIG9mIGRlZmxhdGUgc2hvdWxkIHVzZSB0aGUgc2FtZSBmbHVzaCBwYXJhbWV0ZXIgdG8gbWFrZSBzdXJlXG4gICAgICAgKiB0aGF0IHRoZSBmbHVzaCBpcyBjb21wbGV0ZS4gU28gd2UgZG9uJ3QgaGF2ZSB0byBvdXRwdXQgYW5cbiAgICAgICAqIGVtcHR5IGJsb2NrIGhlcmUsIHRoaXMgd2lsbCBiZSBkb25lIGF0IG5leHQgY2FsbC4gVGhpcyBhbHNvXG4gICAgICAgKiBlbnN1cmVzIHRoYXQgZm9yIGEgdmVyeSBzbWFsbCBvdXRwdXQgYnVmZmVyLCB3ZSBlbWl0IGF0IG1vc3RcbiAgICAgICAqIG9uZSBlbXB0eSBibG9jay5cbiAgICAgICAqL1xuICAgIH1cbiAgICBpZiAoYnN0YXRlID09PSBCU19CTE9DS19ET05FKSB7XG4gICAgICBpZiAoZmx1c2ggPT09IFpfUEFSVElBTF9GTFVTSCkge1xuICAgICAgICB0cmVlcy5fdHJfYWxpZ24ocyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChmbHVzaCAhPT0gWl9CTE9DSykgeyAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi9cblxuICAgICAgICB0cmVlcy5fdHJfc3RvcmVkX2Jsb2NrKHMsIDAsIDAsIGZhbHNlKTtcbiAgICAgICAgLyogRm9yIGEgZnVsbCBmbHVzaCwgdGhpcyBlbXB0eSBibG9jayB3aWxsIGJlIHJlY29nbml6ZWRcbiAgICAgICAgICogYXMgYSBzcGVjaWFsIG1hcmtlciBieSBpbmZsYXRlX3N5bmMoKS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9GVUxMX0ZMVVNIKSB7XG4gICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovICAgICAgICAgICAgIC8qIGZvcmdldCBoaXN0b3J5ICovXG4gICAgICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG4gICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5pbnNlcnQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsgLyogYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICAgIHJldHVybiBaX09LO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvL0Fzc2VydChzdHJtLT5hdmFpbF9vdXQgPiAwLCBcImJ1ZzJcIik7XG4gIC8vaWYgKHN0cm0uYXZhaWxfb3V0IDw9IDApIHsgdGhyb3cgbmV3IEVycm9yKFwiYnVnMlwiKTt9XG5cbiAgaWYgKGZsdXNoICE9PSBaX0ZJTklTSCkgeyByZXR1cm4gWl9PSzsgfVxuICBpZiAocy53cmFwIDw9IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VORDsgfVxuXG4gIC8qIFdyaXRlIHRoZSB0cmFpbGVyICovXG4gIGlmIChzLndyYXAgPT09IDIpIHtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAyNCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLnRvdGFsX2luICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAyNCkgJiAweGZmKTtcbiAgfVxuICBlbHNlXG4gIHtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gIH1cblxuICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAvKiBJZiBhdmFpbF9vdXQgaXMgemVybywgdGhlIGFwcGxpY2F0aW9uIHdpbGwgY2FsbCBkZWZsYXRlIGFnYWluXG4gICAqIHRvIGZsdXNoIHRoZSByZXN0LlxuICAgKi9cbiAgaWYgKHMud3JhcCA+IDApIHsgcy53cmFwID0gLXMud3JhcDsgfVxuICAvKiB3cml0ZSB0aGUgdHJhaWxlciBvbmx5IG9uY2UhICovXG4gIHJldHVybiBzLnBlbmRpbmcgIT09IDAgPyBaX09LIDogWl9TVFJFQU1fRU5EO1xufVxuXG5mdW5jdGlvbiBkZWZsYXRlRW5kKHN0cm0pIHtcbiAgdmFyIHN0YXR1cztcblxuICBpZiAoIXN0cm0vKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlLyo9PSBaX05VTEwqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHN0YXR1cyA9IHN0cm0uc3RhdGUuc3RhdHVzO1xuICBpZiAoc3RhdHVzICE9PSBJTklUX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBFWFRSQV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gTkFNRV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gQ09NTUVOVF9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gSENSQ19TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gQlVTWV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gRklOSVNIX1NUQVRFXG4gICkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG5cbiAgcmV0dXJuIHN0YXR1cyA9PT0gQlVTWV9TVEFURSA/IGVycihzdHJtLCBaX0RBVEFfRVJST1IpIDogWl9PSztcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplcyB0aGUgY29tcHJlc3Npb24gZGljdGlvbmFyeSBmcm9tIHRoZSBnaXZlbiBieXRlXG4gKiBzZXF1ZW5jZSB3aXRob3V0IHByb2R1Y2luZyBhbnkgY29tcHJlc3NlZCBvdXRwdXQuXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHtcbiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICB2YXIgcztcbiAgdmFyIHN0ciwgbjtcbiAgdmFyIHdyYXA7XG4gIHZhciBhdmFpbDtcbiAgdmFyIG5leHQ7XG4gIHZhciBpbnB1dDtcbiAgdmFyIHRtcERpY3Q7XG5cbiAgaWYgKCFzdHJtLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZS8qPT0gWl9OVUxMKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzID0gc3RybS5zdGF0ZTtcbiAgd3JhcCA9IHMud3JhcDtcblxuICBpZiAod3JhcCA9PT0gMiB8fCAod3JhcCA9PT0gMSAmJiBzLnN0YXR1cyAhPT0gSU5JVF9TVEFURSkgfHwgcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICAvKiB3aGVuIHVzaW5nIHpsaWIgd3JhcHBlcnMsIGNvbXB1dGUgQWRsZXItMzIgZm9yIHByb3ZpZGVkIGRpY3Rpb25hcnkgKi9cbiAgaWYgKHdyYXAgPT09IDEpIHtcbiAgICAvKiBhZGxlcjMyKHN0cm0tPmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cbiAgICBzdHJtLmFkbGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgfVxuXG4gIHMud3JhcCA9IDA7ICAgLyogYXZvaWQgY29tcHV0aW5nIEFkbGVyLTMyIGluIHJlYWRfYnVmICovXG5cbiAgLyogaWYgZGljdGlvbmFyeSB3b3VsZCBmaWxsIHdpbmRvdywganVzdCByZXBsYWNlIHRoZSBoaXN0b3J5ICovXG4gIGlmIChkaWN0TGVuZ3RoID49IHMud19zaXplKSB7XG4gICAgaWYgKHdyYXAgPT09IDApIHsgICAgICAgICAgICAvKiBhbHJlYWR5IGVtcHR5IG90aGVyd2lzZSAqL1xuICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG4gICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgcy5pbnNlcnQgPSAwO1xuICAgIH1cbiAgICAvKiB1c2UgdGhlIHRhaWwgKi9cbiAgICAvLyBkaWN0aW9uYXJ5ID0gZGljdGlvbmFyeS5zbGljZShkaWN0TGVuZ3RoIC0gcy53X3NpemUpO1xuICAgIHRtcERpY3QgPSBuZXcgdXRpbHMuQnVmOChzLndfc2l6ZSk7XG4gICAgdXRpbHMuYXJyYXlTZXQodG1wRGljdCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCAtIHMud19zaXplLCBzLndfc2l6ZSwgMCk7XG4gICAgZGljdGlvbmFyeSA9IHRtcERpY3Q7XG4gICAgZGljdExlbmd0aCA9IHMud19zaXplO1xuICB9XG4gIC8qIGluc2VydCBkaWN0aW9uYXJ5IGludG8gd2luZG93IGFuZCBoYXNoICovXG4gIGF2YWlsID0gc3RybS5hdmFpbF9pbjtcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gZGljdExlbmd0aDtcbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5pbnB1dCA9IGRpY3Rpb25hcnk7XG4gIGZpbGxfd2luZG93KHMpO1xuICB3aGlsZSAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgc3RyID0gcy5zdHJzdGFydDtcbiAgICBuID0gcy5sb29rYWhlYWQgLSAoTUlOX01BVENIIC0gMSk7XG4gICAgZG8ge1xuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG5cbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgIHN0cisrO1xuICAgIH0gd2hpbGUgKC0tbik7XG4gICAgcy5zdHJzdGFydCA9IHN0cjtcbiAgICBzLmxvb2thaGVhZCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgZmlsbF93aW5kb3cocyk7XG4gIH1cbiAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmlucHV0ID0gaW5wdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBhdmFpbDtcbiAgcy53cmFwID0gd3JhcDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZXhwb3J0cy5kZWZsYXRlSW5pdCA9IGRlZmxhdGVJbml0O1xuZXhwb3J0cy5kZWZsYXRlSW5pdDIgPSBkZWZsYXRlSW5pdDI7XG5leHBvcnRzLmRlZmxhdGVSZXNldCA9IGRlZmxhdGVSZXNldDtcbmV4cG9ydHMuZGVmbGF0ZVJlc2V0S2VlcCA9IGRlZmxhdGVSZXNldEtlZXA7XG5leHBvcnRzLmRlZmxhdGVTZXRIZWFkZXIgPSBkZWZsYXRlU2V0SGVhZGVyO1xuZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcbmV4cG9ydHMuZGVmbGF0ZUVuZCA9IGRlZmxhdGVFbmQ7XG5leHBvcnRzLmRlZmxhdGVTZXREaWN0aW9uYXJ5ID0gZGVmbGF0ZVNldERpY3Rpb25hcnk7XG5leHBvcnRzLmRlZmxhdGVJbmZvID0gJ3Bha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknO1xuXG4vKiBOb3QgaW1wbGVtZW50ZWRcbmV4cG9ydHMuZGVmbGF0ZUJvdW5kID0gZGVmbGF0ZUJvdW5kO1xuZXhwb3J0cy5kZWZsYXRlQ29weSA9IGRlZmxhdGVDb3B5O1xuZXhwb3J0cy5kZWZsYXRlUGFyYW1zID0gZGVmbGF0ZVBhcmFtcztcbmV4cG9ydHMuZGVmbGF0ZVBlbmRpbmcgPSBkZWZsYXRlUGVuZGluZztcbmV4cG9ydHMuZGVmbGF0ZVByaW1lID0gZGVmbGF0ZVByaW1lO1xuZXhwb3J0cy5kZWZsYXRlVHVuZSA9IGRlZmxhdGVUdW5lO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBHWmhlYWRlcigpIHtcbiAgLyogdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dCAqL1xuICB0aGlzLnRleHQgICAgICAgPSAwO1xuICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xuICB0aGlzLnRpbWUgICAgICAgPSAwO1xuICAvKiBleHRyYSBmbGFncyAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLnhmbGFncyAgICAgPSAwO1xuICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXG4gIHRoaXMub3MgICAgICAgICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gZXh0cmEgZmllbGQgb3IgWl9OVUxMIGlmIG5vbmUgKi9cbiAgdGhpcy5leHRyYSAgICAgID0gbnVsbDtcbiAgLyogZXh0cmEgZmllbGQgbGVuZ3RoICh2YWxpZCBpZiBleHRyYSAhPSBaX05VTEwpICovXG4gIHRoaXMuZXh0cmFfbGVuICA9IDA7IC8vIEFjdHVhbGx5LCB3ZSBkb24ndCBuZWVkIGl0IGluIEpTLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnNcblxuICAvL1xuICAvLyBTZXR1cCBsaW1pdHMgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5XG4gIC8vIGZvciBpbmZsYXRlIHVzZSBjb25zdGFudCBsaW1pdCBpbiA2NTUzNiBieXRlc1xuICAvL1xuXG4gIC8qIHNwYWNlIGF0IGV4dHJhIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGZpbGUgbmFtZSBvciBaX05VTEwgKi9cbiAgdGhpcy5uYW1lICAgICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IG5hbWUgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5uYW1lX21heCAgID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgY29tbWVudCBvciBaX05VTEwgKi9cbiAgdGhpcy5jb21tZW50ICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5jb21tX21heCAgID0gMDtcbiAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cbiAgdGhpcy5oY3JjICAgICAgID0gMDtcbiAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLmRvbmUgICAgICAgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHWmhlYWRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcbnZhciBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cbi8qXG4gICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nXG4gICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcbiAgIGF2YWlsYWJsZSwgYW4gZW5kLW9mLWJsb2NrIGlzIGVuY291bnRlcmVkLCBvciBhIGRhdGEgZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICBXaGVuIGxhcmdlIGVub3VnaCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yXG4gICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXG4gICBpbmZsYXRlIGV4ZWN1dGlvbiB0aW1lIGlzIHNwZW50IGluIHRoaXMgcm91dGluZS5cblxuICAgRW50cnkgYXNzdW1wdGlvbnM6XG5cbiAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOXG4gICAgICAgIHN0cm0uYXZhaWxfaW4gPj0gNlxuICAgICAgICBzdHJtLmF2YWlsX291dCA+PSAyNThcbiAgICAgICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXRcbiAgICAgICAgc3RhdGUuYml0cyA8IDhcblxuICAgT24gcmV0dXJuLCBzdGF0ZS5tb2RlIGlzIG9uZSBvZjpcblxuICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcbiAgICAgICAgVFlQRSAtLSByZWFjaGVkIGVuZCBvZiBibG9jayBjb2RlLCBpbmZsYXRlKCkgdG8gaW50ZXJwcmV0IG5leHQgYmxvY2tcbiAgICAgICAgQkFEIC0tIGVycm9yIGluIGJsb2NrIGRhdGFcblxuICAgTm90ZXM6XG5cbiAgICAtIFRoZSBtYXhpbXVtIGlucHV0IGJpdHMgdXNlZCBieSBhIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGlzIDE1IGJpdHMgZm9yIHRoZVxuICAgICAgbGVuZ3RoIGNvZGUsIDUgYml0cyBmb3IgdGhlIGxlbmd0aCBleHRyYSwgMTUgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGNvZGUsXG4gICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxuICAgICAgVGhlcmVmb3JlIGlmIHN0cm0uYXZhaWxfaW4gPj0gNiwgdGhlbiB0aGVyZSBpcyBlbm91Z2ggaW5wdXQgdG8gYXZvaWRcbiAgICAgIGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuXG5cbiAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNThcbiAgICAgIGJ5dGVzLCB3aGljaCBpcyB0aGUgbWF4aW11bSBsZW5ndGggdGhhdCBjYW4gYmUgY29kZWQuICBpbmZsYXRlX2Zhc3QoKVxuICAgICAgcmVxdWlyZXMgc3RybS5hdmFpbF9vdXQgPj0gMjU4IGZvciBlYWNoIGxvb3AgdG8gYXZvaWQgY2hlY2tpbmcgZm9yXG4gICAgICBvdXRwdXQgc3BhY2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIF9pbjsgICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi9cbiAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICB2YXIgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGJlZzsgICAgICAgICAgICAgICAgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgdmFyIGRtYXg7ICAgICAgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xuLy8jZW5kaWZcbiAgdmFyIHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB2YXIgd2hhdmU7ICAgICAgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIC8vIFVzZSBgc193aW5kb3dgIGluc3RlYWQgYHdpbmRvd2AsIGF2b2lkIGNvbmZsaWN0IHdpdGggaW5zdHJ1bWVudGF0aW9uIHRvb2xzXG4gIHZhciBzX3dpbmRvdzsgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5iaXRzICovXG4gIHZhciBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cbiAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgdmFyIGxtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxlbmd0aCBjb2RlcyAqL1xuICB2YXIgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cbiAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgb3A7ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBiaXRzLCBvcGVyYXRpb24sIGV4dHJhIGJpdHMsIG9yICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgdmFyIGRpc3Q7ICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuXG5cbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblxuICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIC8vaGVyZSA9IHN0YXRlLmhlcmU7XG4gIF9pbiA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTtcbiAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpO1xuICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gIGRtYXggPSBzdGF0ZS5kbWF4O1xuLy8jZW5kaWZcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcbiAgd25leHQgPSBzdGF0ZS53bmV4dDtcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlO1xuICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXG4gICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXG5cbiAgdG9wOlxuICBkbyB7XG4gICAgaWYgKGJpdHMgPCAxNSkge1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICBiaXRzICs9IDg7XG4gICAgfVxuXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XG5cbiAgICBkb2xlbjpcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXG4gICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgIGJpdHMgLT0gb3A7XG4gICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG4gICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgIGlmIChvcCkge1xuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XG5cbiAgICAgICAgZG9kaXN0OlxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xuICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhaWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgY29udGludWUgZG9sZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgdXRpbHMgICAgICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xudmFyIGFkbGVyMzIgICAgICAgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcbnZhciBjcmMzMiAgICAgICAgID0gcmVxdWlyZSgnLi9jcmMzMicpO1xudmFyIGluZmxhdGVfZmFzdCAgPSByZXF1aXJlKCcuL2luZmZhc3QnKTtcbnZhciBpbmZsYXRlX3RhYmxlID0gcmVxdWlyZSgnLi9pbmZ0cmVlcycpO1xuXG52YXIgQ09ERVMgPSAwO1xudmFyIExFTlMgPSAxO1xudmFyIERJU1RTID0gMjtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuLy92YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbi8vdmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7XG4vL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xuLy92YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcbnZhciBaX0ZJTklTSCAgICAgICAgPSA0O1xudmFyIFpfQkxPQ0sgICAgICAgICA9IDU7XG52YXIgWl9UUkVFUyAgICAgICAgID0gNjtcblxuXG4vKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gKi9cbnZhciBaX09LICAgICAgICAgICAgPSAwO1xudmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG52YXIgWl9ORUVEX0RJQ1QgICAgID0gMjtcbi8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xO1xudmFyIFpfU1RSRUFNX0VSUk9SICA9IC0yO1xudmFyIFpfREFUQV9FUlJPUiAgICA9IC0zO1xudmFyIFpfTUVNX0VSUk9SICAgICA9IC00O1xudmFyIFpfQlVGX0VSUk9SICAgICA9IC01O1xuLy92YXIgWl9WRVJTSU9OX0VSUk9SID0gLTY7XG5cbi8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xudmFyIFpfREVGTEFURUQgID0gODtcblxuXG4vKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG52YXIgICAgSEVBRCA9IDE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1hZ2ljIGhlYWRlciAqL1xudmFyICAgIEZMQUdTID0gMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtZXRob2QgYW5kIGZsYWdzIChnemlwKSAqL1xudmFyICAgIFRJTUUgPSAzOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cbnZhciAgICBPUyA9IDQ7ICAgICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXG52YXIgICAgRVhMRU4gPSA1OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGxlbmd0aCAoZ3ppcCkgKi9cbnZhciAgICBFWFRSQSA9IDY7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXG52YXIgICAgTkFNRSA9IDc7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBmaWxlIG5hbWUgKGd6aXApICovXG52YXIgICAgQ09NTUVOVCA9IDg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBjb21tZW50IChnemlwKSAqL1xudmFyICAgIEhDUkMgPSA5OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xudmFyICAgIERJQ1RJRCA9IDEwOyAgICAvKiBpOiB3YWl0aW5nIGZvciBkaWN0aW9uYXJ5IGNoZWNrIHZhbHVlICovXG52YXIgICAgRElDVCA9IDExOyAgICAgIC8qIHdhaXRpbmcgZm9yIGluZmxhdGVTZXREaWN0aW9uYXJ5KCkgY2FsbCAqL1xudmFyICAgICAgICBUWVBFID0gMTI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xudmFyICAgICAgICBUWVBFRE8gPSAxMzsgICAgLyogaTogc2FtZSwgYnV0IHNraXAgY2hlY2sgdG8gZXhpdCBpbmZsYXRlIG9uIG5ldyBibG9jayAqL1xudmFyICAgICAgICBTVE9SRUQgPSAxNDsgICAgLyogaTogd2FpdGluZyBmb3Igc3RvcmVkIHNpemUgKGxlbmd0aCBhbmQgY29tcGxlbWVudCkgKi9cbnZhciAgICAgICAgQ09QWV8gPSAxNTsgICAgIC8qIGkvbzogc2FtZSBhcyBDT1BZIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG52YXIgICAgICAgIENPUFkgPSAxNjsgICAgICAvKiBpL286IHdhaXRpbmcgZm9yIGlucHV0IG9yIG91dHB1dCB0byBjb3B5IHN0b3JlZCBibG9jayAqL1xudmFyICAgICAgICBUQUJMRSA9IDE3OyAgICAgLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0YWJsZSBsZW5ndGhzICovXG52YXIgICAgICAgIExFTkxFTlMgPSAxODsgICAvKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbnZhciAgICAgICAgQ09ERUxFTlMgPSAxOTsgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQgYW5kIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xudmFyICAgICAgICAgICAgTEVOXyA9IDIwOyAgICAgIC8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG52YXIgICAgICAgICAgICBMRU4gPSAyMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdC9lb2IgY29kZSAqL1xudmFyICAgICAgICAgICAgTEVORVhUID0gMjI7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aCBleHRyYSBiaXRzICovXG52YXIgICAgICAgICAgICBESVNUID0gMjM7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgY29kZSAqL1xudmFyICAgICAgICAgICAgRElTVEVYVCA9IDI0OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cbnZhciAgICAgICAgICAgIE1BVENIID0gMjU7ICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gY29weSBzdHJpbmcgKi9cbnZhciAgICAgICAgICAgIExJVCA9IDI2OyAgICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gd3JpdGUgbGl0ZXJhbCAqL1xudmFyICAgIENIRUNLID0gMjc7ICAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi9cbnZhciAgICBMRU5HVEggPSAyODsgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi9cbnZhciAgICBET05FID0gMjk7ICAgICAgLyogZmluaXNoZWQgY2hlY2ssIGRvbmUgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciAgICBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyICAgIE1FTSA9IDMxOyAgICAgICAvKiBnb3QgYW4gaW5mbGF0ZSgpIG1lbW9yeSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyICAgIFNZTkMgPSAzMjsgICAgICAvKiBsb29raW5nIGZvciBzeW5jaHJvbml6YXRpb24gYnl0ZXMgdG8gcmVzdGFydCBpbmZsYXRlKCkgKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cbnZhciBFTk9VR0hfTEVOUyA9IDg1MjtcbnZhciBFTk9VR0hfRElTVFMgPSA1OTI7XG4vL3ZhciBFTk9VR0ggPSAgKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbnZhciBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xudmFyIERFRl9XQklUUyA9IE1BWF9XQklUUztcblxuXG5mdW5jdGlvbiB6c3dhcDMyKHEpIHtcbiAgcmV0dXJuICAoKChxID4+PiAyNCkgJiAweGZmKSArXG4gICAgICAgICAgKChxID4+PiA4KSAmIDB4ZmYwMCkgK1xuICAgICAgICAgICgocSAmIDB4ZmYwMCkgPDwgOCkgK1xuICAgICAgICAgICgocSAmIDB4ZmYpIDw8IDI0KSk7XG59XG5cblxuZnVuY3Rpb24gSW5mbGF0ZVN0YXRlKCkge1xuICB0aGlzLm1vZGUgPSAwOyAgICAgICAgICAgICAvKiBjdXJyZW50IGluZmxhdGUgbW9kZSAqL1xuICB0aGlzLmxhc3QgPSBmYWxzZTsgICAgICAgICAgLyogdHJ1ZSBpZiBwcm9jZXNzaW5nIGxhc3QgYmxvY2sgKi9cbiAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cbiAgdGhpcy5oYXZlZGljdCA9IGZhbHNlOyAgICAgIC8qIHRydWUgaWYgZGljdGlvbmFyeSBwcm92aWRlZCAqL1xuICB0aGlzLmZsYWdzID0gMDsgICAgICAgICAgICAgLyogZ3ppcCBoZWFkZXIgbWV0aG9kIGFuZCBmbGFncyAoMCBpZiB6bGliKSAqL1xuICB0aGlzLmRtYXggPSAwOyAgICAgICAgICAgICAgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi9cbiAgdGhpcy5jaGVjayA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIGNoZWNrIHZhbHVlICovXG4gIHRoaXMudG90YWwgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBvdXRwdXQgY291bnQgKi9cbiAgLy8gVE9ETzogbWF5IGJlIHt9XG4gIHRoaXMuaGVhZCA9IG51bGw7ICAgICAgICAgICAvKiB3aGVyZSB0byBzYXZlIGd6aXAgaGVhZGVyIGluZm9ybWF0aW9uICovXG5cbiAgLyogc2xpZGluZyB3aW5kb3cgKi9cbiAgdGhpcy53Yml0cyA9IDA7ICAgICAgICAgICAgIC8qIGxvZyBiYXNlIDIgb2YgcmVxdWVzdGVkIHdpbmRvdyBzaXplICovXG4gIHRoaXMud3NpemUgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5kb3cgKi9cbiAgdGhpcy53aGF2ZSA9IDA7ICAgICAgICAgICAgIC8qIHZhbGlkIGJ5dGVzIGluIHRoZSB3aW5kb3cgKi9cbiAgdGhpcy53bmV4dCA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyB3cml0ZSBpbmRleCAqL1xuICB0aGlzLndpbmRvdyA9IG51bGw7ICAgICAgICAgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiBuZWVkZWQgKi9cblxuICAvKiBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5ob2xkID0gMDsgICAgICAgICAgICAgIC8qIGlucHV0IGJpdCBhY2N1bXVsYXRvciAqL1xuICB0aGlzLmJpdHMgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGJpdHMgaW4gXCJpblwiICovXG5cbiAgLyogZm9yIHN0cmluZyBhbmQgc3RvcmVkIGJsb2NrIGNvcHlpbmcgKi9cbiAgdGhpcy5sZW5ndGggPSAwOyAgICAgICAgICAgIC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqL1xuICB0aGlzLm9mZnNldCA9IDA7ICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayB0byBjb3B5IHN0cmluZyBmcm9tICovXG5cbiAgLyogZm9yIHRhYmxlIGFuZCBjb2RlIGRlY29kaW5nICovXG4gIHRoaXMuZXh0cmEgPSAwOyAgICAgICAgICAgICAvKiBleHRyYSBiaXRzIG5lZWRlZCAqL1xuXG4gIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuY29kZSA9IG51bGw7ICAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAqL1xuICB0aGlzLmRpc3Rjb2RlID0gbnVsbDsgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKi9cbiAgdGhpcy5sZW5iaXRzID0gMDsgICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi9cbiAgdGhpcy5kaXN0Yml0cyA9IDA7ICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGRpc3Rjb2RlICovXG5cbiAgLyogZHluYW1pYyB0YWJsZSBidWlsZGluZyAqL1xuICB0aGlzLm5jb2RlID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5sZW4gPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5uZGlzdCA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5oYXZlID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aHMgaW4gbGVuc1tdICovXG4gIHRoaXMubmV4dCA9IG51bGw7ICAgICAgICAgICAgICAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiBjb2Rlc1tdICovXG5cbiAgdGhpcy5sZW5zID0gbmV3IHV0aWxzLkJ1ZjE2KDMyMCk7IC8qIHRlbXBvcmFyeSBzdG9yYWdlIGZvciBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy53b3JrID0gbmV3IHV0aWxzLkJ1ZjE2KDI4OCk7IC8qIHdvcmsgYXJlYSBmb3IgY29kZSB0YWJsZSBidWlsZGluZyAqL1xuXG4gIC8qXG4gICBiZWNhdXNlIHdlIGRvbid0IGhhdmUgcG9pbnRlcnMgaW4ganMsIHdlIHVzZSBsZW5jb2RlIGFuZCBkaXN0Y29kZSBkaXJlY3RseVxuICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzXG4gICovXG4gIC8vdGhpcy5jb2RlcyA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0gpOyAgICAgICAvKiBzcGFjZSBmb3IgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5keW4gPSBudWxsOyAgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLmRpc3RkeW4gPSBudWxsOyAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuc2FuZSA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGlmIGZhbHNlLCBhbGxvdyBpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgKi9cbiAgdGhpcy5iYWNrID0gMDsgICAgICAgICAgICAgICAgICAgLyogYml0cyBiYWNrIG9mIGxhc3QgdW5wcm9jZXNzZWQgbGVuZ3RoL2xpdCAqL1xuICB0aGlzLndhcyA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBpbml0aWFsIGxlbmd0aCBvZiBtYXRjaCAqL1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pIHtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XG4gIHN0cm0ubXNnID0gJyc7IC8qWl9OVUxMKi9cbiAgaWYgKHN0YXRlLndyYXApIHsgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcbiAgfVxuICBzdGF0ZS5tb2RlID0gSEVBRDtcbiAgc3RhdGUubGFzdCA9IDA7XG4gIHN0YXRlLmhhdmVkaWN0ID0gMDtcbiAgc3RhdGUuZG1heCA9IDMyNzY4O1xuICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XG4gIHN0YXRlLmhvbGQgPSAwO1xuICBzdGF0ZS5iaXRzID0gMDtcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIX0xFTlMpO1xuICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIX0RJU1RTKTtcblxuICBzdGF0ZS5zYW5lID0gMTtcbiAgc3RhdGUuYmFjayA9IC0xO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IHJlc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVSZXNldChzdHJtKSB7XG4gIHZhciBzdGF0ZTtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RhdGUud3NpemUgPSAwO1xuICBzdGF0ZS53aGF2ZSA9IDA7XG4gIHN0YXRlLnduZXh0ID0gMDtcbiAgcmV0dXJuIGluZmxhdGVSZXNldEtlZXAoc3RybSk7XG5cbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKSB7XG4gIHZhciB3cmFwO1xuICB2YXIgc3RhdGU7XG5cbiAgLyogZ2V0IHRoZSBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkge1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuICBlbHNlIHtcbiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xuICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHtcbiAgICAgIHdpbmRvd0JpdHMgJj0gMTU7XG4gICAgfVxuICB9XG5cbiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovXG4gIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqL1xuICBzdGF0ZS53cmFwID0gd3JhcDtcbiAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlSW5pdDIoc3RybSwgd2luZG93Qml0cykge1xuICB2YXIgcmV0O1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICAvL3N0cm0ubXNnID0gWl9OVUxMOyAgICAgICAgICAgICAgICAgLyogaW4gY2FzZSB3ZSByZXR1cm4gYW4gZXJyb3IgKi9cblxuICBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTtcblxuICAvL2lmIChzdGF0ZSA9PT0gWl9OVUxMKSByZXR1cm4gWl9NRU1fRVJST1I7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogYWxsb2NhdGVkXFxuXCIpKTtcbiAgc3RybS5zdGF0ZSA9IHN0YXRlO1xuICBzdGF0ZS53aW5kb3cgPSBudWxsLypaX05VTEwqLztcbiAgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcbiAgaWYgKHJldCAhPT0gWl9PSykge1xuICAgIHN0cm0uc3RhdGUgPSBudWxsLypaX05VTEwqLztcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlSW5pdChzdHJtKSB7XG4gIHJldHVybiBpbmZsYXRlSW5pdDIoc3RybSwgREVGX1dCSVRTKTtcbn1cblxuXG4vKlxuIFJldHVybiBzdGF0ZSB3aXRoIGxlbmd0aCBhbmQgZGlzdGFuY2UgZGVjb2RpbmcgdGFibGVzIGFuZCBpbmRleCBzaXplcyBzZXQgdG9cbiBmaXhlZCBjb2RlIGRlY29kaW5nLiAgTm9ybWFsbHkgdGhpcyByZXR1cm5zIGZpeGVkIHRhYmxlcyBmcm9tIGluZmZpeGVkLmguXG4gSWYgQlVJTERGSVhFRCBpcyBkZWZpbmVkLCB0aGVuIGluc3RlYWQgdGhpcyByb3V0aW5lIGJ1aWxkcyB0aGUgdGFibGVzIHRoZVxuIGZpcnN0IHRpbWUgaXQncyBjYWxsZWQsIGFuZCByZXR1cm5zIHRob3NlIHRhYmxlcyB0aGUgZmlyc3QgdGltZSBhbmRcbiB0aGVyZWFmdGVyLiAgVGhpcyByZWR1Y2VzIHRoZSBzaXplIG9mIHRoZSBjb2RlIGJ5IGFib3V0IDJLIGJ5dGVzLCBpblxuIGV4Y2hhbmdlIGZvciBhIGxpdHRsZSBleGVjdXRpb24gdGltZS4gIEhvd2V2ZXIsIEJVSUxERklYRUQgc2hvdWxkIG5vdCBiZVxuIHVzZWQgZm9yIHRocmVhZGVkIGFwcGxpY2F0aW9ucywgc2luY2UgdGhlIHJld3JpdGluZyBvZiB0aGUgdGFibGVzIGFuZCB2aXJnaW5cbiBtYXkgbm90IGJlIHRocmVhZC1zYWZlLlxuICovXG52YXIgdmlyZ2luID0gdHJ1ZTtcblxudmFyIGxlbmZpeCwgZGlzdGZpeDsgLy8gV2UgaGF2ZSBubyBwb2ludGVycyBpbiBKUywgc28ga2VlcCB0YWJsZXMgc2VwYXJhdGVcblxuZnVuY3Rpb24gZml4ZWR0YWJsZXMoc3RhdGUpIHtcbiAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi9cbiAgaWYgKHZpcmdpbikge1xuICAgIHZhciBzeW07XG5cbiAgICBsZW5maXggPSBuZXcgdXRpbHMuQnVmMzIoNTEyKTtcbiAgICBkaXN0Zml4ID0gbmV3IHV0aWxzLkJ1ZjMyKDMyKTtcblxuICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovXG4gICAgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMTQ0KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxuICAgIHdoaWxlIChzeW0gPCAyNTYpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA5OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4MCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDc7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjg4KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxuXG4gICAgaW5mbGF0ZV90YWJsZShMRU5TLCAgc3RhdGUubGVucywgMCwgMjg4LCBsZW5maXgsICAgMCwgc3RhdGUud29yaywgeyBiaXRzOiA5IH0pO1xuXG4gICAgLyogZGlzdGFuY2UgdGFibGUgKi9cbiAgICBzeW0gPSAwO1xuICAgIHdoaWxlIChzeW0gPCAzMikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7IH1cblxuICAgIGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIDAsIDMyLCAgIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHsgYml0czogNSB9KTtcblxuICAgIC8qIGRvIHRoaXMganVzdCBvbmNlICovXG4gICAgdmlyZ2luID0gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5sZW5jb2RlID0gbGVuZml4O1xuICBzdGF0ZS5sZW5iaXRzID0gOTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBkaXN0Zml4O1xuICBzdGF0ZS5kaXN0Yml0cyA9IDU7XG59XG5cblxuLypcbiBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlXG4gcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZFxuIHdoZW4gYSB3aW5kb3cgaXMgYWxyZWFkeSBpbiB1c2UsIG9yIHdoZW4gb3V0cHV0IGhhcyBiZWVuIHdyaXR0ZW4gZHVyaW5nIHRoaXNcbiBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuXG4gSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnlcbiBpcyBsb2FkZWQuXG5cbiBQcm92aWRpbmcgb3V0cHV0IGJ1ZmZlcnMgbGFyZ2VyIHRoYW4gMzJLIHRvIGluZmxhdGUoKSBzaG91bGQgcHJvdmlkZSBhIHNwZWVkXG4gYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xuIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mXG4gb3V0cHV0IHdpbGwgZmFsbCBpbiB0aGUgb3V0cHV0IGRhdGEsIG1ha2luZyBtYXRjaCBjb3BpZXMgc2ltcGxlciBhbmQgZmFzdGVyLlxuIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZXdpbmRvdyhzdHJtLCBzcmMsIGVuZCwgY29weSkge1xuICB2YXIgZGlzdDtcbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovXG4gIGlmIChzdGF0ZS53aW5kb3cgPT09IG51bGwpIHtcbiAgICBzdGF0ZS53c2l6ZSA9IDEgPDwgc3RhdGUud2JpdHM7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gMDtcblxuICAgIHN0YXRlLndpbmRvdyA9IG5ldyB1dGlscy5CdWY4KHN0YXRlLndzaXplKTtcbiAgfVxuXG4gIC8qIGNvcHkgc3RhdGUtPndzaXplIG9yIGxlc3Mgb3V0cHV0IGJ5dGVzIGludG8gdGhlIGNpcmN1bGFyIHdpbmRvdyAqL1xuICBpZiAoY29weSA+PSBzdGF0ZS53c2l6ZSkge1xuICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBzdGF0ZS53c2l6ZSwgc3RhdGUud3NpemUsIDApO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICB9XG4gIGVsc2Uge1xuICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0O1xuICAgIGlmIChkaXN0ID4gY29weSkge1xuICAgICAgZGlzdCA9IGNvcHk7XG4gICAgfVxuICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93ICsgc3RhdGUtPnduZXh0LCBlbmQgLSBjb3B5LCBkaXN0KTtcbiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgZGlzdCwgc3RhdGUud25leHQpO1xuICAgIGNvcHkgLT0gZGlzdDtcbiAgICBpZiAoY29weSkge1xuICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuICAgICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGNvcHksIDApO1xuICAgICAgc3RhdGUud25leHQgPSBjb3B5O1xuICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzdGF0ZS53bmV4dCArPSBkaXN0O1xuICAgICAgaWYgKHN0YXRlLnduZXh0ID09PSBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53bmV4dCA9IDA7IH1cbiAgICAgIGlmIChzdGF0ZS53aGF2ZSA8IHN0YXRlLndzaXplKSB7IHN0YXRlLndoYXZlICs9IGRpc3Q7IH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGUoc3RybSwgZmx1c2gpIHtcbiAgdmFyIHN0YXRlO1xuICB2YXIgaW5wdXQsIG91dHB1dDsgICAgICAgICAgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnNcbiAgdmFyIG5leHQ7ICAgICAgICAgICAgICAgICAgIC8qIG5leHQgaW5wdXQgSU5ERVggKi9cbiAgdmFyIHB1dDsgICAgICAgICAgICAgICAgICAgIC8qIG5leHQgb3V0cHV0IElOREVYICovXG4gIHZhciBoYXZlLCBsZWZ0OyAgICAgICAgICAgICAvKiBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICB2YXIgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogYml0IGJ1ZmZlciAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXG4gIHZhciBfaW4sIF9vdXQ7ICAgICAgICAgICAgICAvKiBzYXZlIHN0YXJ0aW5nIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gIHZhciBjb3B5OyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2Ygc3RvcmVkIG9yIG1hdGNoIGJ5dGVzIHRvIGNvcHkgKi9cbiAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqL1xuICB2YXIgZnJvbV9zb3VyY2U7XG4gIHZhciBoZXJlID0gMDsgICAgICAgICAgICAgICAvKiBjdXJyZW50IGRlY29kaW5nIHRhYmxlIGVudHJ5ICovXG4gIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICAvL3ZhciBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cbiAgdmFyIGxhc3RfYml0cywgbGFzdF9vcCwgbGFzdF92YWw7IC8vIHBha2VkIFwibGFzdFwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggdG8gY29weSBmb3IgcmVwZWF0cywgYml0cyB0byBkcm9wICovXG4gIHZhciByZXQ7ICAgICAgICAgICAgICAgICAgICAvKiByZXR1cm4gY29kZSAqL1xuICB2YXIgaGJ1ZiA9IG5ldyB1dGlscy5CdWY4KDQpOyAgICAvKiBidWZmZXIgZm9yIGd6aXAgaGVhZGVyIGNyYyBjYWxjdWxhdGlvbiAqL1xuICB2YXIgb3B0cztcblxuICB2YXIgbjsgLy8gdGVtcG9yYXJ5IHZhciBmb3IgTkVFRF9CSVRTXG5cbiAgdmFyIG9yZGVyID0gLyogcGVybXV0YXRpb24gb2YgY29kZSBsZW5ndGhzICovXG4gICAgWyAxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1IF07XG5cblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHwgIXN0cm0ub3V0cHV0IHx8XG4gICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7IHN0YXRlLm1vZGUgPSBUWVBFRE87IH0gICAgLyogc2tpcCBjaGVjayAqL1xuXG5cbiAgLy8tLS0gTE9BRCgpIC0tLVxuICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICBob2xkID0gc3RhdGUuaG9sZDtcbiAgYml0cyA9IHN0YXRlLmJpdHM7XG4gIC8vLS0tXG5cbiAgX2luID0gaGF2ZTtcbiAgX291dCA9IGxlZnQ7XG4gIHJldCA9IFpfT0s7XG5cbiAgaW5mX2xlYXZlOiAvLyBnb3RvIGVtdWxhdGlvblxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7XG4gICAgY2FzZSBIRUFEOlxuICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLz09PSBORUVEQklUUygxNik7XG4gICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG4gICAgICAvLz09PS8vXG4gICAgICBpZiAoKHN0YXRlLndyYXAgJiAyKSAmJiBob2xkID09PSAweDhiMWYpIHsgIC8qIGd6aXAgaGVhZGVyICovXG4gICAgICAgIHN0YXRlLmNoZWNrID0gMC8qY3JjMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAvLz09PS8vXG5cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzdGF0ZS5mbGFncyA9IDA7ICAgICAgICAgICAvKiBleHBlY3QgemxpYiBoZWFkZXIgKi9cbiAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCEoc3RhdGUud3JhcCAmIDEpIHx8ICAgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqL1xuICAgICAgICAoKChob2xkICYgMHhmZikvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG4gICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBoZWFkZXIgY2hlY2snO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICgoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICBob2xkID4+Pj0gNDtcbiAgICAgIGJpdHMgLT0gNDtcbiAgICAgIC8vLS0tLy9cbiAgICAgIGxlbiA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDg7XG4gICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHtcbiAgICAgICAgc3RhdGUud2JpdHMgPSBsZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW4gPiBzdGF0ZS53Yml0cykge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47XG4gICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgemxpYiBoZWFkZXIgb2tcXG5cIikpO1xuICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgc3RhdGUubW9kZSA9IGhvbGQgJiAweDIwMCA/IERJQ1RJRCA6IFRZUEU7XG4gICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgaG9sZCA9IDA7XG4gICAgICBiaXRzID0gMDtcbiAgICAgIC8vPT09Ly9cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRkxBR1M6XG4gICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG4gICAgICAvLz09PS8vXG4gICAgICBzdGF0ZS5mbGFncyA9IGhvbGQ7XG4gICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4ZTAwMCkge1xuICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGhlYWRlciBmbGFncyBzZXQnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgIHN0YXRlLmhlYWQudGV4dCA9ICgoaG9sZCA+PiA4KSAmIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgLy89PT0vL1xuICAgICAgfVxuICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgIGhvbGQgPSAwO1xuICAgICAgYml0cyA9IDA7XG4gICAgICAvLz09PS8vXG4gICAgICBzdGF0ZS5tb2RlID0gVElNRTtcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBjYXNlIFRJTUU6XG4gICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG4gICAgICAvLz09PS8vXG4gICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICBzdGF0ZS5oZWFkLnRpbWUgPSBob2xkO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgIC8vPT09IENSQzQoc3RhdGUuY2hlY2ssIGhvbGQpXG4gICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGhidWZbMl0gPSAoaG9sZCA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgaGJ1ZlszXSA9IChob2xkID4+PiAyNCkgJiAweGZmO1xuICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCA0LCAwKTtcbiAgICAgICAgLy89PT1cbiAgICAgIH1cbiAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICBob2xkID0gMDtcbiAgICAgIGJpdHMgPSAwO1xuICAgICAgLy89PT0vL1xuICAgICAgc3RhdGUubW9kZSA9IE9TO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgT1M6XG4gICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG4gICAgICAvLz09PS8vXG4gICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICBzdGF0ZS5oZWFkLnhmbGFncyA9IChob2xkICYgMHhmZik7XG4gICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgIH1cbiAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICBob2xkID0gMDtcbiAgICAgIGJpdHMgPSAwO1xuICAgICAgLy89PT0vL1xuICAgICAgc3RhdGUubW9kZSA9IEVYTEVOO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgRVhMRU46XG4gICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQ7XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBob2xkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsLypaX05VTEwqLztcbiAgICAgIH1cbiAgICAgIHN0YXRlLm1vZGUgPSBFWFRSQTtcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBjYXNlIEVYVFJBOlxuICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG4gICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaGVhZC5leHRyYSkge1xuICAgICAgICAgICAgICAvLyBVc2UgdW50eXBlZCBhcnJheSBmb3IgbW9yZSBjb252ZW5pZW5kIHByb2Nlc3NpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBBcnJheShzdGF0ZS5oZWFkLmV4dHJhX2xlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1dGlscy5hcnJheVNldChcbiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSxcbiAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGlzIGxpbWl0ZWQgdG8gNjU1MzYgYnl0ZXNcbiAgICAgICAgICAgICAgLy8gLSBubyBuZWVkIGZvciBhZGRpdGlvbmFsIHNpemUgY2hlY2tcbiAgICAgICAgICAgICAgY29weSxcbiAgICAgICAgICAgICAgLypsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gPyBzdGF0ZS5oZWFkLmV4dHJhX21heCA6IGNvcHksKi9cbiAgICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy96bWVtY3B5KHN0YXRlLmhlYWQuZXh0cmEgKyBsZW4sIG5leHQsXG4gICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA6IGNvcHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgfVxuICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgTkFNRTpcbiAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkge1xuICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgY29weSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XG4gICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG4gICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5uYW1lX21heCovKSkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG5cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgQ09NTUVOVDpcbiAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MTAwMCkge1xuICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgY29weSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8pKSB7XG4gICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgY2FzZSBIQ1JDOlxuICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2hlYWRlciBjcmMgbWlzbWF0Y2gnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSAoKHN0YXRlLmZsYWdzID4+IDkpICYgMSk7XG4gICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwO1xuICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERJQ1RJRDpcbiAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIGhhdmUtLTtcbiAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgIGJpdHMgKz0gODtcbiAgICAgIH1cbiAgICAgIC8vPT09Ly9cbiAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHpzd2FwMzIoaG9sZCk7XG4gICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgaG9sZCA9IDA7XG4gICAgICBiaXRzID0gMDtcbiAgICAgIC8vPT09Ly9cbiAgICAgIHN0YXRlLm1vZGUgPSBESUNUO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgRElDVDpcbiAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkge1xuICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgLy8tLS1cbiAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUO1xuICAgICAgfVxuICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgY2FzZSBUWVBFOlxuICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgVFlQRURPOlxuICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcbiAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XG4gICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vPT09IE5FRURCSVRTKDMpOyAqL1xuICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG4gICAgICAvLz09PS8vXG4gICAgICBzdGF0ZS5sYXN0ID0gKGhvbGQgJiAweDAxKS8qQklUUygxKSovO1xuICAgICAgLy8tLS0gRFJPUEJJVFMoMSkgLS0tLy9cbiAgICAgIGhvbGQgPj4+PSAxO1xuICAgICAgYml0cyAtPSAxO1xuICAgICAgLy8tLS0vL1xuXG4gICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xuICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RvcmVkIGJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cbiAgICAgICAgZml4ZWR0YWJsZXMoc3RhdGUpO1xuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOyAgICAgICAgICAgICAvKiBkZWNvZGUgY29kZXMgKi9cbiAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi9cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYmxvY2sgdHlwZSc7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICB9XG4gICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICBiaXRzIC09IDI7XG4gICAgICAvLy0tLS8vXG4gICAgICBicmVhaztcbiAgICBjYXNlIFNUT1JFRDpcbiAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy8gLyogZ28gdG8gYnl0ZSBib3VuZGFyeSAqL1xuICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgYml0cyAtPSBiaXRzICYgNztcbiAgICAgIC8vLS0tLy9cbiAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIGhhdmUtLTtcbiAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgIGJpdHMgKz0gODtcbiAgICAgIH1cbiAgICAgIC8vPT09Ly9cbiAgICAgIGlmICgoaG9sZCAmIDB4ZmZmZikgIT09ICgoaG9sZCA+Pj4gMTYpIF4gMHhmZmZmKSkge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzdGF0ZS5sZW5ndGggPSBob2xkICYgMHhmZmZmO1xuICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgbGVuZ3RoICV1XFxuXCIsXG4gICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgaG9sZCA9IDA7XG4gICAgICBiaXRzID0gMDtcbiAgICAgIC8vPT09Ly9cbiAgICAgIHN0YXRlLm1vZGUgPSBDT1BZXztcbiAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBjYXNlIENPUFlfOlxuICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgY2FzZSBDT1BZOlxuICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgaWYgKGNvcHkgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8vLS0tIHptZW1jcHkocHV0LCBuZXh0LCBjb3B5KTsgLS0tXG4gICAgICAgIHV0aWxzLmFycmF5U2V0KG91dHB1dCwgaW5wdXQsIG5leHQsIGNvcHksIHB1dCk7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgcHV0ICs9IGNvcHk7XG4gICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGVuZFxcblwiKSk7XG4gICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgVEFCTEU6XG4gICAgICAvLz09PSBORUVEQklUUygxNCk7ICovXG4gICAgICB3aGlsZSAoYml0cyA8IDE0KSB7XG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG4gICAgICAvLz09PS8vXG4gICAgICBzdGF0ZS5ubGVuID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMjU3O1xuICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgYml0cyAtPSA1O1xuICAgICAgLy8tLS0vL1xuICAgICAgc3RhdGUubmRpc3QgPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAxO1xuICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgYml0cyAtPSA1O1xuICAgICAgLy8tLS0vL1xuICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA0O1xuICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgYml0cyAtPSA0O1xuICAgICAgLy8tLS0vL1xuLy8jaWZuZGVmIFBLWklQX0JVR19XT1JLQVJPVU5EXG4gICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG4gICAgICAgIHN0cm0ubXNnID0gJ3RvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzJztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4vLyNlbmRpZlxuICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG4gICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgIHN0YXRlLm1vZGUgPSBMRU5MRU5TO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgTEVOTEVOUzpcbiAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmNvZGUpIHtcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG4gICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAzO1xuICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHtcbiAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XG4gICAgICB9XG4gICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gICAgICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xuICAgICAgc3RhdGUubGVuYml0cyA9IDc7XG5cbiAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoQ09ERVMsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cbiAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIGxlbmd0aHMgc2V0JztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG4gICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgIHN0YXRlLm1vZGUgPSBDT0RFTEVOUztcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBjYXNlIENPREVMRU5TOlxuICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07LypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfdmFsIDwgMTYpIHtcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikge1xuICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMik7XG4gICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMjtcbiAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuID0gc3RhdGUubGVuc1tzdGF0ZS5oYXZlIC0gMV07XG4gICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwMyk7Ly9CSVRTKDIpO1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChoZXJlX3ZhbCA9PT0gMTcpIHtcbiAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDM7XG4gICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSAzO1xuICAgICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDc7XG4gICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICBjb3B5ID0gMTEgKyAoaG9sZCAmIDB4N2YpOy8vQklUUyg3KTtcbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG4gICAgICAgICAgICBob2xkID4+Pj0gNztcbiAgICAgICAgICAgIGJpdHMgLT0gNztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKGNvcHktLSkge1xuICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXG4gICAgICBpZiAoc3RhdGUubW9kZSA9PT0gQkFEKSB7IGJyZWFrOyB9XG5cbiAgICAgIC8qIGNoZWNrIGZvciBlbmQtb2YtYmxvY2sgY29kZSAoYmV0dGVyIGhhdmUgb25lKSAqL1xuICAgICAgaWYgKHN0YXRlLmxlbnNbMjU2XSA9PT0gMCkge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0c1xuICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICAgICAgY29uY2VybmluZyB0aGUgRU5PVUdIIGNvbnN0YW50cywgd2hpY2ggZGVwZW5kIG9uIHRob3NlIHZhbHVlcyAqL1xuICAgICAgc3RhdGUubGVuYml0cyA9IDk7XG5cbiAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoTEVOUywgc3RhdGUubGVucywgMCwgc3RhdGUubmxlbiwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuICAgICAgLy8gc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0JztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcbiAgICAgIC8vc3RhdGUuZGlzdGNvZGUuY29weShzdGF0ZS5jb2Rlcyk7XG4gICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcbiAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjtcbiAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmRpc3RiaXRzIH07XG4gICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCBzdGF0ZS5ubGVuLCBzdGF0ZS5uZGlzdCwgc3RhdGUuZGlzdGNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZXMgc2V0JztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG4nKSk7XG4gICAgICBzdGF0ZS5tb2RlID0gTEVOXztcbiAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBjYXNlIExFTl86XG4gICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgTEVOOlxuICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgLy8tLS1cbiAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpO1xuICAgICAgICAvLy0tLSBMT0FEKCkgLS0tXG4gICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47XG4gICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICAgICAgICBiaXRzID0gc3RhdGUuYml0cztcbiAgICAgICAgLy8tLS1cblxuICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkge1xuICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0YXRlLmJhY2sgPSAwO1xuICAgICAgZm9yICg7Oykge1xuICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgIH1cbiAgICAgIGlmIChoZXJlX29wICYmIChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICB9XG4gICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAvLy0tLS8vXG4gICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHtcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExJVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaGVyZV9vcCAmIDMyKSB7XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7XG4gICAgICBzdGF0ZS5tb2RlID0gTEVORVhUO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgTEVORVhUOlxuICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgbiA9IHN0YXRlLmV4dHJhO1xuICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgIH1cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIHN0YXRlLmxlbmd0aCkpO1xuICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoO1xuICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgY2FzZSBESVNUOlxuICAgICAgZm9yICg7Oykge1xuICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxKV07LypCSVRTKHN0YXRlLmRpc3RiaXRzKSovXG4gICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBoYXZlLS07XG4gICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgIH1cbiAgICAgIGlmICgoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgIH1cbiAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgIC8vLS0tLy9cbiAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsO1xuICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTtcbiAgICAgIHN0YXRlLm1vZGUgPSBESVNURVhUO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgRElTVEVYVDpcbiAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XG4gICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICB9XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHtcbiAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLm9mZnNldCkpO1xuICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGNhc2UgTUFUQ0g6XG4gICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDtcbiAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBjb3B5KSB7ICAgICAgICAgLyogY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTtcbiAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53aGF2ZSkge1xuICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhaWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgVHJhY2UoKHN0ZGVyciwgXCJpbmZsYXRlLmMgdG9vIGZhclxcblwiKSk7XG4vLyAgICAgICAgICBjb3B5IC09IHN0YXRlLndoYXZlO1xuLy8gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuLy8gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4vLyAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4vLyAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbi8vICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IDA7XG4vLyAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuLy8gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4vLyAgICAgICAgICBicmVhaztcbi8vI2VuZGlmXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7XG4gICAgICAgICAgZnJvbSA9IHN0YXRlLndzaXplIC0gY29weTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmcm9tID0gc3RhdGUud25leHQgLSBjb3B5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbiAgICAgICAgZnJvbV9zb3VyY2UgPSBzdGF0ZS53aW5kb3c7XG4gICAgICB9XG4gICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjb3B5IGZyb20gb3V0cHV0ICovXG4gICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0O1xuICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgIGRvIHtcbiAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICB9IHdoaWxlICgtLWNvcHkpO1xuICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIExJVDpcbiAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgb3V0cHV0W3B1dCsrXSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgIGxlZnQtLTtcbiAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICBicmVhaztcbiAgICBjYXNlIENIRUNLOlxuICAgICAgaWYgKHN0YXRlLndyYXApIHtcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIC8vIFVzZSAnfCcgaW5zZGVhZCBvZiAnKycgdG8gbWFrZSBzdXJlIHRoYXQgcmVzdWx0IGlzIHNpZ25lZFxuICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIF9vdXQgLT0gbGVmdDtcbiAgICAgICAgc3RybS50b3RhbF9vdXQgKz0gX291dDtcbiAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgaWYgKF9vdXQpIHtcbiAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPVxuICAgICAgICAgICAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICB9XG4gICAgICAgIF9vdXQgPSBsZWZ0O1xuICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICBpZiAoKHN0YXRlLmZsYWdzID8gaG9sZCA6IHpzd2FwMzIoaG9sZCkpICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgY2hlY2sgbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLm1vZGUgPSBMRU5HVEg7XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgY2FzZSBMRU5HVEg6XG4gICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykge1xuICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS50b3RhbCAmIDB4ZmZmZmZmZmYpKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGxlbmd0aCBjaGVjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGxlbmd0aCBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgfVxuICAgICAgc3RhdGUubW9kZSA9IERPTkU7XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgY2FzZSBET05FOlxuICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EO1xuICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgIGNhc2UgQkFEOlxuICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SO1xuICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgIGNhc2UgTUVNOlxuICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgIGNhc2UgU1lOQzpcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIH1cbiAgfVxuXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuICAvKlxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxuICAgKi9cblxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgLy8tLS1cblxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCkpKSB7XG4gICAgaWYgKHVwZGF0ZXdpbmRvdyhzdHJtLCBzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCwgX291dCAtIHN0cm0uYXZhaWxfb3V0KSkge1xuICAgICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgX2luIC09IHN0cm0uYXZhaWxfaW47XG4gIF9vdXQgLT0gc3RybS5hdmFpbF9vdXQ7XG4gIHN0cm0udG90YWxfaW4gKz0gX2luO1xuICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICBzdGF0ZS50b3RhbCArPSBfb3V0O1xuICBpZiAoc3RhdGUud3JhcCAmJiBfb3V0KSB7XG4gICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEUoc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqL1xuICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpIDogYWRsZXIzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkpO1xuICB9XG4gIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFID8gMTI4IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xuICBpZiAoKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCkgfHwgZmx1c2ggPT09IFpfRklOSVNIKSAmJiByZXQgPT09IFpfT0spIHtcbiAgICByZXQgPSBaX0JVRl9FUlJPUjtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlRW5kKHN0cm0pIHtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgLyp8fCBzdHJtLT56ZnJlZSA9PSAoZnJlZV9mdW5jKTAqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS53aW5kb3cpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUdldEhlYWRlcihzdHJtLCBoZWFkKSB7XG4gIHZhciBzdGF0ZTtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG5cbiAgLyogc2F2ZSBoZWFkZXIgc3RydWN0dXJlICovXG4gIHN0YXRlLmhlYWQgPSBoZWFkO1xuICBoZWFkLmRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHtcbiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICB2YXIgc3RhdGU7XG4gIHZhciBkaWN0aWQ7XG4gIHZhciByZXQ7XG5cbiAgLyogY2hlY2sgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIC8qID09IFpfTlVMTCAqLyB8fCAhc3RybS5zdGF0ZSAvKiA9PSBaX05VTEwgKi8pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICBpZiAoc3RhdGUud3JhcCAhPT0gMCAmJiBzdGF0ZS5tb2RlICE9PSBESUNUKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XG4gICAgZGljdGlkID0gMTsgLyogYWRsZXIzMigwLCBudWxsLCAwKSovXG4gICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgICBpZiAoZGljdGlkICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgLyogY29weSBkaWN0aW9uYXJ5IHRvIHdpbmRvdyB1c2luZyB1cGRhdGV3aW5kb3coKSwgd2hpY2ggd2lsbCBhbWVuZCB0aGVcbiAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi9cbiAgcmV0ID0gdXBkYXRld2luZG93KHN0cm0sIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIGRpY3RMZW5ndGgpO1xuICBpZiAocmV0KSB7XG4gICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gIH1cbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xuICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmV4cG9ydHMuaW5mbGF0ZVJlc2V0ID0gaW5mbGF0ZVJlc2V0O1xuZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0MjtcbmV4cG9ydHMuaW5mbGF0ZVJlc2V0S2VlcCA9IGluZmxhdGVSZXNldEtlZXA7XG5leHBvcnRzLmluZmxhdGVJbml0ID0gaW5mbGF0ZUluaXQ7XG5leHBvcnRzLmluZmxhdGVJbml0MiA9IGluZmxhdGVJbml0MjtcbmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVFbmQgPSBpbmZsYXRlRW5kO1xuZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjtcbmV4cG9ydHMuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcbmV4cG9ydHMuaW5mbGF0ZUluZm8gPSAncGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxuZXhwb3J0cy5pbmZsYXRlQ29weSA9IGluZmxhdGVDb3B5O1xuZXhwb3J0cy5pbmZsYXRlR2V0RGljdGlvbmFyeSA9IGluZmxhdGVHZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5pbmZsYXRlTWFyayA9IGluZmxhdGVNYXJrO1xuZXhwb3J0cy5pbmZsYXRlUHJpbWUgPSBpbmZsYXRlUHJpbWU7XG5leHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7XG5leHBvcnRzLmluZmxhdGVTeW5jUG9pbnQgPSBpbmZsYXRlU3luY1BvaW50O1xuZXhwb3J0cy5pbmZsYXRlVW5kZXJtaW5lID0gaW5mbGF0ZVVuZGVybWluZTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG5cbnZhciBNQVhCSVRTID0gMTU7XG52YXIgRU5PVUdIX0xFTlMgPSA4NTI7XG52YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xuLy92YXIgRU5PVUdIID0gKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbnZhciBDT0RFUyA9IDA7XG52YXIgTEVOUyA9IDE7XG52YXIgRElTVFMgPSAyO1xuXG52YXIgbGJhc2UgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBiYXNlICovXG4gIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG4gIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXG5dO1xuXG52YXIgbGV4dCA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LFxuICAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgNzIsIDc4XG5dO1xuXG52YXIgZGJhc2UgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi9cbiAgMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLFxuICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXG4gIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBcbl07XG5cbnZhciBkZXh0ID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMixcbiAgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsXG4gIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV90YWJsZSh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKVxue1xuICB2YXIgYml0cyA9IG9wdHMuYml0cztcbiAgICAgIC8vaGVyZSA9IG9wdHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXG5cbiAgdmFyIGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cbiAgdmFyIHN5bSA9IDA7ICAgICAgICAgICAgICAgLyogaW5kZXggb2YgY29kZSBzeW1ib2xzICovXG4gIHZhciBtaW4gPSAwLCBtYXggPSAwOyAgICAgICAgICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqL1xuICB2YXIgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xuICB2YXIgY3VyciA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgY3VycmVudCB0YWJsZSAqL1xuICB2YXIgZHJvcCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovXG4gIHZhciBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cbiAgdmFyIHVzZWQgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi9cbiAgdmFyIGh1ZmYgPSAwOyAgICAgICAgICAgICAgLyogSHVmZm1hbiBjb2RlICovXG4gIHZhciBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xuICB2YXIgZmlsbDsgICAgICAgICAgICAgIC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovXG4gIHZhciBsb3c7ICAgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICB2YXIgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cbiAgdmFyIG5leHQ7ICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovXG4gIHZhciBiYXNlID0gbnVsbDsgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4gIHZhciBiYXNlX2luZGV4ID0gMDtcbi8vICB2YXIgc2hvZXh0cmE7ICAgIC8qIGV4dHJhIGJpdHMgdGFibGUgdG8gdXNlICovXG4gIHZhciBlbmQ7ICAgICAgICAgICAgICAgICAgICAvKiB1c2UgYmFzZSBhbmQgZXh0cmEgZm9yIHN5bWJvbCA+IGVuZCAqL1xuICB2YXIgY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAvKiBudW1iZXIgb2YgY29kZXMgb2YgZWFjaCBsZW5ndGggKi9cbiAgdmFyIG9mZnMgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi9cbiAgdmFyIGV4dHJhID0gbnVsbDtcbiAgdmFyIGV4dHJhX2luZGV4ID0gMDtcblxuICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDtcblxuICAvKlxuICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZVxuICAgY29kZSBsZW5ndGhzIGFyZSBsZW5zWzAuLmNvZGVzLTFdLiAgRWFjaCBsZW5ndGggY29ycmVzcG9uZHMgdG8gdGhlXG4gICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxuICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXJcbiAgIGZvciBjb2RlcyB3aXRoIGVxdWFsIGxlbmd0aHMuICBUaGVuIHRoZSBjb2RlIHN0YXJ0cyB3aXRoIGFsbCB6ZXJvIGJpdHNcbiAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXG4gICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aFxuICAgaW5jcmVhc2VzLiAgRm9yIHRoZSBkZWZsYXRlIGZvcm1hdCwgdGhlc2UgYml0cyBhcmUgc3RvcmVkIGJhY2t3YXJkc1xuICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXNcbiAgIGFyZSBpbmNyZW1lbnRlZCBiYWNrd2FyZHMuXG5cbiAgIFRoaXMgcm91dGluZSBhc3N1bWVzLCBidXQgZG9lcyBub3QgY2hlY2ssIHRoYXQgYWxsIG9mIHRoZSBlbnRyaWVzIGluXG4gICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxuICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXRcbiAgIHN5bWJvbCBkb2VzIG5vdCBvY2N1ciBpbiB0aGlzIGNvZGUuXG5cbiAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcbiAgIGNyZWF0aW5nIGZyb20gdGhhdCBhIHRhYmxlIG9mIHN0YXJ0aW5nIGluZGljZXMgZm9yIGVhY2ggbGVuZ3RoIGluIHRoZVxuICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXG4gICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcbiAgIHRoZSBjYWxsZXIuXG5cbiAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcbiAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgY29kZXMgYXQgYWxsLCBjaGVja2luZyBmb3IgYSB2YWxpZCBzZXQgb2YgbGVuZ3RocywgYW5kIGxvb2tpbmcgYWhlYWRcbiAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzLlxuICAgKi9cblxuICAvKiBhY2N1bXVsYXRlIGxlbmd0aHMgZm9yIGNvZGVzIChhc3N1bWVzIGxlbnNbXSBhbGwgaW4gMC4uTUFYQklUUykgKi9cbiAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBjb3VudFtsZW5dID0gMDtcbiAgfVxuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7XG4gIH1cblxuICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xuICByb290ID0gYml0cztcbiAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcbiAgICBpZiAoY291bnRbbWF4XSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290ID4gbWF4KSB7XG4gICAgcm9vdCA9IG1heDtcbiAgfVxuICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7ICAgLy9oZXJlLmJpdHMgPSAodmFyIGNoYXIpMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cblxuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDtcbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cbiAgICBvcHRzLmJpdHMgPSAxO1xuICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xuICB9XG4gIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xuICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPCBtaW4pIHtcbiAgICByb290ID0gbWluO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXG4gIGxlZnQgPSAxO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGxlZnQgPDw9IDE7XG4gICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gICAgICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICB9XG4gIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgZW5kID0gMTk7XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSBMRU5TKSB7XG4gICAgYmFzZSA9IGxiYXNlO1xuICAgIGJhc2VfaW5kZXggLT0gMjU3O1xuICAgIGV4dHJhID0gbGV4dDtcbiAgICBleHRyYV9pbmRleCAtPSAyNTc7XG4gICAgZW5kID0gMjU2O1xuXG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuICAgIGJhc2UgPSBkYmFzZTtcbiAgICBleHRyYSA9IGRleHQ7XG4gICAgZW5kID0gLTE7XG4gIH1cblxuICAvKiBpbml0aWFsaXplIG9wdHMgZm9yIGxvb3AgKi9cbiAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cbiAgc3ltID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovXG4gIGxlbiA9IG1pbjsgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqL1xuICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cbiAgY3VyciA9IHJvb3Q7ICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqL1xuICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xuICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuICB1c2VkID0gMSA8PCByb290OyAgICAgICAgICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovXG4gIG1hc2sgPSB1c2VkIC0gMTsgICAgICAgICAgICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovXG5cbiAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG4gIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgKHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBjcmVhdGUgdGFibGUgZW50cnkgKi9cbiAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSAwO1xuICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHdvcmtbc3ltXSA+IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cbiAgICAgIGhlcmVfdmFsID0gMDtcbiAgICB9XG5cbiAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXG4gICAgZG8ge1xuICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmlsbF0gPSAoaGVyZV9iaXRzIDw8IDI0KSB8IChoZXJlX29wIDw8IDE2KSB8IGhlcmVfdmFsIHwwO1xuICAgIH0gd2hpbGUgKGZpbGwgIT09IDApO1xuXG4gICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XG4gICAgICBpbmNyID4+PSAxO1xuICAgIH1cbiAgICBpZiAoaW5jciAhPT0gMCkge1xuICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgIGh1ZmYgKz0gaW5jcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaHVmZiA9IDA7XG4gICAgfVxuXG4gICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXG4gICAgc3ltKys7XG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xuICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7IGJyZWFrOyB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xuICAgICAgY3VyciA9IGxlbiAtIGRyb3A7XG4gICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XG4gICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdO1xuICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIC8qIHBvaW50IGVudHJ5IGluIHJvb3QgdGFibGUgdG8gc3ViLXRhYmxlICovXG4gICAgICBsb3cgPSBodWZmICYgbWFzaztcbiAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7XG4gICAgICB0YWJsZS5iaXRzW2xvd10gPSByb290O1xuICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xuICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwwO1xuICAgIH1cbiAgfVxuXG4gIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlXG4gICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZVxuICAgbWF4aW11bSBjb2RlIGxlbmd0aCB0aGF0IHdhcyBhbGxvd2VkIHRvIGdldCB0aGlzIGZhciBpcyBvbmUgYml0KSAqL1xuICBpZiAoaHVmZiAhPT0gMCkge1xuICAgIC8vdGFibGUub3BbbmV4dCArIGh1ZmZdID0gNjQ7ICAgICAgICAgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tuZXh0ICsgaHVmZl0gPSBsZW4gLSBkcm9wO1xuICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7XG4gICAgdGFibGVbbmV4dCArIGh1ZmZdID0gKChsZW4gLSBkcm9wKSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwwO1xuICB9XG5cbiAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXG4gIC8vb3B0cy50YWJsZV9pbmRleCArPSB1c2VkO1xuICBvcHRzLmJpdHMgPSByb290O1xuICByZXR1cm4gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIDI6ICAgICAgJ25lZWQgZGljdGlvbmFyeScsICAgICAvKiBaX05FRURfRElDVCAgICAgICAyICAqL1xuICAxOiAgICAgICdzdHJlYW0gZW5kJywgICAgICAgICAgLyogWl9TVFJFQU1fRU5EICAgICAgMSAgKi9cbiAgMDogICAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovXG4gICctMSc6ICAgJ2ZpbGUgZXJyb3InLCAgICAgICAgICAvKiBaX0VSUk5PICAgICAgICAgKC0xKSAqL1xuICAnLTInOiAgICdzdHJlYW0gZXJyb3InLCAgICAgICAgLyogWl9TVFJFQU1fRVJST1IgICgtMikgKi9cbiAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovXG4gICctNCc6ICAgJ2luc3VmZmljaWVudCBtZW1vcnknLCAvKiBaX01FTV9FUlJPUiAgICAgKC00KSAqL1xuICAnLTUnOiAgICdidWZmZXIgZXJyb3InLCAgICAgICAgLyogWl9CVUZfRVJST1IgICAgICgtNSkgKi9cbiAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vdmFyIFpfSFVGRk1BTl9PTkxZICAgICAgPSAyO1xuLy92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vdmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG52YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbnZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuLy8gRnJvbSB6dXRpbC5oXG5cbnZhciBTVE9SRURfQkxPQ0sgPSAwO1xudmFyIFNUQVRJQ19UUkVFUyA9IDE7XG52YXIgRFlOX1RSRUVTICAgID0gMjtcbi8qIFRoZSB0aHJlZSBraW5kcyBvZiBibG9jayB0eXBlICovXG5cbnZhciBNSU5fTUFUQ0ggICAgPSAzO1xudmFyIE1BWF9NQVRDSCAgICA9IDI1ODtcbi8qIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG1hdGNoIGxlbmd0aHMgKi9cblxuLy8gRnJvbSBkZWZsYXRlLmhcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXG4gKi9cblxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG5cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xuXG52YXIgTUFYX0JJVFMgICAgICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG52YXIgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG52YXIgRU5EX0JMT0NLICAgPSAyNTY7XG4vKiBlbmQgb2YgYmxvY2sgbGl0ZXJhbCBjb2RlICovXG5cbnZhciBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8zXzEwICAgPSAxNztcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8xMV8xMzggPSAxODtcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAgKDcgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG52YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF07XG5cbnZhciBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtcblxudmFyIGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN107XG5cbnZhciBibF9vcmRlciA9XG4gIFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtcbi8qIGVzbGludC1lbmFibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cblxuLyogVGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMgYXJlIHNlbnQgaW4gb3JkZXIgb2YgZGVjcmVhc2luZ1xuICogcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdCBsZW5ndGggY29kZXMuXG4gKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBMb2NhbCBkYXRhLiBUaGVzZSBhcmUgaW5pdGlhbGl6ZWQgb25seSBvbmNlLlxuICovXG5cbi8vIFdlIHByZS1maWxsIGFycmF5cyB3aXRoIDAgdG8gYXZvaWQgdW5pbml0aWFsaXplZCBnYXBzXG5cbnZhciBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnNkZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbnZhciBzdGF0aWNfbHRyZWUgID0gbmV3IEFycmF5KChMX0NPREVTICsgMikgKiAyKTtcbnplcm8oc3RhdGljX2x0cmVlKTtcbi8qIFRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlLiBTaW5jZSB0aGUgYml0IGxlbmd0aHMgYXJlIGltcG9zZWQsIHRoZXJlIGlzIG5vXG4gKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XG4gKiBiZWxvdykuXG4gKi9cblxudmFyIHN0YXRpY19kdHJlZSAgPSBuZXcgQXJyYXkoRF9DT0RFUyAqIDIpO1xuemVybyhzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG52YXIgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG52YXIgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTtcbnplcm8oX2xlbmd0aF9jb2RlKTtcbi8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcbnplcm8oYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG52YXIgc3RhdGljX2xfZGVzYztcbnZhciBzdGF0aWNfZF9kZXNjO1xudmFyIHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmZ1bmN0aW9uIGRfY29kZShkaXN0KSB7XG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5mdW5jdGlvbiBwdXRfc2hvcnQocywgdykge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLlxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyXG4gKiBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG4gKiBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1XG4gKi9cbmZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgbGVuKSB7XG4gIHZhciByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LlxuICovXG5mdW5jdGlvbiBiaV9mbHVzaChzKSB7XG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxuICogZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LCBoZWFwW2hlYXBfbWF4XSBhbmRcbiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlXG4gKiAgICAgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGZyZXF1ZW5jaWVzIGZvciBlYWNoIGJpdCBsZW5ndGguXG4gKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG4gKiAgICAgbm90IG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBtYXhfY29kZSAgICAgICAgPSBkZXNjLm1heF9jb2RlO1xuICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBleHRyYSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcbiAgdmFyIG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIHZhciBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgdmFyIHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIHZhciBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0vKi5MZW4qLyA9IDA7IC8qIHJvb3Qgb2YgdGhlIGhlYXAgKi9cblxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAgICAgIC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqL1xuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cbiAgICBzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG4gICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cbiAgICAgKi9cbiAgICBvdmVyZmxvdyAtPSAyO1xuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG4gIC8qIE5vdyByZWNvbXB1dGUgYWxsIGJpdCBsZW5ndGhzLCBzY2FubmluZyBpbiBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlblxuICAgKiBmcm9tICdhcicgd3JpdHRlbiBieSBIYXJ1aGlrbyBPa3VtdXJhLilcbiAgICovXG4gIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkge1xuICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuICAgIHdoaWxlIChuICE9PSAwKSB7XG4gICAgICBtID0gcy5oZWFwWy0taF07XG4gICAgICBpZiAobSA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuICogb3B0aW1hbCkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG4gKiAgICAgemVybyBjb2RlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudClcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbi8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cbntcbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICB2YXIgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgdmFyIGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XG4gIHZhciBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgdmFyIGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgdmFyIGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIHZhciBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbi8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG4gIHN0YXRpY19sX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfbHRyZWU7XG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuICBzdGF0aWNfZF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9kYml0cztcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiNlbmRpZiovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xuICBsZW5ndGggPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTIC0gMTsgY29kZSsrKSB7XG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTZcIik7XG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXG4gICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG4gICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVzdCBlbmNvZGluZzpcbiAgICovXG4gIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG4gIGRpc3QgPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2RiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cbiAgZm9yICg7IGNvZGUgPCBEX0NPREVTOyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IChleHRyYV9kYml0c1tjb2RlXSAtIDcpKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlWzI1NiArIGRpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IDI1NitkaXN0ICE9IDUxMlwiKTtcblxuICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIGJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIG4gPSAwO1xuICB3aGlsZSAobiA8PSAxNDMpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOV0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNzkpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNztcbiAgICBuKys7XG4gICAgYmxfY291bnRbN10rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyODcpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xuICAgIHN0YXRpY19kdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA1O1xuICAgIHN0YXRpY19kdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG4sIDUpO1xuICB9XG5cbiAgLy8gTm93IGRhdGEgcmVhZHkgYW5kIHdlIGNhbiBpbml0IHN0YXRpYyB0cmVlc1xuICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfZF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19kdHJlZSwgZXh0cmFfZGJpdHMsIDAsICAgICAgICAgIERfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsICAgICAgICAgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTtcblxuICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgIG4rKykgeyBzLmR5bl9kdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUzsgbisrKSB7IHMuYmxfdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG5cbiAgcy5keW5fbHRyZWVbRU5EX0JMT0NLICogMl0vKi5GcmVxKi8gPSAxO1xuICBzLm9wdF9sZW4gPSBzLnN0YXRpY19sZW4gPSAwO1xuICBzLmxhc3RfbGl0ID0gcy5tYXRjaGVzID0gMDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5mdW5jdGlvbiBiaV93aW5kdXAocylcbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiBjb3B5X2Jsb2NrKHMsIGJ1ZiwgbGVuLCBoZWFkZXIpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cbntcbiAgYmlfd2luZHVwKHMpOyAgICAgICAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqL1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBwdXRfc2hvcnQocywgbGVuKTtcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XG4gIH1cbi8vICB3aGlsZSAobGVuLS0pIHtcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XG4vLyAgfVxuICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7XG4gIHMucGVuZGluZyArPSBsZW47XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcGFyZXMgdG8gc3VidHJlZXMsIHVzaW5nIHRoZSB0cmVlIGRlcHRoIGFzIHRpZSBicmVha2VyIHdoZW5cbiAqIHRoZSBzdWJ0cmVlcyBoYXZlIGVxdWFsIGZyZXF1ZW5jeS4gVGhpcyBtaW5pbWl6ZXMgdGhlIHdvcnN0IGNhc2UgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbWFsbGVyKHRyZWUsIG4sIG0sIGRlcHRoKSB7XG4gIHZhciBfbjIgPSBuICogMjtcbiAgdmFyIF9tMiA9IG0gKiAyO1xuICByZXR1cm4gKHRyZWVbX24yXS8qLkZyZXEqLyA8IHRyZWVbX20yXS8qLkZyZXEqLyB8fFxuICAgICAgICAgKHRyZWVbX24yXS8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5mdW5jdGlvbiBwcWRvd25oZWFwKHMsIHRyZWUsIGspXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIHZhciB2ID0gcy5oZWFwW2tdO1xuICB2YXIgaiA9IGsgPDwgMTsgIC8qIGxlZnQgc29uIG9mIGsgKi9cbiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xuICAgIC8qIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6ICovXG4gICAgaWYgKGogPCBzLmhlYXBfbGVuICYmXG4gICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcbiAgICAgIGorKztcbiAgICB9XG4gICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi9cbiAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7IGJyZWFrOyB9XG5cbiAgICAvKiBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvbiAqL1xuICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTtcbiAgICBrID0gajtcblxuICAgIC8qIEFuZCBjb250aW51ZSBkb3duIHRoZSB0cmVlLCBzZXR0aW5nIGogdG8gdGhlIGxlZnQgc29uIG9mIGsgKi9cbiAgICBqIDw8PSAxO1xuICB9XG4gIHMuaGVhcFtrXSA9IHY7XG59XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gdmFyIFNNQUxMRVNUID0gMTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NfYmxvY2socywgbHRyZWUsIGR0cmVlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGNvbnN0IGN0X2RhdGEgKmx0cmVlOyAvKiBsaXRlcmFsIHRyZWUgKi9cbi8vICAgIGNvbnN0IGN0X2RhdGEgKmR0cmVlOyAvKiBkaXN0YW5jZSB0cmVlICovXG57XG4gIHZhciBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgdmFyIGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG4gIHZhciBjb2RlOyAgICAgICAgICAgLyogdGhlIGNvZGUgdG8gc2VuZCAqL1xuICB2YXIgZXh0cmE7ICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzIHRvIHNlbmQgKi9cblxuICBpZiAocy5sYXN0X2xpdCAhPT0gMCkge1xuICAgIGRvIHtcbiAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5sX2J1ZiArIGx4XTtcbiAgICAgIGx4Kys7XG5cbiAgICAgIGlmIChkaXN0ID09PSAwKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOyAvKiBzZW5kIGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAgIC8vVHJhY2Vjdihpc2dyYXBoKGxjKSwgKHN0ZGVycixcIiAnJWMnIFwiLCBsYykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgICAgICBjb2RlID0gX2xlbmd0aF9jb2RlW2xjXTtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy5cbiAqIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoXG4gKiAgICAgYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkX3RyZWUocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgdmFyIHN0cmVlICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuICB2YXIgbiwgbTsgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHMgKi9cbiAgdmFyIG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG4gICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqL1xuICBzLmhlYXBfbGVuID0gMDtcbiAgcy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xuICAgIGlmICh0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG4gICAgICBzLmRlcHRoW25dID0gMDtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcbiAgICBzLm9wdF9sZW4tLTtcblxuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiAtPSBzdHJlZVtub2RlICogMiArIDFdLyouTGVuKi87XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMS8qaW50IC8yKi8pOyBuID49IDE7IG4tLSkgeyBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOyB9XG5cbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuICAgKiBmcmVxdWVudCBub2Rlcy5cbiAgICovXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cblxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcblxuICAgIC8qIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtICovXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0vKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovXG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gbm9kZSsrO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG4gICAqIGdlbmVyYXRlIHRoZSBiaXQgbGVuZ3Rocy5cbiAgICovXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cbiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqL1xuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2Nhbl90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuICogYmxfdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2VuZF90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7IC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIC8qIHRyZWVbbWF4X2NvZGUrMV0uTGVuID0gLTE7ICovICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgZG8geyBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOyB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cbiAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICovXG5mdW5jdGlvbiBidWlsZF9ibF90cmVlKHMpIHtcbiAgdmFyIG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgYml0IGxlbmd0aCBmcmVxdWVuY2llcyBmb3IgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7XG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG4gIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6ICovXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcbiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuICAgKiB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGUgY291bnRzLlxuICAgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcbiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuICAgKi9cbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuICovXG5mdW5jdGlvbiBzZW5kX2FsbF90cmVlcyhzLCBsY29kZXMsIGRjb2RlcywgYmxjb2Rlcylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG57XG4gIHZhciByYW5rOyAgICAgICAgICAgICAgICAgICAgLyogaW5kZXggaW4gYmxfb3JkZXIgKi9cblxuICAvL0Fzc2VydCAobGNvZGVzID49IDI1NyAmJiBkY29kZXMgPj0gMSAmJiBibGNvZGVzID49IDQsIFwibm90IGVub3VnaCBjb2Rlc1wiKTtcbiAgLy9Bc3NlcnQgKGxjb2RlcyA8PSBMX0NPREVTICYmIGRjb2RlcyA8PSBEX0NPREVTICYmIGJsY29kZXMgPD0gQkxfQ09ERVMsXG4gIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvdW50czogXCIpKTtcbiAgc2VuZF9iaXRzKHMsIGxjb2RlcyAtIDI1NywgNSk7IC8qIG5vdCArMjU1IGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgICA1KTtcbiAgc2VuZF9iaXRzKHMsIGJsY29kZXMgLSA0LCAgNCk7IC8qIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgZm9yIChyYW5rID0gMDsgcmFuayA8IGJsY29kZXM7IHJhbmsrKykge1xuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XG4gICAgc2VuZF9iaXRzKHMsIHMuYmxfdHJlZVtibF9vcmRlcltyYW5rXSAqIDIgKyAxXS8qLkxlbiovLCAzKTtcbiAgfVxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7IC8qIGxpdGVyYWwgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibGFjayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0X2RhdGFfdHlwZShzKSB7XG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgdmFyIGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuICB2YXIgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxhY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJ3aGl0ZS1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibGFjay1saXN0ZWRcIiBvciBcIndoaXRlLWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufVxuXG5cbnZhciBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuICovXG5mdW5jdGlvbiBfdHJfaW5pdChzKVxue1xuXG4gIGlmICghc3RhdGljX2luaXRfZG9uZSkge1xuICAgIHRyX3N0YXRpY19pbml0KCk7XG4gICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG4gIH1cblxuICBzLmxfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xuICBzLmRfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fZHRyZWUsIHN0YXRpY19kX2Rlc2MpO1xuICBzLmJsX2Rlc2MgPSBuZXcgVHJlZURlc2Mocy5ibF90cmVlLCBzdGF0aWNfYmxfZGVzYyk7XG5cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcblxuICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi9cbiAgaW5pdF9ibG9jayhzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBzdG9yZWQgYmxvY2tcbiAqL1xuZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XG4gIHNlbmRfYml0cyhzLCBTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIHN0YXRpY19sdHJlZSk7XG4gIGJpX2ZsdXNoKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXG4gKi9cbmZ1bmN0aW9uIF90cl9mbHVzaF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICB2YXIgb3B0X2xlbmIsIHN0YXRpY19sZW5iOyAgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqL1xuICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7IG9wdF9sZW5iID0gc3RhdGljX2xlbmI7IH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG4gICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpO1xuXG4gIH0gZWxzZSB7XG4gICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG4gICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTtcbiAgfVxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuICAvKiBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuICAgKiBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cbiAgICovXG4gIGluaXRfYmxvY2socyk7XG5cbiAgaWYgKGxhc3QpIHtcbiAgICBiaV93aW5kdXAocyk7XG4gIH1cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXG4gIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdW5zaWduZWQgZGlzdDsgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4vLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi9cbntcbiAgLy92YXIgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTtcblxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmO1xuXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xuICBzLmxhc3RfbGl0Kys7XG5cbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYWlsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4vLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovXG4vLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4vLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4O1xuLy8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4vL1xuLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykge1xuLy8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuLy8gICAgfVxuLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7XG4vLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbi8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7XG4vLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG4vLyAgICAgIHJldHVybiB0cnVlO1xuLy8gICAgfVxuLy8gIH1cbi8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59XG5cbmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XG5leHBvcnRzLl90cl9zdG9yZWRfYmxvY2sgPSBfdHJfc3RvcmVkX2Jsb2NrO1xuZXhwb3J0cy5fdHJfZmx1c2hfYmxvY2sgID0gX3RyX2ZsdXNoX2Jsb2NrO1xuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XG5leHBvcnRzLl90cl9hbGlnbiA9IF90cl9hbGlnbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xuICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cbiAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X2luID0gMDtcbiAgLyogbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqL1xuICB0aGlzLmF2YWlsX2luID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gIHRoaXMudG90YWxfaW4gPSAwO1xuICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9vdXQgPSAwO1xuICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb3V0cHV0IHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX291dCA9IDA7XG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICB0aGlzLm1zZyA9ICcnLypaX05VTEwqLztcbiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xuICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXG4gIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gIHRoaXMuYWRsZXIgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFpTdHJlYW07XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiZml2ZWh1bmRyZWRwaXhcIjoge1xuICAgIFwiaWNvblwiOiBcIk00Mi45LDI3LjZjLTIuMSwwLTMuNiwxLTUuOCwzLjVjLTEuOS0yLjUtMy44LTMuNS01LjgtMy41Yy0xLjcsMC0zLjcsMC43LTQuNywzLjIgYy0xLTItMi43LTIuNi00LjEtMi42Yy0xLDAtMiwwLjItMi45LDEuMWwwLjYtMy4zaDYuMnYtMi41aC04LjRsLTEuNSw4djAuMmgyLjdjMC42LTEsMS41LTEuMiwyLjMtMS4yYzEuMiwwLDIuMywwLjYsMi42LDIuNHYwLjcgYy0wLjIsMS42LTEuMywyLjYtMi42LDIuNmMtMS4xLDAtMi4zLTAuNi0yLjQtMi4yaC0zdjAuN2MwLDAuMywwLjUsMS41LDAuNSwxLjZjMS4zLDIuMSwzLjQsMi41LDUsMi41YzEuOCwwLDMuOS0wLjcsNS4xLTMuMiBjMS4xLDIuNCwzLDMuMSw0LjgsMy4xYzIuMSwwLDMuNS0wLjksNS43LTMuM2MxLjksMi4zLDMuNywzLjMsNS43LDMuM2MzLjQsMCw1LjEtMi42LDUuMS01LjZDNDgsMzAsNDYuMiwyNy42LDQyLjksMjcuNnogIE0zNC43LDMzLjdjLTAuNCwwLjQtMSwwLjktMS40LDEuMWMtMC43LDAuNC0xLjMsMC42LTEuOSwwLjZjLTAuNiwwLTEuNy0wLjQtMi4xLTEuM2MtMC4xLTAuMi0wLjItMC42LTAuMi0wLjd2LTAuOSBjMC4zLTEuNSwxLjEtMi4xLDIuMi0yLjFjMC4xLDAsMC42LDAsMC45LDAuMWMwLjQsMC4xLDAuNywwLjMsMS4xLDAuNmMwLjQsMC4zLDIsMS42LDIsMS44QzM1LjMsMzMuMiwzNC45LDMzLjUsMzQuNywzMy43eiAgTTQyLjksMzUuNWMtMS4zLDAtMi42LTAuOS0zLjktMi4zYzEuNC0xLjUsMi41LTIuNiwzLjgtMi42YzEuNSwwLDIuMywxLjEsMi4zLDIuNUM0NS4yLDM0LjQsNDQuNCwzNS41LDQyLjksMzUuNXpcIixcbiAgICBcIm1hc2tcIjogXCJNMzMuMywzMS4zYy0wLjQtMC4yLTAuNy0wLjQtMS4xLTAuNmMtMC4zLTAuMS0wLjgtMC4xLTAuOS0wLjFjLTEuMSwwLTEuOSwwLjYtMi4yLDIuMXYwLjljMCwwLjEsMC4xLDAuNCwwLjIsMC43IGMwLjMsMC45LDEuNCwxLjMsMi4xLDEuM3MxLjItMC4yLDEuOS0wLjZjMC41LTAuMywxLTAuNywxLjQtMS4xYzAuMi0wLjIsMC41LTAuNSwwLjUtMC42QzM1LjMsMzIuOCwzMy43LDMxLjYsMzMuMywzMS4zeiAgTTQyLjgsMzAuNmMtMS4zLDAtMi40LDEtMy44LDIuNmMxLjMsMS41LDIuNiwyLjMsMy45LDIuM2MxLjUsMCwyLjItMS4xLDIuMi0yLjRDNDUuMiwzMS43LDQ0LjMsMzAuNiw0Mi44LDMwLjZ6IE0wLDB2NjRoNjRWMEgweiAgTTQyLjksMzguNWMtMiwwLTMuOC0xLTUuNy0zLjNjLTIuMiwyLjQtMy43LDMuMy01LjcsMy4zYy0xLjgsMC0zLjctMC43LTQuOC0zLjFjLTEuMiwyLjUtMy4zLDMuMi01LjEsMy4yYy0xLjYsMC0zLjgtMC40LTUtMi41IEMxNi41LDM2LDE2LDM0LjgsMTYsMzQuNXYtMC43aDNjMC4xLDEuNiwxLjMsMi4yLDIuNCwyLjJjMS4zLDAsMi40LTAuOSwyLjYtMi42di0wLjdjLTAuMi0xLjgtMS4zLTIuNC0yLjYtMi40IGMtMC44LDAtMS42LDAuMi0yLjMsMS4yaC0yLjd2LTAuMmwxLjUtOGg4LjR2Mi41aC02LjJsLTAuNiwzLjNjMS0wLjksMi0xLjEsMi45LTEuMWMxLjQsMCwzLjIsMC42LDQuMSwyLjZjMS0yLjQsMy0zLjIsNC43LTMuMiBjMiwwLDMuOSwxLDUuOCwzLjVjMi4xLTIuNiwzLjctMy41LDUuOC0zLjVjMy4zLDAsNS4xLDIuNCw1LjEsNS40QzQ4LDM1LjksNDYuMiwzOC41LDQyLjksMzguNXpcIixcbiAgICBcImNvbG9yXCI6IFwiIzIyMjIyMlwiXG4gIH0sXG4gIFwiYmFuZHNpbnRvd25cIjoge1xuICAgIFwiaWNvblwiOiBcIk0yNS44LDM5LjNoMTMuNHYxLjFIMjQuN1YxOGgtNS42djI4aDI1LjhWMzMuN2gtMTlWMzkuM3ogTTMxLjQsMjQuN2gtNS42djcuOGg1LjZWMjQuN3ogTTM4LjIsMjQuN2gtNS42djcuOGg1LjZWMjQuN3ogTTM5LjMsMTh2MTQuNmg1LjZWMThIMzkuM3pcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTMyLjYsMjQuN2g1LjZ2Ny44aC01LjZWMjQuN3ogTTI1LjgsMjQuN2g1LjZ2Ny44aC01LjZWMjQuN3ogTTQ0LjksNDZIMTkuMVYxOGg1LjZ2MjIuNGgxNC42IHYtMS4xSDI1Ljh2LTUuNmgxOVY0NnogTTQ0LjksMzIuNmgtNS42VjE4aDUuNlYzMi42elwiLFxuICAgIFwiY29sb3JcIjogXCIjMUI4NzkzXCJcbiAgfSxcbiAgXCJiZWhhbmNlXCI6IHtcbiAgICBcImljb25cIjogXCJNMjkuMSwzMWMwLjgtMC40LDEuNS0wLjksMS45LTEuNWMwLjQtMC42LDAuNi0xLjQsMC42LTIuM2MwLTAuOS0wLjEtMS42LTAuNC0yLjIgYy0wLjMtMC42LTAuNy0xLjEtMS4yLTEuNGMtMC41LTAuNC0xLjEtMC42LTEuOS0wLjhjLTAuNy0wLjItMS41LTAuMi0yLjQtMC4ySDE3djE4LjVoOC45YzAuOCwwLDEuNi0wLjEsMi40LTAuMyBjMC44LTAuMiwxLjUtMC41LDIuMS0xYzAuNi0wLjQsMS4xLTEsMS41LTEuN2MwLjQtMC43LDAuNS0xLjUsMC41LTIuNGMwLTEuMi0wLjMtMi4xLTAuOC0zQzMxLjEsMzEuOSwzMC4yLDMxLjMsMjkuMSwzMXogIE0yMS4xLDI1LjdoMy44YzAuNCwwLDAuNywwLDEsMC4xYzAuMywwLjEsMC42LDAuMiwwLjksMC4zYzAuMywwLjIsMC41LDAuNCwwLjYsMC42YzAuMiwwLjMsMC4yLDAuNiwwLjIsMS4xYzAsMC44LTAuMiwxLjMtMC43LDEuNyBjLTAuNSwwLjMtMS4xLDAuNS0xLjgsMC41aC00LjFWMjUuN3ogTTI4LjIsMzYuN2MtMC4yLDAuMy0wLjQsMC42LTAuNywwLjdjLTAuMywwLjItMC42LDAuMy0xLDAuNGMtMC40LDAuMS0wLjcsMC4xLTEuMSwwLjFoLTQuMyB2LTUuMWg0LjRjMC45LDAsMS42LDAuMiwyLjEsMC42YzAuNSwwLjQsMC44LDEuMSwwLjgsMkMyOC40LDM2LDI4LjMsMzYuNCwyOC4yLDM2Ljd6IE00Ni43LDMyLjNjLTAuMi0wLjktMC42LTEuOC0xLjItMi41IEM0NSwyOSw0NC4zLDI4LjQsNDMuNSwyOGMtMC44LTAuNC0xLjgtMC43LTMtMC43Yy0xLDAtMS45LDAuMi0yLjgsMC41Yy0wLjgsMC40LTEuNiwwLjktMi4yLDEuNWMtMC42LDAuNi0xLjEsMS40LTEuNCwyLjIgYy0wLjMsMC45LTAuNSwxLjgtMC41LDIuOGMwLDEsMC4yLDIsMC41LDIuOGMwLjMsMC45LDAuOCwxLjYsMS40LDIuMmMwLjYsMC42LDEuMywxLjEsMi4yLDEuNGMwLjksMC4zLDEuOCwwLjUsMi45LDAuNSBjMS41LDAsMi44LTAuMywzLjktMWMxLjEtMC43LDEuOS0xLjgsMi40LTMuNGgtMy4yYy0wLjEsMC40LTAuNCwwLjgtMSwxLjJjLTAuNSwwLjQtMS4yLDAuNi0xLjksMC42Yy0xLDAtMS44LTAuMy0yLjQtMC44IGMtMC42LTAuNS0wLjktMS41LTAuOS0yLjZINDdDNDcsMzQuMiw0NywzMy4yLDQ2LjcsMzIuM3ogTTM3LjMsMzIuOWMwLTAuMywwLjEtMC42LDAuMi0wLjljMC4xLTAuMywwLjMtMC42LDAuNS0wLjkgYzAuMi0wLjMsMC41LTAuNSwwLjktMC43YzAuNC0wLjIsMC45LTAuMywxLjUtMC4zYzAuOSwwLDEuNiwwLjMsMi4xLDAuN2MwLjQsMC41LDAuOCwxLjIsMC44LDIuMUgzNy4zeiBNNDQuMSwyMy44aC03LjV2MS44aDcuNSBWMjMuOHpcIixcbiAgICBcIm1hc2tcIjogXCJNNDAuNCwzMC4xYy0wLjYsMC0xLjEsMC4xLTEuNSwwLjNjLTAuNCwwLjItMC43LDAuNC0wLjksMC43Yy0wLjIsMC4zLTAuNCwwLjYtMC41LDAuOWMtMC4xLDAuMy0wLjIsMC42LTAuMiwwLjkgaDZjLTAuMS0wLjktMC40LTEuNi0wLjgtMi4xQzQyLDMwLjMsNDEuMywzMC4xLDQwLjQsMzAuMXogTTI1LjUsMzIuOGgtNC40djUuMWg0LjNjMC40LDAsMC44LDAsMS4xLTAuMWMwLjQtMC4xLDAuNy0wLjIsMS0wLjQgYzAuMy0wLjIsMC41LTAuNCwwLjctMC43YzAuMi0wLjMsMC4yLTAuNywwLjItMS4yYzAtMS0wLjMtMS42LTAuOC0yQzI3LjEsMzMsMjYuNCwzMi44LDI1LjUsMzIuOHogTTI3LDI5LjUgYzAuNS0wLjMsMC43LTAuOSwwLjctMS43YzAtMC40LTAuMS0wLjgtMC4yLTEuMWMtMC4yLTAuMy0wLjQtMC41LTAuNi0wLjZjLTAuMy0wLjItMC42LTAuMy0wLjktMC4zYy0wLjMtMC4xLTAuNy0wLjEtMS0wLjFoLTMuOCB2NC4zaDQuMUMyNS45LDMwLjEsMjYuNSwyOS45LDI3LDI5LjV6IE0wLDB2NjRoNjRWMEgweiBNMzYuNiwyMy44aDcuNXYxLjhoLTcuNVYyMy44eiBNMzEuOSwzOC4xYy0wLjQsMC43LTAuOSwxLjItMS41LDEuNyBjLTAuNiwwLjQtMS4zLDAuOC0yLjEsMWMtMC44LDAuMi0xLjYsMC4zLTIuNCwwLjNIMTdWMjIuNmg4LjdjMC45LDAsMS43LDAuMSwyLjQsMC4yYzAuNywwLjIsMS4zLDAuNCwxLjksMC44IGMwLjUsMC40LDAuOSwwLjgsMS4yLDEuNGMwLjMsMC42LDAuNCwxLjMsMC40LDIuMmMwLDAuOS0wLjIsMS43LTAuNiwyLjNjLTAuNCwwLjYtMSwxLjEtMS45LDEuNWMxLjEsMC4zLDIsMC45LDIuNSwxLjcgYzAuNiwwLjgsMC44LDEuOCwwLjgsM0MzMi41LDM2LjYsMzIuMywzNy40LDMxLjksMzguMXogTTQ3LDM1LjNoLTkuNmMwLDEuMSwwLjQsMi4xLDAuOSwyLjZjMC41LDAuNSwxLjMsMC44LDIuNCwwLjggYzAuNywwLDEuNC0wLjIsMS45LTAuNmMwLjUtMC40LDAuOS0wLjgsMS0xLjJoMy4yYy0wLjUsMS42LTEuMywyLjgtMi40LDMuNGMtMS4xLDAuNy0yLjQsMS0zLjksMWMtMS4xLDAtMi0wLjItMi45LTAuNSBjLTAuOC0wLjMtMS42LTAuOC0yLjItMS40Yy0wLjYtMC42LTEtMS40LTEuNC0yLjJjLTAuMy0wLjktMC41LTEuOC0wLjUtMi44YzAtMSwwLjItMS45LDAuNS0yLjhjMC4zLTAuOSwwLjgtMS42LDEuNC0yLjIgYzAuNi0wLjYsMS4zLTEuMSwyLjItMS41YzAuOC0wLjQsMS44LTAuNSwyLjgtMC41YzEuMSwwLDIuMSwwLjIsMywwLjdjMC44LDAuNCwxLjUsMSwyLjEsMS44YzAuNSwwLjcsMC45LDEuNiwxLjIsMi41IEM0NywzMy4yLDQ3LDM0LjIsNDcsMzUuM3pcIixcbiAgICBcImNvbG9yXCI6IFwiIzAwN0NGRlwiXG4gIH0sXG4gIFwiY29kZXBlblwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTI0LjQsMzVsNi44LDQuNXYtNEwyNy40LDMzTDI0LjQsMzV6IE0yMy44LDMwLjZ2Mi43bDIuMS0xLjRMMjMuOCwzMC42eiBNMzEuMiwyOC41di00TDI0LjQsMjkgbDMsMkwzMS4yLDI4LjV6IE0zOS42LDI5bC02LjgtNC41djRsMy43LDIuNUwzOS42LDI5eiBNMzIsMzBsLTMsMmwzLDJsMy0yTDMyLDMweiBNMzIsMTZjLTguOCwwLTE2LDcuMi0xNiwxNmMwLDguOCw3LjIsMTYsMTYsMTYgczE2LTcuMiwxNi0xNkM0OCwyMy4yLDQwLjgsMTYsMzIsMTZ6IE00MS45LDM1LjFjMCwwLjMtMC4xLDAuNi0wLjQsMC43bC05LjEsNS45Yy0wLjMsMC4yLTAuNiwwLjItMC45LDBsLTkuMS01LjkgYy0wLjItMC4yLTAuNC0wLjQtMC40LTAuN3YtNi4yYzAtMC4zLDAuMS0wLjYsMC40LTAuN2w5LjEtNS45YzAuMy0wLjIsMC42LTAuMiwwLjksMGw5LjEsNS45YzAuMiwwLjIsMC40LDAuNCwwLjQsMC43VjM1LjF6ICBNMzIuOCwzNS41djRsNi44LTQuNWwtMy0yTDMyLjgsMzUuNXogTTQwLjIsMzMuNHYtMi43TDM4LjEsMzJMNDAuMiwzMy40elwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNMzIsNDhjLTguOCwwLTE2LTcuMi0xNi0xNmMwLTguOCw3LjItMTYsMTYtMTZzMTYsNy4yLDE2LDE2QzQ4LDQwLjgsNDAuOCw0OCwzMiw0OHogTTMyLjUsMjIuMyBjLTAuMy0wLjItMC42LTAuMi0wLjksMGwtOS4xLDUuOWMtMC4yLDAuMi0wLjQsMC40LTAuNCwwLjd2Ni4yYzAsMC4zLDAuMSwwLjYsMC40LDAuN2w5LjEsNS45YzAuMywwLjIsMC42LDAuMiwwLjksMGw5LjEtNS45IGMwLjItMC4yLDAuNC0wLjQsMC40LTAuN3YtNi4yYzAtMC4zLTAuMS0wLjYtMC40LTAuN0wzMi41LDIyLjN6IE0zMi44LDI0LjVsNi44LDQuNWwtMywybC0zLjctMi41VjI0LjV6IE0zMS4yLDI0LjV2NEwyNy40LDMxbC0zLTIgTDMxLjIsMjQuNXogTTIzLjgsMzAuNmwyLjEsMS40bC0yLjEsMS40VjMwLjZ6IE0zMS4yLDM5LjVMMjQuNCwzNWwzLTJsMy43LDIuNVYzOS41eiBNMzIsMzRsLTMtMmwzLTJsMywyTDMyLDM0eiBNMzIuOCwzOS41di00IGwzLjctMi41bDMsMkwzMi44LDM5LjV6IE00MC4yLDMzLjRMMzguMSwzMmwyLjEtMS40VjMzLjR6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMjMTUxNTE1XCJcbiAgfSxcbiAgXCJkcmliYmJsZVwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTMyLDQ4Yy04LjgsMC0xNi03LjItMTYtMTZzNy4yLTE2LDE2LTE2IHMxNiw3LjIsMTYsMTZTNDAuOCw0OCwzMiw0OHogTTQ1LjUsMzQuMkM0NSwzNCw0MS4zLDMyLjksMzcsMzMuNmMxLjgsNC45LDIuNSw4LjksMi43LDkuN0M0Mi43LDQxLjMsNDQuOSwzOCw0NS41LDM0LjJ6IE0zNy4zLDQ0LjYgYy0wLjItMS4yLTEtNS40LTIuOS0xMC40YzAsMC0wLjEsMC0wLjEsMGMtNy43LDIuNy0xMC41LDgtMTAuNyw4LjVjMi4zLDEuOCw1LjIsMi45LDguNCwyLjlDMzMuOSw0NS43LDM1LjcsNDUuMywzNy4zLDQ0LjZ6ICBNMjEuOCw0MS4yYzAuMy0wLjUsNC4xLTYuNywxMS4xLTljMC4yLTAuMSwwLjQtMC4xLDAuNS0wLjJjLTAuMy0wLjgtMC43LTEuNi0xLjEtMi4zYy02LjgsMi0xMy40LDItMTQsMS45YzAsMC4xLDAsMC4zLDAsMC40IEMxOC4zLDM1LjUsMTkuNywzOC43LDIxLjgsNDEuMnogTTE4LjYsMjkuMmMwLjYsMCw2LjIsMCwxMi42LTEuN2MtMi4zLTQtNC43LTcuNC01LjEtNy45QzIyLjQsMjEuNSwxOS41LDI1LDE4LjYsMjkuMnogTTI4LjgsMTguNyBjMC40LDAuNSwyLjksMy45LDUuMSw4YzQuOS0xLjgsNi45LTQuNiw3LjItNC45Yy0yLjQtMi4xLTUuNi0zLjQtOS4xLTMuNEMzMC45LDE4LjQsMjkuOCwxOC41LDI4LjgsMTguN3ogTTQyLjYsMjMuNCBjLTAuMywwLjQtMi42LDMuMy03LjYsNS40YzAuMywwLjcsMC42LDEuMywwLjksMmMwLjEsMC4yLDAuMiwwLjUsMC4zLDAuN2M0LjUtMC42LDkuMSwwLjMsOS41LDAuNEM0NS42LDI4LjcsNDQuNSwyNS43LDQyLjYsMjMuNHpcIixcbiAgICBcIm1hc2tcIjogXCJNMzQuMywzNC4zYy03LjcsMi43LTEwLjUsOC0xMC43LDguNWMyLjMsMS44LDUuMiwyLjksOC40LDIuOWMxLjksMCwzLjctMC40LDUuMy0xLjEgQzM3LjEsNDMuNCwzNi4zLDM5LjIsMzQuMywzNC4zQzM0LjQsMzQuMiwzNC40LDM0LjMsMzQuMywzNC4zeiBNMzEuMywyNy42Yy0yLjMtNC00LjctNy40LTUuMS03LjljLTMuOCwxLjgtNi43LDUuMy03LjYsOS42IEMxOS4yLDI5LjIsMjQuOSwyOS4zLDMxLjMsMjcuNnogTTMzLDMyLjFjMC4yLTAuMSwwLjQtMC4xLDAuNS0wLjJjLTAuMy0wLjgtMC43LTEuNi0xLjEtMi4zYy02LjgsMi0xMy40LDItMTQsMS45IGMwLDAuMSwwLDAuMywwLDAuNGMwLDMuNSwxLjMsNi43LDMuNSw5LjFDMjIuMiw0MC42LDI1LjksMzQuNCwzMywzMi4xeiBNNDEuMSwyMS44Yy0yLjQtMi4xLTUuNi0zLjQtOS4xLTMuNCBjLTEuMSwwLTIuMiwwLjEtMy4yLDAuNGMwLjQsMC41LDIuOSwzLjksNS4xLDhDMzguOCwyNC45LDQwLjgsMjIuMSw0MS4xLDIxLjh6IE0zNC45LDI4LjhjMC4zLDAuNywwLjYsMS4zLDAuOSwyIGMwLjEsMC4yLDAuMiwwLjUsMC4zLDAuN2M0LjUtMC42LDkuMSwwLjMsOS41LDAuNGMwLTMuMi0xLjItNi4yLTMuMS04LjVDNDIuMywyMy44LDQwLDI2LjcsMzQuOSwyOC44eiBNMzcsMzMuNiBjMS44LDQuOSwyLjUsOC45LDIuNyw5LjdjMy4xLTIuMSw1LjItNS40LDUuOS05LjJDNDUsMzQsNDEuMywzMi45LDM3LDMzLjZ6IE0wLDB2NjRoNjRWMEgweiBNMzIsNDhjLTguOCwwLTE2LTcuMi0xNi0xNiBzNy4yLTE2LDE2LTE2czE2LDcuMiwxNiwxNlM0MC44LDQ4LDMyLDQ4elwiLFxuICAgIFwiY29sb3JcIjogXCIjZWE0Yzg5XCJcbiAgfSxcbiAgXCJkcm9wYm94XCI6IHtcbiAgICBcImljb25cIjogXCJNMjUuNCwxNy4xTDE2LDIzLjNsNi41LDUuMmw5LjUtNS45TDI1LjQsMTcuMXogTTE2LDMzLjdsOS40LDYuMWw2LjYtNS41bC05LjUtNS45TDE2LDMzLjd6ICBNMzIsMzQuM2w2LjYsNS41bDkuNC02LjFsLTYuNS01LjJMMzIsMzQuM3ogTTQ4LDIzLjNsLTkuNC02LjFMMzIsMjIuNmw5LjUsNS45TDQ4LDIzLjN6IE0zMiwzNS41TDI1LjQsNDFsLTIuOC0xLjh2Mi4xbDkuNCw1LjcgbDkuNC01Ljd2LTIuMUwzOC42LDQxTDMyLDM1LjV6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE00MS41LDQxLjJMMzIsNDYuOWwtOS40LTUuN3YtMi4xbDIuOCwxLjhsNi42LTUuNWw2LjYsNS41bDIuOC0xLjhWNDEuMnogTTQ4LDMzLjdsLTkuNCw2LjEgTDMyLDM0LjNsLTYuNiw1LjVMMTYsMzMuN2w2LjUtNS4yTDE2LDIzLjNsOS40LTYuMWw2LjYsNS41bDYuNi01LjVsOS40LDYuMWwtNi41LDUuMkw0OCwzMy43eiBNMjIuNSwyOC41bDkuNSw1LjlsOS41LTUuOUwzMiwyMi42IEwyMi41LDI4LjV6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMxMDgxREVcIlxuICB9LFxuICBcImVtYWlsXCI6IHtcbiAgICBcImljb25cIjogXCJNMTcsMjJ2MjBoMzBWMjJIMTd6IE00MS4xLDI1TDMyLDMyLjFMMjIuOSwyNUg0MS4xeiBNMjAsMzlWMjYuNmwxMiw5LjNsMTItOS4zVjM5SDIwelwiLFxuICAgIFwibWFza1wiOiBcIk00MS4xLDI1SDIyLjlsOS4xLDcuMUw0MS4xLDI1eiBNNDQsMjYuNmwtMTIsOS4zbC0xMi05LjNWMzloMjRWMjYuNnogTTAsMHY2NGg2NFYwSDB6IE00Nyw0MkgxN1YyMmgzMFY0MnpcIixcbiAgICBcImNvbG9yXCI6IFwiIzdmN2Y3ZlwiXG4gIH0sXG4gIFwiZmFjZWJvb2tcIjoge1xuICAgIFwiaWNvblwiOiBcIk0zNC4xLDQ3VjMzLjNoNC42bDAuNy01LjNoLTUuM3YtMy40YzAtMS41LDAuNC0yLjYsMi42LTIuNmwyLjgsMHYtNC44Yy0wLjUtMC4xLTIuMi0wLjItNC4xLTAuMiBjLTQuMSwwLTYuOSwyLjUtNi45LDdWMjhIMjR2NS4zaDQuNlY0N0gzNC4xelwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNMzkuNiwyMmwtMi44LDBjLTIuMiwwLTIuNiwxLjEtMi42LDIuNlYyOGg1LjNsLTAuNyw1LjNoLTQuNlY0N2gtNS41VjMzLjNIMjRWMjhoNC42VjI0IGMwLTQuNiwyLjgtNyw2LjktN2MyLDAsMy42LDAuMSw0LjEsMC4yVjIyelwiLFxuICAgIFwiY29sb3JcIjogXCIjM2I1OTk4XCJcbiAgfSxcbiAgXCJmbGlja3JcIjoge1xuICAgIFwiaWNvblwiOiBcIk0zMiwxNmMtOC44LDAtMTYsNy4yLTE2LDE2czcuMiwxNiwxNiwxNnMxNi03LjIsMTYtMTZTNDAuOCwxNiwzMiwxNnogTTI2LDM3Yy0yLjgsMC01LTIuMi01LTUgczIuMi01LDUtNXM1LDIuMiw1LDVTMjguOCwzNywyNiwzN3ogTTM4LDM3Yy0yLjgsMC01LTIuMi01LTVzMi4yLTUsNS01czUsMi4yLDUsNVM0MC44LDM3LDM4LDM3elwiLFxuICAgIFwibWFza1wiOiBcIk0zOCwyN2MtMi44LDAtNSwyLjItNSw1czIuMiw1LDUsNXM1LTIuMiw1LTVTNDAuOCwyNywzOCwyN3ogTTAsMHY2NGg2NFYwSDB6IE0zMiw0OGMtOC44LDAtMTYtNy4yLTE2LTE2IHM3LjItMTYsMTYtMTZzMTYsNy4yLDE2LDE2UzQwLjgsNDgsMzIsNDh6IE0yNiwyN2MtMi44LDAtNSwyLjItNSw1czIuMiw1LDUsNXM1LTIuMiw1LTVTMjguOCwyNywyNiwyN3pcIixcbiAgICBcImNvbG9yXCI6IFwiIzAwNjNkYlwiXG4gIH0sXG4gIFwiZm91cnNxdWFyZVwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTQxLjUsMTdjMCwwLTE0LjMsMC0xNi41LDBjLTIuMywwLTMsMS43LTMsMi44YzAsMS4xLDAsMjYuMywwLDI2LjNjMCwxLjIsMC43LDEuNywxLDEuOCBjMC40LDAuMSwxLjQsMC4zLDItMC40YzAsMCw3LjgtOS4xLDcuOS05LjJjMC4yLTAuMiwwLjItMC4yLDAuNC0wLjJjMC40LDAsMy40LDAsNS4xLDBjMi4xLDAsMi41LTEuNSwyLjctMi40IGMwLjItMC43LDIuMy0xMS4zLDIuOS0xNC43QzQ0LjYsMTguNCw0My45LDE3LDQxLjUsMTd6IE00MS4xLDM1LjdjMC4yLTAuNywyLjMtMTEuMywyLjktMTQuNyBNNDAuNSwyMS41bC0wLjcsMy42IGMtMC4xLDAuNC0wLjYsMC44LTEsMC44Yy0wLjUsMC02LjQsMC02LjQsMGMtMC43LDAtMS4yLDAuNS0xLjIsMS4ydjAuOGMwLDAuNywwLjUsMS4yLDEuMiwxLjJjMCwwLDUsMCw1LjUsMGMwLjUsMCwxLDAuNiwwLjksMS4xIGMtMC4xLDAuNS0wLjYsMy4zLTAuNywzLjZjLTAuMSwwLjMtMC40LDAuOC0xLDAuOGMtMC41LDAtNC41LDAtNC41LDBjLTAuOCwwLTEuMSwwLjEtMS42LDAuOGMtMC41LDAuNy01LjQsNi41LTUuNCw2LjUgYzAsMC4xLTAuMSwwLTAuMSwwVjIxLjRjMC0wLjUsMC40LTEsMS0xYzAsMCwxMi44LDAsMTMuMywwQzQwLjIsMjAuNCw0MC42LDIwLjksNDAuNSwyMS41elwiLFxuICAgIFwibWFza1wiOiBcIk0zOS43LDIwLjRjLTAuNSwwLTEzLjMsMC0xMy4zLDBjLTAuNiwwLTEsMC41LTEsMXYyMC41YzAsMC4xLDAsMC4xLDAuMSwwYzAsMCw0LjktNS45LDUuNC02LjUgYzAuNS0wLjcsMC44LTAuOCwxLjYtMC44YzAsMCwzLjksMCw0LjUsMGMwLjYsMCwxLTAuNSwxLTAuOGMwLjEtMC4zLDAuNi0zLDAuNy0zLjZjMC4xLTAuNS0wLjQtMS4xLTAuOS0xLjFjLTAuNSwwLTUuNSwwLTUuNSwwIGMtMC43LDAtMS4yLTAuNS0xLjItMS4ydi0wLjhjMC0wLjcsMC41LTEuMiwxLjItMS4yYzAsMCw2LDAsNi40LDBjMC41LDAsMC45LTAuNCwxLTAuOGwwLjctMy42QzQwLjYsMjAuOSw0MC4yLDIwLjQsMzkuNywyMC40eiAgTTAsMHY2NGg2NFYwSDB6IE00NCwyMC45bC0xLDUuMmMtMC44LDQuMi0xLjgsOS0xLjksOS41Yy0wLjIsMC45LTAuNiwyLjQtMi43LDIuNGgtNS4xYy0wLjIsMC0wLjIsMC0wLjQsMC4yIGMtMC4xLDAuMS03LjksOS4yLTcuOSw5LjJjLTAuNiwwLjctMS42LDAuNi0yLDAuNGMtMC40LTAuMS0xLTAuNi0xLTEuOGMwLDAsMC0yNS4yLDAtMjYuM2MwLTEuMSwwLjctMi44LDMtMi44YzIuMywwLDE2LjUsMCwxNi41LDAgQzQzLjksMTcsNDQuNiwxOC40LDQ0LDIwLjl6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMwMDcyYjFcIlxuICB9LFxuICBcImdpdGh1YlwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTMyLDE2Yy04LjgsMC0xNiw3LjItMTYsMTZjMCw3LjEsNC42LDEzLjEsMTAuOSwxNS4yIGMwLjgsMC4xLDEuMS0wLjMsMS4xLTAuOGMwLTAuNCwwLTEuNCwwLTIuN2MtNC41LDEtNS40LTIuMS01LjQtMi4xYy0wLjctMS44LTEuOC0yLjMtMS44LTIuM2MtMS41LTEsMC4xLTEsMC4xLTEgYzEuNiwwLjEsMi41LDEuNiwyLjUsMS42YzEuNCwyLjQsMy43LDEuNyw0LjcsMS4zYzAuMS0xLDAuNi0xLjcsMS0yLjFjLTMuNi0wLjQtNy4zLTEuOC03LjMtNy45YzAtMS43LDAuNi0zLjIsMS42LTQuMyBjLTAuMi0wLjQtMC43LTIsMC4yLTQuMmMwLDAsMS4zLTAuNCw0LjQsMS42YzEuMy0wLjQsMi42LTAuNSw0LTAuNWMxLjQsMCwyLjcsMC4yLDQsMC41YzMuMS0yLjEsNC40LTEuNiw0LjQtMS42IGMwLjksMi4yLDAuMywzLjgsMC4yLDQuMmMxLDEuMSwxLjYsMi41LDEuNiw0LjNjMCw2LjEtMy43LDcuNS03LjMsNy45YzAuNiwwLjUsMS4xLDEuNSwxLjEsM2MwLDIuMSwwLDMuOSwwLDQuNCBjMCwwLjQsMC4zLDAuOSwxLjEsMC44QzQzLjQsNDUuMSw0OCwzOS4xLDQ4LDMyQzQ4LDIzLjIsNDAuOCwxNiwzMiwxNnpcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTM3LjEsNDcuMmMtMC44LDAuMi0xLjEtMC4zLTEuMS0wLjhjMC0wLjUsMC0yLjMsMC00LjRjMC0xLjUtMC41LTIuNS0xLjEtMyBjMy42LTAuNCw3LjMtMS43LDcuMy03LjljMC0xLjctMC42LTMuMi0xLjYtNC4zYzAuMi0wLjQsMC43LTItMC4yLTQuMmMwLDAtMS4zLTAuNC00LjQsMS42Yy0xLjMtMC40LTIuNi0wLjUtNC0wLjUgYy0xLjQsMC0yLjcsMC4yLTQsMC41Yy0zLjEtMi4xLTQuNC0xLjYtNC40LTEuNmMtMC45LDIuMi0wLjMsMy44LTAuMiw0LjJjLTEsMS4xLTEuNiwyLjUtMS42LDQuM2MwLDYuMSwzLjcsNy41LDcuMyw3LjkgYy0wLjUsMC40LTAuOSwxLjEtMSwyLjFjLTAuOSwwLjQtMy4yLDEuMS00LjctMS4zYzAsMC0wLjgtMS41LTIuNS0xLjZjMCwwLTEuNiwwLTAuMSwxYzAsMCwxLDAuNSwxLjgsMi4zYzAsMCwwLjksMy4xLDUuNCwyLjEgYzAsMS4zLDAsMi4zLDAsMi43YzAsMC40LTAuMywwLjktMS4xLDAuOEMyMC42LDQ1LjEsMTYsMzkuMSwxNiwzMmMwLTguOCw3LjItMTYsMTYtMTZjOC44LDAsMTYsNy4yLDE2LDE2IEM0OCwzOS4xLDQzLjQsNDUuMSwzNy4xLDQ3LjJ6XCIsXG4gICAgXCJjb2xvclwiOiBcIiM0MTgzYzRcIlxuICB9LFxuICBcImdvb2dsZV9wbGF5XCI6IHtcbiAgICBcImljb25cIjogXCJNMjQuNCw0NS42bDE2LTguOGwtMy42LTMuNkwyNC40LDQ1LjZ6IE0yMi4yLDE4LjVjLTAuMSwwLjItMC4yLDAuNS0wLjIsMC45djI1LjEgYzAsMC40LDAuMSwwLjYsMC4yLDAuOUwzNS42LDMyTDIyLjIsMTguNXogTTQ3LjEsMzAuOEw0Mi4xLDI4TDM4LjEsMzJsNCw0bDUtMi44QzQ4LjMsMzIuNSw0OC4zLDMxLjQsNDcuMSwzMC44eiBNNDAuNCwyNy4xIGwtMTUuOS04LjhsMTIuMywxMi4zTDQwLjQsMjcuMXpcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTQwLjQsMjcuMWwtMy42LDMuNkwyNC41LDE4LjRMNDAuNCwyNy4xeiBNMjIsNDQuNVYxOS40YzAtMC40LDAuMS0wLjcsMC4yLTAuOUwzNS42LDMyIEwyMi4yLDQ1LjRDMjIuMSw0NS4yLDIyLDQ0LjksMjIsNDQuNXogTTI0LjQsNDUuNmwxMi40LTEyLjRsMy42LDMuNkwyNC40LDQ1LjZ6IE00Ny4xLDMzLjJsLTUsMi44bC00LTRsMy45LTMuOWw1LjEsMi44IEM0OC4zLDMxLjQsNDguMywzMi41LDQ3LjEsMzMuMnpcIixcbiAgICBcImNvbG9yXCI6IFwiIzQwQkJDMVwiXG4gIH0sXG4gIFwiZ29vZ2xlXCI6IHtcbiAgICBcImljb25cIjogXCJNMzUuNCwxN2gtOGMtMS4xLDAtMi4yLDAuMS0zLjQsMC40IGMtMS4yLDAuMy0yLjQsMC45LTMuNSwxLjhjLTEuNywxLjYtMi41LDMuNC0yLjUsNS40YzAsMS42LDAuNiwzLjEsMS44LDQuM2MxLjEsMS4zLDIuNywyLDQuOSwyYzAuNCwwLDAuOCwwLDEuMy0wLjEgYy0wLjEsMC4yLTAuMiwwLjQtMC4yLDAuN2MtMC4xLDAuMi0wLjIsMC41LTAuMiwwLjljMCwwLjYsMC4xLDEuMSwwLjQsMS41YzAuMiwwLjQsMC41LDAuOCwwLjgsMS4yYy0wLjksMC0yLjEsMC4xLTMuNSwwLjQgYy0xLjQsMC4yLTIuOCwwLjctNC4xLDEuNWMtMS4yLDAuNy0xLjksMS41LTIuNCwyLjRjLTAuNSwwLjktMC43LDEuNy0wLjcsMi41YzAsMS41LDAuNywyLjgsMi4xLDMuOWMxLjQsMS4yLDMuNSwxLjgsNi4zLDEuOCBjMy4zLTAuMSw1LjktMC45LDcuNy0yLjRjMS43LTEuNSwyLjYtMy4yLDIuNi01LjJjMC0xLjQtMC4zLTIuNS0wLjktMy4zYy0wLjYtMC44LTEuNC0xLjYtMi4yLTIuM2wtMS40LTEuMSBjLTAuMi0wLjItMC40LTAuNC0wLjYtMC43Yy0wLjItMC4zLTAuNC0wLjYtMC40LTFjMC0wLjQsMC4xLTAuOCwwLjQtMS4xYzAuMi0wLjMsMC40LTAuNiwwLjctMC44YzAuNC0wLjQsMC44LTAuNywxLjItMS4xIGMwLjMtMC40LDAuNi0wLjcsMC45LTEuMmMwLjYtMC45LDAuOS0yLDAuOS0zLjRjMC0wLjgtMC4xLTEuNS0wLjMtMi4xYy0wLjItMC42LTAuNS0xLjEtMC43LTEuNWMtMC4zLTAuNS0wLjYtMC44LTAuOS0xLjIgYy0wLjMtMC4zLTAuNi0wLjUtMC44LTAuN0gzM0wzNS40LDE3eiBNMzEsMzguOWMwLjcsMC44LDEsMS42LDEsMi43YzAsMS4zLTAuNSwyLjMtMS41LDMuMWMtMSwwLjgtMi40LDEuMi00LjMsMS4zIGMtMi4xLDAtMy44LTAuNS01LTEuNGMtMS4zLTAuOS0xLjktMi4xLTEuOS0zLjVjMC0wLjcsMC4xLTEuMywwLjQtMS44YzAuMy0wLjUsMC42LTAuOSwwLjktMS4yYzAuNC0wLjMsMC44LTAuNiwxLjEtMC43IGMwLjQtMC4yLDAuNy0wLjMsMC45LTAuNGMwLjktMC4zLDEuNy0wLjUsMi41LTAuNmMwLjgtMC4xLDEuNC0wLjEsMS42LTAuMWMwLjMsMCwwLjYsMCwwLjksMEMyOS4yLDM3LjMsMzAuMywzOC4yLDMxLDM4Ljl6ICBNMjkuNywyNy4xYy0wLjEsMC41LTAuMywxLjEtMC43LDEuNmMtMC43LDAuNy0xLjYsMS4xLTIuNiwxLjFjLTAuOCwwLTEuNi0wLjMtMi4yLTAuOGMtMC42LTAuNS0xLjItMS4xLTEuNi0xLjkgYy0wLjgtMS42LTEuMy0zLjEtMS4zLTQuNWMwLTEuMSwwLjMtMi4xLDAuOS0zYzAuNy0wLjksMS42LTEuMywyLjctMS4zYzAuOCwwLDEuNSwwLjMsMi4yLDAuN2MwLjYsMC41LDEuMSwxLjEsMS41LDEuOSBjMC44LDEuNiwxLjIsMy4yLDEuMiw0LjhDMjkuOCwyNi4xLDI5LjgsMjYuNSwyOS43LDI3LjF6IE00My43LDI5LjV2LTQuM2gtMi41djQuM0gzN1YzMmg0LjJ2NC4yaDIuNVYzMkg0OHYtMi41SDQzLjd6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE0zMS4zLDE5LjFjMC4zLDAuMywwLjYsMC43LDAuOSwxLjJjMC4zLDAuNCwwLjUsMC45LDAuNywxLjVjMC4yLDAuNiwwLjMsMS4zLDAuMywyLjEgYzAsMS40LTAuMywyLjYtMC45LDMuNGMtMC4zLDAuNC0wLjYsMC44LTAuOSwxLjJjLTAuNCwwLjQtMC44LDAuNy0xLjIsMS4xYy0wLjIsMC4yLTAuNSwwLjUtMC43LDAuOGMtMC4yLDAuMy0wLjQsMC43LTAuNCwxLjEgYzAsMC40LDAuMSwwLjgsMC40LDFjMC4yLDAuMywwLjQsMC41LDAuNiwwLjdsMS40LDEuMWMwLjgsMC43LDEuNiwxLjUsMi4yLDIuM2MwLjYsMC44LDAuOSwyLDAuOSwzLjNjMCwxLjktMC45LDMuNy0yLjYsNS4yIGMtMS44LDEuNi00LjMsMi40LTcuNywyLjRjLTIuOCwwLTQuOS0wLjYtNi4zLTEuOGMtMS40LTEuMS0yLjEtMi40LTIuMS0zLjljMC0wLjcsMC4yLTEuNiwwLjctMi41YzAuNC0wLjksMS4yLTEuNywyLjQtMi40IGMxLjMtMC43LDIuNy0xLjIsNC4xLTEuNWMxLjQtMC4yLDIuNi0wLjMsMy41LTAuNGMtMC4zLTAuNC0wLjUtMC44LTAuOC0xLjJjLTAuMy0wLjQtMC40LTAuOS0wLjQtMS41YzAtMC40LDAtMC42LDAuMi0wLjkgYzAuMS0wLjIsMC4yLTAuNSwwLjItMC43Yy0wLjUsMC4xLTAuOSwwLjEtMS4zLDAuMWMtMi4xLDAtMy44LTAuNy00LjktMmMtMS4yLTEuMi0xLjgtMi43LTEuOC00LjNjMC0yLDAuOC0zLjgsMi41LTUuNCBjMS4xLTAuOSwyLjMtMS42LDMuNS0xLjhjMS4yLTAuMiwyLjMtMC40LDMuNC0wLjRoOEwzMywxOC40aC0yLjVDMzAuNywxOC42LDMxLDE4LjgsMzEuMywxOS4xeiBNNDgsMzJoLTQuM3Y0LjJoLTIuNVYzMkgzN3YtMi41IGg0LjJ2LTQuM2gyLjV2NC4zSDQ4VjMyeiBNMjcuMSwxOS4xYy0wLjYtMC41LTEuNC0wLjctMi4yLTAuN2MtMS4xLDAtMiwwLjUtMi43LDEuM2MtMC42LDAuOS0wLjksMS45LTAuOSwzYzAsMS41LDAuNCwzLDEuMyw0LjUgYzAuNCwwLjcsMC45LDEuNCwxLjYsMS45YzAuNiwwLjUsMS40LDAuOCwyLjIsMC44YzEuMSwwLDEuOS0wLjQsMi42LTEuMWMwLjMtMC41LDAuNi0xLDAuNy0xLjZjMC4xLTAuNSwwLjEtMSwwLjEtMS40IGMwLTEuNi0wLjQtMy4yLTEuMi00LjhDMjguMiwyMC4yLDI3LjcsMTkuNSwyNy4xLDE5LjF6IE0yNi45LDM2LjJjLTAuMiwwLTAuNywwLTEuNiwwLjFjLTAuOCwwLjEtMS43LDAuMy0yLjUsMC42IGMtMC4yLDAuMS0wLjUsMC4yLTAuOSwwLjRjLTAuNCwwLjItMC43LDAuNC0xLjEsMC43Yy0wLjQsMC4zLTAuNywwLjctMC45LDEuMmMtMC4zLDAuNS0wLjQsMS4xLTAuNCwxLjhjMCwxLjQsMC42LDIuNiwxLjksMy41IGMxLjIsMC45LDIuOSwxLjQsNSwxLjRjMS45LDAsMy4zLTAuNCw0LjMtMS4zYzEtMC44LDEuNS0xLjgsMS41LTMuMWMwLTEtMC4zLTEuOS0xLTIuN2MtMC43LTAuNy0xLjgtMS42LTMuMy0yLjYgQzI3LjUsMzYuMiwyNy4yLDM2LjIsMjYuOSwzNi4yelwiLFxuICAgIFwiY29sb3JcIjogXCIjZGQ0YjM5XCJcbiAgfSxcbiAgXCJpbnN0YWdyYW1cIjoge1xuICAgIFwiaWNvblwiOiBcIk00My41LDI5LjdoLTIuNmMwLjIsMC43LDAuMywxLjUsMC4zLDIuMyBjMCw1LjEtNC4xLDkuMi05LjIsOS4yYy01LjEsMC05LjItNC4xLTkuMi05LjJjMC0wLjgsMC4xLTEuNiwwLjMtMi4zaC0yLjZ2MTIuN2MwLDAuNiwwLjUsMS4yLDEuMiwxLjJoMjAuOGMwLjYsMCwxLjItMC41LDEuMi0xLjIgVjI5Ljd6IE00My41LDIxLjZjMC0wLjYtMC41LTEuMi0xLjItMS4yaC0zLjVjLTAuNiwwLTEuMiwwLjUtMS4yLDEuMnYzLjVjMCwwLjYsMC41LDEuMiwxLjIsMS4yaDMuNWMwLjYsMCwxLjItMC41LDEuMi0xLjJWMjEuNnogIE0zMiwyNi4yYy0zLjIsMC01LjgsMi42LTUuOCw1LjhjMCwzLjIsMi42LDUuOCw1LjgsNS44czUuOC0yLjYsNS44LTUuOEMzNy44LDI4LjgsMzUuMiwyNi4yLDMyLDI2LjIgTTQzLjUsNDdIMjAuNSBjLTEuOSwwLTMuNS0xLjYtMy41LTMuNVYyMC41YzAtMS45LDEuNS0zLjUsMy41LTMuNWgyMy4xYzEuOSwwLDMuNSwxLjUsMy41LDMuNXYyMy4xQzQ3LDQ1LjQsNDUuNSw0Nyw0My41LDQ3XCIsXG4gICAgXCJtYXNrXCI6IFwiTTQxLjIsMzJjMCw1LjEtNC4xLDkuMi05LjIsOS4yYy01LjEsMC05LjItNC4xLTkuMi05LjJjMC0wLjgsMC4xLTEuNiwwLjMtMi4zaC0yLjZ2MTIuN2MwLDAuNiwwLjUsMS4yLDEuMiwxLjIgaDIwLjhjMC42LDAsMS4yLTAuNSwxLjItMS4yVjI5LjdoLTIuNkM0MS4xLDMwLjQsNDEuMiwzMS4yLDQxLjIsMzJ6IE0zMiwzNy44YzMuMiwwLDUuOC0yLjYsNS44LTUuOGMwLTMuMi0yLjYtNS44LTUuOC01LjggYy0zLjIsMC01LjgsMi42LTUuOCw1LjhDMjYuMiwzNS4yLDI4LjgsMzcuOCwzMiwzNy44eiBNNDIuNCwyMC41aC0zLjVjLTAuNiwwLTEuMiwwLjUtMS4yLDEuMnYzLjVjMCwwLjYsMC41LDEuMiwxLjIsMS4yaDMuNSBjMC42LDAsMS4yLTAuNSwxLjItMS4ydi0zLjVDNDMuNSwyMSw0MywyMC41LDQyLjQsMjAuNXogTTAsMHY2NGg2NFYwSDB6IE00Nyw0My41YzAsMS45LTEuNSwzLjUtMy41LDMuNUgyMC41IGMtMS45LDAtMy41LTEuNi0zLjUtMy41VjIwLjVjMC0xLjksMS41LTMuNSwzLjUtMy41aDIzLjFjMS45LDAsMy41LDEuNSwzLjUsMy41VjQzLjV6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMzZjcyOWJcIlxuICB9LFxuICBcIml0dW5lc1wiOiB7XG4gICAgXCJpY29uXCI6IFwiTTQxLjEsMTdjLTAuMSwwLTAuMiwwLTAuMywwbC0xNC43LDNjLTAuNiwwLjEtMS4xLDAuNy0xLjEsMS40djE3LjZjMCwwLjgtMC42LDEuNC0xLjQsMS40IGgtMi44Yy0xLjksMC0zLjQsMS41LTMuNCwzLjRjMCwxLjksMS41LDMuNCwzLjQsMy40aDJjMi4yLDAsNC0xLjgsNC00VjI3LjRjMC0wLjQsMC4zLTAuOCwwLjctMC45bDEyLjEtMi40YzAuMSwwLDAuMSwwLDAuMiwwIGMwLjUsMCwwLjksMC40LDAuOSwwLjl2MTFjMCwwLjgtMC42LDEuNC0xLjQsMS40aC0yLjhjLTEuOSwwLTMuNCwxLjUtMy40LDMuNGMwLDEuOSwxLjUsMy40LDMuNCwzLjRoMmMyLjIsMCw0LTEuOCw0LTRWMTguNCBDNDIuNSwxNy42LDQxLjksMTcsNDEuMSwxN3pcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTQyLjUsNDBjMCwyLjItMS44LDQtNCw0aC0yYy0xLjksMC0zLjQtMS41LTMuNC0zLjRzMS41LTMuNCwzLjQtMy40aDIuOGMwLjgsMCwxLjQtMC42LDEuNC0xLjQgdi0xMWMwLTAuNS0wLjQtMC45LTAuOS0wLjljLTAuMSwwLTAuMSwwLTAuMiwwbC0xMi4xLDIuNGMtMC40LDAuMS0wLjcsMC40LTAuNywwLjlWNDNjMCwyLjItMS44LDQtNCw0aC0yYy0xLjksMC0zLjQtMS41LTMuNC0zLjQgYzAtMS45LDEuNS0zLjQsMy40LTMuNGgyLjhjMC44LDAsMS40LTAuNiwxLjQtMS40VjIxLjNjMC0wLjcsMC41LTEuMiwxLjEtMS40bDE0LjctM2MwLjEsMCwwLjIsMCwwLjMsMGMwLjgsMCwxLjQsMC42LDEuNCwxLjRWNDB6XCIsXG4gICAgXCJjb2xvclwiOiBcIiNFMDQ5RDFcIlxuICB9LFxuICBcImxpbmtlZGluXCI6IHtcbiAgICBcImljb25cIjogXCJNMjAuNCw0NGg1LjRWMjYuNmgtNS40VjQ0eiBNMjMuMSwxOGMtMS43LDAtMy4xLDEuNC0zLjEsMy4xYzAsMS43LDEuNCwzLjEsMy4xLDMuMSBjMS43LDAsMy4xLTEuNCwzLjEtMy4xQzI2LjIsMTkuNCwyNC44LDE4LDIzLjEsMTh6IE0zOS41LDI2LjJjLTIuNiwwLTQuNCwxLjQtNS4xLDIuOGgtMC4xdi0yLjRoLTUuMlY0NGg1LjR2LTguNiBjMC0yLjMsMC40LTQuNSwzLjItNC41YzIuOCwwLDIuOCwyLjYsMi44LDQuNlY0NEg0NnYtOS41QzQ2LDI5LjgsNDUsMjYuMiwzOS41LDI2LjJ6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE0yNS44LDQ0aC01LjRWMjYuNmg1LjRWNDR6IE0yMy4xLDI0LjNjLTEuNywwLTMuMS0xLjQtMy4xLTMuMWMwLTEuNywxLjQtMy4xLDMuMS0zLjEgYzEuNywwLDMuMSwxLjQsMy4xLDMuMUMyNi4yLDIyLjksMjQuOCwyNC4zLDIzLjEsMjQuM3ogTTQ2LDQ0aC01LjR2LTguNGMwLTIsMC00LjYtMi44LTQuNmMtMi44LDAtMy4yLDIuMi0zLjIsNC41VjQ0aC01LjRWMjYuNiBoNS4yVjI5aDAuMWMwLjctMS40LDIuNS0yLjgsNS4xLTIuOGM1LjUsMCw2LjUsMy42LDYuNSw4LjNWNDR6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMwMDdmYjFcIlxuICB9LFxuICBcIm1lZGl1bVwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTQ3LDIzLjdoLTEuMmMtMC40LDAtMC45LDAuNi0wLjksMXYxNC43YzAsMC40LDAuNSwxLDAuOSwxSDQ3djMuNEgzNi40di0zLjRoMi4xVjI0LjloLTAuMSBsLTUuMywxOC45aC00LjFsLTUuMi0xOC45aC0wLjF2MTUuNUgyNnYzLjRoLTl2LTMuNGgxLjJjMC41LDAsMS0wLjYsMS0xVjI0LjdjMC0wLjQtMC41LTEtMS0xSDE3di0zLjZoMTEuM2wzLjcsMTMuOGgwLjFsMy43LTEzLjggSDQ3VjIzLjd6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE00NywyMy43aC0xLjJjLTAuNCwwLTAuOSwwLjYtMC45LDF2MTQuN2MwLDAuNCwwLjUsMSwwLjksMUg0N3YzLjRIMzYuNHYtMy40aDIuMVYyNC45aC0wLjEgbC01LjMsMTguOWgtNC4xbC01LjItMTguOWgtMC4xdjE1LjVIMjZ2My40aC05di0zLjRoMS4yYzAuNSwwLDEtMC42LDEtMVYyNC43YzAtMC40LTAuNS0xLTEtMUgxN3YtMy42aDExLjNsMy43LDEzLjhoMC4xbDMuNy0xMy44IEg0N1YyMy43elwiLFxuICAgIFwiY29sb3JcIjogXCIjMzMzMzMyXCJcbiAgfSxcbiAgXCJtZWV0dXBcIjoge1xuICAgIFwiaWNvblwiOiBcIk0zMC44LDMzLjRjMC02LjMsMS45LTExLjksMy41LTE1LjNjMC41LTEuMSwwLjktMS40LDEuOS0xLjRjMS4zLDAsMi45LDAuMiw0LjEsMC40IGMxLjEsMC4yLDEuNSwxLjYsMS43LDIuNWMxLjIsNC41LDQuNywxOC43LDUuNSwyMi40YzAuMiwwLjgsMC42LDIsMC4xLDIuM2MtMC40LDAuMi0yLjUsMC45LTMuOSwxYy0wLjYsMC4xLTEuMS0wLjYtMS40LTEuNSBjLTEuNS00LjYtMy41LTExLjgtNS4yLTE2LjZjMCwzLjctMC4zLDEwLjgtMC40LDEyYy0wLjEsMS43LTAuNCwzLjctMS44LDMuOWMtMS4xLDAuMi0yLjQsMC40LTQsMC40Yy0xLjMsMC0xLjgtMC45LTIuNC0xLjggYy0xLTEuNC0zLjEtNC44LTQuMS02LjljMC4zLDIuMywwLjcsNC43LDAuOSw1LjhjMC4xLDAuOCwwLDEuNS0wLjYsMS45Yy0xLDAuNy0zLjIsMS40LTQuMSwxLjRjLTAuOCwwLTEuNS0wLjgtMS42LTEuNiBjLTAuNy0zLjQtMS4yLTgtMS4xLTExLjFjMC0yLjgsMC01LjksMC4yLTguM2MwLTAuNywwLjMtMS4xLDAuOS0xLjRjMS4yLTAuNSwzLTAuNiw0LjctMC4zYzAuOCwwLjEsMSwwLjgsMS40LDEuNCBDMjYuOSwyNS41LDI4LjksMjkuNSwzMC44LDMzLjR6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE00Ny44LDQ0LjNjLTAuNCwwLjItMi41LDAuOS0zLjksMWMtMC42LDAuMS0xLjEtMC42LTEuNC0xLjVjLTEuNS00LjYtMy41LTExLjgtNS4yLTE2LjYgYzAsMy43LTAuMywxMC44LTAuNCwxMmMtMC4xLDEuNy0wLjQsMy43LTEuOCwzLjljLTEuMSwwLjItMi40LDAuNC00LDAuNGMtMS4zLDAtMS44LTAuOS0yLjQtMS44Yy0xLTEuNC0zLjEtNC44LTQuMS02LjkgYzAuMywyLjMsMC43LDQuNywwLjksNS44YzAuMSwwLjgsMCwxLjUtMC42LDEuOWMtMSwwLjctMy4yLDEuNC00LjEsMS40Yy0wLjgsMC0xLjUtMC44LTEuNi0xLjZjLTAuNy0zLjQtMS4yLTgtMS4xLTExLjEgYzAtMi44LDAtNS45LDAuMi04LjNjMC0wLjcsMC4zLTEuMSwwLjktMS40YzEuMi0wLjUsMy0wLjYsNC43LTAuM2MwLjgsMC4xLDEsMC44LDEuNCwxLjRjMS43LDIuOCwzLjgsNi43LDUuNywxMC42IGMwLTYuMywxLjktMTEuOSwzLjUtMTUuM2MwLjUtMS4xLDAuOS0xLjQsMS45LTEuNGMxLjMsMCwyLjksMC4yLDQuMSwwLjRjMS4xLDAuMiwxLjUsMS42LDEuNywyLjVjMS4yLDQuNSw0LjcsMTguNyw1LjUsMjIuNCBDNDcuOCw0Mi44LDQ4LjMsNDQsNDcuOCw0NC4zelwiLFxuICAgIFwiY29sb3JcIjogXCIjRTUxOTM3XCJcbiAgfSxcbiAgXCJucG1cIjoge1xuICAgIFwiaWNvblwiOiBcIk0xOC45LDIwdjI1LjZIMzJWMjUuNWg3LjVWNDZoNS42VjIwSDE4Ljl6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTY4LDB2NjhIMFYwSDY4eiBNMTguOSwyMHYyNS42SDMyVjI1LjVoNy41VjQ2aDUuNlYyMEgxOC45elwiLFxuICAgIFwiY29sb3JcIjogXCIjY2IzODM3XCJcbiAgfSxcbiAgXCJwaW50ZXJlc3RcIjoge1xuICAgIFwiaWNvblwiOiBcIk0zMiwxNmMtOC44LDAtMTYsNy4yLTE2LDE2YzAsNi42LDMuOSwxMi4yLDkuNiwxNC43YzAtMS4xLDAtMi41LDAuMy0zLjcgYzAuMy0xLjMsMi4xLTguNywyLjEtOC43cy0wLjUtMS0wLjUtMi41YzAtMi40LDEuNC00LjEsMy4xLTQuMWMxLjUsMCwyLjIsMS4xLDIuMiwyLjRjMCwxLjUtMC45LDMuNy0xLjQsNS43IGMtMC40LDEuNywwLjksMy4xLDIuNSwzLjFjMywwLDUuMS0zLjksNS4xLTguNWMwLTMuNS0yLjQtNi4xLTYuNy02LjFjLTQuOSwwLTcuOSwzLjYtNy45LDcuN2MwLDEuNCwwLjQsMi40LDEuMSwzLjEgYzAuMywwLjMsMC4zLDAuNSwwLjIsMC45Yy0wLjEsMC4zLTAuMywxLTAuMywxLjNjLTAuMSwwLjQtMC40LDAuNi0wLjgsMC40Yy0yLjItMC45LTMuMy0zLjQtMy4zLTYuMWMwLTQuNSwzLjgtMTAsMTEuNC0xMCBjNi4xLDAsMTAuMSw0LjQsMTAuMSw5LjJjMCw2LjMtMy41LDExLTguNiwxMWMtMS43LDAtMy40LTAuOS0zLjktMmMwLDAtMC45LDMuNy0xLjEsNC40Yy0wLjMsMS4yLTEsMi41LTEuNiwzLjQgYzEuNCwwLjQsMywwLjcsNC41LDAuN2M4LjgsMCwxNi03LjIsMTYtMTZDNDgsMjMuMiw0MC44LDE2LDMyLDE2elwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNMzIsNDhjLTEuNiwwLTMuMS0wLjItNC41LTAuN2MwLjYtMSwxLjMtMi4yLDEuNi0zLjRjMC4yLTAuNywxLjEtNC40LDEuMS00LjQgYzAuNiwxLjEsMi4yLDIsMy45LDJjNS4xLDAsOC42LTQuNyw4LjYtMTFjMC00LjctNC05LjItMTAuMS05LjJjLTcuNiwwLTExLjQsNS41LTExLjQsMTBjMCwyLjgsMSw1LjIsMy4zLDYuMSBjMC40LDAuMSwwLjcsMCwwLjgtMC40YzAuMS0wLjMsMC4yLTEsMC4zLTEuM2MwLjEtMC40LDAuMS0wLjUtMC4yLTAuOWMtMC42LTAuOC0xLjEtMS43LTEuMS0zLjFjMC00LDMtNy43LDcuOS03LjcgYzQuMywwLDYuNywyLjYsNi43LDYuMWMwLDQuNi0yLDguNS01LjEsOC41Yy0xLjcsMC0yLjktMS40LTIuNS0zLjFjMC41LTIsMS40LTQuMiwxLjQtNS43YzAtMS4zLTAuNy0yLjQtMi4yLTIuNCBjLTEuNywwLTMuMSwxLjgtMy4xLDQuMWMwLDEuNSwwLjUsMi41LDAuNSwyLjVzLTEuOCw3LjQtMi4xLDguN2MtMC4zLDEuMi0wLjMsMi42LTAuMywzLjdDMTkuOSw0NC4yLDE2LDM4LjYsMTYsMzIgYzAtOC44LDcuMi0xNiwxNi0xNmM4LjgsMCwxNiw3LjIsMTYsMTZDNDgsNDAuOCw0MC44LDQ4LDMyLDQ4elwiLFxuICAgIFwiY29sb3JcIjogXCIjY2IyMTI4XCJcbiAgfSxcbiAgXCJyZGlvXCI6IHtcbiAgICBcImljb25cIjogXCJNNDcuMywyNS43Yy0zLjIsMC4xLTcuMS0yLjQtOC43LTMuNGMtMC4xLTAuMS0wLjMtMC4yLTAuNC0wLjJjLTAuMi0wLjEtMC4zLTAuMi0wLjUtMC4zdjkuM2gwIGMwLDAuOC0wLjIsMS43LTAuOCwyLjZsMCwwLjFjLTEuNSwyLjQtNC43LDMuOS03LjcsMi45Yy0yLjktMS0zLjctMy44LTIuMS02LjNsMC0wLjFjMS41LTIuNCw0LjctMy45LDcuNy0yLjkgYzAuMiwwLjEsMC40LDAuMiwwLjYsMC4zdi02LjhjLTEuMS0wLjMtMi4yLTAuNS0zLjQtMC41Yy02LjksMC0xMiw1LjItMTIsMTEuNnYwLjFjMCw2LjQsNS4xLDExLjUsMTIsMTEuNWM2LjksMCwxMi01LjIsMTItMTEuNiB2LTAuMWMwLTAuNSwwLTEtMC4xLTEuNUM0Ny41LDI5LjUsNDksMjUuOCw0Ny4zLDI1Ljd6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE00My45LDMwLjVjMC4xLDAuNSwwLjEsMSwwLjEsMS41VjMyYzAsNi40LTUuMSwxMS42LTEyLDExLjZjLTYuOSwwLTEyLTUuMS0xMi0xMS41VjMyIGMwLTYuNCw1LjEtMTEuNiwxMi0xMS42YzEuMiwwLDIuMywwLjIsMy40LDAuNXY2LjhjLTAuMi0wLjEtMC40LTAuMi0wLjYtMC4zYy0zLTEtNi4yLDAuNC03LjcsMi45bDAsMC4xYy0xLjUsMi41LTAuOCw1LjMsMi4xLDYuMyBjMywxLDYuMi0wLjQsNy43LTIuOWwwLTAuMWMwLjUtMC44LDAuOC0xLjcsMC44LTIuNmgwdi05LjNjMC4yLDAuMSwwLjMsMC4yLDAuNSwwLjNjMC4xLDAuMSwwLjMsMC4yLDAuNCwwLjJjMS41LDEsNS40LDMuNSw4LjcsMy40IEM0OSwyNS44LDQ3LjUsMjkuNSw0My45LDMwLjV6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMwNDc1QzVcIlxuICB9LFxuICBcInJzc1wiOiB7XG4gICAgXCJpY29uXCI6IFwiTTI0LDM2Yy0yLjIsMC00LDEuOC00LDRjMCwyLjIsMS44LDQsNCw0czQtMS44LDQtNEMyOCwzNy44LDI2LjIsMzYsMjQsMzZ6IE0yMywxOCBjLTEuMSwwLTIsMC45LTIsMnMwLjksMiwyLDJjMTAuNSwwLDE5LDguNSwxOSwxOWMwLDEuMSwwLjksMiwyLDJzMi0wLjksMi0yQzQ2LDI4LjMsMzUuNywxOCwyMywxOHogTTIzLDI3Yy0xLjEsMC0yLDAuOS0yLDIgczAuOSwyLDIsMmM1LjUsMCwxMCw0LjUsMTAsMTBjMCwxLjEsMC45LDIsMiwyczItMC45LDItMkMzNywzMy4zLDMwLjcsMjcsMjMsMjd6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE0yNCw0NGMtMi4yLDAtNC0xLjgtNC00YzAtMi4yLDEuOC00LDQtNHM0LDEuOCw0LDRDMjgsNDIuMiwyNi4yLDQ0LDI0LDQ0eiBNMzUsNDMgYy0xLjEsMC0yLTAuOS0yLTJjMC01LjUtNC41LTEwLTEwLTEwYy0xLjEsMC0yLTAuOS0yLTJzMC45LTIsMi0yYzcuNywwLDE0LDYuMywxNCwxNEMzNyw0Mi4xLDM2LjEsNDMsMzUsNDN6IE00NCw0MyBjLTEuMSwwLTItMC45LTItMmMwLTEwLjUtOC41LTE5LTE5LTE5Yy0xLjEsMC0yLTAuOS0yLTJzMC45LTIsMi0yYzEyLjcsMCwyMywxMC4zLDIzLDIzQzQ2LDQyLjEsNDUuMSw0Myw0NCw0M3pcIixcbiAgICBcImNvbG9yXCI6IFwiI0VGODczM1wiXG4gIH0sXG4gIFwic2hhcmV0aGlzXCI6IHtcbiAgICBcImljb25cIjogXCJNMjguMzg3NSwzMi4wMDAxQzI4LjM4NzUsMzIuMDg0MyAyOC4zNjgzLDMyLjE2MzIgMjguMzYzMywzMi4yNDcxTDM3LjE2NDcsMzYuNjQ2NEMzNy45MTgyLDM2LjAwODMgMzguODgyMywzNS42MSAzOS45NDc0LDM1LjYxQzQyLjM0MTgsMzUuNjEwNSA0NC4yODIxLDM3LjU1MDkgNDQuMjgyMSwzOS45NDVDNDQuMjgyMSw0Mi4zNDE4IDQyLjM0MTcsNDQuMjgyMSAzOS45NDc0LDQ0LjI4MjFDMzcuNTUxLDQ0LjI4MjEgMzUuNjEyNyw0Mi4zNDE3IDM1LjYxMjcsMzkuOTQ1QzM1LjYxMjcsMzkuODU4NyAzNS42MzE5LDM5Ljc4MTYgMzUuNjM2NywzOS42OThMMjYuODM1MywzNS4yOTg0QzI2LjA3OTUsMzUuOTM0MSAyNS4xMTc3LDM2LjMzMjQgMjQuMDUyNiwzNi4zMzI0QzIxLjY1ODQsMzYuMzMyNCAxOS43MTc5LDM0LjM5NDEgMTkuNzE3OSwzMi4wMDAxQzE5LjcxNzksMjkuNjAzNiAyMS42NTg0LDI3LjY2MjggMjQuMDUyNiwyNy42NjI4QzI1LjExNzYsMjcuNjYyOCAyNi4wNzk4LDI4LjA2MzUgMjYuODM1MywyOC42OTkyTDM1LjYzNjcsMjQuMjk5N0MzNS42MzE5LDI0LjIxNTYgMzUuNjEyNywyNC4xMzY1IDM1LjYxMjcsMjQuMDUwMkMzNS42MTI3LDIxLjY1ODQgMzcuNTUxLDE5LjcxNzkgMzkuOTQ3NCwxOS43MTc5QzQyLjM0MTgsMTkuNzE3OSA0NC4yODIxLDIxLjY1ODQgNDQuMjgyMSwyNC4wNTAyQzQ0LjI4MjEsMjYuNDQ2NiA0Mi4zNDE3LDI4LjM4NzUgMzkuOTQ3NCwyOC4zODc1QzM4Ljg4LDI4LjM4NzUgMzcuOTE3OCwyNy45ODY4IDM3LjE2NDcsMjcuMzQ4N0wyOC4zNjMzLDMxLjc1MDZDMjguMzY4LDMxLjgzNDcgMjguMzg3NSwzMS45MTM4IDI4LjM4NzUsMzIuMDAwMVpcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwTDY0LDBMNjQsNjRMMCw2NEwwLDBaTTI4LjM4NzUsMzIuMDAwMUMyOC4zODc1LDMyLjA4NDMgMjguMzY4MywzMi4xNjMyIDI4LjM2MzMsMzIuMjQ3MUwzNy4xNjQ3LDM2LjY0NjRDMzcuOTE4MiwzNi4wMDgzIDM4Ljg4MjMsMzUuNjEgMzkuOTQ3NCwzNS42MUM0Mi4zNDE4LDM1LjYxMDUgNDQuMjgyMSwzNy41NTA5IDQ0LjI4MjEsMzkuOTQ1QzQ0LjI4MjEsNDIuMzQxOCA0Mi4zNDE3LDQ0LjI4MjEgMzkuOTQ3NCw0NC4yODIxQzM3LjU1MSw0NC4yODIxIDM1LjYxMjcsNDIuMzQxNyAzNS42MTI3LDM5Ljk0NUMzNS42MTI3LDM5Ljg1ODcgMzUuNjMxOSwzOS43ODE2IDM1LjYzNjcsMzkuNjk4TDI2LjgzNTMsMzUuMjk4NEMyNi4wNzk1LDM1LjkzNDEgMjUuMTE3NywzNi4zMzI0IDI0LjA1MjYsMzYuMzMyNEMyMS42NTg0LDM2LjMzMjQgMTkuNzE3OSwzNC4zOTQxIDE5LjcxNzksMzIuMDAwMUMxOS43MTc5LDI5LjYwMzYgMjEuNjU4NCwyNy42NjI4IDI0LjA1MjYsMjcuNjYyOEMyNS4xMTc2LDI3LjY2MjggMjYuMDc5OCwyOC4wNjM1IDI2LjgzNTMsMjguNjk5MkwzNS42MzY3LDI0LjI5OTdDMzUuNjMxOSwyNC4yMTU2IDM1LjYxMjcsMjQuMTM2NSAzNS42MTI3LDI0LjA1MDJDMzUuNjEyNywyMS42NTg0IDM3LjU1MSwxOS43MTc5IDM5Ljk0NzQsMTkuNzE3OUM0Mi4zNDE4LDE5LjcxNzkgNDQuMjgyMSwyMS42NTg0IDQ0LjI4MjEsMjQuMDUwMkM0NC4yODIxLDI2LjQ0NjYgNDIuMzQxNywyOC4zODc1IDM5Ljk0NzQsMjguMzg3NUMzOC44OCwyOC4zODc1IDM3LjkxNzgsMjcuOTg2OCAzNy4xNjQ3LDI3LjM0ODdMMjguMzYzMywzMS43NTA2QzI4LjM2OCwzMS44MzQ3IDI4LjM4NzUsMzEuOTEzOCAyOC4zODc1LDMyLjAwMDFaXCIsXG4gICAgXCJjb2xvclwiOiBcIiMwMEJGMDBcIlxuICB9LFxuICBcInNtdWdtdWdcIjoge1xuICAgIFwiaWNvblwiOiBcIk0yNS40LDIyLjljMi44LDAsNC4xLTEuNywzLjktMy4xIGMtMC4xLTEuMi0xLjMtMi40LTMuNi0yLjRjLTEuOSwwLTMuMSwxLjQtMy4zLDIuOEMyMi4zLDIxLjYsMjMuMSwyMywyNS40LDIyLjl6IE0zOS4yLDIyLjZjMi42LTAuMSwzLjgtMS41LDMuOC0yLjggYzAtMS41LTEuNC0zLTMuOC0yLjhjLTEuOSwwLjItMywxLjUtMy4yLDIuOEMzNS45LDIxLjMsMzYuOSwyMi43LDM5LjIsMjIuNnogTTQwLjksMjguNWMtNi42LDAuNy02LjksMC43LTE5LDEgYy01LjEsMC00LDE3LjUsNi45LDE3LjVDMzkuMiw0Nyw1MS43LDI3LjQsNDAuOSwyOC41eiBNMjksNDMuOWMtOS41LDAtOC4yLTExLjMtNi42LTExLjRjMTEuMS0wLjQsMTMuOS0wLjksMTcuOC0wLjkgQzQ0LjMsMzEuNiwzNi42LDQzLjksMjksNDMuOXpcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTM2LjEsMTkuOGMwLjItMS4zLDEuMy0yLjYsMy4yLTIuOGMyLjQtMC4yLDMuOCwxLjMsMy44LDIuOGMwLDEuMy0xLjIsMi42LTMuOCwyLjggQzM2LjksMjIuNywzNS45LDIxLjMsMzYuMSwxOS44eiBNMjIuNSwyMC4yYzAuMi0xLjQsMS40LTIuOCwzLjMtMi44YzIuMywwLDMuNSwxLjEsMy42LDIuNGMwLjIsMS41LTEuMSwzLjEtMy45LDMuMSBDMjMuMSwyMywyMi4zLDIxLjYsMjIuNSwyMC4yeiBNMjguOCw0N2MtMTAuOSwwLTEyLTE3LjUtNi45LTE3LjVjMTIuMS0wLjMsMTIuNS0wLjMsMTktMUM1MS43LDI3LjQsMzkuMiw0NywyOC44LDQ3eiBNNDAuMywzMS42IGMtMy45LDAtNi44LDAuNS0xNy44LDAuOWMtMS42LDAuMS0yLjksMTEuNCw2LjYsMTEuNEMzNi42LDQzLjksNDQuMywzMS42LDQwLjMsMzEuNnpcIixcbiAgICBcImNvbG9yXCI6IFwiIzhjY2ExZVwiXG4gIH0sXG4gIFwic291bmRjbG91ZFwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTQzLjYsMzBjLTAuNiwwLTEuMiwwLjEtMS43LDAuM2MtMC4zLTQtMy43LTcuMS03LjctNy4xYy0xLDAtMiwwLjItMi44LDAuNSBDMzEuMSwyMy45LDMxLDI0LDMxLDI0LjN2MTMuOWMwLDAuMywwLjIsMC41LDAuNSwwLjVjMCwwLDEyLjIsMCwxMi4yLDBjMi40LDAsNC40LTEuOSw0LjQtNC40QzQ4LDMxLjksNDYsMzAsNDMuNiwzMHogTTI3LjIsMjUuMSBjLTAuNywwLTEuMiwwLjUtMS4yLDEuMXYxMS4zYzAsMC43LDAuNiwxLjIsMS4yLDEuMmMwLjcsMCwxLjItMC42LDEuMi0xLjJWMjYuMkMyOC40LDI1LjYsMjcuOCwyNS4xLDI3LjIsMjUuMXogTTIyLjIsMjcuOCBjLTAuNywwLTEuMiwwLjUtMS4yLDEuMXY4LjVjMCwwLjcsMC42LDEuMiwxLjIsMS4yczEuMi0wLjYsMS4yLTEuMlYyOUMyMy40LDI4LjMsMjIuOSwyNy44LDIyLjIsMjcuOHogTTE3LjIsMzAuMiBjLTAuNywwLTEuMiwwLjUtMS4yLDEuMXY0LjljMCwwLjcsMC42LDEuMiwxLjIsMS4yYzAuNywwLDEuMi0wLjYsMS4yLTEuMnYtNC45QzE4LjUsMzAuNywxNy45LDMwLjIsMTcuMiwzMC4yelwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNMTguNSwzNi4zYzAsMC43LTAuNiwxLjItMS4yLDEuMmMtMC43LDAtMS4yLTAuNi0xLjItMS4ydi00LjljMC0wLjYsMC42LTEuMSwxLjItMS4xIGMwLjcsMCwxLjIsMC41LDEuMiwxLjFWMzYuM3ogTTIzLjQsMzcuNWMwLDAuNy0wLjYsMS4yLTEuMiwxLjJTMjEsMzguMiwyMSwzNy41VjI5YzAtMC42LDAuNi0xLjEsMS4yLTEuMXMxLjIsMC41LDEuMiwxLjFWMzcuNXogIE0yOC40LDM3LjVjMCwwLjctMC42LDEuMi0xLjIsMS4yYy0wLjcsMC0xLjItMC42LTEuMi0xLjJWMjYuMmMwLTAuNiwwLjYtMS4xLDEuMi0xLjFjMC43LDAsMS4yLDAuNSwxLjIsMS4xVjM3LjV6IE00My42LDM4LjcgYzAsMC0xMi4xLDAtMTIuMiwwYy0wLjMsMC0wLjUtMC4yLTAuNS0wLjVWMjQuM2MwLTAuMywwLjEtMC40LDAuNC0wLjVjMC45LTAuMywxLjgtMC41LDIuOC0wLjVjNCwwLDcuNCwzLjEsNy43LDcuMSBjMC41LTAuMiwxLjEtMC4zLDEuNy0wLjNjMi40LDAsNC40LDIsNC40LDQuNEM0OCwzNi44LDQ2LDM4LjcsNDMuNiwzOC43elwiLFxuICAgIFwiY29sb3JcIjogXCIjRkY1NzAwXCJcbiAgfSxcbiAgXCJzcG90aWZ5XCI6IHtcbiAgICBcImljb25cIjogXCJNMzIsMTZjLTguOCwwLTE2LDcuMi0xNiwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzQ4LDIzLjIsNDAuOCwxNiwzMiwxNiBNMzkuMywzOS4xYy0wLjMsMC41LTAuOSwwLjYtMS40LDAuM2MtMy44LTIuMy04LjUtMi44LTE0LjEtMS41Yy0wLjUsMC4xLTEuMS0wLjItMS4yLTAuN2MtMC4xLTAuNSwwLjItMS4xLDAuOC0xLjIgYzYuMS0xLjQsMTEuMy0wLjgsMTUuNSwxLjhDMzkuNSwzOCwzOS42LDM4LjYsMzkuMywzOS4xIE00MS4zLDM0LjdjLTAuNCwwLjYtMS4xLDAuOC0xLjcsMC40Yy00LjMtMi42LTEwLjktMy40LTE1LjktMS45IGMtMC43LDAuMi0xLjQtMC4yLTEuNi0wLjhjLTAuMi0wLjcsMC4yLTEuNCwwLjgtMS42YzUuOC0xLjgsMTMtMC45LDE4LDIuMUM0MS41LDMzLjQsNDEuNywzNC4xLDQxLjMsMzQuNyBNNDEuNSwzMC4yIGMtNS4yLTMuMS0xMy43LTMuMy0xOC42LTEuOWMtMC44LDAuMi0xLjYtMC4yLTEuOS0xYy0wLjItMC44LDAuMi0xLjYsMS0xLjljNS43LTEuNywxNS0xLjQsMjEsMi4xYzAuNywwLjQsMC45LDEuMywwLjUsMi4xIEM0My4xLDMwLjQsNDIuMiwzMC42LDQxLjUsMzAuMlwiLFxuICAgIFwibWFza1wiOiBcIk0zOSwzNy43Yy00LjItMi42LTkuNC0zLjItMTUuNS0xLjhjLTAuNSwwLjEtMC45LDAuNy0wLjgsMS4yYzAuMSwwLjUsMC43LDAuOSwxLjIsMC43YzUuNi0xLjMsMTAuMy0wLjgsMTQuMSwxLjUgYzAuNSwwLjMsMS4xLDAuMSwxLjQtMC4zQzM5LjYsMzguNiwzOS41LDM4LDM5LDM3Ljd6IE00MC45LDMzYy00LjktMy0xMi4yLTMuOS0xOC0yLjFjLTAuNywwLjItMSwwLjktMC44LDEuNiBjMC4yLDAuNywwLjksMSwxLjYsMC44YzUuMS0xLjUsMTEuNi0wLjgsMTUuOSwxLjljMC42LDAuNCwxLjQsMC4yLDEuNy0wLjRDNDEuNywzNC4xLDQxLjUsMzMuNCw0MC45LDMzeiBNMCwwdjY0aDY0VjBIMHogTTMyLDQ4IGMtOC44LDAtMTYtNy4yLTE2LTE2YzAtOC44LDcuMi0xNiwxNi0xNmM4LjgsMCwxNiw3LjIsMTYsMTZDNDgsNDAuOCw0MC44LDQ4LDMyLDQ4eiBNNDMsMjcuNmMtNS45LTMuNS0xNS4zLTMuOS0yMS0yLjEgYy0wLjgsMC4yLTEuMiwxLjEtMSwxLjljMC4yLDAuOCwxLjEsMS4yLDEuOSwxYzQuOS0xLjUsMTMuNC0xLjIsMTguNiwxLjljMC43LDAuNCwxLjYsMC4yLDIuMS0wLjVDNDMuOSwyOSw0My43LDI4LDQzLDI3LjZ6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMyRUJENTlcIlxuICB9LFxuICBcInNxdWFyZXNwYWNlXCI6IHtcbiAgICBcImljb25cIjogXCJNNDYuMiwyNy42Yy0yLjQtMi40LTYuMy0yLjQtOC43LDBsLTkuOCw5LjhjLTAuNiwwLjYtMC42LDEuNiwwLDIuMmMwLjYsMC42LDEuNiwwLjYsMi4yLDAgbDkuOC05LjhjMS4yLTEuMiwzLjItMS4yLDQuNCwwYzEuMiwxLjIsMS4yLDMuMiwwLDQuNGwtOS42LDkuNmMxLjIsMS4yLDMuMiwxLjIsNC40LDBsNy41LTcuNUM0OC42LDM0LDQ4LjYsMzAsNDYuMiwyNy42eiAgTTQyLjksMzAuOWMtMC42LTAuNi0xLjYtMC42LTIuMiwwbC05LjgsOS44Yy0xLjIsMS4yLTMuMiwxLjItNC40LDBjLTAuNi0wLjYtMS42LTAuNi0yLjIsMGMtMC42LDAuNi0wLjYsMS42LDAsMi4yIGMyLjQsMi40LDYuMywyLjQsOC43LDBsOS44LTkuOEM0My41LDMyLjUsNDMuNSwzMS41LDQyLjksMzAuOXogTTM5LjYsMjEuMWMtMi40LTIuNC02LjMtMi40LTguNywwbC05LjgsOS44Yy0wLjYsMC42LTAuNiwxLjYsMCwyLjIgYzAuNiwwLjYsMS42LDAuNiwyLjIsMGw5LjgtOS44YzEuMi0xLjIsMy4yLTEuMiw0LjQsMGMwLjYsMC42LDEuNiwwLjYsMi4yLDBDNDAuMiwyMi43LDQwLjIsMjEuNywzOS42LDIxLjF6IE0zNi40LDI0LjQgYy0wLjYtMC42LTEuNi0wLjYtMi4yLDBsLTkuOCw5LjhjLTEuMiwxLjItMy4yLDEuMi00LjQsMGMtMS4yLTEuMi0xLjItMy4yLDAtNC40bDkuNi05LjZjLTEuMi0xLjItMy4yLTEuMi00LjQsMGwtNy41LDcuNSBjLTIuNCwyLjQtMi40LDYuMywwLDguN2MyLjQsMi40LDYuMywyLjQsOC43LDBsOS44LTkuOEMzNywyNS45LDM3LDI1LDM2LjQsMjQuNHpcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTM5LjYsMjEuMWMwLjYsMC42LDAuNiwxLjYsMCwyLjJjLTAuNiwwLjYtMS42LDAuNi0yLjIsMGMtMS4yLTEuMi0zLjItMS4yLTQuNCwwbC05LjgsOS44IGMtMC42LDAuNi0xLjYsMC42LTIuMiwwYy0wLjYtMC42LTAuNi0xLjYsMC0yLjJsOS44LTkuOEMzMy4zLDE4LjcsMzcuMiwxOC43LDM5LjYsMjEuMXogTTE3LjgsMzYuNGMtMi40LTIuNC0yLjQtNi4zLDAtOC43bDcuNS03LjUgYzEuMi0xLjIsMy4yLTEuMiw0LjQsMEwyMCwyOS44Yy0xLjIsMS4yLTEuMiwzLjIsMCw0LjRjMS4yLDEuMiwzLjIsMS4yLDQuNCwwbDkuOC05LjhjMC42LTAuNiwxLjYtMC42LDIuMiwwYzAuNiwwLjYsMC42LDEuNiwwLDIuMiBsLTkuOCw5LjhDMjQuMSwzOC44LDIwLjIsMzguOCwxNy44LDM2LjR6IE0yNC40LDQyLjljLTAuNi0wLjYtMC42LTEuNiwwLTIuMmMwLjYtMC42LDEuNi0wLjYsMi4yLDBjMS4yLDEuMiwzLjIsMS4yLDQuNCwwbDkuOC05LjggYzAuNi0wLjYsMS42LTAuNiwyLjIsMGMwLjYsMC42LDAuNiwxLjYsMCwyLjJsLTkuOCw5LjhDMzAuNyw0NS4zLDI2LjgsNDUuMywyNC40LDQyLjl6IE00Ni4yLDM2LjRsLTcuNSw3LjVjLTEuMiwxLjItMy4yLDEuMi00LjQsMCBsOS42LTkuNmMxLjItMS4yLDEuMi0zLjIsMC00LjRjLTEuMi0xLjItMy4yLTEuMi00LjQsMGwtOS44LDkuOGMtMC42LDAuNi0xLjYsMC42LTIuMiwwYy0wLjYtMC42LTAuNi0xLjYsMC0yLjJsOS44LTkuOCBjMi40LTIuNCw2LjMtMi40LDguNywwQzQ4LjYsMzAsNDguNiwzNCw0Ni4yLDM2LjR6XCIsXG4gICAgXCJjb2xvclwiOiBcIiMxQzFDMUNcIlxuICB9LFxuICBcInR1bWJsclwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTM5LjIsNDFjLTAuNiwwLjMtMS42LDAuNS0yLjQsMC41Yy0yLjQsMC4xLTIuOS0xLjctMi45LTN2LTkuM2g2di00LjVoLTZWMTdjMCwwLTQuMywwLTQuNCwwIGMtMC4xLDAtMC4yLDAuMS0wLjIsMC4yYy0wLjMsMi4zLTEuNCw2LjQtNS45LDguMXYzLjloM1YzOWMwLDMuNCwyLjUsOC4xLDksOGMyLjIsMCw0LjctMSw1LjItMS44TDM5LjIsNDF6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE0zNS40LDQ3Yy02LjUsMC4xLTktNC43LTktOHYtOS44aC0zdi0zLjljNC42LTEuNiw1LjYtNS43LDUuOS04LjFjMC0wLjIsMC4xLTAuMiwwLjItMC4yIGMwLjEsMCw0LjQsMCw0LjQsMHY3LjZoNnY0LjVoLTZ2OS4zYzAsMS4zLDAuNSwzLDIuOSwzYzAuOCwwLDEuOS0wLjMsMi40LTAuNWwxLjQsNC4zQzQwLjEsNDYsMzcuNiw0NywzNS40LDQ3elwiLFxuICAgIFwiY29sb3JcIjogXCIjMmM0NzYyXCJcbiAgfSxcbiAgXCJ0d2l0Y2hcIjoge1xuICAgIFwiaWNvblwiOiBcIk00MCwyNS42aC0yLjV2Ny42SDQwVjI1LjZ6IE0zMywyNS42aC0yLjV2Ny42SDMzVjI1LjZ6IE0yMC45LDE4TDE5LDIzLjF2MjAuNGg3djMuOGgzLjhsMy44LTMuOGg1LjdsNy42LTcuNlYxOEgyMC45eiBNNDQuNSwzNC41TDQwLDM5aC03bC0zLjgsMy44VjM5aC01LjdWMjAuNWgyMVYzNC41elwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNNDcsMzUuOGwtNy42LDcuNmgtNS43bC0zLjgsMy44SDI2di0zLjhoLTdWMjMuMWwxLjktNS4xSDQ3VjM1Ljh6IE0yOS4yLDQyLjhMMzMsMzloN2w0LjUtNC41IHYtMTRoLTIxVjM5aDUuN1Y0Mi44eiBNMzcuNSwyNS42SDQwdjcuNmgtMi41VjI1LjZ6IE0zMC41LDI1LjZIMzN2Ny42aC0yLjVWMjUuNnpcIixcbiAgICBcImNvbG9yXCI6IFwiIzY0NDFBNVwiXG4gIH0sXG4gIFwidHdpdHRlclwiOiB7XG4gICAgXCJpY29uXCI6IFwiTTQ4LDIyLjFjLTEuMiwwLjUtMi40LDAuOS0zLjgsMWMxLjQtMC44LDIuNC0yLjEsMi45LTMuNmMtMS4zLDAuOC0yLjcsMS4zLTQuMiwxLjYgQzQxLjcsMTkuOCw0MCwxOSwzOC4yLDE5Yy0zLjYsMC02LjYsMi45LTYuNiw2LjZjMCwwLjUsMC4xLDEsMC4yLDEuNWMtNS41LTAuMy0xMC4zLTIuOS0xMy41LTYuOWMtMC42LDEtMC45LDIuMS0wLjksMy4zIGMwLDIuMywxLjIsNC4zLDIuOSw1LjVjLTEuMSwwLTIuMS0wLjMtMy0wLjhjMCwwLDAsMC4xLDAsMC4xYzAsMy4yLDIuMyw1LjgsNS4zLDYuNGMtMC42LDAuMS0xLjEsMC4yLTEuNywwLjJjLTAuNCwwLTAuOCwwLTEuMi0wLjEgYzAuOCwyLjYsMy4zLDQuNSw2LjEsNC42Yy0yLjIsMS44LTUuMSwyLjgtOC4yLDIuOGMtMC41LDAtMS4xLDAtMS42LTAuMWMyLjksMS45LDYuNCwyLjksMTAuMSwyLjljMTIuMSwwLDE4LjctMTAsMTguNy0xOC43IGMwLTAuMywwLTAuNiwwLTAuOEM0NiwyNC41LDQ3LjEsMjMuNCw0OCwyMi4xelwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNNDQuNywyNS41YzAsMC4zLDAsMC42LDAsMC44QzQ0LjcsMzUsMzguMSw0NSwyNi4xLDQ1Yy0zLjcsMC03LjItMS4xLTEwLjEtMi45IGMwLjUsMC4xLDEsMC4xLDEuNiwwLjFjMy4xLDAsNS45LTEsOC4yLTIuOGMtMi45LTAuMS01LjMtMi02LjEtNC42YzAuNCwwLjEsMC44LDAuMSwxLjIsMC4xYzAuNiwwLDEuMi0wLjEsMS43LTAuMiBjLTMtMC42LTUuMy0zLjMtNS4zLTYuNGMwLDAsMC0wLjEsMC0wLjFjMC45LDAuNSwxLjksMC44LDMsMC44Yy0xLjgtMS4yLTIuOS0zLjItMi45LTUuNWMwLTEuMiwwLjMtMi4zLDAuOS0zLjMgYzMuMiw0LDguMSw2LjYsMTMuNSw2LjljLTAuMS0wLjUtMC4yLTEtMC4yLTEuNWMwLTMuNiwyLjktNi42LDYuNi02LjZjMS45LDAsMy42LDAuOCw0LjgsMi4xYzEuNS0wLjMsMi45LTAuOCw0LjItMS42IGMtMC41LDEuNS0xLjUsMi44LTIuOSwzLjZjMS4zLTAuMiwyLjYtMC41LDMuOC0xQzQ3LjEsMjMuNCw0NiwyNC41LDQ0LjcsMjUuNXpcIixcbiAgICBcImNvbG9yXCI6IFwiIzAwYWNlZFwiXG4gIH0sXG4gIFwidmV2b1wiOiB7XG4gICAgXCJpY29uXCI6IFwiTTQzLDIxYy00LjUsMC01LjQsMi43LTYuOCw0LjZjMCwwLTMuNyw1LjYtNS4xLDcuN2wtMy0xMi4zSDIwbDUuMSwyMC42YzEuMSwzLjcsNC4xLDMuNCw0LjEsMy40IGMyLjEsMCwzLjYtMS4xLDUtMy4xTDQ4LDIxQzQ4LDIxLDQzLjIsMjEsNDMsMjF6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE0zNC4yLDQxLjljLTEuNCwyLjEtMi45LDMuMS01LDMuMWMwLDAtMywwLjItNC4xLTMuNEwyMCwyMWg4LjFsMywxMi4zYzEuNC0yLjEsNS4xLTcuNyw1LjEtNy43IGMxLjQtMS45LDIuMi00LjYsNi44LTQuNmMwLjIsMCw1LDAsNSwwTDM0LjIsNDEuOXpcIixcbiAgICBcImNvbG9yXCI6IFwiI0VEMUEzQlwiXG4gIH0sXG4gIFwidmltZW9cIjoge1xuICAgIFwiaWNvblwiOiBcIk00NywyNWMtMC4xLDIuOS0yLjIsNi45LTYuMSwxMmMtNC4xLDUuMy03LjUsOC0xMC40LDhjLTEuNywwLTMuMi0xLjYtNC40LTQuOCBjLTAuOC0zLTEuNi01LjktMi40LTguOWMtMC45LTMuMi0xLjktNC44LTIuOS00LjhjLTAuMiwwLTEsMC41LTIuNCwxLjRMMTcsMjZjMS41LTEuMywyLjktMi42LDQuNC0zLjljMi0xLjcsMy41LTIuNiw0LjQtMi43IGMyLjMtMC4yLDMuOCwxLjQsNC4zLDQuOGMwLjYsMy43LDEsNiwxLjIsNi45YzAuNywzLjEsMS40LDQuNiwyLjIsNC42YzAuNiwwLDEuNi0xLDIuOC0zYzEuMy0yLDEuOS0zLjUsMi00LjUgYzAuMi0xLjctMC41LTIuNi0yLTIuNmMtMC43LDAtMS41LDAuMi0yLjIsMC41YzEuNS00LjgsNC4zLTcuMiw4LjQtN0M0NS43LDE5LjEsNDcuMiwyMS4xLDQ3LDI1elwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNNDAuOSwzN2MtNC4xLDUuMy03LjUsOC0xMC40LDhjLTEuNywwLTMuMi0xLjYtNC40LTQuOGMtMC44LTMtMS42LTUuOS0yLjQtOC45IGMtMC45LTMuMi0xLjktNC44LTIuOS00LjhjLTAuMiwwLTEsMC41LTIuNCwxLjRMMTcsMjZjMS41LTEuMywyLjktMi42LDQuNC0zLjljMi0xLjcsMy41LTIuNiw0LjQtMi43YzIuMy0wLjIsMy44LDEuNCw0LjMsNC44IGMwLjYsMy43LDEsNiwxLjIsNi45YzAuNywzLjEsMS40LDQuNiwyLjIsNC42YzAuNiwwLDEuNi0xLDIuOC0zYzEuMy0yLDEuOS0zLjUsMi00LjVjMC4yLTEuNy0wLjUtMi42LTItMi42Yy0wLjcsMC0xLjUsMC4yLTIuMiwwLjUgYzEuNS00LjgsNC4zLTcuMiw4LjQtN2MzLjEsMC4xLDQuNSwyLjEsNC40LDZDNDYuOSwyNy45LDQ0LjgsMzEuOSw0MC45LDM3elwiLFxuICAgIFwiY29sb3JcIjogXCIjMWFiN2VhXCJcbiAgfSxcbiAgXCJ2aW5lXCI6IHtcbiAgICBcImljb25cIjogXCJNNDUuMiwzMS45Yy0wLjgsMC4yLTEuNSwwLjMtMi4yLDAuM2MtMy44LDAtNi43LTIuNi02LjctNy4yYzAtMi4zLDAuOS0zLjQsMi4xLTMuNCBjMS4yLDAsMiwxLjEsMiwzLjJjMCwxLjItMC4zLDIuNS0wLjYsMy4zYzAsMCwxLjIsMiw0LjQsMS40YzAuNy0xLjUsMS0zLjUsMS01LjJjMC00LjYtMi4zLTcuMy02LjYtNy4zYy00LjQsMC03LDMuNC03LDcuOSBjMCw0LjQsMi4xLDguMiw1LjUsMTBjLTEuNCwyLjktMy4zLDUuNC01LjIsNy4zYy0zLjUtNC4yLTYuNi05LjgtNy45LTIwLjdoLTUuMWMyLjQsMTguMSw5LjQsMjMuOSwxMS4yLDI1YzEuMSwwLjYsMiwwLjYsMi45LDAuMSBjMS41LTAuOSw2LTUuNCw4LjYtMTAuN2MxLjEsMCwyLjMtMC4xLDMuNi0wLjRWMzEuOXpcIixcbiAgICBcIm1hc2tcIjogXCJNMCwwdjY0aDY0VjBIMHogTTM4LjQsMjEuNWMtMS4yLDAtMi4xLDEuMi0yLjEsMy40YzAsNC42LDIuOSw3LjIsNi43LDcuMmMwLjcsMCwxLjQtMC4xLDIuMi0wLjN2My42IGMtMS4zLDAuMy0yLjUsMC40LTMuNiwwLjRjLTIuNSw1LjMtNyw5LjgtOC42LDEwLjdjLTEsMC41LTEuOSwwLjYtMi45LTAuMWMtMS45LTEuMS04LjktNi45LTExLjItMjVIMjRjMS4zLDEwLjksNC40LDE2LjUsNy45LDIwLjcgYzEuOS0xLjksMy43LTQuNCw1LjItNy4zYy0zLjQtMS43LTUuNS01LjUtNS41LTEwYzAtNC41LDIuNi03LjksNy03LjljNC4zLDAsNi42LDIuNyw2LjYsNy4zYzAsMS43LTAuNCwzLjctMSw1LjIgYy0zLjIsMC42LTQuNC0xLjQtNC40LTEuNGMwLjItMC44LDAuNi0yLjEsMC42LTMuM0M0MC4zLDIyLjYsMzkuNSwyMS41LDM4LjQsMjEuNXpcIixcbiAgICBcImNvbG9yXCI6IFwiIzAwQkY4RlwiXG4gIH0sXG4gIFwidnNjb1wiOiB7XG4gICAgXCJpY29uXCI6IFwiTTMyLDE2Yy0xLjQsMC0yLjUsMS4xLTIuNSwyLjVjMCwxLjQsMS4xLDIuNSwyLjUsMi41YzEuNCwwLDIuNS0xLjEsMi41LTIuNSBDMzQuNSwxNy4xLDMzLjQsMTYsMzIsMTZ6IE0xOC41LDI5LjVjLTEuNCwwLTIuNSwxLjEtMi41LDIuNWMwLDEuNCwxLjEsMi41LDIuNSwyLjVjMS40LDAsMi41LTEuMSwyLjUtMi41IEMyMC45LDMwLjYsMTkuOCwyOS41LDE4LjUsMjkuNXogTTI1LjIsMjIuOGMtMS40LDAtMi41LDEuMS0yLjUsMi41YzAsMS40LDEuMSwyLjUsMi41LDIuNWMxLjQsMCwyLjUtMS4xLDIuNS0yLjUgQzI3LjcsMjMuOSwyNi42LDIyLjgsMjUuMiwyMi44eiBNMzguNywyNy42YzEuNCwwLDIuNS0xLjEsMi41LTIuNWMwLTEuNC0xLjEtMi41LTIuNS0yLjVjLTEuNCwwLTIuNSwxLjEtMi41LDIuNSBDMzYuMiwyNi41LDM3LjMsMjcuNiwzOC43LDI3LjZ6IE0yNS4xLDM2LjJjLTEuNCwwLTIuNSwxLjEtMi41LDIuNWMwLDEuNCwxLjEsMi41LDIuNSwyLjVjMS40LDAsMi41LTEuMSwyLjUtMi41IEMyNy42LDM3LjMsMjYuNSwzNi4yLDI1LjEsMzYuMnogTTMxLjksMzQuNGMxLjQsMCwyLjUtMS4xLDIuNS0yLjVjMC0xLjQtMS4xLTIuNS0yLjUtMi41Yy0xLjQsMC0yLjUsMS4xLTIuNSwyLjUgQzI5LjUsMzMuMywzMC42LDM0LjQsMzEuOSwzNC40eiBNNDUuNSwyOS41Yy0xLjQsMC0yLjUsMS4xLTIuNSwyLjVjMCwxLjQsMS4xLDIuNSwyLjUsMi41YzEuNCwwLDIuNS0xLjEsMi41LTIuNSBDNDgsMzAuNiw0Ni45LDI5LjUsNDUuNSwyOS41eiBNMzIsNDMuMWMtMS40LDAtMi41LDEuMS0yLjUsMi41YzAsMS40LDEuMSwyLjUsMi41LDIuNWMxLjQsMCwyLjUtMS4xLDIuNS0yLjUgQzM0LjUsNDQuMiwzMy40LDQzLjEsMzIsNDMuMXogTTM4LjgsMzYuM2MtMS40LDAtMi41LDEuMS0yLjUsMi41YzAsMS40LDEuMSwyLjUsMi41LDIuNWMxLjQsMCwyLjUtMS4xLDIuNS0yLjUgQzQxLjIsMzcuNCw0MC4xLDM2LjMsMzguOCwzNi4zelwiLFxuICAgIFwibWFza1wiOiBcIk0wLDB2NjRoNjRWMEgweiBNMTguNSwzNC41Yy0xLjQsMC0yLjUtMS4xLTIuNS0yLjVjMC0xLjQsMS4xLTIuNSwyLjUtMi41YzEuNCwwLDIuNSwxLjEsMi41LDIuNSBDMjAuOSwzMy40LDE5LjgsMzQuNSwxOC41LDM0LjV6IE0yNS4xLDQxLjFjLTEuNCwwLTIuNS0xLjEtMi41LTIuNWMwLTEuNCwxLjEtMi41LDIuNS0yLjVjMS40LDAsMi41LDEuMSwyLjUsMi41IEMyNy42LDQwLDI2LjUsNDEuMSwyNS4xLDQxLjF6IE0yNS4yLDI3LjdjLTEuNCwwLTIuNS0xLjEtMi41LTIuNWMwLTEuNCwxLjEtMi41LDIuNS0yLjVjMS40LDAsMi41LDEuMSwyLjUsMi41IEMyNy43LDI2LjYsMjYuNiwyNy43LDI1LjIsMjcuN3ogTTMyLDQ4Yy0xLjQsMC0yLjUtMS4xLTIuNS0yLjVjMC0xLjQsMS4xLTIuNSwyLjUtMi41YzEuNCwwLDIuNSwxLjEsMi41LDIuNSBDMzQuNSw0Ni45LDMzLjQsNDgsMzIsNDh6IE0yOS41LDMxLjljMC0xLjQsMS4xLTIuNSwyLjUtMi41YzEuNCwwLDIuNSwxLjEsMi41LDIuNWMwLDEuNC0xLjEsMi41LTIuNSwyLjUgQzMwLjYsMzQuNCwyOS41LDMzLjMsMjkuNSwzMS45eiBNMzIsMjAuOWMtMS40LDAtMi41LTEuMS0yLjUtMi41YzAtMS40LDEuMS0yLjUsMi41LTIuNWMxLjQsMCwyLjUsMS4xLDIuNSwyLjUgQzM0LjUsMTkuOCwzMy40LDIwLjksMzIsMjAuOXogTTM4LjcsMjIuN2MxLjQsMCwyLjUsMS4xLDIuNSwyLjVjMCwxLjQtMS4xLDIuNS0yLjUsMi41Yy0xLjQsMC0yLjUtMS4xLTIuNS0yLjUgQzM2LjIsMjMuOCwzNy4zLDIyLjcsMzguNywyMi43eiBNMzguOCw0MS4yYy0xLjQsMC0yLjUtMS4xLTIuNS0yLjVjMC0xLjQsMS4xLTIuNSwyLjUtMi41YzEuNCwwLDIuNSwxLjEsMi41LDIuNSBDNDEuMiw0MC4xLDQwLjEsNDEuMiwzOC44LDQxLjJ6IE00NS41LDM0LjVjLTEuNCwwLTIuNS0xLjEtMi41LTIuNWMwLTEuNCwxLjEtMi41LDIuNS0yLjVjMS40LDAsMi41LDEuMSwyLjUsMi41IEM0OCwzMy40LDQ2LjksMzQuNSw0NS41LDM0LjV6XCIsXG4gICAgXCJjb2xvclwiOiBcIiM4Mzg3OEFcIlxuICB9LFxuICBcInllbHBcIjoge1xuICAgIFwiaWNvblwiOiBcIk0yOS41LDM1LjdjMC41LTAuMSwwLjktMC42LDAuOS0xLjJjMC0wLjYtMC4zLTEuMi0wLjgtMS40YzAsMC0xLjUtMC42LTEuNS0wLjYgYy01LTIuMS01LjItMi4xLTUuNS0yLjFjLTAuNCwwLTAuNywwLjItMSwwLjZjLTAuNSwwLjgtMC43LDMuMy0wLjUsNWMwLjEsMC42LDAuMiwxLDAuMywxLjNjMC4yLDAuNCwwLjUsMC42LDAuOSwwLjYgYzAuMiwwLDAuNCwwLDUuMS0xLjVDMjcuNSwzNi40LDI5LjUsMzUuNywyOS41LDM1Ljd6IE0zMi4yLDM3LjZjLTAuNi0wLjItMS4yLTAuMS0xLjUsMC40YzAsMC0xLDEuMi0xLDEuMiBjLTMuNSw0LjEtMy43LDQuMy0zLjcsNC41Yy0wLjEsMC4xLTAuMSwwLjMtMC4xLDAuNGMwLDAuMiwwLjEsMC40LDAuMywwLjZjMC44LDEsNC43LDIuNCw2LDIuMmMwLjQtMC4xLDAuNy0wLjMsMC45LTAuNyBDMzMsNDYuMSwzMyw0NS45LDMzLDQxYzAsMCwwLTIuMiwwLTIuMkMzMy4xLDM4LjMsMzIuNywzNy44LDMyLjIsMzcuNnogTTMyLjMsMTYuOGMtMC4xLTAuNC0wLjQtMC43LTAuOS0wLjggYy0xLjMtMC4zLTYuNSwxLjEtNy41LDIuMWMtMC4zLDAuMy0wLjQsMC43LTAuMywxLjFjMC4yLDAuMyw2LjUsMTAuNCw2LjUsMTAuNGMwLjksMS41LDEuNywxLjMsMiwxLjJjMC4zLTAuMSwxLTAuMywwLjktMi4xIEMzMywyNi42LDMyLjQsMTcuMywzMi4zLDE2Ljh6IE0zNi45LDMzLjRDMzYuOSwzMy40LDM2LjgsMzMuNSwzNi45LDMzLjRjMC4yLTAuMSwwLjctMC4yLDEuNS0wLjRjNS4zLTEuMyw1LjUtMS4zLDUuNy0xLjUgYzAuMy0wLjIsMC41LTAuNiwwLjUtMWMwLDAsMCwwLDAsMGMtMC4xLTEuMy0yLjQtNC43LTMuNS01LjJjLTAuNC0wLjItMC44LTAuMi0xLjEsMGMtMC4yLDAuMS0wLjQsMC4zLTMuMiw0LjJjMCwwLTEuMywxLjctMS4zLDEuOCBjLTAuMywwLjQtMC4zLDEsMCwxLjVDMzUuOCwzMy4zLDM2LjMsMzMuNiwzNi45LDMzLjR6IE00NC40LDM4LjZjLTAuMi0wLjEtMC4zLTAuMi01LTEuN2MwLDAtMi0wLjctMi4xLTAuN2MtMC41LTAuMi0xLjEsMC0xLjQsMC41IGMtMC40LDAuNS0wLjUsMS4xLTAuMSwxLjZsMC44LDEuM2MyLjgsNC41LDMsNC44LDMuMiw1YzAuMywwLjIsMC43LDAuMywxLjEsMC4xYzEuMi0wLjUsMy43LTMuNywzLjktNSBDNDQuOCwzOS4yLDQ0LjcsMzguOCw0NC40LDM4LjZ6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE0yMi40LDM3LjljLTAuNCwwLTAuNy0wLjItMC45LTAuNmMtMC4xLTAuMy0wLjItMC43LTAuMy0xLjNjLTAuMi0xLjcsMC00LjIsMC41LTUgYzAuMi0wLjQsMC42LTAuNiwxLTAuNmMwLjMsMCwwLjUsMC4xLDUuNSwyLjFjMCwwLDEuNSwwLjYsMS41LDAuNmMwLjUsMC4yLDAuOSwwLjcsMC44LDEuNGMwLDAuNi0wLjQsMS4xLTAuOSwxLjIgYzAsMC0yLjEsMC43LTIuMSwwLjdDMjIuOCwzNy45LDIyLjcsMzcuOSwyMi40LDM3Ljl6IE0zMyw0MWMwLDQuOSwwLDUtMC4xLDUuM2MtMC4xLDAuNC0wLjQsMC42LTAuOSwwLjdjLTEuMiwwLjItNS4xLTEuMi02LTIuMiBjLTAuMi0wLjItMC4zLTAuNC0wLjMtMC42YzAtMC4yLDAtMC4zLDAuMS0wLjRjMC4xLTAuMiwwLjItMC40LDMuNy00LjVjMCwwLDEtMS4yLDEtMS4yYzAuMy0wLjQsMS0wLjYsMS41LTAuNCBjMC42LDAuMiwwLjksMC43LDAuOSwxLjJDMzMsMzguOCwzMyw0MSwzMyw0MXogTTMyLjIsMzAuOGMtMC4zLDAuMS0xLDAuMy0yLTEuMmMwLDAtNi40LTEwLjEtNi41LTEwLjRjLTAuMS0wLjMsMC0wLjcsMC4zLTEuMSBjMS0xLDYuMS0yLjQsNy41LTIuMWMwLjQsMC4xLDAuNywwLjQsMC45LDAuOGMwLjEsMC40LDAuNyw5LjgsMC44LDExLjlDMzMuMiwzMC41LDMyLjQsMzAuNywzMi4yLDMwLjh6IE0zNS40LDMxLjMgYzAsMCwxLjMtMS44LDEuMy0xLjhjMi44LTMuOSwzLTQuMSwzLjItNC4yYzAuMy0wLjIsMC43LTAuMiwxLjEsMGMxLjEsMC41LDMuNCwzLjksMy41LDUuMmMwLDAsMCwwLDAsMGMwLDAuNC0wLjEsMC44LTAuNSwxIGMtMC4yLDAuMS0wLjQsMC4yLTUuNywxLjVjLTAuOCwwLjItMS4zLDAuMy0xLjYsMC40YzAsMCwwLDAsMCwwYy0wLjUsMC4xLTEuMS0wLjEtMS40LTAuNkMzNS4xLDMyLjMsMzUuMSwzMS43LDM1LjQsMzEuM3ogIE00NC43LDM5LjZjLTAuMiwxLjMtMi43LDQuNS0zLjksNWMtMC40LDAuMi0wLjgsMC4xLTEuMS0wLjFjLTAuMi0wLjItMC40LTAuNS0zLjItNWwtMC44LTEuM2MtMC4zLTAuNS0wLjMtMS4xLDAuMS0xLjYgYzAuNC0wLjUsMC45LTAuNiwxLjQtMC41YzAsMCwyLjEsMC43LDIuMSwwLjdjNC42LDEuNSw0LjgsMS42LDUsMS43QzQ0LjcsMzguOCw0NC44LDM5LjIsNDQuNywzOS42elwiLFxuICAgIFwiY29sb3JcIjogXCIjQjkwQzA0XCJcbiAgfSxcbiAgXCJ5b3V0dWJlXCI6IHtcbiAgICBcImljb25cIjogXCJNNDYuNywyNmMwLDAtMC4zLTIuMS0xLjItM2MtMS4xLTEuMi0yLjQtMS4yLTMtMS4zQzM4LjMsMjEuNCwzMiwyMS40LDMyLDIxLjRoMCBjMCwwLTYuMywwLTEwLjUsMC4zYy0wLjYsMC4xLTEuOSwwLjEtMywxLjNjLTAuOSwwLjktMS4yLDMtMS4yLDNTMTcsMjguNCwxNywzMC45djIuM2MwLDIuNCwwLjMsNC45LDAuMyw0LjlzMC4zLDIuMSwxLjIsMyBjMS4xLDEuMiwyLjYsMS4yLDMuMywxLjNjMi40LDAuMiwxMC4yLDAuMywxMC4yLDAuM3M2LjMsMCwxMC41LTAuM2MwLjYtMC4xLDEuOS0wLjEsMy0xLjNjMC45LTAuOSwxLjItMywxLjItM3MwLjMtMi40LDAuMy00Ljkgdi0yLjNDNDcsMjguNCw0Ni43LDI2LDQ2LjcsMjZ6IE0yOC45LDM1LjlsMC04LjRsOC4xLDQuMkwyOC45LDM1Ljl6XCIsXG4gICAgXCJtYXNrXCI6IFwiTTAsMHY2NGg2NFYwSDB6IE00NywzMy4xYzAsMi40LTAuMyw0LjktMC4zLDQuOXMtMC4zLDIuMS0xLjIsM2MtMS4xLDEuMi0yLjQsMS4yLTMsMS4zIEMzOC4zLDQyLjUsMzIsNDIuNiwzMiw0Mi42cy03LjgtMC4xLTEwLjItMC4zYy0wLjctMC4xLTIuMi0wLjEtMy4zLTEuM2MtMC45LTAuOS0xLjItMy0xLjItM1MxNywzNS42LDE3LDMzLjF2LTIuMyBjMC0yLjQsMC4zLTQuOSwwLjMtNC45czAuMy0yLjEsMS4yLTNjMS4xLTEuMiwyLjQtMS4yLDMtMS4zYzQuMi0wLjMsMTAuNS0wLjMsMTAuNS0wLjNoMGMwLDAsNi4zLDAsMTAuNSwwLjNjMC42LDAuMSwxLjksMC4xLDMsMS4zIGMwLjksMC45LDEuMiwzLDEuMiwzczAuMywyLjQsMC4zLDQuOVYzMy4xeiBNMjguOSwzNS45bDguMS00LjJsLTguMS00LjJMMjguOSwzNS45elwiLFxuICAgIFwiY29sb3JcIjogXCIjZmYzMzMzXCJcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInZlcnNpb25cIjogXCIwLjAuMVwiXG59IiwiQXBwVmlldyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi92aWV3cy9hcHAtdmlldydcblxuQ2xvdWRGaWxlTWFuYWdlclVJTWVudSA9IChyZXF1aXJlICcuL3VpJykuQ2xvdWRGaWxlTWFuYWdlclVJTWVudVxuQ2xvdWRGaWxlTWFuYWdlckNsaWVudCA9IChyZXF1aXJlICcuL2NsaWVudCcpLkNsb3VkRmlsZU1hbmFnZXJDbGllbnRcblxuZ2V0SGFzaFBhcmFtID0gcmVxdWlyZSAnLi91dGlscy9nZXQtaGFzaC1wYXJhbSdcblxuY2xhc3MgQ2xvdWRGaWxlTWFuYWdlclxuXG4gIGNvbnN0cnVjdG9yOiAob3B0aW9ucykgLT5cbiAgICAjIHNpbmNlIHRoZSBtb2R1bGUgZXhwb3J0cyBhbiBpbnN0YW5jZSBvZiB0aGUgY2xhc3Mgd2UgbmVlZCB0byBmYWtlIGEgY2xhc3MgdmFyaWFibGUgYXMgYW4gaW5zdGFuY2UgdmFyaWFibGVcbiAgICBARGVmYXVsdE1lbnUgPSBDbG91ZEZpbGVNYW5hZ2VyVUlNZW51LkRlZmF1bHRNZW51XG5cbiAgICBAY2xpZW50ID0gbmV3IENsb3VkRmlsZU1hbmFnZXJDbGllbnQoKVxuICAgIEBhcHBPcHRpb25zID0ge31cblxuICAjIHVzaW5nSWZyYW1lOiBpZiB0cnVlLCBjbGllbnQgYXBwIGlzIHdyYXBwZWQgaW4gYW4gaWZyYW1lIHdpdGhpbiB0aGUgQ0ZNLW1hbmFnZWQgZGl2XG4gICMgYXBwT3JNZW51RWxlbUlkOiBpZiBhcHBPck1lbnVFbGVtSWQgaXMgcGFzc2VkIGFuZCB1c2luZ0lmcmFtZSBpcyB0cnVlLCB0aGVuIHRoZSBDRk1cbiAgIyAgIHByZXNlbnRzIGl0cyBVSSBhbmQgdGhlIHdyYXBwZWQgY2xpZW50IGFwcCB3aXRoaW4gdGhlIHNwZWNpZmllZCBlbGVtZW50LiBJZlxuICAjICAgYXBwT3JNZW51RWxlbUlkIGlzIHNldCBhbmQgdXNpbmdJZnJhbWUgaXMgZmFsc2UsIHRoZW4gdGhlIENGTSBwcmVzZW50cyBpdHMgbWVudWJhclxuICAjICAgVUkgd2l0aGluIHRoZSBzcGVjaWZpZWQgZWxlbWVudCwgYnV0IHRoZXJlIGlzIG5vIGlmcmFtZSBvciB3cmFwcGVkIGNsaWVudCBhcHAuXG4gIGluaXQ6IChAYXBwT3B0aW9ucykgLT5cbiAgICBAYXBwT3B0aW9ucy5oYXNoUGFyYW1zID0ge1xuICAgICAgc2hhcmVkQ29udGVudElkOiBnZXRIYXNoUGFyYW0gXCJzaGFyZWRcIlxuICAgICAgZmlsZVBhcmFtczogZ2V0SGFzaFBhcmFtIFwiZmlsZVwiXG4gICAgICBjb3B5UGFyYW1zOiBnZXRIYXNoUGFyYW0gXCJjb3B5XCJcbiAgICAgIG5ld0luRm9sZGVyUGFyYW1zOiBnZXRIYXNoUGFyYW0gXCJuZXdJbkZvbGRlclwiXG4gICAgfVxuXG4gICAgQGNsaWVudC5zZXRBcHBPcHRpb25zIEBhcHBPcHRpb25zXG5cbiAgIyBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3Igc2V0dGlucCB1cCBDRk0gd2l0aCBhbiBpZnJhbWUtd3JhcHBlZCBjbGllbnQgYXBwXG4gIGNyZWF0ZUZyYW1lOiAoQGFwcE9wdGlvbnMsIGFwcEVsZW1JZCwgZXZlbnRDYWxsYmFjayA9IG51bGwpIC0+XG4gICAgQGFwcE9wdGlvbnMudXNpbmdJZnJhbWUgPSB0cnVlXG4gICAgQGFwcE9wdGlvbnMuYXBwT3JNZW51RWxlbUlkID0gYXBwRWxlbUlkXG4gICAgQGluaXQgQGFwcE9wdGlvbnNcbiAgICBAY2xpZW50Lmxpc3RlbiBldmVudENhbGxiYWNrXG4gICAgQF9yZW5kZXJBcHAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYXBwRWxlbUlkKVxuXG4gIGNsaWVudENvbm5lY3Q6IChldmVudENhbGxiYWNrKSAtPlxuICAgIGlmIEBhcHBPcHRpb25zLmFwcE9yTWVudUVsZW1JZD9cbiAgICAgIEBfcmVuZGVyQXBwIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKEBhcHBPcHRpb25zLmFwcE9yTWVudUVsZW1JZClcbiAgICBlbHNlXG4gICAgICBAX2NyZWF0ZUhpZGRlbkFwcCgpXG4gICAgQGNsaWVudC5saXN0ZW4gZXZlbnRDYWxsYmFja1xuICAgIEBjbGllbnQuY29ubmVjdCgpXG5cbiAgICAjIG9wZW4gYW55IGluaXRpYWwgZG9jdW1lbnQgKGlmIGFueSBzcGVjaWZpZWQpIGFuZCBzaWduYWwgcmVhZHkoKVxuICAgIEBjbGllbnQucHJvY2Vzc1VybFBhcmFtcygpXG5cbiAgX2NyZWF0ZUhpZGRlbkFwcDogLT5cbiAgICBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhbmNob3IpXG4gICAgQF9yZW5kZXJBcHAgYW5jaG9yXG5cbiAgX3JlbmRlckFwcDogKGFuY2hvcikgLT5cbiAgICBAYXBwT3B0aW9ucy5jbGllbnQgPSBAY2xpZW50XG4gICAgUmVhY3RET00ucmVuZGVyIChBcHBWaWV3IEBhcHBPcHRpb25zKSwgYW5jaG9yXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENsb3VkRmlsZU1hbmFnZXIoKVxuIiwidHIgPSByZXF1aXJlICcuL3V0aWxzL3RyYW5zbGF0ZSdcbmlzU3RyaW5nID0gcmVxdWlyZSAnLi91dGlscy9pcy1zdHJpbmcnXG5iYXNlNjRBcnJheSA9IHJlcXVpcmUgJ2Jhc2U2NC1qcycgIyBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanNcbmdldFF1ZXJ5UGFyYW0gPSByZXF1aXJlICcuL3V0aWxzL2dldC1xdWVyeS1wYXJhbSdcblxuQ2xvdWRGaWxlTWFuYWdlclVJID0gKHJlcXVpcmUgJy4vdWknKS5DbG91ZEZpbGVNYW5hZ2VyVUlcblxuTG9jYWxTdG9yYWdlUHJvdmlkZXIgPSByZXF1aXJlICcuL3Byb3ZpZGVycy9sb2NhbHN0b3JhZ2UtcHJvdmlkZXInXG5SZWFkT25seVByb3ZpZGVyID0gcmVxdWlyZSAnLi9wcm92aWRlcnMvcmVhZG9ubHktcHJvdmlkZXInXG5Hb29nbGVEcml2ZVByb3ZpZGVyID0gcmVxdWlyZSAnLi9wcm92aWRlcnMvZ29vZ2xlLWRyaXZlLXByb3ZpZGVyJ1xuTGFyYVByb3ZpZGVyID0gcmVxdWlyZSAnLi9wcm92aWRlcnMvbGFyYS1wcm92aWRlcidcbkRvY3VtZW50U3RvcmVQcm92aWRlciA9IHJlcXVpcmUgJy4vcHJvdmlkZXJzL2RvY3VtZW50LXN0b3JlLXByb3ZpZGVyJ1xuRG9jdW1lbnRTdG9yZVNoYXJlUHJvdmlkZXIgPSByZXF1aXJlICcuL3Byb3ZpZGVycy9kb2N1bWVudC1zdG9yZS1zaGFyZS1wcm92aWRlcidcbkxvY2FsRmlsZVByb3ZpZGVyID0gcmVxdWlyZSAnLi9wcm92aWRlcnMvbG9jYWwtZmlsZS1wcm92aWRlcidcblBvc3RNZXNzYWdlUHJvdmlkZXIgPSByZXF1aXJlICcuL3Byb3ZpZGVycy9wb3N0LW1lc3NhZ2UtcHJvdmlkZXInXG5VUkxQcm92aWRlciA9IHJlcXVpcmUgJy4vcHJvdmlkZXJzL3VybC1wcm92aWRlcidcblxuUHJvdmlkZXJJbnRlcmZhY2UgPSAocmVxdWlyZSAnLi9wcm92aWRlcnMvcHJvdmlkZXItaW50ZXJmYWNlJykuUHJvdmlkZXJJbnRlcmZhY2VcbmNsb3VkQ29udGVudEZhY3RvcnkgPSAocmVxdWlyZSAnLi9wcm92aWRlcnMvcHJvdmlkZXItaW50ZXJmYWNlJykuY2xvdWRDb250ZW50RmFjdG9yeVxuQ2xvdWRDb250ZW50ID0gKHJlcXVpcmUgJy4vcHJvdmlkZXJzL3Byb3ZpZGVyLWludGVyZmFjZScpLkNsb3VkQ29udGVudFxuQ2xvdWRNZXRhZGF0YSA9IChyZXF1aXJlICcuL3Byb3ZpZGVycy9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbmNsYXNzIENsb3VkRmlsZU1hbmFnZXJDbGllbnRFdmVudFxuXG4gIGNvbnN0cnVjdG9yOiAoQHR5cGUsIEBkYXRhID0ge30sIEBjYWxsYmFjayA9IG51bGwsIEBzdGF0ZSA9IHt9KSAtPlxuXG5jbGFzcyBDbG91ZEZpbGVNYW5hZ2VyQ2xpZW50XG5cbiAgY29uc3RydWN0b3I6IChvcHRpb25zKSAtPlxuICAgIEBzdGF0ZSA9XG4gICAgICBhdmFpbGFibGVQcm92aWRlcnM6IFtdXG4gICAgQF9saXN0ZW5lcnMgPSBbXVxuICAgIEBfcmVzZXRTdGF0ZSgpXG4gICAgQF91aSA9IG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUkgQFxuICAgIEBwcm92aWRlcnMgPSB7fVxuICAgIEB1cmxQcm92aWRlciA9IG5ldyBVUkxQcm92aWRlcigpXG5cbiAgc2V0QXBwT3B0aW9uczogKEBhcHBPcHRpb25zID0ge30pLT5cblxuICAgIEBhcHBPcHRpb25zLndyYXBGaWxlQ29udGVudCA/PSB0cnVlXG4gICAgQ2xvdWRDb250ZW50LndyYXBGaWxlQ29udGVudCA9IEBhcHBPcHRpb25zLndyYXBGaWxlQ29udGVudFxuXG4gICAgIyBEZXRlcm1pbmUgdGhlIGF2YWlsYWJsZSBwcm92aWRlcnMuIE5vdGUgdGhhdCBvcmRlciBpbiB0aGUgbGlzdCBjYW5cbiAgICAjIGJlIHNpZ25pZmljYW50IGluIHByb3ZpZGVyIHNlYXJjaGVzIChlLmcuIEBhdXRvUHJvdmlkZXIpLlxuICAgIGFsbFByb3ZpZGVycyA9IHt9XG4gICAgcHJvdmlkZXJMaXN0ID0gW1xuICAgICAgTG9jYWxTdG9yYWdlUHJvdmlkZXJcbiAgICAgIFJlYWRPbmx5UHJvdmlkZXJcbiAgICAgIEdvb2dsZURyaXZlUHJvdmlkZXJcbiAgICAgIExhcmFQcm92aWRlclxuICAgICAgRG9jdW1lbnRTdG9yZVByb3ZpZGVyXG4gICAgICBMb2NhbEZpbGVQcm92aWRlclxuICAgICAgUG9zdE1lc3NhZ2VQcm92aWRlclxuICAgIF1cbiAgICBmb3IgUHJvdmlkZXIgaW4gcHJvdmlkZXJMaXN0XG4gICAgICBpZiBQcm92aWRlci5BdmFpbGFibGUoKVxuICAgICAgICBhbGxQcm92aWRlcnNbUHJvdmlkZXIuTmFtZV0gPSBQcm92aWRlclxuXG4gICAgIyBkZWZhdWx0IHRvIGFsbCBwcm92aWRlcnMgaWYgbm9uIHNwZWNpZmllZFxuICAgIGlmIG5vdCBAYXBwT3B0aW9ucy5wcm92aWRlcnNcbiAgICAgIEBhcHBPcHRpb25zLnByb3ZpZGVycyA9IFtdXG4gICAgICBmb3Igb3duIHByb3ZpZGVyTmFtZSBvZiBhbGxQcm92aWRlcnNcbiAgICAgICAgYXBwT3B0aW9ucy5wcm92aWRlcnMucHVzaCBwcm92aWRlck5hbWVcblxuICAgICMgcHJlc2V0IHRoZSBleHRlbnNpb24gaWYgQXZhaWxhYmxlXG4gICAgQ2xvdWRNZXRhZGF0YS5FeHRlbnNpb24gPSBAYXBwT3B0aW9ucy5leHRlbnNpb25cbiAgICBDbG91ZE1ldGFkYXRhLlJlYWRhYmxlRXh0ZW5zaW9ucyA9IEBhcHBPcHRpb25zLnJlYWRhYmxlRXh0ZW5zaW9ucyBvciBbXVxuICAgIGlmIENsb3VkTWV0YWRhdGEuRXh0ZW5zaW9uIHRoZW4gQ2xvdWRNZXRhZGF0YS5SZWFkYWJsZUV4dGVuc2lvbnMucHVzaCBDbG91ZE1ldGFkYXRhLkV4dGVuc2lvblxuXG4gICAgcmVhZGFibGVNaW1ldHlwZXMgPSBAYXBwT3B0aW9ucy5yZWFkYWJsZU1pbWVUeXBlcyBvciBbXVxuICAgIHJlYWRhYmxlTWltZXR5cGVzLnB1c2ggQGFwcE9wdGlvbnMubWltZVR5cGVcblxuICAgICMgY2hlY2sgdGhlIHByb3ZpZGVyc1xuICAgIHJlcXVlc3RlZFByb3ZpZGVycyA9IEBhcHBPcHRpb25zLnByb3ZpZGVycy5zbGljZSgpXG4gICAgaWYgZ2V0UXVlcnlQYXJhbSBcInNhdmVTZWNvbmRhcnlGaWxlVmlhUG9zdE1lc3NhZ2VcIlxuICAgICAgcmVxdWVzdGVkUHJvdmlkZXJzLnB1c2ggJ3Bvc3RNZXNzYWdlJ1xuICAgIGF2YWlsYWJsZVByb3ZpZGVycyA9IFtdXG4gICAgc2hhcmVQcm92aWRlciA9IG51bGxcbiAgICBmb3IgcHJvdmlkZXJTcGVjIGluIHJlcXVlc3RlZFByb3ZpZGVyc1xuICAgICAgW3Byb3ZpZGVyTmFtZSwgcHJvdmlkZXJPcHRpb25zXSA9IGlmIGlzU3RyaW5nIHByb3ZpZGVyU3BlYyBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbiBbcHJvdmlkZXJTcGVjLCB7fV0gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgW3Byb3ZpZGVyU3BlYy5uYW1lLCBwcm92aWRlclNwZWNdXG4gICAgICAjIG1lcmdlIGluIG90aGVyIG9wdGlvbnMgYXMgbmVlZGVkXG4gICAgICBwcm92aWRlck9wdGlvbnMubWltZVR5cGUgPz0gQGFwcE9wdGlvbnMubWltZVR5cGVcbiAgICAgIHByb3ZpZGVyT3B0aW9ucy5yZWFkYWJsZU1pbWV0eXBlcyA9IHJlYWRhYmxlTWltZXR5cGVzXG4gICAgICBpZiBub3QgcHJvdmlkZXJOYW1lXG4gICAgICAgIEBhbGVydCBcIkludmFsaWQgcHJvdmlkZXIgc3BlYyAtIG11c3QgZWl0aGVyIGJlIHN0cmluZyBvciBvYmplY3Qgd2l0aCBuYW1lIHByb3BlcnR5XCJcbiAgICAgIGVsc2VcbiAgICAgICAgaWYgcHJvdmlkZXJTcGVjLmNyZWF0ZVByb3ZpZGVyXG4gICAgICAgICAgYWxsUHJvdmlkZXJzW3Byb3ZpZGVyTmFtZV0gPSBwcm92aWRlclNwZWMuY3JlYXRlUHJvdmlkZXIgUHJvdmlkZXJJbnRlcmZhY2VcbiAgICAgICAgaWYgYWxsUHJvdmlkZXJzW3Byb3ZpZGVyTmFtZV1cbiAgICAgICAgICBQcm92aWRlciA9IGFsbFByb3ZpZGVyc1twcm92aWRlck5hbWVdXG4gICAgICAgICAgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIgcHJvdmlkZXJPcHRpb25zLCBAXG4gICAgICAgICAgQHByb3ZpZGVyc1twcm92aWRlck5hbWVdID0gcHJvdmlkZXJcbiAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRoZSBEb2N1bWVudFN0b3JlUHJvdmlkZXIsIGluc3RhbnRpYXRlIHRoZSBTaGFyZVByb3ZpZGVyXG4gICAgICAgICAgaWYgcHJvdmlkZXJOYW1lIGlzIERvY3VtZW50U3RvcmVQcm92aWRlci5OYW1lXG4gICAgICAgICAgICBzaGFyZVByb3ZpZGVyID0gbmV3IERvY3VtZW50U3RvcmVTaGFyZVByb3ZpZGVyKEAsIHByb3ZpZGVyKVxuICAgICAgICAgIGlmIHByb3ZpZGVyLnVybERpc3BsYXlOYW1lICAgICAgICAjIGFsc28gYWRkIHRvIGhlcmUgaW4gcHJvdmlkZXJzIGxpc3Qgc28gd2UgY2FuIGxvb2sgaXQgdXAgd2hlbiBwYXJzaW5nIHVybCBoYXNoXG4gICAgICAgICAgICBAcHJvdmlkZXJzW3Byb3ZpZGVyLnVybERpc3BsYXlOYW1lXSA9IHByb3ZpZGVyXG4gICAgICAgICAgYXZhaWxhYmxlUHJvdmlkZXJzLnB1c2ggcHJvdmlkZXJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEBhbGVydCBcIlVua25vd24gcHJvdmlkZXI6ICN7cHJvdmlkZXJOYW1lfVwiXG4gICAgQF9zZXRTdGF0ZVxuICAgICAgYXZhaWxhYmxlUHJvdmlkZXJzOiBhdmFpbGFibGVQcm92aWRlcnNcbiAgICAgIHNoYXJlUHJvdmlkZXI6IHNoYXJlUHJvdmlkZXJcblxuICAgIEBhcHBPcHRpb25zLnVpIG9yPSB7fVxuICAgIEBhcHBPcHRpb25zLnVpLndpbmRvd1RpdGxlU3VmZml4IG9yPSBkb2N1bWVudC50aXRsZVxuICAgIEBhcHBPcHRpb25zLnVpLndpbmRvd1RpdGxlU2VwYXJhdG9yIG9yPSAnIC0gJ1xuICAgIEBfc2V0V2luZG93VGl0bGUoKVxuXG4gICAgQF91aS5pbml0IEBhcHBPcHRpb25zLnVpXG5cbiAgICAjIGNoZWNrIGZvciBhdXRvc2F2ZVxuICAgIGlmIEBhcHBPcHRpb25zLmF1dG9TYXZlSW50ZXJ2YWxcbiAgICAgIEBhdXRvU2F2ZSBAYXBwT3B0aW9ucy5hdXRvU2F2ZUludGVydmFsXG5cbiAgICAjIGluaXRpYWxpemUgdGhlIGNsb3VkQ29udGVudEZhY3Rvcnkgd2l0aCBhbGwgZGF0YSB3ZSB3YW50IGluIHRoZSBlbnZlbG9wZVxuICAgIGNsb3VkQ29udGVudEZhY3Rvcnkuc2V0RW52ZWxvcGVNZXRhZGF0YVxuICAgICAgY2ZtVmVyc2lvbjogJ19fUEFDS0FHRV9WRVJTSU9OX18nICMgcmVwbGFjZWQgYnkgdmVyc2lvbiBudW1iZXIgYXQgYnVpbGQgdGltZVxuICAgICAgYXBwTmFtZTogQGFwcE9wdGlvbnMuYXBwTmFtZSBvciBcIlwiXG4gICAgICBhcHBWZXJzaW9uOiBAYXBwT3B0aW9ucy5hcHBWZXJzaW9uIG9yIFwiXCJcbiAgICAgIGFwcEJ1aWxkTnVtOiBAYXBwT3B0aW9ucy5hcHBCdWlsZE51bSBvciBcIlwiXG5cbiAgICBAbmV3RmlsZU9wZW5zSW5OZXdUYWIgPSBpZiBAYXBwT3B0aW9ucy51aT8uaGFzT3duUHJvcGVydHkoJ25ld0ZpbGVPcGVuc0luTmV3VGFiJykgdGhlbiBAYXBwT3B0aW9ucy51aS5uZXdGaWxlT3BlbnNJbk5ld1RhYiBlbHNlIHRydWVcblxuICAgIEBfc3RhcnRQb3N0TWVzc2FnZUxpc3RlbmVyKClcblxuICBzZXRQcm92aWRlck9wdGlvbnM6IChuYW1lLCBuZXdPcHRpb25zKSAtPlxuICAgIGZvciBwcm92aWRlciBpbiBAc3RhdGUuYXZhaWxhYmxlUHJvdmlkZXJzXG4gICAgICBpZiBwcm92aWRlci5uYW1lIGlzIG5hbWVcbiAgICAgICAgcHJvdmlkZXIub3B0aW9ucyA/PSB7fVxuICAgICAgICBmb3Iga2V5IG9mIG5ld09wdGlvbnNcbiAgICAgICAgICBwcm92aWRlci5vcHRpb25zW2tleV0gPSBuZXdPcHRpb25zW2tleV1cbiAgICAgICAgYnJlYWtcblxuICBjb25uZWN0OiAtPlxuICAgIEBfZXZlbnQgJ2Nvbm5lY3RlZCcsIHtjbGllbnQ6IEB9XG5cbiAgI1xuICAjIENhbGxlZCBmcm9tIENsb3VkRmlsZU1hbmFnZXIuY2xpZW50Q29ubmVjdCB0byBwcm9jZXNzIHRoZSBVUkwgcGFyYW1ldGVyc1xuICAjIGFuZCBpbml0aWF0ZSBvcGVuaW5nIGFueSBkb2N1bWVudCBzcGVjaWZpZWQgYnkgVVJMIHBhcmFtZXRlcnMuIFRoZSBDRk1cbiAgIyBoYXNoIHBhcmFtcyBhcmUgcHJvY2Vzc2VkIGhlcmUgYWZ0ZXIgd2hpY2ggcHJvdmlkZXJzIGFyZSBnaXZlbiBhIGNoYW5jZVxuICAjIHRvIHByb2Nlc3MgYW55IHByb3ZpZGVyLXNwZWNpZmljIFVSTCBwYXJhbWV0ZXJzLiBDYWxscyByZWFkeSgpIGlmIG5vXG4gICMgaW5pdGlhbCBkb2N1bWVudCBvcGVuaW5nIG9jY3Vycy5cbiAgI1xuICBwcm9jZXNzVXJsUGFyYW1zOiAtPlxuICAgICMgcHJvY2VzcyB0aGUgaGFzaCBwYXJhbXNcbiAgICBoYXNoUGFyYW1zID0gQGFwcE9wdGlvbnMuaGFzaFBhcmFtc1xuICAgIGlmIGhhc2hQYXJhbXMuc2hhcmVkQ29udGVudElkXG4gICAgICBAb3BlblNoYXJlZENvbnRlbnQgaGFzaFBhcmFtcy5zaGFyZWRDb250ZW50SWRcbiAgICBlbHNlIGlmIGhhc2hQYXJhbXMuZmlsZVBhcmFtc1xuICAgICAgaWYgaGFzaFBhcmFtcy5maWxlUGFyYW1zLmluZGV4T2YoXCJodHRwXCIpIGlzIDBcbiAgICAgICAgQG9wZW5VcmxGaWxlIGhhc2hQYXJhbXMuZmlsZVBhcmFtc1xuICAgICAgZWxzZVxuICAgICAgICBbcHJvdmlkZXJOYW1lLCBwcm92aWRlclBhcmFtc10gPSBoYXNoUGFyYW1zLmZpbGVQYXJhbXMuc3BsaXQgJzonXG4gICAgICAgIEBvcGVuUHJvdmlkZXJGaWxlIHByb3ZpZGVyTmFtZSwgcHJvdmlkZXJQYXJhbXNcbiAgICBlbHNlIGlmIGhhc2hQYXJhbXMuY29weVBhcmFtc1xuICAgICAgQG9wZW5Db3BpZWRGaWxlIGhhc2hQYXJhbXMuY29weVBhcmFtc1xuICAgIGVsc2UgaWYgaGFzaFBhcmFtcy5uZXdJbkZvbGRlclBhcmFtc1xuICAgICAgW3Byb3ZpZGVyTmFtZSwgZm9sZGVyXSA9IGhhc2hQYXJhbXMubmV3SW5Gb2xkZXJQYXJhbXMuc3BsaXQgJzonXG4gICAgICBAY3JlYXRlTmV3SW5Gb2xkZXIgcHJvdmlkZXJOYW1lLCBmb2xkZXJcbiAgICBlbHNlXG4gICAgICAjIGdpdmUgcHJvdmlkZXJzIGEgY2hhbmNlIHRvIHByb2Nlc3MgdXJsIHBhcmFtc1xuICAgICAgZm9yIHByb3ZpZGVyIGluIEBzdGF0ZS5hdmFpbGFibGVQcm92aWRlcnNcbiAgICAgICAgcmV0dXJuIGlmIHByb3ZpZGVyLmhhbmRsZVVybFBhcmFtcygpXG5cbiAgICAgICMgaWYgbm8gcHJvdmlkZXJzIGhhbmRsZWQgaXQsIHRoZW4ganVzdCBzaWduYWwgcmVhZHkoKVxuICAgICAgQHJlYWR5KClcblxuICByZWFkeTogLT5cbiAgICBAX2V2ZW50ICdyZWFkeSdcblxuICBsaXN0ZW46IChsaXN0ZW5lcikgLT5cbiAgICBpZiBsaXN0ZW5lclxuICAgICAgQF9saXN0ZW5lcnMucHVzaCBsaXN0ZW5lclxuXG4gIGxvZzogKGV2ZW50LCBldmVudERhdGEpIC0+XG4gICAgaWYgKEBhcHBPcHRpb25zLmxvZylcbiAgICAgIEBhcHBPcHRpb25zLmxvZyBldmVudCwgZXZlbnREYXRhXG5cbiAgYXV0b1Byb3ZpZGVyOiAoY2FwYWJpbGl0eSkgLT5cbiAgICBmb3IgcHJvdmlkZXIgaW4gQHN0YXRlLmF2YWlsYWJsZVByb3ZpZGVyc1xuICAgICAgcmV0dXJuIHByb3ZpZGVyIGlmIHByb3ZpZGVyLmNhbkF1dG8gY2FwYWJpbGl0eVxuXG4gIGFwcGVuZE1lbnVJdGVtOiAoaXRlbSkgLT5cbiAgICBAX3VpLmFwcGVuZE1lbnVJdGVtIGl0ZW07IEBcblxuICBwcmVwZW5kTWVudUl0ZW06IChpdGVtKSAtPlxuICAgIEBfdWkucHJlcGVuZE1lbnVJdGVtIGl0ZW07IEBcblxuICByZXBsYWNlTWVudUl0ZW06IChrZXksIGl0ZW0pIC0+XG4gICAgQF91aS5yZXBsYWNlTWVudUl0ZW0ga2V5LCBpdGVtOyBAXG5cbiAgaW5zZXJ0TWVudUl0ZW1CZWZvcmU6IChrZXksIGl0ZW0pIC0+XG4gICAgQF91aS5pbnNlcnRNZW51SXRlbUJlZm9yZSBrZXksIGl0ZW07IEBcblxuICBpbnNlcnRNZW51SXRlbUFmdGVyOiAoa2V5LCBpdGVtKSAtPlxuICAgIEBfdWkuaW5zZXJ0TWVudUl0ZW1BZnRlciBrZXksIGl0ZW07IEBcblxuICBzZXRNZW51QmFySW5mbzogKGluZm8pIC0+XG4gICAgQF91aS5zZXRNZW51QmFySW5mbyBpbmZvXG5cbiAgbmV3RmlsZTogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBAX2Nsb3NlQ3VycmVudEZpbGUoKVxuICAgIEBfcmVzZXRTdGF0ZSgpXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIlwiXG4gICAgQF9ldmVudCAnbmV3ZWRGaWxlJywge2NvbnRlbnQ6IFwiXCJ9XG5cbiAgbmV3RmlsZURpYWxvZzogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBpZiBAbmV3RmlsZU9wZW5zSW5OZXdUYWJcbiAgICAgIHdpbmRvdy5vcGVuIEBnZXRDdXJyZW50VXJsKCksICdfYmxhbmsnXG4gICAgZWxzZSBpZiBAc3RhdGUuZGlydHlcbiAgICAgIGlmIEBfYXV0b1NhdmVJbnRlcnZhbCBhbmQgQHN0YXRlLm1ldGFkYXRhXG4gICAgICAgIEBzYXZlKClcbiAgICAgICAgQG5ld0ZpbGUoKVxuICAgICAgZWxzZVxuICAgICAgICBAY29uZmlybSB0cignfkNPTkZJUk0uTkVXX0ZJTEUnKSwgPT4gQG5ld0ZpbGUoKVxuICAgIGVsc2VcbiAgICAgIEBuZXdGaWxlKClcblxuICBvcGVuRmlsZTogKG1ldGFkYXRhLCBjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgaWYgbWV0YWRhdGE/LnByb3ZpZGVyPy5jYW4gJ2xvYWQnLCBtZXRhZGF0YVxuICAgICAgQF9ldmVudCAnd2lsbE9wZW5GaWxlJywge29wOiBcIm9wZW5GaWxlXCJ9XG4gICAgICBtZXRhZGF0YS5wcm92aWRlci5sb2FkIG1ldGFkYXRhLCAoZXJyLCBjb250ZW50KSA9PlxuICAgICAgICByZXR1cm4gQGFsZXJ0KGVyciwgPT4gQHJlYWR5KCkpIGlmIGVyclxuICAgICAgICAjIHNob3VsZCB3YWl0IHRvIGNsb3NlIGN1cnJlbnQgZmlsZSB1bnRpbCBjbGllbnQgc2lnbmFscyBvcGVuIGlzIGNvbXBsZXRlXG4gICAgICAgIEBfY2xvc2VDdXJyZW50RmlsZSgpXG4gICAgICAgIEBfZmlsZU9wZW5lZCBjb250ZW50LCBtZXRhZGF0YSwge29wZW5lZENvbnRlbnQ6IGNvbnRlbnQuY2xvbmUoKX0sIEBfZ2V0SGFzaFBhcmFtcyBtZXRhZGF0YVxuICAgICAgICBjYWxsYmFjaz8gY29udGVudCwgbWV0YWRhdGFcbiAgICAgICAgbWV0YWRhdGEucHJvdmlkZXIuZmlsZU9wZW5lZCBjb250ZW50LCBtZXRhZGF0YVxuICAgIGVsc2VcbiAgICAgIEBvcGVuRmlsZURpYWxvZyBjYWxsYmFja1xuXG4gIG9wZW5GaWxlRGlhbG9nOiAoY2FsbGJhY2sgPSBudWxsKSAtPlxuICAgIHNob3dEaWFsb2cgPSA9PlxuICAgICAgQF91aS5vcGVuRmlsZURpYWxvZyAobWV0YWRhdGEpID0+XG4gICAgICAgIEBvcGVuRmlsZSBtZXRhZGF0YSwgY2FsbGJhY2tcbiAgICBpZiBub3QgQHN0YXRlLmRpcnR5XG4gICAgICBzaG93RGlhbG9nKClcbiAgICBlbHNlXG4gICAgICBAY29uZmlybSB0cignfkNPTkZJUk0uT1BFTl9GSUxFJyksIHNob3dEaWFsb2dcblxuICBjbG9zZUZpbGU6IChjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgQF9jbG9zZUN1cnJlbnRGaWxlKClcbiAgICBAX3Jlc2V0U3RhdGUoKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gXCJcIlxuICAgIEBfZXZlbnQgJ2Nsb3NlZEZpbGUnLCB7Y29udGVudDogXCJcIn1cbiAgICBjYWxsYmFjaz8oKVxuXG4gIGNsb3NlRmlsZURpYWxvZzogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBpZiBub3QgQHN0YXRlLmRpcnR5XG4gICAgICBAY2xvc2VGaWxlIGNhbGxiYWNrXG4gICAgZWxzZVxuICAgICAgQGNvbmZpcm0gdHIoJ35DT05GSVJNLkNMT1NFX0ZJTEUnKSwgPT4gQGNsb3NlRmlsZSBjYWxsYmFja1xuXG4gIGltcG9ydERhdGE6IChkYXRhLCBjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgQF9ldmVudCAnaW1wb3J0ZWREYXRhJywgZGF0YVxuICAgIGNhbGxiYWNrPyBkYXRhXG5cbiAgaW1wb3J0RGF0YURpYWxvZzogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBAX3VpLmltcG9ydERhdGFEaWFsb2cgKGRhdGEpID0+XG4gICAgICBAaW1wb3J0RGF0YSBkYXRhLCBjYWxsYmFja1xuXG4gIHJlYWRMb2NhbEZpbGU6IChmaWxlLCBjYWxsYmFjaz1udWxsKSAtPlxuICAgIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICByZWFkZXIub25sb2FkID0gKGxvYWRlZCkgLT5cbiAgICAgIGNhbGxiYWNrPyB7bmFtZTogZmlsZS5uYW1lLCBjb250ZW50OiBsb2FkZWQudGFyZ2V0LnJlc3VsdH1cbiAgICByZWFkZXIucmVhZEFzVGV4dCBmaWxlXG5cbiAgb3BlbkxvY2FsRmlsZTogKGZpbGUsIGNhbGxiYWNrPW51bGwpIC0+XG4gICAgQF9ldmVudCAnd2lsbE9wZW5GaWxlJywge29wOiBcIm9wZW5Mb2NhbEZpbGVcIn1cbiAgICBAcmVhZExvY2FsRmlsZSBmaWxlLCAoZGF0YSkgPT5cbiAgICAgIGNvbnRlbnQgPSBjbG91ZENvbnRlbnRGYWN0b3J5LmNyZWF0ZUVudmVsb3BlZENsb3VkQ29udGVudCBkYXRhLmNvbnRlbnRcbiAgICAgIG1ldGFkYXRhID0gbmV3IENsb3VkTWV0YWRhdGFcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lXG4gICAgICAgIHR5cGU6IENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgQF9maWxlT3BlbmVkIGNvbnRlbnQsIG1ldGFkYXRhLCB7b3BlbmVkQ29udGVudDogY29udGVudC5jbG9uZSgpfVxuICAgICAgY2FsbGJhY2s/IGNvbnRlbnQsIG1ldGFkYXRhXG5cbiAgaW1wb3J0TG9jYWxGaWxlOiAoZmlsZSwgY2FsbGJhY2s9bnVsbCkgLT5cbiAgICBAcmVhZExvY2FsRmlsZSBmaWxlLCAoZGF0YSkgPT5cbiAgICAgIEBpbXBvcnREYXRhIGRhdGEsIGNhbGxiYWNrXG5cbiAgb3BlblNoYXJlZENvbnRlbnQ6IChpZCkgLT5cbiAgICBAX2V2ZW50ICd3aWxsT3BlbkZpbGUnLCB7b3A6IFwib3BlblNoYXJlZENvbnRlbnRcIn1cbiAgICBAc3RhdGUuc2hhcmVQcm92aWRlcj8ubG9hZFNoYXJlZENvbnRlbnQgaWQsIChlcnIsIGNvbnRlbnQsIG1ldGFkYXRhKSA9PlxuICAgICAgcmV0dXJuIEBhbGVydChlcnIsID0+IEByZWFkeSgpKSBpZiBlcnJcbiAgICAgIEBfZmlsZU9wZW5lZCBjb250ZW50LCBtZXRhZGF0YSwge292ZXJ3cml0YWJsZTogZmFsc2UsIG9wZW5lZENvbnRlbnQ6IGNvbnRlbnQuY2xvbmUoKX1cblxuICAjIG11c3QgYmUgY2FsbGVkIGFzIGEgcmVzdWx0IG9mIHVzZXIgYWN0aW9uIChlLmcuIGNsaWNrKSB0byBhdm9pZCBwb3B1cCBibG9ja2Vyc1xuICBwYXJzZVVybEF1dGhvcml6ZUFuZE9wZW46IC0+XG4gICAgaWYgQGFwcE9wdGlvbnMuaGFzaFBhcmFtcz8uZmlsZVBhcmFtcz9cbiAgICAgIFtwcm92aWRlck5hbWUsIHByb3ZpZGVyUGFyYW1zXSA9IEBhcHBPcHRpb25zLmhhc2hQYXJhbXMuZmlsZVBhcmFtcy5zcGxpdCAnOidcbiAgICAgIHByb3ZpZGVyID0gQHByb3ZpZGVyc1twcm92aWRlck5hbWVdXG4gICAgICBpZiBwcm92aWRlclxuICAgICAgICBwcm92aWRlci5hdXRob3JpemUgPT5cbiAgICAgICAgICBAb3BlblByb3ZpZGVyRmlsZSBwcm92aWRlck5hbWUgcHJvdmlkZXJQYXJhbXNcblxuICBjb25maXJtQXV0aG9yaXplQW5kT3BlbjogKHByb3ZpZGVyLCBwcm92aWRlclBhcmFtcykgLT5cbiAgICAjIHRyaWdnZXIgYXV0aG9yaXplKCkgZnJvbSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGF2b2lkIHBvcHVwIGJsb2NrZXJzXG4gICAgQGNvbmZpcm0gdHIoXCJ+Q09ORklSTS5BVVRIT1JJWkVfT1BFTlwiKSwgPT5cbiAgICAgIHByb3ZpZGVyLmF1dGhvcml6ZSA9PlxuICAgICAgICBAX2V2ZW50ICd3aWxsT3BlbkZpbGUnLCB7b3A6IFwiY29uZmlybUF1dGhvcml6ZUFuZE9wZW5cIn1cbiAgICAgICAgcHJvdmlkZXIub3BlblNhdmVkIHByb3ZpZGVyUGFyYW1zLCAoZXJyLCBjb250ZW50LCBtZXRhZGF0YSkgPT5cbiAgICAgICAgICByZXR1cm4gQGFsZXJ0KGVycikgaWYgZXJyXG4gICAgICAgICAgQF9maWxlT3BlbmVkIGNvbnRlbnQsIG1ldGFkYXRhLCB7b3BlbmVkQ29udGVudDogY29udGVudC5jbG9uZSgpfSwgQF9nZXRIYXNoUGFyYW1zIG1ldGFkYXRhXG4gICAgICAgICAgcHJvdmlkZXIuZmlsZU9wZW5lZCBjb250ZW50LCBtZXRhZGF0YVxuXG4gIG9wZW5Qcm92aWRlckZpbGU6IChwcm92aWRlck5hbWUsIHByb3ZpZGVyUGFyYW1zKSAtPlxuICAgIHByb3ZpZGVyID0gQHByb3ZpZGVyc1twcm92aWRlck5hbWVdXG4gICAgaWYgcHJvdmlkZXJcbiAgICAgIHByb3ZpZGVyLmF1dGhvcml6ZWQgKGF1dGhvcml6ZWQpID0+XG4gICAgICAgICMgd2UgY2FuIG9wZW4gdGhlIGRvY3VtZW50IHdpdGhvdXQgYXV0aG9yaXphdGlvbiBpbiBzb21lIGNhc2VzXG4gICAgICAgIGlmIGF1dGhvcml6ZWQgb3Igbm90IHByb3ZpZGVyLmlzQXV0aG9yaXphdGlvblJlcXVpcmVkKClcbiAgICAgICAgICBAX2V2ZW50ICd3aWxsT3BlbkZpbGUnLCB7b3A6IFwib3BlblByb3ZpZGVyRmlsZVwifVxuICAgICAgICAgIHByb3ZpZGVyLm9wZW5TYXZlZCBwcm92aWRlclBhcmFtcywgKGVyciwgY29udGVudCwgbWV0YWRhdGEpID0+XG4gICAgICAgICAgICByZXR1cm4gQGFsZXJ0KGVyciwgPT4gQHJlYWR5KCkpIGlmIGVyclxuICAgICAgICAgICAgQF9maWxlT3BlbmVkIGNvbnRlbnQsIG1ldGFkYXRhLCB7b3BlbmVkQ29udGVudDogY29udGVudC5jbG9uZSgpfSwgQF9nZXRIYXNoUGFyYW1zIG1ldGFkYXRhXG4gICAgICAgICAgICBwcm92aWRlci5maWxlT3BlbmVkIGNvbnRlbnQsIG1ldGFkYXRhXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBAY29uZmlybUF1dGhvcml6ZUFuZE9wZW4ocHJvdmlkZXIsIHByb3ZpZGVyUGFyYW1zKVxuICAgIGVsc2VcbiAgICAgIEBhbGVydCB0cihcIn5BTEVSVC5OT19QUk9WSURFUlwiKSwgPT4gQHJlYWR5KClcblxuICBvcGVuVXJsRmlsZTogKHVybCkgLT5cbiAgICBAdXJsUHJvdmlkZXIub3BlbkZpbGVGcm9tVXJsIHVybCwgKGVyciwgY29udGVudCwgbWV0YWRhdGEpID0+XG4gICAgICBAX2V2ZW50ICd3aWxsT3BlbkZpbGUnLCB7b3A6IFwib3BlblVybEZpbGVcIn1cbiAgICAgIHJldHVybiBAYWxlcnQoZXJyLCA9PiBAcmVhZHkoKSkgaWYgZXJyXG4gICAgICBAX2ZpbGVPcGVuZWQgY29udGVudCwgbWV0YWRhdGEsIHtvcGVuZWRDb250ZW50OiBjb250ZW50LmNsb25lKCl9LCBAX2dldEhhc2hQYXJhbXMgbWV0YWRhdGFcblxuICBjcmVhdGVOZXdJbkZvbGRlcjogKHByb3ZpZGVyTmFtZSwgZm9sZGVyKSAtPlxuICAgIHByb3ZpZGVyID0gQHByb3ZpZGVyc1twcm92aWRlck5hbWVdXG4gICAgaWYgcHJvdmlkZXIgYW5kIHByb3ZpZGVyLmNhbiAnc2V0Rm9sZGVyJywgQHN0YXRlLm1ldGFkYXRhXG4gICAgICBpZiBub3QgQHN0YXRlLm1ldGFkYXRhP1xuICAgICAgICBAc3RhdGUubWV0YWRhdGEgPSBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgICAgIHR5cGU6IENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlclxuXG4gICAgICBAc3RhdGUubWV0YWRhdGEucGFyZW50ID0gbmV3IENsb3VkTWV0YWRhdGFcbiAgICAgICAgdHlwZTogQ2xvdWRNZXRhZGF0YS5Gb2xkZXJcbiAgICAgICAgcHJvdmlkZXJEYXRhOlxuICAgICAgICAgIGlkOiBmb2xkZXJcblxuICAgICAgQF91aS5lZGl0SW5pdGlhbEZpbGVuYW1lKClcbiAgICBAX2V2ZW50ICduZXdlZEZpbGUnLCB7Y29udGVudDogXCJcIn1cblxuICBzZXRJbml0aWFsRmlsZW5hbWU6IChmaWxlbmFtZSkgLT5cbiAgICBAc3RhdGUubWV0YWRhdGEucmVuYW1lIGZpbGVuYW1lXG4gICAgQHNhdmUoKVxuXG4gIGlzU2F2ZUluUHJvZ3Jlc3M6IC0+XG4gICAgQHN0YXRlLnNhdmluZz9cblxuICBjb25maXJtQXV0aG9yaXplQW5kU2F2ZTogKHN0cmluZ0NvbnRlbnQsIGNhbGxiYWNrKSAtPlxuICAgICMgdHJpZ2dlciBhdXRob3JpemUoKSBmcm9tIGNvbmZpcm1hdGlvbiBkaWFsb2cgdG8gYXZvaWQgcG9wdXAgYmxvY2tlcnNcbiAgICBAY29uZmlybSB0cihcIn5DT05GSVJNLkFVVEhPUklaRV9TQVZFXCIpLCA9PlxuICAgICAgQHN0YXRlLm1ldGFkYXRhLnByb3ZpZGVyLmF1dGhvcml6ZSA9PlxuICAgICAgICBAc2F2ZUZpbGUgc3RyaW5nQ29udGVudCwgQHN0YXRlLm1ldGFkYXRhLCBjYWxsYmFja1xuXG4gIHNhdmU6IChjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgQF9ldmVudCAnZ2V0Q29udGVudCcsIHsgc2hhcmVkOiBAX3NoYXJlZE1ldGFkYXRhKCkgfSwgKHN0cmluZ0NvbnRlbnQpID0+XG4gICAgICBAc2F2ZUNvbnRlbnQgc3RyaW5nQ29udGVudCwgY2FsbGJhY2tcblxuICBzYXZlQ29udGVudDogKHN0cmluZ0NvbnRlbnQsIGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBwcm92aWRlciA9IEBzdGF0ZS5tZXRhZGF0YT8ucHJvdmlkZXIgb3IgQGF1dG9Qcm92aWRlciAnc2F2ZSdcbiAgICBpZiBwcm92aWRlcj9cbiAgICAgIHByb3ZpZGVyLmF1dGhvcml6ZWQgKGlzQXV0aG9yaXplZCkgPT5cbiAgICAgICAgIyB3ZSBjYW4gc2F2ZSB0aGUgZG9jdW1lbnQgd2l0aG91dCBhdXRob3JpemF0aW9uIGluIHNvbWUgY2FzZXNcbiAgICAgICAgaWYgaXNBdXRob3JpemVkIG9yIG5vdCBwcm92aWRlci5pc0F1dGhvcml6YXRpb25SZXF1aXJlZCgpXG4gICAgICAgICAgQHNhdmVGaWxlIHN0cmluZ0NvbnRlbnQsIEBzdGF0ZS5tZXRhZGF0YSwgY2FsbGJhY2tcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEBjb25maXJtQXV0aG9yaXplQW5kU2F2ZSBzdHJpbmdDb250ZW50LCBjYWxsYmFja1xuICAgIGVsc2VcbiAgICAgIEBzYXZlRmlsZURpYWxvZyBzdHJpbmdDb250ZW50LCBjYWxsYmFja1xuXG4gIHNhdmVGaWxlOiAoc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICAjIG11c3QgYmUgYWJsZSB0byAncmVzYXZlJyB0byBzYXZlIHNpbGVudGx5LCBpLmUuIHdpdGhvdXQgc2F2ZSBkaWFsb2dcbiAgICBpZiBtZXRhZGF0YT8ucHJvdmlkZXI/LmNhbigncmVzYXZlJywgbWV0YWRhdGEpXG4gICAgICBAc2F2ZUZpbGVOb0RpYWxvZyBzdHJpbmdDb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2tcbiAgICBlbHNlXG4gICAgICBAc2F2ZUZpbGVEaWFsb2cgc3RyaW5nQ29udGVudCwgY2FsbGJhY2tcblxuICBzYXZlRmlsZU5vRGlhbG9nOiAoc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBAX3NldFN0YXRlXG4gICAgICBzYXZpbmc6IG1ldGFkYXRhXG4gICAgY3VycmVudENvbnRlbnQgPSBAX2NyZWF0ZU9yVXBkYXRlQ3VycmVudENvbnRlbnQgc3RyaW5nQ29udGVudCwgbWV0YWRhdGFcbiAgICBtZXRhZGF0YS5wcm92aWRlci5zYXZlIGN1cnJlbnRDb250ZW50LCBtZXRhZGF0YSwgKGVyciwgc3RhdHVzQ29kZSkgPT5cbiAgICAgIGlmIGVyclxuICAgICAgICAjIGRpc2FibGUgYXV0b3NhdmUgb24gc2F2ZSBmYWlsdXJlOyBjbGVhciBcIlNhdmluZy4uLlwiIG1lc3NhZ2VcbiAgICAgICAgbWV0YWRhdGEuYXV0b1NhdmVEaXNhYmxlZCA9IHRydWVcbiAgICAgICAgQF9zZXRTdGF0ZSB7IG1ldGFkYXRhOiBtZXRhZGF0YSwgc2F2aW5nOiBudWxsIH1cbiAgICAgICAgaWYgc3RhdHVzQ29kZSBpcyA0MDNcbiAgICAgICAgICByZXR1cm4gQGNvbmZpcm1BdXRob3JpemVBbmRTYXZlIHN0cmluZ0NvbnRlbnQsIGNhbGxiYWNrXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gQGFsZXJ0KGVycilcbiAgICAgIGlmIEBzdGF0ZS5tZXRhZGF0YSBpc250IG1ldGFkYXRhXG4gICAgICAgIEBfY2xvc2VDdXJyZW50RmlsZSgpXG4gICAgICAjIHJlZW5hYmxlIGF1dG9zYXZlIG9uIHNhdmUgc3VjY2VzcyBpZiB0aGlzIGlzbid0IGEgbG9jYWwgZmlsZSBzYXZlXG4gICAgICBkZWxldGUgbWV0YWRhdGEuYXV0b1NhdmVEaXNhYmxlZCBpZiBtZXRhZGF0YS5hdXRvU2F2ZURpc2FibGVkP1xuICAgICAgQF9maWxlQ2hhbmdlZCAnc2F2ZWRGaWxlJywgY3VycmVudENvbnRlbnQsIG1ldGFkYXRhLCB7c2F2ZWQ6IHRydWV9LCBAX2dldEhhc2hQYXJhbXMgbWV0YWRhdGFcbiAgICAgIGNhbGxiYWNrPyBjdXJyZW50Q29udGVudCwgbWV0YWRhdGFcblxuICBzYXZlRmlsZURpYWxvZzogKHN0cmluZ0NvbnRlbnQgPSBudWxsLCBjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgQF91aS5zYXZlRmlsZURpYWxvZyAobWV0YWRhdGEpID0+XG4gICAgICBAX2RpYWxvZ1NhdmUgc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrXG5cbiAgc2F2ZUZpbGVBc0RpYWxvZzogKHN0cmluZ0NvbnRlbnQgPSBudWxsLCBjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgQF91aS5zYXZlRmlsZUFzRGlhbG9nIChtZXRhZGF0YSkgPT5cbiAgICAgIEBfZGlhbG9nU2F2ZSBzdHJpbmdDb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2tcblxuICBjcmVhdGVDb3B5OiAoc3RyaW5nQ29udGVudCA9IG51bGwsIGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBzYXZlQW5kT3BlbkNvcHkgPSAoc3RyaW5nQ29udGVudCkgPT5cbiAgICAgIEBzYXZlQ29waWVkRmlsZSBzdHJpbmdDb250ZW50LCBAc3RhdGUubWV0YWRhdGE/Lm5hbWUsIChlcnIsIGNvcHlQYXJhbXMpID0+XG4gICAgICAgIHJldHVybiBjYWxsYmFjaz8gZXJyIGlmIGVyclxuICAgICAgICB3aW5kb3cub3BlbiBAZ2V0Q3VycmVudFVybCBcIiNjb3B5PSN7Y29weVBhcmFtc31cIlxuICAgICAgICBjYWxsYmFjaz8gY29weVBhcmFtc1xuICAgIGlmIHN0cmluZ0NvbnRlbnQgaXMgbnVsbFxuICAgICAgQF9ldmVudCAnZ2V0Q29udGVudCcsIHt9LCAoc3RyaW5nQ29udGVudCkgLT5cbiAgICAgICAgc2F2ZUFuZE9wZW5Db3B5IHN0cmluZ0NvbnRlbnRcbiAgICBlbHNlXG4gICAgICBzYXZlQW5kT3BlbkNvcHkgc3RyaW5nQ29udGVudFxuXG4gIHNhdmVDb3BpZWRGaWxlOiAoc3RyaW5nQ29udGVudCwgbmFtZSwgY2FsbGJhY2spIC0+XG4gICAgdHJ5XG4gICAgICBwcmVmaXggPSAnY2ZtLWNvcHk6OidcbiAgICAgIG1heENvcHlOdW1iZXIgPSAwXG4gICAgICBmb3Igb3duIGtleSBvZiB3aW5kb3cubG9jYWxTdG9yYWdlXG4gICAgICAgIGlmIGtleS5zdWJzdHIoMCwgcHJlZml4Lmxlbmd0aCkgaXMgcHJlZml4XG4gICAgICAgICAgY29weU51bWJlciA9IHBhcnNlSW50KGtleS5zdWJzdHIocHJlZml4Lmxlbmd0aCksIDEwKVxuICAgICAgICAgIG1heENvcHlOdW1iZXIgPSBNYXRoLm1heChtYXhDb3B5TnVtYmVyLCBjb3B5TnVtYmVyKVxuICAgICAgbWF4Q29weU51bWJlcisrXG4gICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5XG4gICAgICAgIG5hbWU6IGlmIG5hbWU/Lmxlbmd0aCA+IDAgdGhlbiBcIkNvcHkgb2YgI3tuYW1lfVwiIGVsc2UgXCJDb3B5IG9mIFVudGl0bGVkIERvY3VtZW50XCJcbiAgICAgICAgc3RyaW5nQ29udGVudDogc3RyaW5nQ29udGVudFxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtIFwiI3twcmVmaXh9I3ttYXhDb3B5TnVtYmVyfVwiLCB2YWx1ZVxuICAgICAgY2FsbGJhY2s/IG51bGwsIG1heENvcHlOdW1iZXJcbiAgICBjYXRjaCBlXG4gICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byB0ZW1wb3JhcmlseSBzYXZlIGNvcGllZCBmaWxlXCJcblxuICBvcGVuQ29waWVkRmlsZTogKGNvcHlQYXJhbXMpIC0+XG4gICAgQF9ldmVudCAnd2lsbE9wZW5GaWxlJywge29wOiBcIm9wZW5Db3BpZWRGaWxlXCJ9XG4gICAgdHJ5XG4gICAgICBrZXkgPSBcImNmbS1jb3B5Ojoje2NvcHlQYXJhbXN9XCJcbiAgICAgIGNvcGllZCA9IEpTT04ucGFyc2Ugd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtIGtleVxuICAgICAgY29udGVudCA9IGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50IGNvcGllZC5zdHJpbmdDb250ZW50XG4gICAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICAgIG5hbWU6IGNvcGllZC5uYW1lXG4gICAgICAgIHR5cGU6IENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIlwiXG4gICAgICBAX2ZpbGVPcGVuZWQgY29udGVudCwgbWV0YWRhdGEsIHtkaXJ0eTogdHJ1ZSwgb3BlbmVkQ29udGVudDogY29udGVudC5jbG9uZSgpfVxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtIGtleVxuICAgIGNhdGNoIGVcbiAgICAgIGNhbGxiYWNrIFwiVW5hYmxlIHRvIGxvYWQgY29waWVkIGZpbGVcIlxuXG4gIF9zaGFyZWRNZXRhZGF0YTogLT5cbiAgICBAc3RhdGUuY3VycmVudENvbnRlbnQ/LmdldFNoYXJlZE1ldGFkYXRhKCkgb3Ige31cblxuICBzaGFyZUdldExpbms6IC0+XG4gICAgQF91aS5zaGFyZURpYWxvZyBAXG5cbiAgc2hhcmVVcGRhdGU6IC0+XG4gICAgQHNoYXJlID0+IEBhbGVydCAodHIgXCJ+U0hBUkVfVVBEQVRFLk1FU1NBR0VcIiksICh0ciBcIn5TSEFSRV9VUERBVEUuVElUTEVcIilcblxuICB0b2dnbGVTaGFyZTogKGNhbGxiYWNrKSAtPlxuICAgIGlmIEBpc1NoYXJlZCgpXG4gICAgICBAdW5zaGFyZSBjYWxsYmFja1xuICAgIGVsc2VcbiAgICAgIEBzaGFyZSBjYWxsYmFja1xuXG4gIGlzU2hhcmVkOiAtPlxuICAgIEBzdGF0ZS5jdXJyZW50Q29udGVudD8uZ2V0KFwic2hhcmVkRG9jdW1lbnRJZFwiKSBhbmQgbm90IEBzdGF0ZS5jdXJyZW50Q29udGVudD8uZ2V0KFwiaXNVbnNoYXJlZFwiKVxuXG4gIGNhbkVkaXRTaGFyZWQ6IC0+XG4gICAgYWNjZXNzS2V5cyA9IEBzdGF0ZS5jdXJyZW50Q29udGVudD8uZ2V0KFwiYWNjZXNzS2V5c1wiKSBvciB7fVxuICAgIHNoYXJlRWRpdEtleSA9IEBzdGF0ZS5jdXJyZW50Q29udGVudD8uZ2V0KFwic2hhcmVFZGl0S2V5XCIpXG4gICAgKHNoYXJlRWRpdEtleSBvciBhY2Nlc3NLZXlzLnJlYWRXcml0ZSkgYW5kIG5vdCBAc3RhdGUuY3VycmVudENvbnRlbnQ/LmdldChcImlzVW5zaGFyZWRcIilcblxuICBzZXRTaGFyZVN0YXRlOiAoc2hhcmVkLCBjYWxsYmFjaykgLT5cbiAgICBpZiBAc3RhdGUuc2hhcmVQcm92aWRlclxuICAgICAgc2hhcmluZ01ldGFkYXRhID0gQHN0YXRlLnNoYXJlUHJvdmlkZXIuZ2V0U2hhcmluZ01ldGFkYXRhIHNoYXJlZFxuICAgICAgQF9ldmVudCAnZ2V0Q29udGVudCcsIHsgc2hhcmVkOiBzaGFyaW5nTWV0YWRhdGEgfSwgKHN0cmluZ0NvbnRlbnQpID0+XG4gICAgICAgIEBfc2V0U3RhdGVcbiAgICAgICAgICBzaGFyaW5nOiBzaGFyZWRcbiAgICAgICAgc2hhcmVkQ29udGVudCA9IGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50IHN0cmluZ0NvbnRlbnRcbiAgICAgICAgc2hhcmVkQ29udGVudC5hZGRNZXRhZGF0YSBzaGFyaW5nTWV0YWRhdGFcbiAgICAgICAgY3VycmVudENvbnRlbnQgPSBAX2NyZWF0ZU9yVXBkYXRlQ3VycmVudENvbnRlbnQgc3RyaW5nQ29udGVudCwgQHN0YXRlLm1ldGFkYXRhXG4gICAgICAgIHNoYXJlZENvbnRlbnQuc2V0KCdkb2NOYW1lJywgY3VycmVudENvbnRlbnQuZ2V0KCdkb2NOYW1lJykpXG4gICAgICAgIGlmIHNoYXJlZFxuICAgICAgICAgIGN1cnJlbnRDb250ZW50LnJlbW92ZSAnaXNVbnNoYXJlZCdcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGN1cnJlbnRDb250ZW50LnNldCAnaXNVbnNoYXJlZCcsIHRydWVcbiAgICAgICAgQHN0YXRlLnNoYXJlUHJvdmlkZXIuc2hhcmUgc2hhcmVkLCBjdXJyZW50Q29udGVudCwgc2hhcmVkQ29udGVudCwgQHN0YXRlLm1ldGFkYXRhLCAoZXJyLCBzaGFyZWRDb250ZW50SWQpID0+XG4gICAgICAgICAgcmV0dXJuIEBhbGVydChlcnIpIGlmIGVyclxuICAgICAgICAgIGNhbGxiYWNrPyBudWxsLCBzaGFyZWRDb250ZW50SWQsIGN1cnJlbnRDb250ZW50XG5cbiAgc2hhcmU6IChjYWxsYmFjaykgLT5cbiAgICBAc2V0U2hhcmVTdGF0ZSB0cnVlLCAoZXJyLCBzaGFyZWRDb250ZW50SWQsIGN1cnJlbnRDb250ZW50KSA9PlxuICAgICAgQF9maWxlQ2hhbmdlZCAnc2hhcmVkRmlsZScsIGN1cnJlbnRDb250ZW50LCBAc3RhdGUubWV0YWRhdGFcbiAgICAgIGNhbGxiYWNrPyBudWxsLCBzaGFyZWRDb250ZW50SWRcblxuICB1bnNoYXJlOiAoY2FsbGJhY2spIC0+XG4gICAgQHNldFNoYXJlU3RhdGUgZmFsc2UsIChlcnIsIHNoYXJlZENvbnRlbnRJZCwgY3VycmVudENvbnRlbnQpID0+XG4gICAgICBAX2ZpbGVDaGFuZ2VkICd1bnNoYXJlZEZpbGUnLCBjdXJyZW50Q29udGVudCwgQHN0YXRlLm1ldGFkYXRhXG4gICAgICBjYWxsYmFjaz8gbnVsbFxuXG4gIHJldmVydFRvU2hhcmVkOiAoY2FsbGJhY2sgPSBudWxsKSAtPlxuICAgIGlkID0gQHN0YXRlLmN1cnJlbnRDb250ZW50Py5nZXQoXCJzaGFyZWREb2N1bWVudElkXCIpXG4gICAgaWYgaWQgYW5kIEBzdGF0ZS5zaGFyZVByb3ZpZGVyP1xuICAgICAgQHN0YXRlLnNoYXJlUHJvdmlkZXIubG9hZFNoYXJlZENvbnRlbnQgaWQsIChlcnIsIGNvbnRlbnQsIG1ldGFkYXRhKSA9PlxuICAgICAgICByZXR1cm4gQGFsZXJ0KGVycikgaWYgZXJyXG4gICAgICAgIEBzdGF0ZS5jdXJyZW50Q29udGVudC5jb3B5TWV0YWRhdGFUbyBjb250ZW50XG4gICAgICAgIGlmIG5vdCBtZXRhZGF0YS5uYW1lIGFuZCBkb2NOYW1lID0gY29udGVudC5nZXQoJ2RvY05hbWUnKVxuICAgICAgICAgIG1ldGFkYXRhLm5hbWUgPSBkb2NOYW1lXG4gICAgICAgIEBfZmlsZU9wZW5lZCBjb250ZW50LCBtZXRhZGF0YSwge2RpcnR5OiB0cnVlLCBvcGVuZWRDb250ZW50OiBjb250ZW50LmNsb25lKCl9XG4gICAgICAgIGNhbGxiYWNrPyBudWxsXG5cbiAgcmV2ZXJ0VG9TaGFyZWREaWFsb2c6IChjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgaWYgQHN0YXRlLmN1cnJlbnRDb250ZW50Py5nZXQoXCJzaGFyZWREb2N1bWVudElkXCIpIGFuZCBAc3RhdGUuc2hhcmVQcm92aWRlcj9cbiAgICAgIEBjb25maXJtIHRyKFwifkNPTkZJUk0uUkVWRVJUX1RPX1NIQVJFRF9WSUVXXCIpLCA9PiBAcmV2ZXJ0VG9TaGFyZWQgY2FsbGJhY2tcblxuICBkb3dubG9hZERpYWxvZzogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICAjIHNob3VsZCBzaGFyZSBtZXRhZGF0YSBiZSBpbmNsdWRlZCBpbiBkb3dubG9hZGVkIGxvY2FsIGZpbGVzP1xuICAgIEBfZXZlbnQgJ2dldENvbnRlbnQnLCB7IHNoYXJlZDogQF9zaGFyZWRNZXRhZGF0YSgpIH0sIChjb250ZW50KSA9PlxuICAgICAgZW52ZWxvcGVkQ29udGVudCA9IGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50IGNvbnRlbnRcbiAgICAgIEBzdGF0ZS5jdXJyZW50Q29udGVudD8uY29weU1ldGFkYXRhVG8gZW52ZWxvcGVkQ29udGVudFxuICAgICAgQF91aS5kb3dubG9hZERpYWxvZyBAc3RhdGUubWV0YWRhdGE/Lm5hbWUsIGVudmVsb3BlZENvbnRlbnQsIGNhbGxiYWNrXG5cbiAgZ2V0RG93bmxvYWRCbG9iOiAoY29udGVudCwgaW5jbHVkZVNoYXJlSW5mbywgbWltZVR5cGU9J3RleHQvcGxhaW4nKSAtPlxuICAgIGlmIHR5cGVvZiBjb250ZW50IGlzIFwic3RyaW5nXCJcbiAgICAgIGlmIG1pbWVUeXBlLmluZGV4T2YoXCJpbWFnZVwiKSA+PSAwXG4gICAgICAgIGNvbnRlbnRUb1NhdmUgPSBiYXNlNjRBcnJheS50b0J5dGVBcnJheShjb250ZW50KVxuICAgICAgZWxzZVxuICAgICAgICBjb250ZW50VG9TYXZlID0gY29udGVudFxuXG4gICAgZWxzZSBpZiBpbmNsdWRlU2hhcmVJbmZvXG4gICAgICBjb250ZW50VG9TYXZlID0gSlNPTi5zdHJpbmdpZnkoY29udGVudC5nZXRDb250ZW50KCkpXG5cbiAgICBlbHNlICMgbm90IGluY2x1ZGVTaGFyZUluZm9cbiAgICAgICMgY2xvbmUgdGhlIGRvY3VtZW50IHNvIHdlIGNhbiBkZWxldGUgdGhlIHNoYXJlIGluZm8gYW5kIG5vdCBhZmZlY3QgdGhlIG9yaWdpbmFsXG4gICAgICBqc29uID0gY29udGVudC5jbG9uZSgpLmdldENvbnRlbnQoKVxuICAgICAgZGVsZXRlIGpzb24uc2hhcmVkRG9jdW1lbnRJZFxuICAgICAgZGVsZXRlIGpzb24uc2hhcmVFZGl0S2V5XG4gICAgICBkZWxldGUganNvbi5pc1Vuc2hhcmVkXG4gICAgICBkZWxldGUganNvbi5hY2Nlc3NLZXlzXG4gICAgICAjIENPREFQIG1vdmVzIHRoZSBrZXlzIGludG8gaXRzIG93biBuYW1lc3BhY2VcbiAgICAgIGRlbGV0ZSBqc29uLm1ldGFkYXRhLnNoYXJlZCBpZiBqc29uLm1ldGFkYXRhPy5zaGFyZWQ/XG4gICAgICBjb250ZW50VG9TYXZlID0gSlNPTi5zdHJpbmdpZnkoanNvbilcblxuICAgIG5ldyBCbG9iKFtjb250ZW50VG9TYXZlXSwge3R5cGU6IG1pbWVUeXBlfSlcblxuICBnZXREb3dubG9hZFVybDogKGNvbnRlbnQsIGluY2x1ZGVTaGFyZUluZm8sIG1pbWVUeXBlPSd0ZXh0L3BsYWluJykgLT5cbiAgICB3VVJMID0gd2luZG93LlVSTCBvciB3aW5kb3cud2Via2l0VVJMXG4gICAgd1VSTC5jcmVhdGVPYmplY3RVUkwoQGdldERvd25sb2FkQmxvYiBjb250ZW50LCBpbmNsdWRlU2hhcmVJbmZvLCBtaW1lVHlwZSkgaWYgd1VSTFxuXG4gIHJlbmFtZTogKG1ldGFkYXRhLCBuZXdOYW1lLCBjYWxsYmFjaykgLT5cbiAgICBkaXJ0eSA9IEBzdGF0ZS5kaXJ0eVxuICAgIF9yZW5hbWUgPSAobWV0YWRhdGEpID0+XG4gICAgICBAc3RhdGUuY3VycmVudENvbnRlbnQ/LmFkZE1ldGFkYXRhIGRvY05hbWU6IG1ldGFkYXRhLm5hbWVcbiAgICAgIEBfZmlsZUNoYW5nZWQgJ3JlbmFtZWRGaWxlJywgQHN0YXRlLmN1cnJlbnRDb250ZW50LCBtZXRhZGF0YSwge2RpcnR5OiBkaXJ0eX0sIEBfZ2V0SGFzaFBhcmFtcyBtZXRhZGF0YVxuICAgICAgY2FsbGJhY2s/IG5ld05hbWVcbiAgICBpZiBuZXdOYW1lIGlzbnQgQHN0YXRlLm1ldGFkYXRhPy5uYW1lXG4gICAgICBpZiBAc3RhdGUubWV0YWRhdGE/LnByb3ZpZGVyPy5jYW4gJ3JlbmFtZScsIG1ldGFkYXRhXG4gICAgICAgIEBzdGF0ZS5tZXRhZGF0YS5wcm92aWRlci5yZW5hbWUgQHN0YXRlLm1ldGFkYXRhLCBuZXdOYW1lLCAoZXJyLCBtZXRhZGF0YSkgPT5cbiAgICAgICAgICByZXR1cm4gQGFsZXJ0KGVycikgaWYgZXJyXG4gICAgICAgICAgX3JlbmFtZSBtZXRhZGF0YVxuICAgICAgZWxzZVxuICAgICAgICBpZiBtZXRhZGF0YVxuICAgICAgICAgIG1ldGFkYXRhLm5hbWUgPSBuZXdOYW1lXG4gICAgICAgICAgbWV0YWRhdGEuZmlsZW5hbWUgPSBuZXdOYW1lXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICAgICAgICBuYW1lOiBuZXdOYW1lXG4gICAgICAgICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgICAgX3JlbmFtZSBtZXRhZGF0YVxuXG4gIHJlbmFtZURpYWxvZzogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBAX3VpLnJlbmFtZURpYWxvZyBAc3RhdGUubWV0YWRhdGE/Lm5hbWUsIChuZXdOYW1lKSA9PlxuICAgICAgQHJlbmFtZSBAc3RhdGUubWV0YWRhdGEsIG5ld05hbWUsIGNhbGxiYWNrXG5cbiAgcmV2ZXJ0VG9MYXN0T3BlbmVkOiAoY2FsbGJhY2sgPSBudWxsKSAtPlxuICAgIEBfZXZlbnQgJ3dpbGxPcGVuRmlsZScsIHtvcDogXCJyZXZlcnRUb0xhc3RPcGVuZWRcIn1cbiAgICBpZiBAc3RhdGUub3BlbmVkQ29udGVudD8gYW5kIEBzdGF0ZS5tZXRhZGF0YVxuICAgICAgQF9maWxlT3BlbmVkIEBzdGF0ZS5vcGVuZWRDb250ZW50LCBAc3RhdGUubWV0YWRhdGEsIHtvcGVuZWRDb250ZW50OiBAc3RhdGUub3BlbmVkQ29udGVudC5jbG9uZSgpfVxuXG4gIHJldmVydFRvTGFzdE9wZW5lZERpYWxvZzogKGNhbGxiYWNrID0gbnVsbCkgLT5cbiAgICBpZiBAc3RhdGUub3BlbmVkQ29udGVudD8gYW5kIEBzdGF0ZS5tZXRhZGF0YVxuICAgICAgQGNvbmZpcm0gdHIoJ35DT05GSVJNLlJFVkVSVF9UT19MQVNUX09QRU5FRCcpLCA9PiBAcmV2ZXJ0VG9MYXN0T3BlbmVkIGNhbGxiYWNrXG4gICAgZWxzZVxuICAgICAgY2FsbGJhY2s/ICdObyBpbml0aWFsIG9wZW5lZCB2ZXJzaW9uIHdhcyBmb3VuZCBmb3IgdGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsZSdcblxuICBzYXZlU2Vjb25kYXJ5RmlsZUFzRGlhbG9nOiAoc3RyaW5nQ29udGVudCwgZXh0ZW5zaW9uLCBtaW1lVHlwZSwgY2FsbGJhY2spIC0+XG4gICAgaWYgKHByb3ZpZGVyID0gQGF1dG9Qcm92aWRlciAnZXhwb3J0JylcbiAgICAgIG1ldGFkYXRhID0geyBwcm92aWRlciwgZXh0ZW5zaW9uLCBtaW1lVHlwZSB9XG4gICAgICBAc2F2ZVNlY29uZGFyeUZpbGUgc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrXG4gICAgZWxzZVxuICAgICAgZGF0YSA9IHsgY29udGVudDogc3RyaW5nQ29udGVudCwgZXh0ZW5zaW9uLCBtaW1lVHlwZSB9XG4gICAgICBAX3VpLnNhdmVTZWNvbmRhcnlGaWxlQXNEaWFsb2cgZGF0YSwgKG1ldGFkYXRhKSA9PlxuICAgICAgICAjIHJlcGxhY2UgZGVmYXVsdHNcbiAgICAgICAgaWYgZXh0ZW5zaW9uXG4gICAgICAgICAgbWV0YWRhdGEuZmlsZW5hbWUgPSBDbG91ZE1ldGFkYXRhLm5ld0V4dGVuc2lvbiBtZXRhZGF0YS5maWxlbmFtZSwgZXh0ZW5zaW9uXG4gICAgICAgIGlmIG1pbWVUeXBlXG4gICAgICAgICAgbWV0YWRhdGEubWltZVR5cGUgPSBtaW1lVHlwZVxuXG4gICAgICAgIEBzYXZlU2Vjb25kYXJ5RmlsZSBzdHJpbmdDb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2tcblxuICAjIFNhdmVzIGEgZmlsZSB0byBiYWNrZW5kLCBidXQgZG9lcyBub3QgdXBkYXRlIGN1cnJlbnQgbWV0YWRhdGEuXG4gICMgVXNlZCBlLmcuIHdoZW4gZXhwb3J0aW5nIC5jc3YgZmlsZXMgZnJvbSBDT0RBUFxuICBzYXZlU2Vjb25kYXJ5RmlsZTogKHN0cmluZ0NvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFjayA9IG51bGwpIC0+XG4gICAgaWYgbWV0YWRhdGE/LnByb3ZpZGVyPy5jYW4gJ2V4cG9ydCcsIG1ldGFkYXRhXG4gICAgICBtZXRhZGF0YS5wcm92aWRlci5zYXZlQXNFeHBvcnQgc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIChlcnIsIHN0YXR1c0NvZGUpID0+XG4gICAgICAgIGlmIGVyclxuICAgICAgICAgIHJldHVybiBAYWxlcnQoZXJyKVxuICAgICAgICBjYWxsYmFjaz8gc3RyaW5nQ29udGVudCwgbWV0YWRhdGFcblxuICBkaXJ0eTogKGlzRGlydHkgPSB0cnVlKS0+XG4gICAgQF9zZXRTdGF0ZVxuICAgICAgZGlydHk6IGlzRGlydHlcbiAgICAgIHNhdmVkOiBAc3RhdGUuc2F2ZWQgYW5kIG5vdCBpc0RpcnR5XG5cbiAgc2hvdWxkQXV0b1NhdmU6ID0+XG4gICAgQHN0YXRlLmRpcnR5IGFuZFxuICAgICAgbm90IEBzdGF0ZS5tZXRhZGF0YT8uYXV0b1NhdmVEaXNhYmxlZCBhbmRcbiAgICAgIG5vdCBAaXNTYXZlSW5Qcm9ncmVzcygpIGFuZFxuICAgICAgQHN0YXRlLm1ldGFkYXRhPy5wcm92aWRlcj8uY2FuICdyZXNhdmUnLCBAc3RhdGUubWV0YWRhdGFcblxuICBhdXRvU2F2ZTogKGludGVydmFsKSAtPlxuICAgIGlmIEBfYXV0b1NhdmVJbnRlcnZhbFxuICAgICAgY2xlYXJJbnRlcnZhbCBAX2F1dG9TYXZlSW50ZXJ2YWxcblxuICAgICMgaW4gY2FzZSB0aGUgY2FsbGVyIHVzZXMgbWlsbGlzZWNvbmRzXG4gICAgaWYgaW50ZXJ2YWwgPiAxMDAwXG4gICAgICBpbnRlcnZhbCA9IE1hdGgucm91bmQoaW50ZXJ2YWwgLyAxMDAwKVxuICAgIGlmIGludGVydmFsID4gMFxuICAgICAgQF9hdXRvU2F2ZUludGVydmFsID0gc2V0SW50ZXJ2YWwgKD0+IEBzYXZlKCkgaWYgQHNob3VsZEF1dG9TYXZlKCkpLCAoaW50ZXJ2YWwgKiAxMDAwKVxuXG4gIGlzQXV0b1NhdmluZzogLT5cbiAgICBAX2F1dG9TYXZlSW50ZXJ2YWw/XG5cbiAgc2hvd0Jsb2NraW5nTW9kYWw6IChtb2RhbFByb3BzKSAtPlxuICAgIEBfdWkuc2hvd0Jsb2NraW5nTW9kYWwgbW9kYWxQcm9wc1xuXG4gIGhpZGVCbG9ja2luZ01vZGFsOiAtPlxuICAgIEBfdWkuaGlkZUJsb2NraW5nTW9kYWwoKVxuXG4gIGdldEN1cnJlbnRVcmw6IChxdWVyeVN0cmluZyA9IG51bGwpIC0+XG4gICAgc3VmZml4ID0gaWYgcXVlcnlTdHJpbmc/IHRoZW4gXCI/I3txdWVyeVN0cmluZ31cIiBlbHNlIFwiXCJcbiAgICAjIENoZWNrIGJyb3dzZXIgc3VwcG9ydCBmb3IgZG9jdW1lbnQubG9jYXRpb24ub3JpZ2luICgmIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pXG4gICAgXCIje2RvY3VtZW50LmxvY2F0aW9uLm9yaWdpbn0je2RvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lfSN7c3VmZml4fVwiXG5cbiAgIyBUYWtlcyBhbiBhcnJheSBvZiBzdHJpbmdzIHJlcHJlc2VudGluZyB1cmwgcGFyYW1ldGVycyB0byBiZSByZW1vdmVkIGZyb20gdGhlIFVSTC5cbiAgIyBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgcGFyYW1ldGVycyBmcm9tIHRoZSBVUkwgYW5kIHRoZW4gdXNlcyB0aGUgaGlzdG9yeSBBUEknc1xuICAjIHB1c2hTdGF0ZSgpIG1ldGhvZCB0byB1cGRhdGUgdGhlIFVSTCB3aXRob3V0IHJlbG9hZGluZyB0aGUgcGFnZS5cbiAgIyBBZGFwdGVkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE2NTQ0MzYuXG4gIHJlbW92ZVF1ZXJ5UGFyYW1zOiAocGFyYW1zKSAtPlxuICAgIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgaGFzaCA9IHVybC5zcGxpdCgnIycpXG5cbiAgICBmb3Iga2V5IGluIHBhcmFtc1xuICAgICAgcmUgPSBuZXcgUmVnRXhwKFwiKFs/Jl0pXCIgKyBrZXkgKyBcIj0uKj8oJnwjfCQpKC4qKVwiLCBcImdcIilcblxuICAgICAgaWYgcmUudGVzdCh1cmwpXG4gICAgICAgIGhhc2hbMF0gPSBoYXNoWzBdLnJlcGxhY2UocmUsICckMSQzJykucmVwbGFjZSgvKCZ8XFw/KSQvLCAnJylcblxuICAgIHVybCA9IGhhc2hbMF0gKyBpZiBoYXNoWzFdPyB0aGVuICcjJyArIGhhc2hbMV0gZWxzZSAnJ1xuXG4gICAgaWYgdXJsIGlzbnQgd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlIHsgb3JpZ2luYWxVcmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmIH0sICcnLCB1cmxcblxuICBjb25maXJtOiAobWVzc2FnZSwgY2FsbGJhY2spIC0+XG4gICAgQGNvbmZpcm1EaWFsb2cgeyBtZXNzYWdlOiBtZXNzYWdlLCBjYWxsYmFjazogY2FsbGJhY2sgfVxuXG4gIGNvbmZpcm1EaWFsb2c6IChwYXJhbXMpIC0+XG4gICAgQF91aS5jb25maXJtRGlhbG9nIHBhcmFtc1xuXG4gIGFsZXJ0OiAobWVzc2FnZSwgdGl0bGVPckNhbGxiYWNrLCBjYWxsYmFjaykgLT5cbiAgICBpZiBfLmlzRnVuY3Rpb24odGl0bGVPckNhbGxiYWNrKVxuICAgICAgY2FsbGJhY2sgPSB0aXRsZU9yQ2FsbGJhY2tcbiAgICAgIHRpdGxlT3JDYWxsYmFjayA9IG51bGxcbiAgICBAX3VpLmFsZXJ0RGlhbG9nIG1lc3NhZ2UsICh0aXRsZU9yQ2FsbGJhY2sgb3IgdHIgXCJ+Q0xJRU5UX0VSUk9SLlRJVExFXCIpLCBjYWxsYmFja1xuXG4gIF9kaWFsb2dTYXZlOiAoc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIGlmIHN0cmluZ0NvbnRlbnQgaXNudCBudWxsXG4gICAgICBAc2F2ZUZpbGVOb0RpYWxvZyBzdHJpbmdDb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2tcbiAgICBlbHNlXG4gICAgICBAX2V2ZW50ICdnZXRDb250ZW50JywgeyBzaGFyZWQ6IEBfc2hhcmVkTWV0YWRhdGEoKSB9LCAoc3RyaW5nQ29udGVudCkgPT5cbiAgICAgICAgQHNhdmVGaWxlTm9EaWFsb2cgc3RyaW5nQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrXG5cbiAgX2ZpbGVDaGFuZ2VkOiAodHlwZSwgY29udGVudCwgbWV0YWRhdGEsIGFkZGl0aW9uYWxTdGF0ZT17fSwgaGFzaFBhcmFtcz1udWxsKSAtPlxuICAgIG1ldGFkYXRhPy5vdmVyd3JpdGFibGUgPz0gdHJ1ZVxuICAgIEBfdXBkYXRlU3RhdGUgY29udGVudCwgbWV0YWRhdGEsIGFkZGl0aW9uYWxTdGF0ZSwgaGFzaFBhcmFtc1xuICAgIEBfZXZlbnQgdHlwZSwgeyBjb250ZW50OiBjb250ZW50Py5nZXRDbGllbnRDb250ZW50KCksIHNoYXJlZDogQF9zaGFyZWRNZXRhZGF0YSgpIH1cblxuICBfZmlsZU9wZW5lZDogKGNvbnRlbnQsIG1ldGFkYXRhLCBhZGRpdGlvbmFsU3RhdGU9e30sIGhhc2hQYXJhbXM9bnVsbCkgLT5cbiAgICBAX2V2ZW50ICdvcGVuZWRGaWxlJywgeyBjb250ZW50OiBjb250ZW50Py5nZXRDbGllbnRDb250ZW50KCkgfSwgKGlFcnJvciwgaVNoYXJlZE1ldGFkYXRhKSA9PlxuICAgICAgcmV0dXJuIEBhbGVydChpRXJyb3IsID0+IEByZWFkeSgpKSBpZiBpRXJyb3JcblxuICAgICAgbWV0YWRhdGE/Lm92ZXJ3cml0YWJsZSA/PSB0cnVlXG4gICAgICBpZiBub3QgQGFwcE9wdGlvbnMud3JhcEZpbGVDb250ZW50XG4gICAgICAgIGNvbnRlbnQuYWRkTWV0YWRhdGEgaVNoYXJlZE1ldGFkYXRhXG4gICAgICBAX3VwZGF0ZVN0YXRlIGNvbnRlbnQsIG1ldGFkYXRhLCBhZGRpdGlvbmFsU3RhdGUsIGhhc2hQYXJhbXNcbiAgICAgIEByZWFkeSgpXG5cbiAgX3VwZGF0ZVN0YXRlOiAoY29udGVudCwgbWV0YWRhdGEsIGFkZGl0aW9uYWxTdGF0ZT17fSwgaGFzaFBhcmFtcz1udWxsKSAtPlxuICAgIHN0YXRlID1cbiAgICAgIGN1cnJlbnRDb250ZW50OiBjb250ZW50XG4gICAgICBtZXRhZGF0YTogbWV0YWRhdGFcbiAgICAgIHNhdmluZzogbnVsbFxuICAgICAgc2F2ZWQ6IGZhbHNlXG4gICAgICBkaXJ0eTogbm90IGFkZGl0aW9uYWxTdGF0ZS5zYXZlZCBhbmQgY29udGVudD8ucmVxdWlyZXNDb252ZXJzaW9uKClcbiAgICBmb3Igb3duIGtleSwgdmFsdWUgb2YgYWRkaXRpb25hbFN0YXRlXG4gICAgICBzdGF0ZVtrZXldID0gdmFsdWVcbiAgICBAX3NldFdpbmRvd1RpdGxlIG1ldGFkYXRhPy5uYW1lXG4gICAgaWYgaGFzaFBhcmFtcyBpc250IG51bGxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaFBhcmFtc1xuICAgIEBfc2V0U3RhdGUgc3RhdGVcblxuICBfZXZlbnQ6ICh0eXBlLCBkYXRhID0ge30sIGV2ZW50Q2FsbGJhY2sgPSBudWxsKSAtPlxuICAgIGV2ZW50ID0gbmV3IENsb3VkRmlsZU1hbmFnZXJDbGllbnRFdmVudCB0eXBlLCBkYXRhLCBldmVudENhbGxiYWNrLCBAc3RhdGVcbiAgICBmb3IgbGlzdGVuZXIgaW4gQF9saXN0ZW5lcnNcbiAgICAgIGxpc3RlbmVyIGV2ZW50XG5cbiAgX3NldFN0YXRlOiAob3B0aW9ucykgLT5cbiAgICBmb3Igb3duIGtleSwgdmFsdWUgb2Ygb3B0aW9uc1xuICAgICAgQHN0YXRlW2tleV0gPSB2YWx1ZVxuICAgIEBfZXZlbnQgJ3N0YXRlQ2hhbmdlZCdcblxuICBfcmVzZXRTdGF0ZTogLT5cbiAgICBAX3NldFN0YXRlXG4gICAgICBvcGVuZWRDb250ZW50OiBudWxsXG4gICAgICBjdXJyZW50Q29udGVudDogbnVsbFxuICAgICAgbWV0YWRhdGE6IG51bGxcbiAgICAgIGRpcnR5OiBmYWxzZVxuICAgICAgc2F2aW5nOiBudWxsXG4gICAgICBzYXZlZDogZmFsc2VcblxuICBfY2xvc2VDdXJyZW50RmlsZTogLT5cbiAgICBpZiBAc3RhdGUubWV0YWRhdGE/LnByb3ZpZGVyPy5jYW4gJ2Nsb3NlJywgQHN0YXRlLm1ldGFkYXRhXG4gICAgICBAc3RhdGUubWV0YWRhdGEucHJvdmlkZXIuY2xvc2UgQHN0YXRlLm1ldGFkYXRhXG5cbiAgX2NyZWF0ZU9yVXBkYXRlQ3VycmVudENvbnRlbnQ6IChzdHJpbmdDb250ZW50LCBtZXRhZGF0YSA9IG51bGwpIC0+XG4gICAgaWYgQHN0YXRlLmN1cnJlbnRDb250ZW50P1xuICAgICAgY3VycmVudENvbnRlbnQgPSBAc3RhdGUuY3VycmVudENvbnRlbnRcbiAgICAgIGN1cnJlbnRDb250ZW50LnNldFRleHQgc3RyaW5nQ29udGVudFxuICAgIGVsc2VcbiAgICAgIGN1cnJlbnRDb250ZW50ID0gY2xvdWRDb250ZW50RmFjdG9yeS5jcmVhdGVFbnZlbG9wZWRDbG91ZENvbnRlbnQgc3RyaW5nQ29udGVudFxuICAgIGlmIG1ldGFkYXRhP1xuICAgICAgY3VycmVudENvbnRlbnQuYWRkTWV0YWRhdGEgZG9jTmFtZTogbWV0YWRhdGEubmFtZVxuICAgIGN1cnJlbnRDb250ZW50XG5cbiAgX3NldFdpbmRvd1RpdGxlOiAobmFtZSkgLT5cbiAgICBpZiBAYXBwT3B0aW9ucz8udWk/LndpbmRvd1RpdGxlU3VmZml4XG4gICAgICBkb2N1bWVudC50aXRsZSA9IFwiI3tpZiBuYW1lPy5sZW5ndGggPiAwIHRoZW4gbmFtZSBlbHNlICh0ciBcIn5NRU5VQkFSLlVOVElUTEVEX0RPQ1VNRU5UXCIpfSN7QGFwcE9wdGlvbnMudWkud2luZG93VGl0bGVTZXBhcmF0b3J9I3tAYXBwT3B0aW9ucy51aS53aW5kb3dUaXRsZVN1ZmZpeH1cIlxuXG4gIF9nZXRIYXNoUGFyYW1zOiAobWV0YWRhdGEpIC0+XG4gICAgaWYgbWV0YWRhdGE/LnByb3ZpZGVyPy5jYW5PcGVuU2F2ZWQoKSBhbmQgKG9wZW5TYXZlZFBhcmFtcyA9IG1ldGFkYXRhPy5wcm92aWRlcj8uZ2V0T3BlblNhdmVkUGFyYW1zIG1ldGFkYXRhKT9cbiAgICAgIFwiI2ZpbGU9I3ttZXRhZGF0YS5wcm92aWRlci51cmxEaXNwbGF5TmFtZSBvciBtZXRhZGF0YS5wcm92aWRlci5uYW1lfToje2VuY29kZVVSSUNvbXBvbmVudCBvcGVuU2F2ZWRQYXJhbXN9XCJcbiAgICBlbHNlIGlmIG1ldGFkYXRhPy5wcm92aWRlciBpbnN0YW5jZW9mIFVSTFByb3ZpZGVyIGFuZFxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaC5pbmRleE9mKFwiI2ZpbGU9aHR0cFwiKSBpcyAwXG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCAgICAjIGxlYXZlIGl0IGFsb25lXG4gICAgZWxzZSBcIlwiXG5cbiAgX3N0YXJ0UG9zdE1lc3NhZ2VMaXN0ZW5lcjogLT5cbiAgICAkKHdpbmRvdykub24gJ21lc3NhZ2UnLCAoZSkgPT5cbiAgICAgIG9lID0gZS5vcmlnaW5hbEV2ZW50XG4gICAgICByZXBseSA9ICh0eXBlLCBwYXJhbXM9e30pIC0+XG4gICAgICAgIG1lc3NhZ2UgPSBfLm1lcmdlIHt9LCBwYXJhbXMsIHt0eXBlOiB0eXBlfVxuICAgICAgICBvZS5zb3VyY2UucG9zdE1lc3NhZ2UgbWVzc2FnZSwgb2Uub3JpZ2luXG4gICAgICBzd2l0Y2ggb2UuZGF0YT8udHlwZVxuICAgICAgICB3aGVuICdjZm06OmdldENvbW1hbmRzJ1xuICAgICAgICAgIHJlcGx5ICdjZm06OmNvbW1hbmRzJywgY29tbWFuZHM6IFsnY2ZtOjphdXRvc2F2ZSddXG4gICAgICAgIHdoZW4gJ2NmbTo6YXV0b3NhdmUnXG4gICAgICAgICAgaWYgQHNob3VsZEF1dG9TYXZlKClcbiAgICAgICAgICAgIEBzYXZlIC0+IHJlcGx5ICdjZm06OmF1dG9zYXZlZCcsIHNhdmVkOiB0cnVlXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVwbHkgJ2NmbTo6YXV0b3NhdmVkJywgc2F2ZWQ6IGZhbHNlXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgQ2xvdWRGaWxlTWFuYWdlckNsaWVudEV2ZW50OiBDbG91ZEZpbGVNYW5hZ2VyQ2xpZW50RXZlbnRcbiAgQ2xvdWRGaWxlTWFuYWdlckNsaWVudDogQ2xvdWRGaWxlTWFuYWdlckNsaWVudFxuIiwiLyogRmlsZVNhdmVyLmpzXG4gKiBBIHNhdmVBcygpIEZpbGVTYXZlciBpbXBsZW1lbnRhdGlvbi5cbiAqIDEuMy4yXG4gKiAyMDE2LTA2LTE2IDE4OjI1OjE5XG4gKlxuICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxuICogTGljZW5zZTogTUlUXG4gKiAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG5cbi8qZ2xvYmFsIHNlbGYgKi9cbi8qanNsaW50IGJpdHdpc2U6IHRydWUsIGluZGVudDogNCwgbGF4YnJlYWs6IHRydWUsIGxheGNvbW1hOiB0cnVlLCBzbWFydHRhYnM6IHRydWUsIHBsdXNwbHVzOiB0cnVlICovXG5cbi8qISBAc291cmNlIGh0dHA6Ly9wdXJsLmVsaWdyZXkuY29tL2dpdGh1Yi9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvRmlsZVNhdmVyLmpzICovXG5cbnZhciBzYXZlQXMgPSBzYXZlQXMgfHwgKGZ1bmN0aW9uKHZpZXcpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdC8vIElFIDwxMCBpcyBleHBsaWNpdGx5IHVuc3VwcG9ydGVkXG5cdGlmICh0eXBlb2YgdmlldyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIC9NU0lFIFsxLTldXFwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhclxuXHRcdCAgZG9jID0gdmlldy5kb2N1bWVudFxuXHRcdCAgLy8gb25seSBnZXQgVVJMIHdoZW4gbmVjZXNzYXJ5IGluIGNhc2UgQmxvYi5qcyBoYXNuJ3Qgb3ZlcnJpZGRlbiBpdCB5ZXRcblx0XHQsIGdldF9VUkwgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB2aWV3LlVSTCB8fCB2aWV3LndlYmtpdFVSTCB8fCB2aWV3O1xuXHRcdH1cblx0XHQsIHNhdmVfbGluayA9IGRvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsIFwiYVwiKVxuXHRcdCwgY2FuX3VzZV9zYXZlX2xpbmsgPSBcImRvd25sb2FkXCIgaW4gc2F2ZV9saW5rXG5cdFx0LCBjbGljayA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRcdHZhciBldmVudCA9IG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIik7XG5cdFx0XHRub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdH1cblx0XHQsIGlzX3NhZmFyaSA9IC9jb25zdHJ1Y3Rvci9pLnRlc3Qodmlldy5IVE1MRWxlbWVudCkgfHwgdmlldy5zYWZhcmlcblx0XHQsIGlzX2Nocm9tZV9pb3MgPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuXHRcdCwgdGhyb3dfb3V0c2lkZSA9IGZ1bmN0aW9uKGV4KSB7XG5cdFx0XHQodmlldy5zZXRJbW1lZGlhdGUgfHwgdmlldy5zZXRUaW1lb3V0KShmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhyb3cgZXg7XG5cdFx0XHR9LCAwKTtcblx0XHR9XG5cdFx0LCBmb3JjZV9zYXZlYWJsZV90eXBlID0gXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIlxuXHRcdC8vIHRoZSBCbG9iIEFQSSBpcyBmdW5kYW1lbnRhbGx5IGJyb2tlbiBhcyB0aGVyZSBpcyBubyBcImRvd25sb2FkZmluaXNoZWRcIiBldmVudCB0byBzdWJzY3JpYmUgdG9cblx0XHQsIGFyYml0cmFyeV9yZXZva2VfdGltZW91dCA9IDEwMDAgKiA0MCAvLyBpbiBtc1xuXHRcdCwgcmV2b2tlID0gZnVuY3Rpb24oZmlsZSkge1xuXHRcdFx0dmFyIHJldm9rZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBmaWxlID09PSBcInN0cmluZ1wiKSB7IC8vIGZpbGUgaXMgYW4gb2JqZWN0IFVSTFxuXHRcdFx0XHRcdGdldF9VUkwoKS5yZXZva2VPYmplY3RVUkwoZmlsZSk7XG5cdFx0XHRcdH0gZWxzZSB7IC8vIGZpbGUgaXMgYSBGaWxlXG5cdFx0XHRcdFx0ZmlsZS5yZW1vdmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHNldFRpbWVvdXQocmV2b2tlciwgYXJiaXRyYXJ5X3Jldm9rZV90aW1lb3V0KTtcblx0XHR9XG5cdFx0LCBkaXNwYXRjaCA9IGZ1bmN0aW9uKGZpbGVzYXZlciwgZXZlbnRfdHlwZXMsIGV2ZW50KSB7XG5cdFx0XHRldmVudF90eXBlcyA9IFtdLmNvbmNhdChldmVudF90eXBlcyk7XG5cdFx0XHR2YXIgaSA9IGV2ZW50X3R5cGVzLmxlbmd0aDtcblx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0dmFyIGxpc3RlbmVyID0gZmlsZXNhdmVyW1wib25cIiArIGV2ZW50X3R5cGVzW2ldXTtcblx0XHRcdFx0aWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGxpc3RlbmVyLmNhbGwoZmlsZXNhdmVyLCBldmVudCB8fCBmaWxlc2F2ZXIpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XG5cdFx0XHRcdFx0XHR0aHJvd19vdXRzaWRlKGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0LCBhdXRvX2JvbSA9IGZ1bmN0aW9uKGJsb2IpIHtcblx0XHRcdC8vIHByZXBlbmQgQk9NIGZvciBVVEYtOCBYTUwgYW5kIHRleHQvKiB0eXBlcyAoaW5jbHVkaW5nIEhUTUwpXG5cdFx0XHQvLyBub3RlOiB5b3VyIGJyb3dzZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgVVRGLTE2IFUrRkVGRiB0byBFRiBCQiBCRlxuXHRcdFx0aWYgKC9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KGJsb2IudHlwZSkpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBCbG9iKFtTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkVGRiksIGJsb2JdLCB7dHlwZTogYmxvYi50eXBlfSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYmxvYjtcblx0XHR9XG5cdFx0LCBGaWxlU2F2ZXIgPSBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuXHRcdFx0aWYgKCFub19hdXRvX2JvbSkge1xuXHRcdFx0XHRibG9iID0gYXV0b19ib20oYmxvYik7XG5cdFx0XHR9XG5cdFx0XHQvLyBGaXJzdCB0cnkgYS5kb3dubG9hZCwgdGhlbiB3ZWIgZmlsZXN5c3RlbSwgdGhlbiBvYmplY3QgVVJMc1xuXHRcdFx0dmFyXG5cdFx0XHRcdCAgZmlsZXNhdmVyID0gdGhpc1xuXHRcdFx0XHQsIHR5cGUgPSBibG9iLnR5cGVcblx0XHRcdFx0LCBmb3JjZSA9IHRydWUgIC8vIFtDQyAyMDE2LTEyLTA1XSB0eXBlID09PSBmb3JjZV9zYXZlYWJsZV90eXBlXG5cdFx0XHRcdCwgb2JqZWN0X3VybFxuXHRcdFx0XHQsIGRpc3BhdGNoX2FsbCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRpc3BhdGNoKGZpbGVzYXZlciwgXCJ3cml0ZXN0YXJ0IHByb2dyZXNzIHdyaXRlIHdyaXRlZW5kXCIuc3BsaXQoXCIgXCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBvbiBhbnkgZmlsZXN5cyBlcnJvcnMgcmV2ZXJ0IHRvIHNhdmluZyB3aXRoIG9iamVjdCBVUkxzXG5cdFx0XHRcdCwgZnNfZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoKGlzX2Nocm9tZV9pb3MgfHwgKGZvcmNlICYmIGlzX3NhZmFyaSkpICYmIHZpZXcuRmlsZVJlYWRlcikge1xuXHRcdFx0XHRcdFx0Ly8gU2FmYXJpIGRvZXNuJ3QgYWxsb3cgZG93bmxvYWRpbmcgb2YgYmxvYiB1cmxzXG5cdFx0XHRcdFx0XHR2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblx0XHRcdFx0XHRcdHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHVybCA9IGlzX2Nocm9tZV9pb3MgPyByZWFkZXIucmVzdWx0IDogcmVhZGVyLnJlc3VsdC5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLCAnZGF0YTphdHRhY2htZW50L2ZpbGU7Jyk7XG5cdFx0XHRcdFx0XHRcdHZhciBwb3B1cCA9IHZpZXcub3Blbih1cmwsICdfYmxhbmsnKTtcblx0XHRcdFx0XHRcdFx0aWYoIXBvcHVwKSB2aWV3LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG5cdFx0XHRcdFx0XHRcdHVybD11bmRlZmluZWQ7IC8vIHJlbGVhc2UgcmVmZXJlbmNlIGJlZm9yZSBkaXNwYXRjaGluZ1xuXHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xuXHRcdFx0XHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRyZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcblx0XHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLklOSVQ7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGRvbid0IGNyZWF0ZSBtb3JlIG9iamVjdCBVUkxzIHRoYW4gbmVlZGVkXG5cdFx0XHRcdFx0aWYgKCFvYmplY3RfdXJsKSB7XG5cdFx0XHRcdFx0XHRvYmplY3RfdXJsID0gZ2V0X1VSTCgpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGZvcmNlKSB7XG5cdFx0XHRcdFx0XHR2aWV3LmxvY2F0aW9uLmhyZWYgPSBvYmplY3RfdXJsO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YXIgb3BlbmVkID0gdmlldy5vcGVuKG9iamVjdF91cmwsIFwiX2JsYW5rXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCFvcGVuZWQpIHtcblx0XHRcdFx0XHRcdFx0Ly8gQXBwbGUgZG9lcyBub3QgYWxsb3cgd2luZG93Lm9wZW4sIHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9zYWZhcmkvZG9jdW1lbnRhdGlvbi9Ub29scy9Db25jZXB0dWFsL1NhZmFyaUV4dGVuc2lvbkd1aWRlL1dvcmtpbmd3aXRoV2luZG93c2FuZFRhYnMvV29ya2luZ3dpdGhXaW5kb3dzYW5kVGFicy5odG1sXG5cdFx0XHRcdFx0XHRcdHZpZXcubG9jYXRpb24uaHJlZiA9IG9iamVjdF91cmw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XG5cdFx0XHRcdFx0cmV2b2tlKG9iamVjdF91cmwpO1xuXHRcdFx0XHR9XG5cdFx0XHQ7XG5cdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5JTklUO1xuXG5cdFx0XHRpZiAoY2FuX3VzZV9zYXZlX2xpbmspIHtcblx0XHRcdFx0b2JqZWN0X3VybCA9IGdldF9VUkwoKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0c2F2ZV9saW5rLmhyZWYgPSBvYmplY3RfdXJsO1xuXHRcdFx0XHRcdHNhdmVfbGluay5kb3dubG9hZCA9IG5hbWU7XG5cdFx0XHRcdFx0Y2xpY2soc2F2ZV9saW5rKTtcblx0XHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcblx0XHRcdFx0XHRyZXZva2Uob2JqZWN0X3VybCk7XG5cdFx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuRE9ORTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZnNfZXJyb3IoKTtcblx0XHR9XG5cdFx0LCBGU19wcm90byA9IEZpbGVTYXZlci5wcm90b3R5cGVcblx0XHQsIHNhdmVBcyA9IGZ1bmN0aW9uKGJsb2IsIG5hbWUsIG5vX2F1dG9fYm9tKSB7XG5cdFx0XHRyZXR1cm4gbmV3IEZpbGVTYXZlcihibG9iLCBuYW1lIHx8IGJsb2IubmFtZSB8fCBcImRvd25sb2FkXCIsIG5vX2F1dG9fYm9tKTtcblx0XHR9XG5cdDtcblx0Ly8gSUUgMTArIChuYXRpdmUgc2F2ZUFzKVxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xuXHRcdHJldHVybiBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuXHRcdFx0bmFtZSA9IG5hbWUgfHwgYmxvYi5uYW1lIHx8IFwiZG93bmxvYWRcIjtcblxuXHRcdFx0aWYgKCFub19hdXRvX2JvbSkge1xuXHRcdFx0XHRibG9iID0gYXV0b19ib20oYmxvYik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgbmFtZSk7XG5cdFx0fTtcblx0fVxuXG5cdEZTX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24oKXt9O1xuXHRGU19wcm90by5yZWFkeVN0YXRlID0gRlNfcHJvdG8uSU5JVCA9IDA7XG5cdEZTX3Byb3RvLldSSVRJTkcgPSAxO1xuXHRGU19wcm90by5ET05FID0gMjtcblxuXHRGU19wcm90by5lcnJvciA9XG5cdEZTX3Byb3RvLm9ud3JpdGVzdGFydCA9XG5cdEZTX3Byb3RvLm9ucHJvZ3Jlc3MgPVxuXHRGU19wcm90by5vbndyaXRlID1cblx0RlNfcHJvdG8ub25hYm9ydCA9XG5cdEZTX3Byb3RvLm9uZXJyb3IgPVxuXHRGU19wcm90by5vbndyaXRlZW5kID1cblx0XHRudWxsO1xuXG5cdHJldHVybiBzYXZlQXM7XG59KFxuXHQgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmXG5cdHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XG5cdHx8IHRoaXMuY29udGVudFxuKSk7XG4vLyBgc2VsZmAgaXMgdW5kZWZpbmVkIGluIEZpcmVmb3ggZm9yIEFuZHJvaWQgY29udGVudCBzY3JpcHQgY29udGV4dFxuLy8gd2hpbGUgYHRoaXNgIGlzIG5zSUNvbnRlbnRGcmFtZU1lc3NhZ2VNYW5hZ2VyXG4vLyB3aXRoIGFuIGF0dHJpYnV0ZSBgY29udGVudGAgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgd2luZG93XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzLnNhdmVBcyA9IHNhdmVBcztcbn0gZWxzZSBpZiAoKHR5cGVvZiBkZWZpbmUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGVmaW5lICE9PSBudWxsKSAmJiAoZGVmaW5lLmFtZCAhPT0gbnVsbCkpIHtcbiAgZGVmaW5lKFwiRmlsZVNhdmVyLmpzXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzYXZlQXM7XG4gIH0pO1xufVxuIiwie2RpdiwgYnV0dG9uLCBzcGFufSA9IFJlYWN0LkRPTVxuXG5nZXRRdWVyeVBhcmFtID0gcmVxdWlyZSAnLi4vdXRpbHMvZ2V0LXF1ZXJ5LXBhcmFtJ1xuZ2V0SGFzaFBhcmFtID0gcmVxdWlyZSAnLi4vdXRpbHMvZ2V0LWhhc2gtcGFyYW0nXG50ciA9IHJlcXVpcmUgJy4uL3V0aWxzL3RyYW5zbGF0ZSdcbmlzU3RyaW5nID0gcmVxdWlyZSAnLi4vdXRpbHMvaXMtc3RyaW5nJ1xuamlmZiA9IHJlcXVpcmUgJ2ppZmYnXG5wYWtvID0gcmVxdWlyZSAncGFrbydcblxuUHJvdmlkZXJJbnRlcmZhY2UgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5Qcm92aWRlckludGVyZmFjZVxuY2xvdWRDb250ZW50RmFjdG9yeSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLmNsb3VkQ29udGVudEZhY3RvcnlcbkNsb3VkTWV0YWRhdGEgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbkRvY3VtZW50U3RvcmVVcmwgPSByZXF1aXJlICcuL2RvY3VtZW50LXN0b3JlLXVybCdcblBhdGNoYWJsZUNvbnRlbnQgPSByZXF1aXJlICcuL3BhdGNoYWJsZS1jb250ZW50J1xuXG5Eb2N1bWVudFN0b3JlQXV0aG9yaXphdGlvbkRpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgUmVhY3QuY3JlYXRlQ2xhc3NcbiAgZGlzcGxheU5hbWU6ICdEb2N1bWVudFN0b3JlQXV0aG9yaXphdGlvbkRpYWxvZydcblxuICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgZG9jU3RvcmVBdmFpbGFibGU6IGZhbHNlXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiAtPlxuICAgIEBwcm9wcy5wcm92aWRlci5fb25Eb2NTdG9yZUxvYWRlZCA9PlxuICAgICAgQHNldFN0YXRlIGRvY1N0b3JlQXZhaWxhYmxlOiB0cnVlXG5cbiAgYXV0aGVudGljYXRlOiAtPlxuICAgIEBwcm9wcy5wcm92aWRlci5hdXRob3JpemUoKVxuXG4gIHJlbmRlcjogLT5cbiAgICAoZGl2IHtjbGFzc05hbWU6ICdkb2N1bWVudC1zdG9yZS1hdXRoJ30sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdkb2N1bWVudC1zdG9yZS1jb25jb3JkLWxvZ28nfSwgJycpXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdkb2N1bWVudC1zdG9yZS1mb290ZXInfSxcbiAgICAgICAgaWYgQHN0YXRlLmRvY1N0b3JlQXZhaWxhYmxlXG4gICAgICAgICAgKGJ1dHRvbiB7b25DbGljazogQGF1dGhlbnRpY2F0ZX0sICdMb2dpbiB0byBDb25jb3JkJylcbiAgICAgICAgZWxzZVxuICAgICAgICAgICdUcnlpbmcgdG8gbG9nIGludG8gQ29uY29yZC4uLidcbiAgICAgIClcbiAgICApXG5cbmNsYXNzIERvY3VtZW50U3RvcmVQcm92aWRlciBleHRlbmRzIFByb3ZpZGVySW50ZXJmYWNlXG5cbiAgY29uc3RydWN0b3I6IChAb3B0aW9ucyA9IHt9LCBAY2xpZW50KSAtPlxuICAgIEBvcHRpb25zLmRlcHJlY2F0aW9uUGhhc2UgPSAzXG4gICAgc3VwZXJcbiAgICAgIG5hbWU6IERvY3VtZW50U3RvcmVQcm92aWRlci5OYW1lXG4gICAgICBkaXNwbGF5TmFtZTogQG9wdGlvbnMuZGlzcGxheU5hbWUgb3IgKHRyICd+UFJPVklERVIuRE9DVU1FTlRfU1RPUkUnKVxuICAgICAgdXJsRGlzcGxheU5hbWU6IEBvcHRpb25zLnVybERpc3BsYXlOYW1lXG4gICAgICBjYXBhYmlsaXRpZXM6XG4gICAgICAgIHNhdmU6IEBpc05vdERlcHJlY2F0ZWQoJ3NhdmUnKVxuICAgICAgICByZXNhdmU6IEBpc05vdERlcHJlY2F0ZWQoJ3NhdmUnKVxuICAgICAgICBleHBvcnQ6IGZhbHNlXG4gICAgICAgIGxvYWQ6IEBpc05vdERlcHJlY2F0ZWQoJ2xvYWQnKVxuICAgICAgICBsaXN0OiBAaXNOb3REZXByZWNhdGVkKCdsaXN0JylcbiAgICAgICAgcmVtb3ZlOiBAaXNOb3REZXByZWNhdGVkKCdyZW1vdmUnKVxuICAgICAgICByZW5hbWU6IEBpc05vdERlcHJlY2F0ZWQoJ3JlbmFtZScpXG4gICAgICAgIGNsb3NlOiBmYWxzZVxuXG4gICAgQHVybFBhcmFtcyA9IHtcbiAgICAgIGRvY3VtZW50U2VydmVyOiBnZXRRdWVyeVBhcmFtIFwiZG9jdW1lbnRTZXJ2ZXJcIlxuICAgICAgcmVjb3JkaWQ6IGdldFF1ZXJ5UGFyYW0gXCJyZWNvcmRpZFwiXG4gICAgICBydW5LZXk6IGdldFF1ZXJ5UGFyYW0gXCJydW5LZXlcIlxuICAgICAgZG9jTmFtZTogZ2V0UXVlcnlQYXJhbSBcImRvY1wiXG4gICAgICBkb2NPd25lcjogZ2V0UXVlcnlQYXJhbSBcIm93bmVyXCJcbiAgICB9XG4gICAgIyBxdWVyeSBwYXJhbXMgdGhhdCBjYW4gYmUgcmVtb3ZlZCBhZnRlciBpbml0aWFsIHByb2Nlc3NpbmdcbiAgICBAcmVtb3ZhYmxlUXVlcnlQYXJhbXMgPSBbJ3JlY29yZGlkJywgJ2RvYycsICdvd25lciddXG5cbiAgICBAZG9jU3RvcmVVcmwgPSBuZXcgRG9jdW1lbnRTdG9yZVVybCBAdXJsUGFyYW1zLmRvY3VtZW50U2VydmVyXG5cbiAgICBAdXNlciA9IG51bGxcblxuICAgIEBzYXZlZENvbnRlbnQgPSBuZXcgUGF0Y2hhYmxlQ29udGVudChAb3B0aW9ucy5wYXRjaE9iamVjdEhhc2gpXG5cbiAgQE5hbWU6ICdkb2N1bWVudFN0b3JlJ1xuXG4gIGNhbjogKGNhcGFiaWxpdHksIG1ldGFkYXRhKSAtPlxuICAgICMgbGVnYWN5IHNoYXJpbmcgc3VwcG9ydCAtIGNhbid0IHNhdmUgdG8gb2xkLXN0eWxlIHNoYXJlZCBkb2N1bWVudHNcbiAgICByZXR1cm4gZmFsc2UgaWYgKChjYXBhYmlsaXR5IGlzICdzYXZlJykgb3IgKGNhcGFiaWxpdHkgaXMgJ3Jlc2F2ZScpKSBhbmQgbWV0YWRhdGE/LnByb3ZpZGVyRGF0YT8ub3duZXJcbiAgICBzdXBlcihjYXBhYmlsaXR5LCBtZXRhZGF0YSlcblxuICAjIGlmIGEgcnVuS2V5IGlzIHNwZWNpZmllZCwgd2UgZG9uJ3QgbmVlZCB0byBhdXRoZW50aWNhdGUgYXQgYWxsXG4gIGlzQXV0aG9yaXphdGlvblJlcXVpcmVkOiAtPlxuICAgIG5vdCAoQHVybFBhcmFtcy5ydW5LZXkgb3IgKEB1cmxQYXJhbXMuZG9jTmFtZSBhbmQgQHVybFBhcmFtcy5kb2NPd25lcikpXG5cbiAgYXV0aG9yaXplZDogKEBhdXRoQ2FsbGJhY2spIC0+XG4gICAgaWYgQGF1dGhDYWxsYmFja1xuICAgICAgaWYgQHVzZXJcbiAgICAgICAgQGF1dGhDYWxsYmFjayB0cnVlXG4gICAgICBlbHNlXG4gICAgICAgIEBfY2hlY2tMb2dpbigpXG4gICAgZWxzZVxuICAgICAgQHVzZXIgaXNudCBudWxsXG5cbiAgYXV0aG9yaXplOiAoY29tcGxldGlvbkNhbGxiYWNrKSAtPlxuICAgIEBfc2hvd0xvZ2luV2luZG93KGNvbXBsZXRpb25DYWxsYmFjaylcblxuICBfb25Eb2NTdG9yZUxvYWRlZDogKEBkb2NTdG9yZUxvYWRlZENhbGxiYWNrKSAtPlxuICAgIGlmIEBfZG9jU3RvcmVMb2FkZWRcbiAgICAgIEBkb2NTdG9yZUxvYWRlZENhbGxiYWNrKClcblxuICBfY2hlY2tMb2dpbjogLT5cbiAgICBsb2dnZWRJbiA9ICh1c2VyKSA9PlxuICAgICAgQHVzZXIgPSB1c2VyXG4gICAgICBAX2RvY1N0b3JlTG9hZGVkID0gdHJ1ZVxuICAgICAgQGRvY1N0b3JlTG9hZGVkQ2FsbGJhY2s/KClcbiAgICAgIGlmIHVzZXJcbiAgICAgICAgQF9sb2dpbldpbmRvdz8uY2xvc2UoKVxuICAgICAgQGF1dGhDYWxsYmFjayAodXNlciBpc250IG51bGwpIGlmIEBhdXRoQ2FsbGJhY2tcblxuICAgICQuYWpheFxuICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgdXJsOiBAZG9jU3RvcmVVcmwuY2hlY2tMb2dpbigpXG4gICAgICB4aHJGaWVsZHM6XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+IGxvZ2dlZEluIGRhdGFcbiAgICAgIGVycm9yOiAtPiBsb2dnZWRJbiBudWxsXG5cbiAgX2xvZ2luV2luZG93OiBudWxsXG5cbiAgX3Nob3dMb2dpbldpbmRvdzogKGNvbXBsZXRpb25DYWxsYmFjaykgLT5cbiAgICBpZiBAX2xvZ2luV2luZG93IGFuZCBub3QgQF9sb2dpbldpbmRvdy5jbG9zZWRcbiAgICAgIEBfbG9naW5XaW5kb3cuZm9jdXMoKVxuICAgIGVsc2VcblxuICAgICAgY29tcHV0ZVNjcmVlbkxvY2F0aW9uID0gKHcsIGgpIC0+XG4gICAgICAgIHNjcmVlbkxlZnQgPSB3aW5kb3cuc2NyZWVuTGVmdCBvciBzY3JlZW4ubGVmdFxuICAgICAgICBzY3JlZW5Ub3AgID0gd2luZG93LnNjcmVlblRvcCAgb3Igc2NyZWVuLnRvcFxuICAgICAgICB3aWR0aCAgPSB3aW5kb3cuaW5uZXJXaWR0aCAgb3IgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoICBvciBzY3JlZW4ud2lkdGhcbiAgICAgICAgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgb3Igc2NyZWVuLmhlaWdodFxuXG4gICAgICAgIGxlZnQgPSAoKHdpZHRoIC8gMikgLSAodyAvIDIpKSArIHNjcmVlbkxlZnRcbiAgICAgICAgdG9wID0gKChoZWlnaHQgLyAyKSAtIChoIC8gMikpICsgc2NyZWVuVG9wXG4gICAgICAgIHJldHVybiB7bGVmdCwgdG9wfVxuXG4gICAgICB3aWR0aCA9IDEwMDBcbiAgICAgIGhlaWdodCA9IDQ4MFxuICAgICAgcG9zaXRpb24gPSBjb21wdXRlU2NyZWVuTG9jYXRpb24gd2lkdGgsIGhlaWdodFxuICAgICAgd2luZG93RmVhdHVyZXMgPSBbXG4gICAgICAgICd3aWR0aD0nICsgd2lkdGhcbiAgICAgICAgJ2hlaWdodD0nICsgaGVpZ2h0XG4gICAgICAgICd0b3A9JyArIHBvc2l0aW9uLnRvcCBvciAyMDBcbiAgICAgICAgJ2xlZnQ9JyArIHBvc2l0aW9uLmxlZnQgb3IgMjAwXG4gICAgICAgICdkZXBlbmRlbnQ9eWVzJ1xuICAgICAgICAncmVzaXphYmxlPW5vJ1xuICAgICAgICAnbG9jYXRpb249bm8nXG4gICAgICAgICdkaWFsb2c9eWVzJ1xuICAgICAgICAnbWVudWJhcj1ubydcbiAgICAgIF1cblxuICAgICAgQF9sb2dpbldpbmRvdyA9IHdpbmRvdy5vcGVuKEBkb2NTdG9yZVVybC5hdXRob3JpemUoKSwgJ2F1dGgnLCB3aW5kb3dGZWF0dXJlcy5qb2luKCkpXG5cbiAgICAgIGlmIEBfbG9naW5XaW5kb3dcbiAgICAgICAgcG9sbEFjdGlvbiA9ID0+XG4gICAgICAgICAgdHJ5XG4gICAgICAgICAgICBpZiAoQF9sb2dpbldpbmRvdy5sb2NhdGlvbi5ob3N0IGlzIHdpbmRvdy5sb2NhdGlvbi5ob3N0KVxuICAgICAgICAgICAgICBjbGVhckludGVydmFsIHBvbGxcbiAgICAgICAgICAgICAgQF9sb2dpbldpbmRvdy5jbG9zZSgpXG4gICAgICAgICAgICAgIEBfY2hlY2tMb2dpbigpXG4gICAgICAgICAgICAgIGNvbXBsZXRpb25DYWxsYmFjaygpIGlmIGNvbXBsZXRpb25DYWxsYmFja1xuICAgICAgICAgIGNhdGNoIGVcbiAgICAgICAgICAgICMgY29uc29sZS5sb2cgZVxuXG4gICAgICAgIHBvbGwgPSBzZXRJbnRlcnZhbCBwb2xsQWN0aW9uLCAyMDBcblxuICAgIEBfbG9naW5XaW5kb3dcblxuICByZW5kZXJBdXRob3JpemF0aW9uRGlhbG9nOiAtPlxuICAgIChEb2N1bWVudFN0b3JlQXV0aG9yaXphdGlvbkRpYWxvZyB7cHJvdmlkZXI6IEAsIGF1dGhDYWxsYmFjazogQGF1dGhDYWxsYmFja30pXG5cbiAgcmVuZGVyVXNlcjogLT5cbiAgICBpZiBAdXNlclxuICAgICAgKHNwYW4ge30sIChzcGFuIHtjbGFzc05hbWU6ICdkb2N1bWVudC1zdG9yZS1pY29uJ30pLCBAdXNlci5uYW1lKVxuICAgIGVsc2VcbiAgICAgIG51bGxcblxuICBmaWx0ZXJUYWJDb21wb25lbnQ6IChjYXBhYmlsaXR5LCBkZWZhdWx0Q29tcG9uZW50KSAtPlxuICAgICMgYWxsb3cgdGhlIHNhdmUgZWxzZXdoZXJlIGJ1dHRvbiB0byBoaWRlIHRoZSBkb2N1bWVudCBwcm92aWRlciB0YWIgaW4gc2F2ZVxuICAgIGlmIGNhcGFiaWxpdHkgaXMgJ3NhdmUnIGFuZCBAZGlzYWJsZUZvck5leHRTYXZlXG4gICAgICBAZGlzYWJsZUZvck5leHRTYXZlID0gZmFsc2VcbiAgICAgIG51bGxcbiAgICBlbHNlXG4gICAgICBkZWZhdWx0Q29tcG9uZW50XG5cbiAgaXNOb3REZXByZWNhdGVkOiAoY2FwYWJpbGl0eSkgLT5cbiAgICBpZiBjYXBhYmlsaXR5IGlzICdzYXZlJ1xuICAgICAgQG9wdGlvbnMuZGVwcmVjYXRpb25QaGFzZSA8IDJcbiAgICBlbHNlXG4gICAgICBAb3B0aW9ucy5kZXByZWNhdGlvblBoYXNlIDwgM1xuXG4gIGRlcHJlY2F0aW9uTWVzc2FnZTogLT5cbiAgICBcIlwiXCJcbiAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBsZWZ0XCI+XG4gICAgICAgIDxwIHN0eWxlPVwibWFyZ2luOiAxMHB4IDA7XCI+XG4gICAgICAgICAgPHN0cm9uZz4je3RyIH5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLlNIVVRfRE9XTl9NRVNTQUdFfTwvc3Ryb25nPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwIHN0eWxlPVwibWFyZ2luOiAxMHB4IDA7XCI+XG4gICAgICAgICAgI3t0ciB+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5QTEVBU0VfU0FWRV9FTFNFV0hFUkV9XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgIFwiXCJcIlxuXG4gIG9uUHJvdmlkZXJUYWJTZWxlY3RlZDogKGNhcGFiaWxpdHkpIC0+XG4gICAgaWYgY2FwYWJpbGl0eSBpcyAnc2F2ZScgYW5kIEBkZXByZWNhdGlvbk1lc3NhZ2UoKVxuICAgICAgQGNsaWVudC5hbGVydCBAZGVwcmVjYXRpb25NZXNzYWdlKCksICh0ciAnfkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQUxFUlRfU0FWRV9USVRMRScpXG5cbiAgaGFuZGxlVXJsUGFyYW1zOiAtPlxuICAgIGlmIEB1cmxQYXJhbXMucmVjb3JkaWRcbiAgICAgIEBjbGllbnQub3BlblByb3ZpZGVyRmlsZSBAbmFtZSwgeyBpZDogQHVybFBhcmFtcy5yZWNvcmRpZCB9XG4gICAgICB0cnVlICMgc2lnbmFsIHRoYXQgdGhlIHByb3ZpZGVyIGlzIGhhbmRsaW5nIHRoZSBwYXJhbXNcbiAgICBlbHNlIGlmIEB1cmxQYXJhbXMuZG9jTmFtZSBhbmQgQHVybFBhcmFtcy5kb2NPd25lclxuICAgICAgQGNsaWVudC5vcGVuUHJvdmlkZXJGaWxlIEBuYW1lLCB7IG5hbWU6IEB1cmxQYXJhbXMuZG9jTmFtZSwgb3duZXI6IEB1cmxQYXJhbXMuZG9jT3duZXIgfVxuICAgICAgdHJ1ZSAjIHNpZ25hbCB0aGF0IHRoZSBwcm92aWRlciBpcyBoYW5kbGluZyB0aGUgcGFyYW1zXG4gICAgZWxzZVxuICAgICAgZmFsc2VcblxuICBsaXN0OiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgICQuYWpheFxuICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgdXJsOiBAZG9jU3RvcmVVcmwubGlzdERvY3VtZW50cygpXG4gICAgICBjb250ZXh0OiBAXG4gICAgICB4aHJGaWVsZHM6XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIGxpc3QgPSBbXVxuICAgICAgICBmb3Igb3duIGtleSwgZmlsZSBvZiBkYXRhXG4gICAgICAgICAgaWYgQG1hdGNoZXNFeHRlbnNpb24gZmlsZS5uYW1lXG4gICAgICAgICAgICBsaXN0LnB1c2ggbmV3IENsb3VkTWV0YWRhdGFcbiAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lXG4gICAgICAgICAgICAgIHByb3ZpZGVyRGF0YToge2lkOiBmaWxlLmlkfVxuICAgICAgICAgICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgICAgICAgICAgcHJvdmlkZXI6IEBcbiAgICAgICAgY2FsbGJhY2sgbnVsbCwgbGlzdFxuICAgICAgZXJyb3I6IC0+XG4gICAgICAgIGNhbGxiYWNrIG51bGwsIFtdXG4gICAgICBzdGF0dXNDb2RlOlxuICAgICAgICA0MDM6ID0+XG4gICAgICAgICAgQHVzZXIgPSBudWxsXG4gICAgICAgICAgQGF1dGhDYWxsYmFjayBmYWxzZVxuXG4gIGxvYWQ6IChtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgd2l0aENyZWRlbnRpYWxzID0gdW5sZXNzIG1ldGFkYXRhLnNoYXJlZENvbnRlbnRJZCB0aGVuIHRydWUgZWxzZSBmYWxzZVxuICAgIHJlY29yZGlkID0gbWV0YWRhdGEucHJvdmlkZXJEYXRhPy5pZCBvciBtZXRhZGF0YS5zaGFyZWRDb250ZW50SWRcbiAgICByZXF1ZXN0RGF0YSA9IHt9XG4gICAgcmVxdWVzdERhdGEucmVjb3JkaWQgPSByZWNvcmRpZCBpZiByZWNvcmRpZFxuICAgIHJlcXVlc3REYXRhLnJ1bktleSA9IEB1cmxQYXJhbXMucnVuS2V5IGlmIEB1cmxQYXJhbXMucnVuS2V5XG4gICAgaWYgbm90IHJlY29yZGlkXG4gICAgICByZXF1ZXN0RGF0YS5yZWNvcmRuYW1lID0gbWV0YWRhdGEucHJvdmlkZXJEYXRhPy5uYW1lIGlmIG1ldGFkYXRhLnByb3ZpZGVyRGF0YT8ubmFtZVxuICAgICAgcmVxdWVzdERhdGEub3duZXIgPSBtZXRhZGF0YS5wcm92aWRlckRhdGE/Lm93bmVyIGlmIG1ldGFkYXRhLnByb3ZpZGVyRGF0YT8ub3duZXJcbiAgICAkLmFqYXhcbiAgICAgIHVybDogQGRvY1N0b3JlVXJsLmxvYWREb2N1bWVudCgpXG4gICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICBkYXRhOiByZXF1ZXN0RGF0YVxuICAgICAgY29udGV4dDogQFxuICAgICAgeGhyRmllbGRzOlxuICAgICAgICB7d2l0aENyZWRlbnRpYWxzfVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIGNvbnRlbnQgPSBjbG91ZENvbnRlbnRGYWN0b3J5LmNyZWF0ZUVudmVsb3BlZENsb3VkQ29udGVudCBkYXRhXG5cbiAgICAgICAgIyBmb3IgZG9jdW1lbnRzIGxvYWRlZCBieSBpZCBvciBvdGhlciBtZWFucyAoYmVzaWRlcyBuYW1lKSxcbiAgICAgICAgIyBjYXB0dXJlIHRoZSBuYW1lIGZvciB1c2UgaW4gdGhlIENGTSBpbnRlcmZhY2UuXG4gICAgICAgICMgJ2RvY05hbWUnIGF0IHRoZSB0b3AgbGV2ZWwgZm9yIENGTS13cmFwcGVkIGRvY3VtZW50c1xuICAgICAgICAjICduYW1lJyBhdCB0aGUgdG9wIGxldmVsIGZvciB1bndyYXBwZWQgZG9jdW1lbnRzIChlLmcuIENPREFQKVxuICAgICAgICAjICduYW1lJyBhdCB0aGUgdG9wIGxldmVsIG9mICdjb250ZW50JyBmb3Igd3JhcHBlZCBDT0RBUCBkb2N1bWVudHNcbiAgICAgICAgbWV0YWRhdGEucmVuYW1lIG1ldGFkYXRhLm5hbWUgb3IgbWV0YWRhdGEucHJvdmlkZXJEYXRhLm5hbWUgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZG9jTmFtZSBvciBkYXRhLm5hbWUgb3IgZGF0YS5jb250ZW50Py5uYW1lXG4gICAgICAgIGlmIG1ldGFkYXRhLm5hbWVcbiAgICAgICAgICBjb250ZW50LmFkZE1ldGFkYXRhIGRvY05hbWU6IG1ldGFkYXRhLmZpbGVuYW1lXG5cbiAgICAgICAgY2FsbGJhY2sgbnVsbCwgY29udGVudFxuICAgICAgc3RhdHVzQ29kZTpcbiAgICAgICAgNDAzOiA9PlxuICAgICAgICAgIEB1c2VyID0gbnVsbFxuICAgICAgICAgIGNhbGxiYWNrIHRyKFwifkRPQ1NUT1JFLkxPQURfNDAzX0VSUk9SXCIsIHtmaWxlbmFtZTogbWV0YWRhdGEubmFtZSBvciAndGhlIGZpbGUnfSksIDQwM1xuXG4gICAgICBlcnJvcjogKGpxWEhSKSAtPlxuICAgICAgICByZXR1cm4gaWYganFYSFIuc3RhdHVzIGlzIDQwMyAjIGxldCBzdGF0dXNDb2RlIGhhbmRsZXIgZGVhbCB3aXRoIGl0XG4gICAgICAgIG1lc3NhZ2UgPSBpZiBtZXRhZGF0YS5zaGFyZWRDb250ZW50SWRcbiAgICAgICAgICB0ciBcIn5ET0NTVE9SRS5MT0FEX1NIQVJFRF80MDRfRVJST1JcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgdHIgXCJ+RE9DU1RPUkUuTE9BRF80MDRfRVJST1JcIiwge2ZpbGVuYW1lOiBtZXRhZGF0YS5uYW1lIG9yIG1ldGFkYXRhLnByb3ZpZGVyRGF0YT8uaWQgb3IgJ3RoZSBmaWxlJ31cbiAgICAgICAgY2FsbGJhY2sgbWVzc2FnZVxuXG4gIHNhdmU6IChjbG91ZENvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBjb250ZW50ID0gY2xvdWRDb250ZW50LmdldENvbnRlbnQoKVxuXG4gICAgIyBTZWUgaWYgd2UgY2FuIHBhdGNoXG4gICAgcGF0Y2hSZXN1bHRzID0gQHNhdmVkQ29udGVudC5jcmVhdGVQYXRjaChjb250ZW50LCBAb3B0aW9ucy5wYXRjaCBhbmQgbWV0YWRhdGEub3ZlcndyaXRhYmxlKVxuXG4gICAgaWYgcGF0Y2hSZXN1bHRzLnNob3VsZFBhdGNoIGFuZCBub3QgcGF0Y2hSZXN1bHRzLmRpZmZMZW5ndGhcbiAgICAgICMgbm8gcmVhc29uIHRvIHBhdGNoIGlmIHRoZXJlIGFyZSBubyBkaWZmc1xuICAgICAgY2FsbGJhY2sgbnVsbCAjIG5vIGVycm9yIGluZGljYXRlcyBzdWNjZXNzXG4gICAgICByZXR1cm5cblxuICAgIHBhcmFtcyA9IHt9XG4gICAgaWYgbWV0YWRhdGEucHJvdmlkZXJEYXRhLmlkIHRoZW4gcGFyYW1zLnJlY29yZGlkID0gbWV0YWRhdGEucHJvdmlkZXJEYXRhLmlkXG5cbiAgICBpZiBub3QgcGF0Y2hSZXN1bHRzLnNob3VsZFBhdGNoIGFuZCBtZXRhZGF0YS5maWxlbmFtZVxuICAgICAgcGFyYW1zLnJlY29yZG5hbWUgPSBtZXRhZGF0YS5maWxlbmFtZVxuXG4gICAgIyBJZiB3ZSBhcmUgc2F2aW5nIGZvciB0aGUgZmlyc3QgdGltZSBhcyBhIHN0dWRlbnQgaW4gYSBMQVJBIGFjdGl2aXR5LCB0aGVuIHdlIGRvIG5vdCBoYXZlXG4gICAgIyBhdXRob3JpemF0aW9uIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50LiBIb3dldmVyLCB3ZSBzaG91bGQgaGF2ZSBhIHJ1bktleSBxdWVyeSBwYXJhbWV0ZXIuXG4gICAgIyBXaGVuIHdlIHNhdmUgd2l0aCB0aGlzIHJ1bktleSwgdGhlIGRvY3VtZW50IHdpbGwgc2F2ZSBvdXIgY2hhbmdlcyB0byBhIGNvcHkgb2YgdGhlIGRvY3VtZW50LFxuICAgICMgb3duZWQgYnkgdXMuXG4gICAgI1xuICAgICMgV2hlbiB3ZSBzdWNjZXNzZnVsbHkgc2F2ZSwgd2Ugd2lsbCBnZXQgdGhlIGlkIG9mIHRoZSBuZXcgZG9jdW1lbnQgaW4gdGhlIHJlc3BvbnNlLCBhbmQgdXNlXG4gICAgIyB0aGlzIGlkIGZvciBmdXR1cmUgc2F2aW5nLiBXZSBjYW4gdGhlbiBzYXZlIHZpYSBwYXRjaGVzLCBhbmQgZG9uJ3QgbmVlZCB0aGUgcnVuS2V5LlxuICAgIGlmIEB1cmxQYXJhbXMucnVuS2V5XG4gICAgICBwYXJhbXMucnVuS2V5ID0gQHVybFBhcmFtcy5ydW5LZXlcblxuICAgIG1ldGhvZCA9ICdQT1NUJ1xuICAgIHVybCA9IGlmIHBhdGNoUmVzdWx0cy5zaG91bGRQYXRjaCBcXFxuICAgICAgICAgICAgdGhlbiBAZG9jU3RvcmVVcmwucGF0Y2hEb2N1bWVudChwYXJhbXMpIFxcXG4gICAgICAgICAgICBlbHNlIEBkb2NTdG9yZVVybC5zYXZlRG9jdW1lbnQocGFyYW1zKVxuXG4gICAgbG9nRGF0YSA9XG4gICAgICBvcGVyYXRpb246ICdzYXZlJ1xuICAgICAgcHJvdmlkZXI6ICdEb2N1bWVudFN0b3JlUHJvdmlkZXInXG4gICAgICBzaG91bGRQYXRjaDogcGF0Y2hSZXN1bHRzLnNob3VsZFBhdGNoXG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgICAgdXJsOiB1cmxcbiAgICAgIHBhcmFtczogSlNPTi5zdHJpbmdpZnkocGFyYW1zKVxuICAgICAgY29udGVudDogcGF0Y2hSZXN1bHRzLnNlbmRDb250ZW50LnN1YnN0cigwLCA1MTIpXG4gICAgQGNsaWVudC5sb2cgJ3NhdmUnLCBsb2dEYXRhXG5cbiAgICAkLmFqYXhcbiAgICAgIGRhdGFUeXBlOiAnanNvbidcbiAgICAgIHR5cGU6IG1ldGhvZFxuICAgICAgdXJsOiB1cmxcbiAgICAgIGRhdGE6IHBha28uZGVmbGF0ZSBwYXRjaFJlc3VsdHMuc2VuZENvbnRlbnRcbiAgICAgIGNvbnRlbnRUeXBlOiBwYXRjaFJlc3VsdHMubWltZVR5cGVcbiAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZVxuICAgICAgYmVmb3JlU2VuZDogKHhocikgLT5cbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtRW5jb2RpbmcnLCAnZGVmbGF0ZScpXG4gICAgICBjb250ZXh0OiBAXG4gICAgICB4aHJGaWVsZHM6XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIEBzYXZlZENvbnRlbnQudXBkYXRlQ29udGVudChpZiBAb3B0aW9ucy5wYXRjaCB0aGVuIF8uY2xvbmVEZWVwKGNvbnRlbnQpIGVsc2UgbnVsbClcbiAgICAgICAgaWYgZGF0YS5pZCB0aGVuIG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5pZCA9IGRhdGEuaWRcblxuICAgICAgICBjYWxsYmFjayBudWxsLCBkYXRhXG4gICAgICBzdGF0dXNDb2RlOlxuICAgICAgICA0MDM6ID0+XG4gICAgICAgICAgQHVzZXIgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2sgdHIoXCJ+RE9DU1RPUkUuU0FWRV80MDNfRVJST1JcIiwge2ZpbGVuYW1lOiBtZXRhZGF0YS5uYW1lfSksIDQwM1xuICAgICAgZXJyb3I6IChqcVhIUikgLT5cbiAgICAgICAgdHJ5XG4gICAgICAgICAgcmV0dXJuIGlmIGpxWEhSLnN0YXR1cyBpcyA0MDMgIyBsZXQgc3RhdHVzQ29kZSBoYW5kbGVyIGRlYWwgd2l0aCBpdFxuICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IEpTT04ucGFyc2UganFYSFIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgaWYgcmVzcG9uc2VKc29uLm1lc3NhZ2UgaXMgJ2Vycm9yLmR1cGxpY2F0ZSdcbiAgICAgICAgICAgIGNhbGxiYWNrIHRyIFwifkRPQ1NUT1JFLlNBVkVfRFVQTElDQVRFX0VSUk9SXCIsIHtmaWxlbmFtZTogbWV0YWRhdGEubmFtZX1cbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBjYWxsYmFjayB0ciBcIn5ET0NTVE9SRS5TQVZFX0VSUk9SX1dJVEhfTUVTU0FHRVwiLCB7ZmlsZW5hbWU6IG1ldGFkYXRhLm5hbWUsIG1lc3NhZ2U6IHJlc3BvbnNlSnNvbi5tZXNzYWdlfVxuICAgICAgICBjYXRjaFxuICAgICAgICAgIGNhbGxiYWNrIHRyIFwifkRPQ1NUT1JFLlNBVkVfRVJST1JcIiwge2ZpbGVuYW1lOiBtZXRhZGF0YS5uYW1lfVxuXG4gIHJlbW92ZTogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICAkLmFqYXhcbiAgICAgIHVybDogQGRvY1N0b3JlVXJsLmRlbGV0ZURvY3VtZW50KClcbiAgICAgIGRhdGE6XG4gICAgICAgIHJlY29yZG5hbWU6IG1ldGFkYXRhLmZpbGVuYW1lXG4gICAgICBjb250ZXh0OiBAXG4gICAgICB4aHJGaWVsZHM6XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIGNhbGxiYWNrIG51bGwsIGRhdGFcbiAgICAgIHN0YXR1c0NvZGU6XG4gICAgICAgIDQwMzogPT5cbiAgICAgICAgICBAdXNlciA9IG51bGxcbiAgICAgICAgICBjYWxsYmFjayB0cihcIn5ET0NTVE9SRS5SRU1PVkVfNDAzX0VSUk9SXCIsIHtmaWxlbmFtZTogbWV0YWRhdGEubmFtZX0pLCA0MDNcbiAgICAgIGVycm9yOiAoanFYSFIpIC0+XG4gICAgICAgIHJldHVybiBpZiBqcVhIUi5zdGF0dXMgaXMgNDAzICMgbGV0IHN0YXR1c0NvZGUgaGFuZGxlciBkZWFsIHdpdGggaXRcbiAgICAgICAgY2FsbGJhY2sgdHIgXCJ+RE9DU1RPUkUuUkVNT1ZFX0VSUk9SXCIsIHtmaWxlbmFtZTogbWV0YWRhdGEubmFtZX1cblxuICByZW5hbWU6IChtZXRhZGF0YSwgbmV3TmFtZSwgY2FsbGJhY2spIC0+XG4gICAgJC5hamF4XG4gICAgICB1cmw6IEBkb2NTdG9yZVVybC5yZW5hbWVEb2N1bWVudCgpXG4gICAgICBkYXRhOlxuICAgICAgICByZWNvcmRpZDogbWV0YWRhdGEucHJvdmlkZXJEYXRhLmlkXG4gICAgICAgIG5ld1JlY29yZG5hbWU6IENsb3VkTWV0YWRhdGEud2l0aEV4dGVuc2lvbiBuZXdOYW1lXG4gICAgICBjb250ZXh0OiBAXG4gICAgICB4aHJGaWVsZHM6XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIG1ldGFkYXRhLnJlbmFtZSBuZXdOYW1lXG4gICAgICAgIGNhbGxiYWNrIG51bGwsIG1ldGFkYXRhXG4gICAgICBzdGF0dXNDb2RlOlxuICAgICAgICA0MDM6ID0+XG4gICAgICAgICAgQHVzZXIgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2sgdHIoXCJ+RE9DU1RPUkUuUkVOQU1FXzQwM19FUlJPUlwiLCB7ZmlsZW5hbWU6IG1ldGFkYXRhLm5hbWV9KSwgNDAzXG4gICAgICBlcnJvcjogKGpxWEhSKSAtPlxuICAgICAgICByZXR1cm4gaWYganFYSFIuc3RhdHVzIGlzIDQwMyAjIGxldCBzdGF0dXNDb2RlIGhhbmRsZXIgZGVhbCB3aXRoIGl0XG4gICAgICAgIGNhbGxiYWNrIHRyIFwifkRPQ1NUT1JFLlJFTkFNRV9FUlJPUlwiLCB7ZmlsZW5hbWU6IG1ldGFkYXRhLm5hbWV9XG5cbiAgY2FuT3BlblNhdmVkOiAtPiB0cnVlXG5cbiAgb3BlblNhdmVkOiAob3BlblNhdmVkUGFyYW1zLCBjYWxsYmFjaykgLT5cbiAgICBwcm92aWRlckRhdGEgPSBpZiB0eXBlb2Ygb3BlblNhdmVkUGFyYW1zIGlzIFwib2JqZWN0XCIgXFxcbiAgICAgICAgICAgICAgICAgICAgICB0aGVuIG9wZW5TYXZlZFBhcmFtcyBcXFxuICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyBpZDogb3BlblNhdmVkUGFyYW1zIH1cbiAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgIHByb3ZpZGVyOiBAXG4gICAgICBwcm92aWRlckRhdGE6IHByb3ZpZGVyRGF0YVxuXG4gICAgQGxvYWQgbWV0YWRhdGEsIChlcnIsIGNvbnRlbnQpID0+XG4gICAgICBAY2xpZW50LnJlbW92ZVF1ZXJ5UGFyYW1zIEByZW1vdmFibGVRdWVyeVBhcmFtc1xuICAgICAgY2FsbGJhY2sgZXJyLCBjb250ZW50LCBtZXRhZGF0YVxuXG4gIGdldE9wZW5TYXZlZFBhcmFtczogKG1ldGFkYXRhKSAtPlxuICAgIG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5pZFxuXG4gIGZpbGVPcGVuZWQ6IChjb250ZW50LCBtZXRhZGF0YSkgLT5cbiAgICBkZXByZWNhdGlvblBoYXNlID0gQG9wdGlvbnMuZGVwcmVjYXRpb25QaGFzZSBvciAwXG4gICAgZnJvbUxhcmEgPSAhIWdldFF1ZXJ5UGFyYW0oXCJsYXVuY2hGcm9tTGFyYVwiKSBvciAhIWdldEhhc2hQYXJhbShcImxhcmFcIilcbiAgICByZXR1cm4gaWYgbm90IGRlcHJlY2F0aW9uUGhhc2Ugb3IgZnJvbUxhcmFcbiAgICBAY2xpZW50LmNvbmZpcm1EaWFsb2cge1xuICAgICAgdGl0bGU6IHRyICd+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX1NBVkVfVElUTEUnXG4gICAgICBtZXNzYWdlOiBAZGVwcmVjYXRpb25NZXNzYWdlKClcbiAgICAgIHllc1RpdGxlOiB0ciAnfkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX0VMU0VXSEVSRSdcbiAgICAgIG5vVGl0bGU6IHRyICd+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX0RPX0lUX0xBVEVSJ1xuICAgICAgaGlkZU5vQnV0dG9uOiBkZXByZWNhdGlvblBoYXNlID49IDNcbiAgICAgIGNhbGxiYWNrOiA9PlxuICAgICAgICBAZGlzYWJsZUZvck5leHRTYXZlID0gdHJ1ZVxuICAgICAgICBAY2xpZW50LnNhdmVGaWxlQXNEaWFsb2coKVxuICAgICAgcmVqZWN0Q2FsbGJhY2s6ID0+XG4gICAgICAgIGlmIGRlcHJlY2F0aW9uUGhhc2UgPiAxXG4gICAgICAgICAgQGNsaWVudC5hcHBPcHRpb25zLmF1dG9TYXZlSW50ZXJ2YWwgPSBudWxsXG4gICAgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IERvY3VtZW50U3RvcmVQcm92aWRlclxuIiwiQ2xvdWRNZXRhZGF0YSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLkNsb3VkTWV0YWRhdGFcbkRvY3VtZW50U3RvcmVVcmwgPSByZXF1aXJlICcuL2RvY3VtZW50LXN0b3JlLXVybCdcbnBha28gPSByZXF1aXJlICdwYWtvJ1xuXG4jXG4jIEEgdXRpbGl0eSBjbGFzcyBmb3IgcHJvdmlkaW5nIHNoYXJpbmcgZnVuY3Rpb25hbGl0eSB2aWEgdGhlIENvbmNvcmQgRG9jdW1lbnQgU3RvcmUuXG4jIE9yaWdpbmFsbHksIHNoYXJpbmcgd2FzIHdyYXBwZWQgaW50byB0aGUgUHJvdmlkZXIgaW50ZXJmYWNlLCBidXQgc2luY2Ugd2UgaGF2ZSBub1xuIyBwbGFucyB0byBleHRlbmQgc2hhcmluZyBzdXBwb3J0IHRvIGFyYml0cmFyeSBwcm92aWRlcnMgbGlrZSBHb29nbGUgRHJpdmUsIGl0IHNlZW1zXG4jIGNsZWFuZXIgdG8gYnJlYWsgb3V0IHRoZSBzaGFyaW5nIGZ1bmN0aW9uYWxpdHkgaW50byBpdHMgb3duIGNsYXNzLlxuI1xuY2xhc3MgRG9jdW1lbnRTdG9yZVNoYXJlUHJvdmlkZXJcblxuICBjb25zdHJ1Y3RvcjogKEBjbGllbnQsIEBwcm92aWRlcikgLT5cbiAgICBAZG9jU3RvcmVVcmwgPSBAcHJvdmlkZXIuZG9jU3RvcmVVcmxcblxuICBsb2FkU2hhcmVkQ29udGVudDogKGlkLCBjYWxsYmFjaykgLT5cbiAgICBzaGFyZWRNZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICBzaGFyZWRDb250ZW50SWQ6IGlkXG4gICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgIG92ZXJ3cml0YWJsZTogZmFsc2VcbiAgICBAcHJvdmlkZXIubG9hZCBzaGFyZWRNZXRhZGF0YSwgKGVyciwgY29udGVudCkgLT5cbiAgICAgIGNhbGxiYWNrIGVyciwgY29udGVudCwgc2hhcmVkTWV0YWRhdGFcblxuICBnZXRTaGFyaW5nTWV0YWRhdGE6IChzaGFyZWQpIC0+XG4gICAgeyBfcGVybWlzc2lvbnM6IGlmIHNoYXJlZCB0aGVuIDEgZWxzZSAwIH1cblxuICBzaGFyZTogKHNoYXJlZCwgbWFzdGVyQ29udGVudCwgc2hhcmVkQ29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuXG4gICAgIyBkb2N1bWVudCBJRCBpcyBzdG9yZWQgaW4gbWFzdGVyQ29udGVudFxuICAgIGRvY3VtZW50SUQgPSBtYXN0ZXJDb250ZW50LmdldCgnc2hhcmVkRG9jdW1lbnRJZCcpXG5cbiAgICAjIG5ld2VyIFYyIGRvY3VtZW50cyBoYXZlICdhY2Nlc3NLZXlzJzsgbGVnYWN5IFYxIGRvY3VtZW50cyBoYXZlICdzaGFyZWRFZGl0S2V5J3NcbiAgICAjIHdoaWNoIGFyZSBhY3R1YWxseSBWMSAncnVuS2V5J3MgdW5kZXIgYW4gYXNzdW1lZCBuYW1lICh0byBwcm90ZWN0IHRoZWlyIGlkZW50aXR5PylcbiAgICBhY2Nlc3NLZXlzID0gbWFzdGVyQ29udGVudC5nZXQoJ2FjY2Vzc0tleXMnKVxuICAgIHJ1bktleSA9IG1hc3RlckNvbnRlbnQuZ2V0KCdzaGFyZUVkaXRLZXknKVxuXG4gICAgYWNjZXNzS2V5ID0gYWNjZXNzS2V5cz8ucmVhZFdyaXRlIG9yIHJ1bktleVxuXG4gICAgcGFyYW1zID0ge3NoYXJlZDogc2hhcmVkfVxuICAgIGlmIGFjY2Vzc0tleVxuICAgICAgcGFyYW1zLmFjY2Vzc0tleSA9ICdSVzo6JyArIGFjY2Vzc0tleVxuXG4gICAgIyBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBkb2N1bWVudElEIGFuZCBzb21lIGZvcm0gb2YgYWNjZXNzS2V5LFxuICAgICMgdGhlbiB3ZSBtdXN0IGJlIHVwZGF0aW5nIGFuIGV4aXN0aW5nIHNoYXJlZCBkb2N1bWVudFxuICAgIGlmIGRvY3VtZW50SUQgYW5kIGFjY2Vzc0tleVxuICAgICAge21ldGhvZCwgdXJsfSA9IEBkb2NTdG9yZVVybC52MlNhdmVEb2N1bWVudChkb2N1bWVudElELCBwYXJhbXMpXG4gICAgICAkLmFqYXhcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICB0eXBlOiBtZXRob2RcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyAjIERvY3VtZW50IFN0b3JlIHJlcXVpcmVzIEpTT04gY3VycmVudGx5XG4gICAgICAgIGRhdGE6IHBha28uZGVmbGF0ZSBzaGFyZWRDb250ZW50LmdldENvbnRlbnRBc0pTT04oKVxuICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2VcbiAgICAgICAgYmVmb3JlU2VuZDogKHhocikgLT5cbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1FbmNvZGluZycsICdkZWZsYXRlJylcbiAgICAgICAgY29udGV4dDogQFxuICAgICAgICB4aHJGaWVsZHM6XG4gICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlXG4gICAgICAgIHN1Y2Nlc3M6IChkYXRhKSAtPlxuICAgICAgICAgICMgb24gc3VjY2Vzc2Z1bCBzaGFyZS9zYXZlLCBjYXB0dXJlIHRoZSBzaGFyZWREb2N1bWVudElkIGFuZCBzaGFyZUVkaXRLZXlcbiAgICAgICAgICBpZiBydW5LZXkgYW5kIG5vdCBhY2Nlc3NLZXlzP1xuICAgICAgICAgICAgbWFzdGVyQ29udGVudC5hZGRNZXRhZGF0YVxuICAgICAgICAgICAgICBhY2Nlc3NLZXlzOiB7IHJlYWRXcml0ZTogcnVuS2V5IH1cbiAgICAgICAgICBjYWxsYmFjayBudWxsLCBkYXRhLmlkXG4gICAgICAgIGVycm9yOiAoanFYSFIpIC0+XG4gICAgICAgICAgZG9jTmFtZSA9IG1ldGFkYXRhPy5maWxlbmFtZSBvciAnZG9jdW1lbnQnXG4gICAgICAgICAgY2FsbGJhY2sgXCJVbmFibGUgdG8gdXBkYXRlIHNoYXJlZCAnI3tkb2NOYW1lfSdcIlxuXG4gICAgIyBpZiB3ZSBkb24ndCBoYXZlIGEgZG9jdW1lbnQgSUQgYW5kIHNvbWUgZm9ybSBvZiBhY2Nlc3NLZXksXG4gICAgIyB0aGVuIHdlIG11c3QgY3JlYXRlIGEgbmV3IHNoYXJlZCBkb2N1bWVudCB3aGVuIHNoYXJpbmcgaXMgYmVpbmcgZW5hYmxlZFxuICAgIGVsc2UgaWYgc2hhcmVkXG4gICAgICBwYXJhbXMuc2hhcmVkID0gdHJ1ZVxuICAgICAge21ldGhvZCwgdXJsfSA9IEBkb2NTdG9yZVVybC52MkNyZWF0ZURvY3VtZW50KHBhcmFtcylcbiAgICAgICQuYWpheFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgIHR5cGU6IG1ldGhvZFxuICAgICAgICB1cmw6IHVybFxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nICMgRG9jdW1lbnQgU3RvcmUgcmVxdWlyZXMgSlNPTiBjdXJyZW50bHlcbiAgICAgICAgZGF0YTogcGFrby5kZWZsYXRlIHNoYXJlZENvbnRlbnQuZ2V0Q29udGVudEFzSlNPTigpXG4gICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZVxuICAgICAgICBiZWZvcmVTZW5kOiAoeGhyKSAtPlxuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LUVuY29kaW5nJywgJ2RlZmxhdGUnKVxuICAgICAgICBjb250ZXh0OiBAXG4gICAgICAgIHhockZpZWxkczpcbiAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWVcbiAgICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgICAgIyBvbiBzdWNjZXNzZnVsIHNoYXJlL3NhdmUsIGNhcHR1cmUgdGhlIHNoYXJlZERvY3VtZW50SWQgYW5kIGFjY2Vzc0tleXNcbiAgICAgICAgICBtYXN0ZXJDb250ZW50LmFkZE1ldGFkYXRhXG4gICAgICAgICAgICBzaGFyZWREb2N1bWVudElkOiBkYXRhLmlkXG4gICAgICAgICAgICBhY2Nlc3NLZXlzOiB7IHJlYWRPbmx5OiBkYXRhLnJlYWRBY2Nlc3NLZXksIHJlYWRXcml0ZTogZGF0YS5yZWFkV3JpdGVBY2Nlc3NLZXkgfVxuICAgICAgICAgIGNhbGxiYWNrIG51bGwsIGRhdGEuaWRcbiAgICAgICAgZXJyb3I6IChqcVhIUikgLT5cbiAgICAgICAgICBkb2NOYW1lID0gbWV0YWRhdGE/LmZpbGVuYW1lIG9yICdkb2N1bWVudCdcbiAgICAgICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byBzaGFyZSAnI3tkb2NOYW1lfSdcIlxuICAgIGVsc2VcbiAgICAgIGNhbGxiYWNrIFwiVW5hYmxlIHRvIHVuc2hhcmUgJyN7ZG9jTmFtZX0nXCJcblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudFN0b3JlU2hhcmVQcm92aWRlclxuIiwiI1xuIyBUaGlzIHV0aWxpdHkgY2xhc3Mgc2ltcGxpZmllcyB3b3JraW5nIHdpdGggZG9jdW1lbnQgc3RvcmUgVVJMc1xuI1xuXG4jIGRlZmF1bHQgZG9jdW1lbnQgc3RvcmUgVVJMIGlmIGNsaWVudCBkb2Vzbid0IHByb3ZpZGUgb25lXG5kZWZhdWx0RG9jU3RvcmVVcmwgPSBcIi8vZG9jdW1lbnQtc3RvcmUuY29uY29yZC5vcmdcIlxuXG5jbGFzcyBEb2N1bWVudFN0b3JlVXJsXG5cbiAgY29uc3RydWN0b3I6IChkb2NTdG9yZVVybCkgLT5cbiAgICBAZG9jU3RvcmVVcmwgPSBkb2NTdG9yZVVybCBvciBkZWZhdWx0RG9jU3RvcmVVcmxcbiAgICAjIGVsaW1pbmF0ZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgQGRvY1N0b3JlVXJsID0gQGRvY1N0b3JlVXJsLnJlcGxhY2UoL1xcLyskLywgJycpXG5cbiAgYWRkUGFyYW1zOiAodXJsLCBwYXJhbXMpIC0+XG4gICAgcmV0dXJuIHVybCB1bmxlc3MgcGFyYW1zXG4gICAga3ZwID0gW11cbiAgICBmb3Iga2V5LCB2YWx1ZSBvZiBwYXJhbXNcbiAgICAgIGt2cC5wdXNoIFtrZXksIHZhbHVlXS5tYXAoZW5jb2RlVVJJKS5qb2luIFwiPVwiXG4gICAgcmV0dXJuIHVybCArIFwiP1wiICsga3ZwLmpvaW4gXCImXCJcblxuICAjXG4gICMgVmVyc2lvbiAxIEFQSVxuICAjXG4gIGF1dGhvcml6ZTogKHBhcmFtcykgLT5cbiAgICBAYWRkUGFyYW1zIFwiI3tAZG9jU3RvcmVVcmx9L3VzZXIvYXV0aGVudGljYXRlXCIsIHBhcmFtc1xuXG4gIGNoZWNrTG9naW46IChwYXJhbXMpIC0+XG4gICAgQGFkZFBhcmFtcyBcIiN7QGRvY1N0b3JlVXJsfS91c2VyL2luZm9cIiwgcGFyYW1zXG5cbiAgbGlzdERvY3VtZW50czogKHBhcmFtcykgLT5cbiAgICBAYWRkUGFyYW1zIFwiI3tAZG9jU3RvcmVVcmx9L2RvY3VtZW50L2FsbFwiLCBwYXJhbXNcblxuICBsb2FkRG9jdW1lbnQ6IChwYXJhbXMpIC0+XG4gICAgQGFkZFBhcmFtcyBcIiN7QGRvY1N0b3JlVXJsfS9kb2N1bWVudC9vcGVuXCIsIHBhcmFtc1xuXG4gIHNhdmVEb2N1bWVudDogKHBhcmFtcykgLT5cbiAgICBAYWRkUGFyYW1zIFwiI3tAZG9jU3RvcmVVcmx9L2RvY3VtZW50L3NhdmVcIiwgcGFyYW1zXG5cbiAgcGF0Y2hEb2N1bWVudDogKHBhcmFtcykgLT5cbiAgICBAYWRkUGFyYW1zIFwiI3tAZG9jU3RvcmVVcmx9L2RvY3VtZW50L3BhdGNoXCIsIHBhcmFtc1xuXG4gIGRlbGV0ZURvY3VtZW50OiAocGFyYW1zKSAtPlxuICAgIEBhZGRQYXJhbXMgXCIje0Bkb2NTdG9yZVVybH0vZG9jdW1lbnQvZGVsZXRlXCIsIHBhcmFtc1xuXG4gIHJlbmFtZURvY3VtZW50OiAocGFyYW1zKSAtPlxuICAgIEBhZGRQYXJhbXMgXCIje0Bkb2NTdG9yZVVybH0vZG9jdW1lbnQvcmVuYW1lXCIsIHBhcmFtc1xuXG4gICNcbiAgIyBWZXJzaW9uIDIgQVBJXG4gICNcbiAgdjJEb2N1bWVudDogKGlkLCBwYXJhbXMpIC0+XG4gICAgQGFkZFBhcmFtcyBcIiN7QGRvY1N0b3JlVXJsfS92Mi9kb2N1bWVudHMvI3tpZH1cIiwgcGFyYW1zXG5cbiAgdjJDcmVhdGVEb2N1bWVudDogKHBhcmFtcykgLT5cbiAgICB7IG1ldGhvZDogJ1BPU1QnLCB1cmw6IEB2MkRvY3VtZW50KCcnLCBwYXJhbXMpIH1cbiAgICBcbiAgdjJMb2FkRG9jdW1lbnQ6IChpZCwgcGFyYW1zKSAtPlxuICAgIHsgbWV0aG9kOiAnR0VUJywgdXJsOiBAdjJEb2N1bWVudChpZCwgcGFyYW1zKSB9XG4gICAgXG4gIHYyU2F2ZURvY3VtZW50OiAoaWQsIHBhcmFtcykgLT5cbiAgICB7IG1ldGhvZDogJ1BVVCcsIHVybDogQHYyRG9jdW1lbnQoaWQsIHBhcmFtcykgfVxuICAgIFxuICB2MlBhdGNoRG9jdW1lbnQ6IChpZCwgcGFyYW1zKSAtPlxuICAgIHsgbWV0aG9kOiAnUEFUQ0gnLCB1cmw6IEB2MkRvY3VtZW50KGlkLCBwYXJhbXMpIH1cbiAgICBcbiAgIyBOb3QgaW1wbGVtZW50ZWQgYnkgdGhlIHNlcnZlclxuICAjIHYyRGVsZXRlRG9jdW1lbnQ6IChpZCwgcGFyYW1zKSAtPlxuICAjICAgeyBtZXRob2Q6ICdERUxFVEUnLCB1cmw6IEB2MkRvY3VtZW50KGlkLCBwYXJhbXMpIH1cbiAgICBcbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnRTdG9yZVVybFxuIiwie2RpdiwgYnV0dG9uLCBzcGFufSA9IFJlYWN0LkRPTVxuXG50ciA9IHJlcXVpcmUgJy4uL3V0aWxzL3RyYW5zbGF0ZSdcbmlzU3RyaW5nID0gcmVxdWlyZSAnLi4vdXRpbHMvaXMtc3RyaW5nJ1xuanNkaWZmID0gcmVxdWlyZSAnZGlmZidcblxuUHJvdmlkZXJJbnRlcmZhY2UgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5Qcm92aWRlckludGVyZmFjZVxuY2xvdWRDb250ZW50RmFjdG9yeSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLmNsb3VkQ29udGVudEZhY3RvcnlcbkNsb3VkTWV0YWRhdGEgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbkdvb2dsZURyaXZlQXV0aG9yaXphdGlvbkRpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgUmVhY3QuY3JlYXRlQ2xhc3NcbiAgZGlzcGxheU5hbWU6ICdHb29nbGVEcml2ZUF1dGhvcml6YXRpb25EaWFsb2cnXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIGxvYWRlZEdBUEk6IHdpbmRvdy5fTG9hZGVkR0FQSUNsaWVudHNcblxuICAjIFNlZSBjb21tZW50cyBpbiBBdXRob3JpemVNaXhpbiBmb3IgZGV0YWlsZWQgZGVzY3JpcHRpb24gb2YgdGhlIGlzc3VlcyBoZXJlLlxuICAjIFRoZSBzaG9ydCB2ZXJzaW9uIGlzIHRoYXQgd2UgbmVlZCB0byBtYWludGFpbiBzeW5jaHJvbml6ZWQgaW5zdGFuY2UgdmFyaWFibGVcbiAgIyBhbmQgc3RhdGUgdG8gdHJhY2sgYXV0aG9yaXphdGlvbiBzdGF0dXMgd2hpbGUgYXZvaWRpbmcgY2FsbGluZyBzZXRTdGF0ZSBvblxuICAjIHVubW91bnRlZCBjb21wb25lbnRzLCB3aGljaCBkb2Vzbid0IHdvcmsgYW5kIHRyaWdnZXJzIGEgUmVhY3Qgd2FybmluZy5cblxuICBjb21wb25lbnRXaWxsTW91bnQ6IC0+XG4gICAgQHByb3BzLnByb3ZpZGVyLl9sb2FkZWRHQVBJID0+XG4gICAgICBpZiBAX2lzTW91bnRlZFxuICAgICAgICBAc2V0U3RhdGUgbG9hZGVkR0FQSTogdHJ1ZVxuXG4gIGNvbXBvbmVudERpZE1vdW50OiAtPlxuICAgIEBfaXNNb3VudGVkID0gdHJ1ZVxuICAgIGlmIEBzdGF0ZS5sb2FkZWRHQVBJIGlzbnQgd2luZG93Ll9Mb2FkZWRHQVBJQ2xpZW50c1xuICAgICAgQHNldFN0YXRlIGxvYWRlZEdBUEk6IHdpbmRvdy5fTG9hZGVkR0FQSUNsaWVudHNcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogLT5cbiAgICBAX2lzTW91bnRlZCA9IGZhbHNlXG5cbiAgYXV0aGVudGljYXRlOiAtPlxuICAgIEBwcm9wcy5wcm92aWRlci5hdXRob3JpemUgR29vZ2xlRHJpdmVQcm92aWRlci5TSE9XX1BPUFVQXG5cbiAgcmVuZGVyOiAtPlxuICAgIChkaXYge2NsYXNzTmFtZTogJ2dvb2dsZS1kcml2ZS1hdXRoJ30sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdnb29nbGUtZHJpdmUtY29uY29yZC1sb2dvJ30sICcnKVxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnZ29vZ2xlLWRyaXZlLWZvb3Rlcid9LFxuICAgICAgICBpZiB3aW5kb3cuX0xvYWRlZEdBUElDbGllbnRzIG9yIEBzdGF0ZS5sb2FkZWRHQVBJXG4gICAgICAgICAgKGJ1dHRvbiB7b25DbGljazogQGF1dGhlbnRpY2F0ZX0sICh0ciBcIn5HT09HTEVfRFJJVkUuTE9HSU5fQlVUVE9OX0xBQkVMXCIpKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgKHRyIFwifkdPT0dMRV9EUklWRS5DT05ORUNUSU5HX01FU1NBR0VcIilcbiAgICAgIClcbiAgICApXG5cbmNsYXNzIEdvb2dsZURyaXZlUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckludGVyZmFjZVxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSwgQGNsaWVudCkgLT5cbiAgICBzdXBlclxuICAgICAgbmFtZTogR29vZ2xlRHJpdmVQcm92aWRlci5OYW1lXG4gICAgICBkaXNwbGF5TmFtZTogQG9wdGlvbnMuZGlzcGxheU5hbWUgb3IgKHRyICd+UFJPVklERVIuR09PR0xFX0RSSVZFJylcbiAgICAgIHVybERpc3BsYXlOYW1lOiBAb3B0aW9ucy51cmxEaXNwbGF5TmFtZVxuICAgICAgY2FwYWJpbGl0aWVzOlxuICAgICAgICBzYXZlOiB0cnVlXG4gICAgICAgIHJlc2F2ZTogdHJ1ZVxuICAgICAgICBleHBvcnQ6IHRydWVcbiAgICAgICAgbG9hZDogdHJ1ZVxuICAgICAgICBsaXN0OiB0cnVlXG4gICAgICAgIHJlbW92ZTogZmFsc2VcbiAgICAgICAgcmVuYW1lOiB0cnVlXG4gICAgICAgIGNsb3NlOiB0cnVlXG4gICAgICAgIHNldEZvbGRlcjogdHJ1ZVxuXG4gICAgQGF1dGhUb2tlbiA9IG51bGxcbiAgICBAdXNlciA9IG51bGxcbiAgICBAY2xpZW50SWQgPSBAb3B0aW9ucy5jbGllbnRJZFxuICAgIGlmIG5vdCBAY2xpZW50SWRcbiAgICAgIHRocm93IG5ldyBFcnJvciAodHIgXCJ+R09PR0xFX0RSSVZFLkVSUk9SX01JU1NJTkdfQ0xJRU5USURcIilcbiAgICBAbWltZVR5cGUgPSBAb3B0aW9ucy5taW1lVHlwZSBvciBcInRleHQvcGxhaW5cIlxuICAgIEByZWFkYWJsZU1pbWV0eXBlcyA9IEBvcHRpb25zLnJlYWRhYmxlTWltZXR5cGVzXG4gICAgQHVzZVJlYWxUaW1lQVBJID0gQG9wdGlvbnMudXNlUmVhbFRpbWVBUEkgb3IgZmFsc2VcbiAgICBpZiBAdXNlUmVhbFRpbWVBUElcbiAgICAgIEBtaW1lVHlwZSArPSAnK2NmbV9yZWFsdGltZSdcbiAgICBAX2xvYWRHQVBJKClcblxuICBATmFtZTogJ2dvb2dsZURyaXZlJ1xuXG4gICMgYWxpYXNlcyBmb3IgYm9vbGVhbiBwYXJhbWV0ZXIgdG8gYXV0aG9yaXplXG4gIEBJTU1FRElBVEUgPSB0cnVlXG4gIEBTSE9XX1BPUFVQID0gZmFsc2VcblxuICBhdXRob3JpemVkOiAoYXV0aENhbGxiYWNrKSAtPlxuICAgIEBhdXRoQ2FsbGJhY2sgPSBhdXRoQ2FsbGJhY2sgdW5sZXNzIG5vdCBhdXRoQ2FsbGJhY2s/XG4gICAgaWYgYXV0aENhbGxiYWNrXG4gICAgICBpZiBAYXV0aFRva2VuXG4gICAgICAgIGF1dGhDYWxsYmFjayB0cnVlXG4gICAgICBlbHNlXG4gICAgICAgIEBhdXRob3JpemUgR29vZ2xlRHJpdmVQcm92aWRlci5JTU1FRElBVEVcbiAgICBlbHNlXG4gICAgICBAYXV0aFRva2VuIGlzbnQgbnVsbFxuXG4gIGF1dGhvcml6ZTogKGltbWVkaWF0ZSkgLT5cbiAgICBAX2xvYWRlZEdBUEkgPT5cbiAgICAgIGFyZ3MgPVxuICAgICAgICBjbGllbnRfaWQ6IEBjbGllbnRJZFxuICAgICAgICBzY29wZTogW1xuICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLnJlYWRvbmx5J1xuICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLmluc3RhbGwnXG4gICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUuZmlsZSdcbiAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5wcm9maWxlJ1xuICAgICAgICBdXG4gICAgICAgIGltbWVkaWF0ZTogaW1tZWRpYXRlXG4gICAgICBnYXBpLmF1dGguYXV0aG9yaXplIGFyZ3MsIChhdXRoVG9rZW4pID0+XG4gICAgICAgIEBhdXRoVG9rZW4gPSBpZiBhdXRoVG9rZW4gYW5kIG5vdCBhdXRoVG9rZW4uZXJyb3IgdGhlbiBhdXRoVG9rZW4gZWxzZSBudWxsXG4gICAgICAgIEB1c2VyID0gbnVsbFxuICAgICAgICBAYXV0b1JlbmV3VG9rZW4gQGF1dGhUb2tlblxuICAgICAgICBpZiBAYXV0aFRva2VuXG4gICAgICAgICAgZ2FwaS5jbGllbnQub2F1dGgyLnVzZXJpbmZvLmdldCgpLmV4ZWN1dGUgKHVzZXIpID0+XG4gICAgICAgICAgICBAdXNlciA9IHVzZXJcbiAgICAgICAgQGF1dGhDYWxsYmFjaz8gQGF1dGhUb2tlbiBpc250IG51bGxcblxuICBhdXRvUmVuZXdUb2tlbjogKGF1dGhUb2tlbikgLT5cbiAgICBpZiBAX2F1dG9SZW5ld1RpbWVvdXRcbiAgICAgIGNsZWFyVGltZW91dCBAX2F1dG9SZW5ld1RpbWVvdXRcbiAgICBpZiBhdXRoVG9rZW4gYW5kIG5vdCBhdXRoVG9rZW4uZXJyb3JcbiAgICAgIEBfYXV0b1JlbmV3VGltZW91dCA9IHNldFRpbWVvdXQgKD0+IEBhdXRob3JpemUgR29vZ2xlRHJpdmVQcm92aWRlci5JTU1FRElBVEUpLCAocGFyc2VJbnQoYXV0aFRva2VuLmV4cGlyZXNfaW4sIDEwKSAqIDAuNzUpICogMTAwMFxuXG4gIHJlbmRlckF1dGhvcml6YXRpb25EaWFsb2c6IC0+XG4gICAgKEdvb2dsZURyaXZlQXV0aG9yaXphdGlvbkRpYWxvZyB7cHJvdmlkZXI6IEB9KVxuXG4gIHJlbmRlclVzZXI6IC0+XG4gICAgaWYgQHVzZXJcbiAgICAgIChzcGFuIHt9LCAoc3BhbiB7Y2xhc3NOYW1lOiAnZ2RyaXZlLWljb24nfSksIEB1c2VyLm5hbWUpXG4gICAgZWxzZVxuICAgICAgbnVsbFxuXG4gIHNhdmU6ICAoY29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfbG9hZGVkR0FQSSA9PlxuICAgICAgaWYgQHVzZVJlYWxUaW1lQVBJXG4gICAgICAgIEBfc2F2ZVJlYWxUaW1lRmlsZSBjb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2tcbiAgICAgIGVsc2VcbiAgICAgICAgQF9zYXZlRmlsZSBjb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2tcblxuICBsb2FkOiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfbG9hZGVkR0FQSSA9PlxuICAgICAgaWYgQHVzZVJlYWxUaW1lQVBJXG4gICAgICAgIEBfbG9hZE9yQ3JlYXRlUmVhbFRpbWVGaWxlIG1ldGFkYXRhLCBjYWxsYmFja1xuICAgICAgZWxzZVxuICAgICAgICBAX2xvYWRGaWxlIG1ldGFkYXRhLCBjYWxsYmFja1xuXG4gIGxpc3Q6IChtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgQF9sb2FkZWRHQVBJID0+XG4gICAgICBtaW1lVHlwZXNRdWVyeSA9IChcIm1pbWVUeXBlID0gJyN7bWltZVR5cGV9J1wiIGZvciBtaW1lVHlwZSBpbiBAcmVhZGFibGVNaW1ldHlwZXMpLmpvaW4gXCIgb3IgXCJcbiAgICAgIHJlcXVlc3QgPSBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5saXN0XG4gICAgICAgIHE6IHF1ZXJ5ID0gXCJ0cmFzaGVkID0gZmFsc2UgYW5kICgje21pbWVUeXBlc1F1ZXJ5fSBvciBtaW1lVHlwZSA9ICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZm9sZGVyJykgYW5kICcje2lmIG1ldGFkYXRhIHRoZW4gbWV0YWRhdGEucHJvdmlkZXJEYXRhLmlkIGVsc2UgJ3Jvb3QnfScgaW4gcGFyZW50c1wiXG4gICAgICByZXF1ZXN0LmV4ZWN1dGUgKHJlc3VsdCkgPT5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKEBfYXBpRXJyb3IocmVzdWx0LCAnVW5hYmxlIHRvIGxpc3QgZmlsZXMnKSkgaWYgbm90IHJlc3VsdCBvciByZXN1bHQuZXJyb3JcbiAgICAgICAgbGlzdCA9IFtdXG4gICAgICAgIGZvciBpdGVtIGluIHJlc3VsdD8uaXRlbXNcbiAgICAgICAgICB0eXBlID0gaWYgaXRlbS5taW1lVHlwZSBpcyAnYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmZvbGRlcicgdGhlbiBDbG91ZE1ldGFkYXRhLkZvbGRlciBlbHNlIENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgICAgIGlmIHR5cGUgaXMgQ2xvdWRNZXRhZGF0YS5Gb2xkZXIgb3IgQG1hdGNoZXNFeHRlbnNpb24gaXRlbS50aXRsZVxuICAgICAgICAgICAgbGlzdC5wdXNoIG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICAgICAgICAgIG5hbWU6IGl0ZW0udGl0bGVcbiAgICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgICAgICBwYXJlbnQ6IG1ldGFkYXRhXG4gICAgICAgICAgICAgIG92ZXJ3cml0YWJsZTogaXRlbS5lZGl0YWJsZVxuICAgICAgICAgICAgICBwcm92aWRlcjogQFxuICAgICAgICAgICAgICBwcm92aWRlckRhdGE6XG4gICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWRcbiAgICAgICAgbGlzdC5zb3J0IChhLCBiKSAtPlxuICAgICAgICAgIGxvd2VyQSA9IGEubmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgbG93ZXJCID0gYi5uYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICByZXR1cm4gLTEgaWYgbG93ZXJBIDwgbG93ZXJCXG4gICAgICAgICAgcmV0dXJuIDEgaWYgbG93ZXJBID4gbG93ZXJCXG4gICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgY2FsbGJhY2sgbnVsbCwgbGlzdFxuXG4gIHJlbW92ZTogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBAX2xvYWRlZEdBUEkgLT5cbiAgICAgIHJlcXVlc3QgPSBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5kZWxldGVcbiAgICAgICAgZmlsZUlkOiBtZXRhZGF0YS5wcm92aWRlckRhdGEuaWRcbiAgICAgIHJlcXVlc3QuZXhlY3V0ZSAocmVzdWx0KSAtPlxuICAgICAgICBjYWxsYmFjaz8gcmVzdWx0Py5lcnJvciBvciBudWxsXG5cbiAgcmVuYW1lOiAobWV0YWRhdGEsIG5ld05hbWUsIGNhbGxiYWNrKSAtPlxuICAgIEBfbG9hZGVkR0FQSSAtPlxuICAgICAgcmVxdWVzdCA9IGdhcGkuY2xpZW50LmRyaXZlLmZpbGVzLnBhdGNoXG4gICAgICAgIGZpbGVJZDogbWV0YWRhdGEucHJvdmlkZXJEYXRhLmlkXG4gICAgICAgIHJlc291cmNlOlxuICAgICAgICAgIHRpdGxlOiBDbG91ZE1ldGFkYXRhLndpdGhFeHRlbnNpb24gbmV3TmFtZVxuICAgICAgcmVxdWVzdC5leGVjdXRlIChyZXN1bHQpIC0+XG4gICAgICAgIGlmIHJlc3VsdD8uZXJyb3JcbiAgICAgICAgICBjYWxsYmFjaz8gcmVzdWx0LmVycm9yXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBtZXRhZGF0YS5yZW5hbWUgbmV3TmFtZVxuICAgICAgICAgIGNhbGxiYWNrIG51bGwsIG1ldGFkYXRhXG5cbiAgY2xvc2U6IChtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgaWYgbWV0YWRhdGEucHJvdmlkZXJEYXRhPy5yZWFsVGltZT8uZG9jP1xuICAgICAgbWV0YWRhdGEucHJvdmlkZXJEYXRhLnJlYWxUaW1lLmRvYy5jbG9zZSgpXG5cbiAgY2FuT3BlblNhdmVkOiAtPiB0cnVlXG5cbiAgb3BlblNhdmVkOiAob3BlblNhdmVkUGFyYW1zLCBjYWxsYmFjaykgLT5cbiAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgIHByb3ZpZGVyOiBAXG4gICAgICBwcm92aWRlckRhdGE6XG4gICAgICAgIGlkOiBvcGVuU2F2ZWRQYXJhbXNcbiAgICBAbG9hZCBtZXRhZGF0YSwgKGVyciwgY29udGVudCkgLT5cbiAgICAgIGNhbGxiYWNrIGVyciwgY29udGVudCwgbWV0YWRhdGFcblxuICBnZXRPcGVuU2F2ZWRQYXJhbXM6IChtZXRhZGF0YSkgLT5cbiAgICBtZXRhZGF0YS5wcm92aWRlckRhdGEuaWRcblxuICBpc0F1dGhvcml6YXRpb25SZXF1aXJlZDogLT5cbiAgICB0cnVlXG5cbiAgX2xvYWRHQVBJOiAtPlxuICAgIGlmIG5vdCB3aW5kb3cuX0xvYWRpbmdHQVBJXG4gICAgICB3aW5kb3cuX0xvYWRpbmdHQVBJID0gdHJ1ZVxuICAgICAgd2luZG93Ll9HQVBJT25Mb2FkID0gPT5cbiAgICAgICAgd2luZG93Ll9Mb2FkZWRHQVBJID0gdHJ1ZVxuICAgICAgICAjIHByZWxvYWQgY2xpZW50cyB0byBhdm9pZCB1c2VyIGRlbGF5IGxhdGVyXG4gICAgICAgIEBfbG9hZGVkR0FQSSAtPlxuICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnc2NyaXB0J1xuICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQuanM/b25sb2FkPV9HQVBJT25Mb2FkJ1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCBzY3JpcHRcblxuICBfbG9hZGVkR0FQSTogKGNhbGxiYWNrKSAtPlxuICAgIGlmIHdpbmRvdy5fTG9hZGVkR0FQSUNsaWVudHNcbiAgICAgIGNhbGxiYWNrKClcbiAgICBlbHNlXG4gICAgICBzZWxmID0gQFxuICAgICAgY2hlY2sgPSAtPlxuICAgICAgICBpZiB3aW5kb3cuX0xvYWRlZEdBUElcbiAgICAgICAgICBnYXBpLmNsaWVudC5sb2FkICdkcml2ZScsICd2MicsIC0+XG4gICAgICAgICAgICBnYXBpLmNsaWVudC5sb2FkICdvYXV0aDInLCAndjInLCAtPlxuICAgICAgICAgICAgICBnYXBpLmxvYWQgJ2RyaXZlLXJlYWx0aW1lJywgLT5cbiAgICAgICAgICAgICAgICB3aW5kb3cuX0xvYWRlZEdBUElDbGllbnRzID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwgc2VsZlxuICAgICAgICBlbHNlXG4gICAgICAgICAgc2V0VGltZW91dCBjaGVjaywgMTBcbiAgICAgIHNldFRpbWVvdXQgY2hlY2ssIDEwXG5cbiAgX2xvYWRGaWxlOiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIHJlcXVlc3QgPSBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5nZXRcbiAgICAgIGZpbGVJZDogbWV0YWRhdGEucHJvdmlkZXJEYXRhLmlkXG4gICAgcmVxdWVzdC5leGVjdXRlIChmaWxlKSA9PlxuICAgICAgaWYgZmlsZT8uZG93bmxvYWRVcmxcbiAgICAgICAgbWV0YWRhdGEucmVuYW1lIGZpbGUudGl0bGVcbiAgICAgICAgbWV0YWRhdGEub3ZlcndyaXRhYmxlID0gZmlsZS5lZGl0YWJsZVxuICAgICAgICBtZXRhZGF0YS5wcm92aWRlckRhdGEgPSBpZDogZmlsZS5pZFxuICAgICAgICBpZiBub3QgbWV0YWRhdGEucGFyZW50PyBhbmQgZmlsZS5wYXJlbnRzPy5sZW5ndGggPiAwXG4gICAgICAgICAgbWV0YWRhdGEucGFyZW50ID0gbmV3IENsb3VkTWV0YWRhdGFcbiAgICAgICAgICAgIHR5cGU6IENsb3VkTWV0YWRhdGEuRm9sZGVyXG4gICAgICAgICAgICBwcm92aWRlcjogQFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhOlxuICAgICAgICAgICAgICBpZDogZmlsZS5wYXJlbnRzWzBdLmlkXG4gICAgICAgIHVybCA9IGZpbGUuZG93bmxvYWRVcmxcbiAgICAgICAgIyB1c2UgYWNjZXNzX3Rva2VuIGFzIHF1ZXJ5IHBhcmFtZXRlciBpbnN0ZWFkIG9mIGhlYWRlciB0byBhdm9pZCBDT1JTIHJlcXVlc3Qgd2hpY2ggYnJlYWtzIGluIElFIDExXG4gICAgICAgIHVybCArPSBcIiN7aWYgdXJsLmluZGV4T2YoXCI/XCIpIGlzIC0xIHRoZW4gXCI/XCIgZWxzZSBcIiZcIn1hY2Nlc3NfdG9rZW49I3tlbmNvZGVVUklDb21wb25lbnQoQGF1dGhUb2tlbi5hY2Nlc3NfdG9rZW4pfVwiXG4gICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgIHhoci5vcGVuICdHRVQnLCB1cmxcbiAgICAgICAgeGhyLm9ubG9hZCA9IC0+XG4gICAgICAgICAgY2FsbGJhY2sgbnVsbCwgY2xvdWRDb250ZW50RmFjdG9yeS5jcmVhdGVFbnZlbG9wZWRDbG91ZENvbnRlbnQgeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICB4aHIub25lcnJvciA9IC0+XG4gICAgICAgICAgY2FsbGJhY2sgXCJVbmFibGUgdG8gZG93bmxvYWQgZmlsZSBjb250ZW50XCJcbiAgICAgICAgeGhyLnNlbmQoKVxuICAgICAgZWxzZVxuICAgICAgICBjYWxsYmFjayBAX2FwaUVycm9yIGZpbGUsICdVbmFibGUgdG8gZ2V0IGRvd25sb2FkIHVybCdcblxuICBfc2F2ZUZpbGU6IChjb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgYm91bmRhcnkgPSAnLS0tLS0tLTMxNDE1OTI2NTM1ODk3OTMyMzg0NidcbiAgICBtaW1lVHlwZSA9IG1ldGFkYXRhLm1pbWVUeXBlIG9yIEBtaW1lVHlwZVxuICAgIGhlYWRlciA9IEpTT04uc3RyaW5naWZ5XG4gICAgICB0aXRsZTogbWV0YWRhdGEuZmlsZW5hbWVcbiAgICAgIG1pbWVUeXBlOiBtaW1lVHlwZVxuICAgICAgcGFyZW50czogW3tpZDogaWYgbWV0YWRhdGEucGFyZW50Py5wcm92aWRlckRhdGE/LmlkPyB0aGVuIG1ldGFkYXRhLnBhcmVudC5wcm92aWRlckRhdGEuaWQgZWxzZSAncm9vdCd9XVxuXG4gICAgW21ldGhvZCwgcGF0aF0gPSBpZiBtZXRhZGF0YS5wcm92aWRlckRhdGE/LmlkXG4gICAgICBbJ1BVVCcsIFwiL3VwbG9hZC9kcml2ZS92Mi9maWxlcy8je21ldGFkYXRhLnByb3ZpZGVyRGF0YS5pZH1cIl1cbiAgICBlbHNlXG4gICAgICBbJ1BPU1QnLCAnL3VwbG9hZC9kcml2ZS92Mi9maWxlcyddXG5cbiAgICB0cmFuc2ZlckVuY29kaW5nID0gXCJcIlxuICAgIGlmIG1pbWVUeXBlLmluZGV4T2YoXCJpbWFnZS9cIikgaXMgMFxuICAgICAgIyBhc3N1bWUgd2UncmUgdHJhbnNmZXJpbmcgYW55IGltYWdlcyBhcyBiYXNlNjRcbiAgICAgIHRyYW5zZmVyRW5jb2RpbmcgPSBcIlxcclxcbkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IGJhc2U2NFwiXG5cbiAgICBib2R5ID0gW1xuICAgICAgXCJcXHJcXG4tLSN7Ym91bmRhcnl9XFxyXFxuQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXFxyXFxuXFxyXFxuI3toZWFkZXJ9XCIsXG4gICAgICBcIlxcclxcbi0tI3tib3VuZGFyeX1cXHJcXG5Db250ZW50LVR5cGU6ICN7bWltZVR5cGV9I3t0cmFuc2ZlckVuY29kaW5nfVxcclxcblxcclxcbiN7Y29udGVudC5nZXRDb250ZW50QXNKU09OPygpIG9yIGNvbnRlbnR9XCIsXG4gICAgICBcIlxcclxcbi0tI3tib3VuZGFyeX0tLVwiXG4gICAgXS5qb2luICcnXG5cbiAgICByZXF1ZXN0ID0gZ2FwaS5jbGllbnQucmVxdWVzdFxuICAgICAgcGF0aDogcGF0aFxuICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAgIHBhcmFtczoge3VwbG9hZFR5cGU6ICdtdWx0aXBhcnQnfVxuICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L3JlbGF0ZWQ7IGJvdW5kYXJ5PVwiJyArIGJvdW5kYXJ5ICsgJ1wiJ31cbiAgICAgIGJvZHk6IGJvZHlcblxuICAgIHJlcXVlc3QuZXhlY3V0ZSAoZmlsZSkgPT5cbiAgICAgIGlmIGNhbGxiYWNrXG4gICAgICAgIGlmIGZpbGU/LmVycm9yXG4gICAgICAgICAgY2FsbGJhY2sgXCJVbmFibGVkIHRvIHVwbG9hZCBmaWxlOiAje2ZpbGUuZXJyb3IubWVzc2FnZX1cIlxuICAgICAgICBlbHNlIGlmIGZpbGVcbiAgICAgICAgICBtZXRhZGF0YS5wcm92aWRlckRhdGEgPSBpZDogZmlsZS5pZFxuICAgICAgICAgIGNhbGxiYWNrIG51bGwsIGZpbGVcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGNhbGxiYWNrIEBfYXBpRXJyb3IgZmlsZSwgJ1VuYWJsZWQgdG8gdXBsb2FkIGZpbGUnXG5cbiAgX2xvYWRPckNyZWF0ZVJlYWxUaW1lRmlsZTogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBzZWxmID0gQFxuICAgIGZpbGVMb2FkZWQgPSAoZG9jKSAtPlxuICAgICAgY29udGVudCA9IGRvYy5nZXRNb2RlbCgpLmdldFJvb3QoKS5nZXQgJ2NvbnRlbnQnXG4gICAgICBpZiBtZXRhZGF0YS5vdmVyd3JpdGFibGVcbiAgICAgICAgdGhyb3dFcnJvciA9IChlKSAtPlxuICAgICAgICAgIGlmIG5vdCBlLmlzTG9jYWwgYW5kIGUuc2Vzc2lvbklkIGlzbnQgbWV0YWRhdGEucHJvdmlkZXJEYXRhLnJlYWxUaW1lLnNlc3Npb25JZFxuICAgICAgICAgICAgc2VsZi5jbGllbnQuc2hvd0Jsb2NraW5nTW9kYWxcbiAgICAgICAgICAgICAgdGl0bGU6ICdDb25jdXJyZW50IEVkaXQgTG9jaydcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ0FuIGVkaXQgd2FzIG1hZGUgdG8gdGhpcyBmaWxlIGZyb20gYW5vdGhlciBicm93c2VyIHdpbmRvdy4gVGhpcyBhcHAgaXMgbm93IGxvY2tlZCBmb3IgaW5wdXQuJ1xuICAgICAgICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIgZ2FwaS5kcml2ZS5yZWFsdGltZS5FdmVudFR5cGUuVEVYVF9JTlNFUlRFRCwgdGhyb3dFcnJvclxuICAgICAgICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIgZ2FwaS5kcml2ZS5yZWFsdGltZS5FdmVudFR5cGUuVEVYVF9ERUxFVEVELCB0aHJvd0Vycm9yXG4gICAgICBmb3IgY29sbGFib3JhdG9yIGluIGRvYy5nZXRDb2xsYWJvcmF0b3JzKClcbiAgICAgICAgc2Vzc2lvbklkID0gY29sbGFib3JhdG9yLnNlc3Npb25JZCBpZiBjb2xsYWJvcmF0b3IuaXNNZVxuICAgICAgbWV0YWRhdGEucHJvdmlkZXJEYXRhLnJlYWxUaW1lID1cbiAgICAgICAgZG9jOiBkb2NcbiAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZFxuICAgICAgY2FsbGJhY2sgbnVsbCwgY2xvdWRDb250ZW50RmFjdG9yeS5jcmVhdGVFbnZlbG9wZWRDbG91ZENvbnRlbnQgY29udGVudC5nZXRUZXh0KClcblxuICAgIGluaXQgPSAobW9kZWwpIC0+XG4gICAgICBjb250ZW50ID0gbW9kZWwuY3JlYXRlU3RyaW5nICcnXG4gICAgICBtb2RlbC5nZXRSb290KCkuc2V0ICdjb250ZW50JywgY29udGVudFxuXG4gICAgZXJyb3IgPSAoZXJyKSA9PlxuICAgICAgaWYgZXJyLnR5cGUgaXMgJ1RPS0VOX1JFRlJFU0hfUkVRVUlSRUQnXG4gICAgICAgIEBhdXRob3JpemUgR29vZ2xlRHJpdmVQcm92aWRlci5JTU1FRElBVEVcbiAgICAgIGVsc2VcbiAgICAgICAgQGNsaWVudC5hbGVydCBlcnIubWVzc2FnZVxuXG4gICAgaWYgbWV0YWRhdGEucHJvdmlkZXJEYXRhPy5pZFxuICAgICAgcmVxdWVzdCA9IGdhcGkuY2xpZW50LmRyaXZlLmZpbGVzLmdldFxuICAgICAgICBmaWxlSWQ6IG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5pZFxuICAgIGVsc2VcbiAgICAgIHJlcXVlc3QgPSBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5pbnNlcnRcbiAgICAgICAgdGl0bGU6IG1ldGFkYXRhLmZpbGVuYW1lXG4gICAgICAgIG1pbWVUeXBlOiBAbWltZVR5cGVcbiAgICAgICAgcGFyZW50czogW3tpZDogaWYgbWV0YWRhdGEucGFyZW50Py5wcm92aWRlckRhdGE/LmlkPyB0aGVuIG1ldGFkYXRhLnBhcmVudC5wcm92aWRlckRhdGEuaWQgZWxzZSAncm9vdCd9XVxuXG4gICAgcmVxdWVzdC5leGVjdXRlIChmaWxlKSA9PlxuICAgICAgaWYgZmlsZT8uaWRcbiAgICAgICAgbWV0YWRhdGEucmVuYW1lIGZpbGUudGl0bGVcbiAgICAgICAgbWV0YWRhdGEub3ZlcndyaXRhYmxlID0gZmlsZS5lZGl0YWJsZVxuICAgICAgICBtZXRhZGF0YS5wcm92aWRlckRhdGEgPSBpZDogZmlsZS5pZFxuICAgICAgICBnYXBpLmRyaXZlLnJlYWx0aW1lLmxvYWQgZmlsZS5pZCwgZmlsZUxvYWRlZCwgaW5pdCwgZXJyb3JcbiAgICAgIGVsc2VcbiAgICAgICAgY2FsbGJhY2sgQF9hcGlFcnJvciBmaWxlLCAnVW5hYmxlIHRvIGxvYWQgZmlsZSdcblxuICBfc2F2ZVJlYWxUaW1lRmlsZTogKGNvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBpZiBtZXRhZGF0YS5wcm92aWRlckRhdGE/Lm1vZGVsXG4gICAgICBAX2RpZmZBbmRVcGRhdGVSZWFsVGltZU1vZGVsIGNvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFja1xuICAgIGVsc2VcbiAgICAgIEBfbG9hZE9yQ3JlYXRlUmVhbFRpbWVGaWxlIG1ldGFkYXRhLCAoZXJyKSA9PlxuICAgICAgICByZXR1cm4gY2FsbGJhY2sgZXJyIGlmIGVyclxuICAgICAgICBAX2RpZmZBbmRVcGRhdGVSZWFsVGltZU1vZGVsIGNvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFja1xuXG4gIF9kaWZmQW5kVXBkYXRlUmVhbFRpbWVNb2RlbDogKGNvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBpbmRleCA9IDBcbiAgICByZWFsVGltZUNvbnRlbnQgPSBtZXRhZGF0YS5wcm92aWRlckRhdGEucmVhbFRpbWUuY29udGVudFxuICAgIGRpZmZzID0ganNkaWZmLmRpZmZDaGFycyByZWFsVGltZUNvbnRlbnQuZ2V0VGV4dCgpLCBjb250ZW50LmdldENvbnRlbnRBc0pTT04oKVxuICAgIGZvciBkaWZmIGluIGRpZmZzXG4gICAgICBpZiBkaWZmLnJlbW92ZWRcbiAgICAgICAgcmVhbFRpbWVDb250ZW50LnJlbW92ZVJhbmdlIGluZGV4LCBpbmRleCArIGRpZmYudmFsdWUubGVuZ3RoXG4gICAgICBlbHNlXG4gICAgICAgIGlmIGRpZmYuYWRkZWRcbiAgICAgICAgICByZWFsVGltZUNvbnRlbnQuaW5zZXJ0U3RyaW5nIGluZGV4LCBkaWZmLnZhbHVlXG4gICAgICAgIGluZGV4ICs9IGRpZmYuY291bnRcbiAgICBjYWxsYmFjayBudWxsXG5cbiAgX2FwaUVycm9yOiAocmVzdWx0LCBwcmVmaXgpIC0+XG4gICAgaWYgcmVzdWx0Py5tZXNzYWdlP1xuICAgICAgXCIje3ByZWZpeH06ICN7cmVzdWx0Lm1lc3NhZ2V9XCJcbiAgICBlbHNlXG4gICAgICBwcmVmaXhcblxubW9kdWxlLmV4cG9ydHMgPSBHb29nbGVEcml2ZVByb3ZpZGVyXG4iLCJQcm92aWRlckludGVyZmFjZSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLlByb3ZpZGVySW50ZXJmYWNlXG5jbG91ZENvbnRlbnRGYWN0b3J5ID0gKHJlcXVpcmUgJy4vcHJvdmlkZXItaW50ZXJmYWNlJykuY2xvdWRDb250ZW50RmFjdG9yeVxuQ2xvdWRNZXRhZGF0YSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLkNsb3VkTWV0YWRhdGFcbkRvY3VtZW50U3RvcmVVcmwgPSByZXF1aXJlICcuL2RvY3VtZW50LXN0b3JlLXVybCdcblBhdGNoYWJsZUNvbnRlbnQgPSByZXF1aXJlICcuL3BhdGNoYWJsZS1jb250ZW50J1xuZ2V0UXVlcnlQYXJhbSA9IHJlcXVpcmUgJy4uL3V0aWxzL2dldC1xdWVyeS1wYXJhbSdcbmJhc2U2NCA9IChyZXF1aXJlICdqcy1iYXNlNjQnKS5CYXNlNjRcbnBha28gPSByZXF1aXJlICdwYWtvJ1xuXG4jIFRoaXMgcHJvdmlkZXIgc3VwcG9ydHMgdGhlIGxhcmE6Li4uIHByb3RvY29sIHVzZWQgZm9yIGRvY3VtZW50cyBsYXVuY2hlZFxuIyBmcm9tIExBUkEuIEl0IGxvb2tzIHVwIHRoZSBkb2N1bWVudCBJRCBhbmQgYWNjZXNzIGtleXMgZnJvbSB0aGUgTEFSQVxuIyBpbnRlcmFjdGl2ZSBydW4gc3RhdGUgYW5kIHRoZW4gdXNlcyB0aGUgVjIgRG9jU3RvcmUgQVBJIHRvIHJlYWQvd3JpdGVcbiMgZG9jdW1lbnRzIGZyb20gdGhlIENvbmNvcmQgRG9jdW1lbnQgU3RvcmUuIEl0IGRvZXMgbm90IHN1cHBvcnQgYXJiaXRyYXJ5XG4jIG9wZW5pbmcvc2F2aW5nIG9mIGRvY3VtZW50cyBhbmQgc28gc2hvdWxkIG5vdCBhcHBlYXIgaW4gdGhlIGxpc3Qgb2ZcbiMgcGxhY2VzIHVzZXJzIGNhbiBjaG9vc2UgdG8gb3Blbi9zYXZlIGZpbGVzIGxpa2UgR29vZ2xlIERyaXZlIGRvZXMuXG5cbmNsYXNzIExhcmFQcm92aWRlciBleHRlbmRzIFByb3ZpZGVySW50ZXJmYWNlXG5cbiAgQE5hbWU6ICdsYXJhJ1xuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSwgQGNsaWVudCkgLT5cbiAgICBzdXBlclxuICAgICAgbmFtZTogTGFyYVByb3ZpZGVyLk5hbWVcbiAgICAgIGNhcGFiaWxpdGllczpcbiAgICAgICAgc2F2ZTogdHJ1ZVxuICAgICAgICByZXNhdmU6IHRydWVcbiAgICAgICAgZXhwb3J0OiBmYWxzZVxuICAgICAgICBsb2FkOiB0cnVlXG4gICAgICAgIGxpc3Q6IGZhbHNlXG4gICAgICAgIHJlbW92ZTogZmFsc2VcbiAgICAgICAgcmVuYW1lOiBmYWxzZVxuICAgICAgICBjbG9zZTogZmFsc2VcblxuICAgIEB1cmxQYXJhbXMgPSB7XG4gICAgICBkb2N1bWVudFNlcnZlcjogZ2V0UXVlcnlQYXJhbSBcImRvY3VtZW50U2VydmVyXCJcbiAgICAgIGxhdW5jaEZyb21MYXJhOiBnZXRRdWVyeVBhcmFtIFwibGF1bmNoRnJvbUxhcmFcIlxuICAgIH1cbiAgICBAcmVtb3ZhYmxlUXVlcnlQYXJhbXMgPSBbJ2xhdW5jaEZyb21MYXJhJywgJ3J1bkFzR3Vlc3QnXVxuXG4gICAgQGxhcmFQYXJhbXMgPSBpZiBAdXJsUGFyYW1zLmxhdW5jaEZyb21MYXJhIHRoZW4gQGRlY29kZVBhcmFtcyhAdXJsUGFyYW1zLmxhdW5jaEZyb21MYXJhKSBlbHNlIG51bGxcbiAgICBAb3BlblNhdmVkUGFyYW1zID0gbnVsbFxuICAgIEBjb2xsYWJvcmF0b3JVcmxzID0gW11cblxuICAgIEBkb2NTdG9yZVVybCA9IG5ldyBEb2N1bWVudFN0b3JlVXJsIEB1cmxQYXJhbXMuZG9jdW1lbnRTZXJ2ZXJcblxuICAgIEBzYXZlZENvbnRlbnQgPSBuZXcgUGF0Y2hhYmxlQ29udGVudChAb3B0aW9ucy5wYXRjaE9iamVjdEhhc2gpXG5cbiAgZW5jb2RlUGFyYW1zOiAocGFyYW1zKSAtPlxuICAgIGJhc2U2NC5lbmNvZGVVUkkoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSlcblxuICBkZWNvZGVQYXJhbXM6IChwYXJhbXMpIC0+XG4gICAgdHJ5XG4gICAgICBkZWNvZGVkID0gSlNPTi5wYXJzZShiYXNlNjQuZGVjb2RlKHBhcmFtcykpXG4gICAgY2F0Y2ggZVxuICAgICAgZGVjb2RlZCA9IG51bGxcbiAgICBkZWNvZGVkXG5cbiAgaGFuZGxlVXJsUGFyYW1zOiAtPlxuICAgIGlmIEBsYXJhUGFyYW1zXG4gICAgICBAY2xpZW50Lm9wZW5Qcm92aWRlckZpbGUgQG5hbWUsIEBsYXJhUGFyYW1zXG4gICAgICB0cnVlICMgc2lnbmFsIHRoYXQgdGhlIHByb3ZpZGVyIGlzIGhhbmRsaW5nIHRoZSBwYXJhbXNcbiAgICBlbHNlXG4gICAgICBmYWxzZVxuXG4gIGxvZ0xhcmFEYXRhOiAobGFyYURhdGEpIC0+XG4gICAgbGFyYURhdGEuY29sbGFib3JhdG9yVXJscyA9IEBjb2xsYWJvcmF0b3JVcmxzIGlmIEBjb2xsYWJvcmF0b3JVcmxzPy5sZW5ndGhcbiAgICBAb3B0aW9ucy5sb2dMYXJhRGF0YSBsYXJhRGF0YSBpZiBAb3B0aW9ucy5sb2dMYXJhRGF0YVxuICAgIEBjbGllbnQubG9nICdsb2dMYXJhRGF0YScsIGxhcmFEYXRhXG5cbiAgIyBkb24ndCBzaG93IGluIHByb3ZpZGVyIG9wZW4vc2F2ZSBkaWFsb2dzXG4gIGZpbHRlclRhYkNvbXBvbmVudDogKGNhcGFiaWxpdHksIGRlZmF1bHRDb21wb25lbnQpIC0+XG4gICAgbnVsbFxuXG4gIGV4dHJhY3RSYXdEYXRhRnJvbVJ1blN0YXRlOiAocnVuU3RhdGUpIC0+XG4gICAgcmF3RGF0YSA9IHJ1blN0YXRlPy5yYXdfZGF0YSBvciB7fVxuICAgIGlmIHR5cGVvZiByYXdEYXRhIGlzIFwic3RyaW5nXCJcbiAgICAgIHRyeVxuICAgICAgICByYXdEYXRhID0gSlNPTi5wYXJzZShyYXdEYXRhKVxuICAgICAgY2F0Y2ggZVxuICAgICAgICByYXdEYXRhID0ge31cbiAgICByYXdEYXRhXG5cbiAgY2FuOiAoY2FwYWJpbGl0eSwgbWV0YWRhdGEpIC0+XG4gICAgaGFzUmVhZE9ubHlBY2Nlc3MgPSBtZXRhZGF0YT8ucHJvdmlkZXJEYXRhPy5hY2Nlc3NLZXlzPy5yZWFkT25seT8gYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBub3QgbWV0YWRhdGE/LnByb3ZpZGVyRGF0YT8uYWNjZXNzS2V5cz8ucmVhZFdyaXRlP1xuICAgIHJlcXVpcmVzV3JpdGVBY2Nlc3MgPSBbJ3NhdmUnLCAncmVzYXZlJywgJ3JlbW92ZScsICdyZW5hbWUnXS5pbmRleE9mKGNhcGFiaWxpdHkpID49IDBcbiAgICBzdXBlcihjYXBhYmlsaXR5LCBtZXRhZGF0YSkgYW5kIG5vdCAocmVxdWlyZXNXcml0ZUFjY2VzcyBhbmQgaGFzUmVhZE9ubHlBY2Nlc3MpXG5cbiAgbG9hZDogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICB7bWV0aG9kLCB1cmx9ID0gQGRvY1N0b3JlVXJsLnYyTG9hZERvY3VtZW50KG1ldGFkYXRhLnByb3ZpZGVyRGF0YT8ucmVjb3JkaWQpXG5cbiAgICBpZiBtZXRhZGF0YS5wcm92aWRlckRhdGE/LmFjY2Vzc0tleXM/LnJlYWRPbmx5XG4gICAgICBhY2Nlc3NLZXkgPSAnUk86OicgKyBtZXRhZGF0YS5wcm92aWRlckRhdGEuYWNjZXNzS2V5cy5yZWFkT25seVxuICAgIGVsc2UgaWYgbWV0YWRhdGEucHJvdmlkZXJEYXRhPy5hY2Nlc3NLZXlzPy5yZWFkV3JpdGVcbiAgICAgIGFjY2Vzc0tleSA9ICdSVzo6JyArIG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5hY2Nlc3NLZXlzLnJlYWRXcml0ZVxuXG4gICAgJC5hamF4XG4gICAgICB0eXBlOiBtZXRob2RcbiAgICAgIHVybDogdXJsXG4gICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICBkYXRhOlxuICAgICAgICBhY2Nlc3NLZXk6IGFjY2Vzc0tleVxuICAgICAgY29udGV4dDogQFxuXG4gICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgQGxvZ0xhcmFEYXRhIHtcbiAgICAgICAgICBvcGVyYXRpb246ICdvcGVuJ1xuICAgICAgICAgIGRvY3VtZW50SUQ6IG1ldGFkYXRhLnByb3ZpZGVyRGF0YT8ucmVjb3JkaWRcbiAgICAgICAgICBkb2N1bWVudFVybDogdXJsXG4gICAgICAgIH1cbiAgICAgICAgY29udGVudCA9IGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50IGRhdGFcblxuICAgICAgICAjIGZvciBkb2N1bWVudHMgbG9hZGVkIGJ5IGlkIG9yIG90aGVyIG1lYW5zIChiZXNpZGVzIG5hbWUpLFxuICAgICAgICAjIGNhcHR1cmUgdGhlIG5hbWUgZm9yIHVzZSBpbiB0aGUgQ0ZNIGludGVyZmFjZS5cbiAgICAgICAgIyAnZG9jTmFtZScgYXQgdGhlIHRvcCBsZXZlbCBmb3IgQ0ZNLXdyYXBwZWQgZG9jdW1lbnRzXG4gICAgICAgICMgJ25hbWUnIGF0IHRoZSB0b3AgbGV2ZWwgZm9yIHVud3JhcHBlZCBkb2N1bWVudHMgKGUuZy4gQ09EQVApXG4gICAgICAgICMgJ25hbWUnIGF0IHRoZSB0b3AgbGV2ZWwgb2YgJ2NvbnRlbnQnIGZvciB3cmFwcGVkIENPREFQIGRvY3VtZW50c1xuICAgICAgICBtZXRhZGF0YS5yZW5hbWUgbWV0YWRhdGEubmFtZSBvciBkYXRhLmRvY05hbWUgb3IgZGF0YS5uYW1lIG9yIGRhdGEuY29udGVudD8ubmFtZVxuICAgICAgICBpZiBtZXRhZGF0YS5uYW1lXG4gICAgICAgICAgY29udGVudC5hZGRNZXRhZGF0YSBkb2NOYW1lOiBtZXRhZGF0YS5maWxlbmFtZVxuXG4gICAgICAgIGNhbGxiYWNrIG51bGwsIGNvbnRlbnRcblxuICAgICAgZXJyb3I6IChqcVhIUikgLT5cbiAgICAgICAgY2FsbGJhY2sgXCJVbmFibGUgdG8gbG9hZCAje21ldGFkYXRhLm5hbWUgb3IgbWV0YWRhdGEucHJvdmlkZXJEYXRhPy5yZWNvcmRpZCBvciAnZmlsZSd9XCJcblxuICBzYXZlOiAoY2xvdWRDb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2ssIGRpc2FibGVQYXRjaCkgLT5cbiAgICBjb250ZW50ID0gY2xvdWRDb250ZW50LmdldENvbnRlbnQoKVxuXG4gICAgIyBTZWUgaWYgd2UgY2FuIHBhdGNoXG4gICAgY2FuUGF0Y2ggPSBAb3B0aW9ucy5wYXRjaCBhbmQgbWV0YWRhdGEub3ZlcndyaXRhYmxlIGFuZCBub3QgZGlzYWJsZVBhdGNoXG4gICAgcGF0Y2hSZXN1bHRzID0gQHNhdmVkQ29udGVudC5jcmVhdGVQYXRjaChjb250ZW50LCBjYW5QYXRjaClcblxuICAgIGlmIHBhdGNoUmVzdWx0cy5zaG91bGRQYXRjaCBhbmQgbm90IHBhdGNoUmVzdWx0cy5kaWZmTGVuZ3RoXG4gICAgICAjIG5vIHJlYXNvbiB0byBwYXRjaCBpZiB0aGVyZSBhcmUgbm8gZGlmZnNcbiAgICAgIGNhbGxiYWNrIG51bGwgIyBubyBlcnJvciBpbmRpY2F0ZXMgc3VjY2Vzc1xuICAgICAgcmV0dXJuXG5cbiAgICBwYXJhbXMgPSB7fVxuICAgIGlmIG5vdCBwYXRjaFJlc3VsdHMuc2hvdWxkUGF0Y2ggYW5kIG1ldGFkYXRhLmZpbGVuYW1lXG4gICAgICBwYXJhbXMucmVjb3JkbmFtZSA9IG1ldGFkYXRhLmZpbGVuYW1lXG5cbiAgICBpZiAobWV0YWRhdGE/LnByb3ZpZGVyRGF0YT8uYWNjZXNzS2V5cz8ucmVhZFdyaXRlPylcbiAgICAgIHBhcmFtcy5hY2Nlc3NLZXkgPSAnUlc6OicgKyBtZXRhZGF0YS5wcm92aWRlckRhdGEuYWNjZXNzS2V5cy5yZWFkV3JpdGVcblxuICAgIHttZXRob2QsIHVybH0gPSBpZiBwYXRjaFJlc3VsdHMuc2hvdWxkUGF0Y2ggXFxcbiAgICAgICAgICAgICAgICAgICAgICB0aGVuIEBkb2NTdG9yZVVybC52MlBhdGNoRG9jdW1lbnQobWV0YWRhdGEucHJvdmlkZXJEYXRhLnJlY29yZGlkLCBwYXJhbXMpIFxcXG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBAZG9jU3RvcmVVcmwudjJTYXZlRG9jdW1lbnQobWV0YWRhdGEucHJvdmlkZXJEYXRhLnJlY29yZGlkLCBwYXJhbXMpXG5cbiAgICBsb2dEYXRhID1cbiAgICAgIG9wZXJhdGlvbjogJ3NhdmUnXG4gICAgICBwcm92aWRlcjogJ0xhcmFQcm92aWRlcidcbiAgICAgIHNob3VsZFBhdGNoOiBwYXRjaFJlc3VsdHMuc2hvdWxkUGF0Y2hcbiAgICAgIG1ldGhvZDogbWV0aG9kXG4gICAgICAjIGVsaWRlIGFsbCBidXQgZmlyc3QgdHdvIGNoYXJzIG9mIGFjY2Vzc0tleVxuICAgICAgdXJsOiB1cmwuc3Vic3RyKDAsIHVybC5pbmRleE9mKCdhY2Nlc3NLZXknKSArIDE2KSArICcuLi4nXG4gICAgICBwYXJhbXM6IEpTT04uc3RyaW5naWZ5KHsgcmVjb3JkbmFtZTogcGFyYW1zLnJlY29yZG5hbWUgfSlcbiAgICAgIGNvbnRlbnQ6IHBhdGNoUmVzdWx0cy5zZW5kQ29udGVudC5zdWJzdHIoMCwgNTEyKVxuICAgIEBjbGllbnQubG9nICdzYXZlJywgbG9nRGF0YVxuXG4gICAgJC5hamF4XG4gICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICB0eXBlOiBtZXRob2RcbiAgICAgIHVybDogdXJsXG4gICAgICBkYXRhOiBwYWtvLmRlZmxhdGUgcGF0Y2hSZXN1bHRzLnNlbmRDb250ZW50XG4gICAgICBjb250ZW50VHlwZTogcGF0Y2hSZXN1bHRzLm1pbWVUeXBlXG4gICAgICBwcm9jZXNzRGF0YTogZmFsc2VcbiAgICAgIGJlZm9yZVNlbmQ6ICh4aHIpIC0+XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LUVuY29kaW5nJywgJ2RlZmxhdGUnKVxuICAgICAgY29udGV4dDogQFxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIEBzYXZlZENvbnRlbnQudXBkYXRlQ29udGVudChpZiBAb3B0aW9ucy5wYXRjaCB0aGVuIF8uY2xvbmVEZWVwKGNvbnRlbnQpIGVsc2UgbnVsbClcbiAgICAgICAgaWYgZGF0YS5yZWNvcmRpZCB0aGVuIG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5yZWNvcmRpZCA9IGRhdGEucmVjb3JkaWRcblxuICAgICAgICBjYWxsYmFjayBudWxsLCBkYXRhXG5cbiAgICAgIGVycm9yOiAoanFYSFIpIC0+XG4gICAgICAgICMgaWYgcGF0Y2ggZmFpbHMsIHRyeSBhIGZ1bGwgc2F2ZVxuICAgICAgICBpZiBwYXRjaFJlc3VsdHMuc2hvdWxkUGF0Y2hcbiAgICAgICAgICBAc2F2ZShjbG91ZENvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFjaywgdHJ1ZSlcbiAgICAgICAgIyBpZiBmdWxsIHNhdmUgZmFpbHMsIHJldHVybiBlcnJvciBtZXNzYWdlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0cnlcbiAgICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IEpTT04ucGFyc2UganFYSFIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgICBpZiByZXNwb25zZUpzb24ubWVzc2FnZSBpcyAnZXJyb3IuZHVwbGljYXRlJ1xuICAgICAgICAgICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byBjcmVhdGUgI3ttZXRhZGF0YS5uYW1lfS4gRmlsZSBhbHJlYWR5IGV4aXN0cy5cIlxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byBzYXZlICN7bWV0YWRhdGEubmFtZX06IFsje3Jlc3BvbnNlSnNvbi5tZXNzYWdlfV1cIlxuICAgICAgICAgIGNhdGNoXG4gICAgICAgICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byBzYXZlICN7bWV0YWRhdGEubmFtZX1cIlxuXG4gIGNhbk9wZW5TYXZlZDogLT4gdHJ1ZVxuXG4gIG9wZW5TYXZlZDogKG9wZW5TYXZlZFBhcmFtcywgY2FsbGJhY2spIC0+XG4gICAgbWV0YWRhdGEgPSBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgdHlwZTogQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICBwcm92aWRlcjogQFxuXG4gICAgaWYgdHlwZW9mIG9wZW5TYXZlZFBhcmFtcyBpcyBcInN0cmluZ1wiXG4gICAgICBvcGVuU2F2ZWRQYXJhbXMgPSBAZGVjb2RlUGFyYW1zIG9wZW5TYXZlZFBhcmFtc1xuXG4gICAgQG9wZW5TYXZlZFBhcmFtcyA9IG9wZW5TYXZlZFBhcmFtc1xuICAgIEBjb2xsYWJvcmF0b3JVcmxzID0gaWYgb3BlblNhdmVkUGFyYW1zPy5jb2xsYWJvcmF0b3JVcmxzPy5sZW5ndGggPiAwIHRoZW4gb3BlblNhdmVkUGFyYW1zLmNvbGxhYm9yYXRvclVybHMgZWxzZSBbXVxuXG4gICAgbG9hZFByb3ZpZGVyRmlsZSA9IChwcm92aWRlckRhdGEsIGNhbGxiYWNrKSA9PlxuICAgICAgbWV0YWRhdGEucHJvdmlkZXJEYXRhID0gcHJvdmlkZXJEYXRhXG4gICAgICBAbG9hZCBtZXRhZGF0YSwgKGVyciwgY29udGVudCkgPT5cbiAgICAgICAgQGNsaWVudC5yZW1vdmVRdWVyeVBhcmFtcyBAcmVtb3ZhYmxlUXVlcnlQYXJhbXNcbiAgICAgICAgY2FsbGJhY2sgZXJyLCBjb250ZW50LCBtZXRhZGF0YVxuXG4gICAgI1xuICAgICMgaWYgd2UgaGF2ZSBhIGRvY3VtZW50IElEIHdlIGNhbiBqdXN0IGxvYWQgdGhlIGRvY3VtZW50XG4gICAgI1xuICAgIHJldHVybiBsb2FkUHJvdmlkZXJGaWxlIG9wZW5TYXZlZFBhcmFtcywgY2FsbGJhY2sgaWYgb3BlblNhdmVkUGFyYW1zPy5yZWNvcmRpZFxuXG4gICAgI1xuICAgICMgUHJvY2VzcyB0aGUgaW5pdGlhbCBydW4gc3RhdGUgcmVzcG9uc2VcbiAgICAjXG4gICAgcHJvY2Vzc0luaXRpYWxSdW5TdGF0ZSA9IChydW5TdGF0ZVVybCwgc291cmNlSUQsIHJlYWRPbmx5S2V5LCBydW5TdGF0ZSkgPT5cbiAgICAgIGV4aXN0aW5nUnVuU3RhdGUgPSBAZXh0cmFjdFJhd0RhdGFGcm9tUnVuU3RhdGUgcnVuU3RhdGVcbiAgICAgIGRvY1N0b3JlID0gZXhpc3RpbmdSdW5TdGF0ZS5kb2NTdG9yZVxuXG4gICAgICBoYXZlQ29sbGFib3JhdG9ycyA9IEBjb2xsYWJvcmF0b3JVcmxzLmxlbmd0aCA+IDBcblxuICAgICAgdXBkYXRlSW50ZXJhY3RpdmVSdW5TdGF0ZXMgPSAodXJscywgbmV3RG9jU3RvcmUsIGNhbGxiYWNrKSAtPlxuXG4gICAgICAgIG5ld1J1blN0YXRlID0gXy5jbG9uZURlZXAgZXhpc3RpbmdSdW5TdGF0ZVxuICAgICAgICBuZXdSdW5TdGF0ZS5kb2NTdG9yZSA9IG5ld0RvY1N0b3JlXG5cbiAgICAgICAgcmF3RGF0YSA9IEpTT04uc3RyaW5naWZ5KG5ld1J1blN0YXRlKVxuICAgICAgICBsZWFybmVyVXJsID0gaWYgbmV3UnVuU3RhdGUubGVhcm5lcl91cmw/IGFuZCB0eXBlb2YgbmV3UnVuU3RhdGUubGVhcm5lcl91cmwgaXMgXCJzdHJpbmdcIiB0aGVuIG5ld1J1blN0YXRlLmxlYXJuZXJfdXJsIGVsc2UgbnVsbFxuICAgICAgICBsZWFybmVyUGFyYW0gPSBpZiBsZWFybmVyVXJsIHRoZW4gXCImbGVhcm5lcl91cmw9I3tlbmNvZGVVUklDb21wb25lbnQobGVhcm5lclVybCl9XCIgZWxzZSBcIlwiXG5cbiAgICAgICAgdXBkYXRlUnVuU3RhdGUgPSAodXJsLCBkb25lKSAtPlxuICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAnUFVUJ1xuICAgICAgICAgICAgdXJsOiBcIiN7dXJsfT9yYXdfZGF0YT0je2VuY29kZVVSSUNvbXBvbmVudChyYXdEYXRhKX0je2xlYXJuZXJQYXJhbX1cIlxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICAgICAgeGhyRmllbGRzOlxuICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5kb25lIChkYXRhLCBzdGF0dXMsIGpxWEhSKSAtPlxuICAgICAgICAgICAgaWYgZGF0YT8uc3VjY2VzcyBpcyBmYWxzZVxuICAgICAgICAgICAgICBkb25lKFwiQ291bGQgbm90IG9wZW4gdGhlIHNwZWNpZmllZCBkb2N1bWVudCBiZWNhdXNlIGFuIGVycm9yIG9jY3VycmVkIFt1cGRhdGVTdGF0ZV0gKCN7ZGF0YS5tZXNzYWdlfSlcIilcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgZG9uZShudWxsKVxuICAgICAgICAgIC5mYWlsIChqcVhIUiwgc3RhdHVzLCBlcnJvcikgLT5cbiAgICAgICAgICAgIGRvbmUoXCJDb3VsZCBub3Qgb3BlbiB0aGUgc3BlY2lmaWVkIGRvY3VtZW50IGJlY2F1c2UgYW4gZXJyb3Igb2NjdXJyZWQgW3VwZGF0ZVN0YXRlXVwiKVxuXG4gICAgICAgIHVybFF1ZXVlID0gdXJscy5zbGljZSgpXG4gICAgICAgIHByb2Nlc3NRdWV1ZSA9IC0+XG4gICAgICAgICAgaWYgdXJsUXVldWUubGVuZ3RoIGlzIDBcbiAgICAgICAgICAgIGNhbGxiYWNrIG51bGxcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB1cmwgPSB1cmxRdWV1ZS5zaGlmdCgpXG4gICAgICAgICAgICB1cGRhdGVSdW5TdGF0ZSB1cmwsIChlcnIpIC0+XG4gICAgICAgICAgICAgIGlmIGVyclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrIGVyclxuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKClcbiAgICAgICAgcHJvY2Vzc1F1ZXVlKClcblxuICAgICAgcHJvY2Vzc0NyZWF0ZVJlc3BvbnNlID0gKGNyZWF0ZVJlc3BvbnNlKSA9PlxuICAgICAgICBkb2NTdG9yZSA9XG4gICAgICAgICAgcmVjb3JkaWQ6IGNyZWF0ZVJlc3BvbnNlLmlkXG4gICAgICAgICAgYWNjZXNzS2V5czpcbiAgICAgICAgICAgIHJlYWRPbmx5OiBjcmVhdGVSZXNwb25zZS5yZWFkQWNjZXNzS2V5XG4gICAgICAgICAgICByZWFkV3JpdGU6IGNyZWF0ZVJlc3BvbnNlLnJlYWRXcml0ZUFjY2Vzc0tleVxuXG4gICAgICAgIGNvZGFwVXJsID0gaWYgd2luZG93LmxvY2F0aW9uLm9yaWdpbiBcXFxuICAgICAgICAgICAgICAgICAgICB0aGVuIFwiI3t3aW5kb3cubG9jYXRpb24ub3JpZ2lufSN7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfVwiIFxcXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgXCIje3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyN7d2luZG93LmxvY2F0aW9uLmhvc3R9I3t3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9XCJcbiAgICAgICAgcmVwb3J0VXJsTGFyYVBhcmFtcyA9XG4gICAgICAgICAgcmVjb3JkaWQ6IGNyZWF0ZVJlc3BvbnNlLmlkXG4gICAgICAgICAgYWNjZXNzS2V5czpcbiAgICAgICAgICAgIHJlYWRPbmx5OiBjcmVhdGVSZXNwb25zZS5yZWFkQWNjZXNzS2V5XG4gICAgICAgIGVuY29kZWRMYXJhUGFyYW1zID0gQGVuY29kZVBhcmFtcyByZXBvcnRVcmxMYXJhUGFyYW1zXG4gICAgICAgIGV4aXN0aW5nUnVuU3RhdGUubGFyYV9vcHRpb25zID89IHt9XG4gICAgICAgIGV4aXN0aW5nUnVuU3RhdGUubGFyYV9vcHRpb25zLnJlcG9ydGluZ191cmwgPSBcIiN7Y29kYXBVcmx9P2xhdW5jaEZyb21MYXJhPSN7ZW5jb2RlZExhcmFQYXJhbXN9XCJcblxuICAgICAgIyBDaGVjayBpZiB3ZSBoYXZlIGEgZG9jdW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcnVuIHN0YXRlIGFscmVhZHkgKDJhKSBvciBub3QgKDJiKVxuICAgICAgaWYgZG9jU3RvcmU/LnJlY29yZGlkPyBhbmQgKGRvY1N0b3JlLmFjY2Vzc0tleXM/LnJlYWRPbmx5PyBvciBkb2NTdG9yZS5hY2Nlc3NLZXlzPy5yZWFkV3JpdGU/KVxuXG4gICAgICAgIGNsb25lRG9jID0gKGNhbGxiYWNrKSA9PlxuICAgICAgICAgIGNyZWF0ZVBhcmFtcyA9XG4gICAgICAgICAgICBzb3VyY2U6IGRvY1N0b3JlLnJlY29yZGlkXG4gICAgICAgICAgICBhY2Nlc3NLZXk6IFwiUk86OiN7ZG9jU3RvcmUuYWNjZXNzS2V5cy5yZWFkT25seX1cIlxuICAgICAgICAgIHttZXRob2QsIHVybH0gPSBAZG9jU3RvcmVVcmwudjJDcmVhdGVEb2N1bWVudChjcmVhdGVQYXJhbXMpXG4gICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6IG1ldGhvZFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZG9uZSAoY3JlYXRlUmVzcG9uc2UsIHN0YXR1cywganFYSFIpID0+XG4gICAgICAgICAgICBsYXJhRGF0YSA9IHtcbiAgICAgICAgICAgICAgb3BlcmF0aW9uOiAnY2xvbmUnXG4gICAgICAgICAgICAgIGRvY3VtZW50SUQ6IGRvY1N0b3JlLnJlY29yZGlkXG4gICAgICAgICAgICAgIGRvY3VtZW50VXJsOiB1cmxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhcmFEYXRhLnJ1bl9yZW1vdGVfZW5kcG9pbnQgPSBleGlzdGluZ1J1blN0YXRlLnJ1bl9yZW1vdGVfZW5kcG9pbnQgaWYgZXhpc3RpbmdSdW5TdGF0ZT8ucnVuX3JlbW90ZV9lbmRwb2ludD9cbiAgICAgICAgICAgIEBsb2dMYXJhRGF0YSBsYXJhRGF0YVxuICAgICAgICAgICAgcHJvY2Vzc0NyZWF0ZVJlc3BvbnNlIGNyZWF0ZVJlc3BvbnNlXG4gICAgICAgICAgICBjYWxsYmFjayBudWxsXG4gICAgICAgICAgLmZhaWwgKGpxWEhSLCBzdGF0dXMsIGVycm9yKSAtPlxuICAgICAgICAgICAgY2FsbGJhY2sgXCJDb3VsZCBub3Qgb3BlbiB0aGUgc3BlY2lmaWVkIGRvY3VtZW50IGJlY2F1c2UgYW4gZXJyb3Igb2NjdXJyZWQgW2NyZWF0ZUNvcHldXCJcblxuICAgICAgICBzZXRGb2xsb3dlcnMgPSAoZXJyLCBjYWxsYmFjaykgPT5cbiAgICAgICAgICBpZiBlcnJcbiAgICAgICAgICAgIGNhbGxiYWNrIGVyclxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbGxhYm9yYXRvclBhcmFtcyA9IF8uY2xvbmVEZWVwIGRvY1N0b3JlXG4gICAgICAgICAgICBjb2xsYWJvcmF0b3JQYXJhbXMuY29sbGFib3JhdG9yID0gJ2ZvbGxvd2VyJ1xuICAgICAgICAgICAgdXBkYXRlSW50ZXJhY3RpdmVSdW5TdGF0ZXMgQGNvbGxhYm9yYXRvclVybHMsIGNvbGxhYm9yYXRvclBhcmFtcywgY2FsbGJhY2tcblxuICAgICAgICBiZWNvbWVMZWFkZXIgPSAoZXJyLCBjYWxsYmFjaykgLT5cbiAgICAgICAgICBpZiBlcnJcbiAgICAgICAgICAgIGNhbGxiYWNrIGVyclxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRvY1N0b3JlLmNvbGxhYm9yYXRvciA9ICdsZWFkZXInXG4gICAgICAgICAgICB1cGRhdGVJbnRlcmFjdGl2ZVJ1blN0YXRlcyBbcnVuU3RhdGVVcmxdLCBkb2NTdG9yZSwgY2FsbGJhY2tcblxuICAgICAgICByZW1vdmVDb2xsYWJvcmF0b3IgPSAoZXJyLCBjYWxsYmFjaykgLT5cbiAgICAgICAgICBpZiBlcnJcbiAgICAgICAgICAgIGNhbGxiYWNrIGVyclxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBkb2NTdG9yZS5jb2xsYWJvcmF0b3JcbiAgICAgICAgICAgIHVwZGF0ZUludGVyYWN0aXZlUnVuU3RhdGVzIFtydW5TdGF0ZVVybF0sIGRvY1N0b3JlLCBjYWxsYmFja1xuXG4gICAgICAgIGZpbmlzaGVkID0gKGVycikgLT5cbiAgICAgICAgICBpZiBlcnJcbiAgICAgICAgICAgIGNhbGxiYWNrIGVyclxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxvYWRQcm92aWRlckZpbGUgXy5jbG9uZURlZXAoZG9jU3RvcmUpLCBjYWxsYmFja1xuXG4gICAgICAgICMgaXMgdGhpcyBhbiBleGlzdGluZyBjb2xsYWJvcmF0ZWQgZG9jdW1lbnQ/XG4gICAgICAgIGlmIGRvY1N0b3JlLmNvbGxhYm9yYXRvclxuICAgICAgICAgIGlmIGRvY1N0b3JlLmNvbGxhYm9yYXRvciBpcyAnbGVhZGVyJ1xuICAgICAgICAgICAgaWYgaGF2ZUNvbGxhYm9yYXRvcnNcbiAgICAgICAgICAgICAgIyB0aGUgY3VycmVudCB1c2VyIGlzIHN0aWxsIHRoZSBsZWFkZXIgc28gdXBkYXRlIHRoZSBjb2xsYWJvcmF0b3Igc3RhdGVzIHRvIGZvbGxvdyB0aGUgbGVhZGVyIChpbiBjYXNlIHRoZXJlIGFyZSBuZXcgY29sbGFib3JhdG9ycykgYW5kIGxvYWQgdGhlIGV4aXN0aW5nIGRvY3VtZW50XG4gICAgICAgICAgICAgIHJldHVybiBzZXRGb2xsb3dlcnMgbnVsbCwgZmluaXNoZWRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgIyB0aGUgY3VycmVudCB1c2VyIGhhcyBnb25lIGZyb20gbGVhZGVyIHRvIHNvbG8gbW9kZSBzbyBjbG9uZSB0aGUgZG9jdW1lbnQgdG8gcHJlc2VydmUgdGhlIGNvbGxhYm9yYXRlZCBkb2N1bWVudCBhbmQgdXBkYXRlIHRoZSBydW4gc3RhdGUgdG8gcmVtb3ZlIGNvbGxhYm9yYXRvclxuICAgICAgICAgICAgICByZXR1cm4gY2xvbmVEb2MgKGVycikgLT4gcmVtb3ZlQ29sbGFib3JhdG9yKGVyciwgZmluaXNoZWQpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgaWYgaGF2ZUNvbGxhYm9yYXRvcnNcbiAgICAgICAgICAgICAgIyB0aGUgY3VycmVudCB1c2VyIGhhcyBzd2l0Y2hlZCBmcm9tIGZvbGxvd2VyIHRvIGxlYWRlciBzbyBjbG9uZSB0aGUgZXhpc3RpbmcgbGVhZGVyIGRvY3VtZW50LCBiZWNvbWUgdGhlIG5ldyBsZWFkZXIgYW5kIHVwZGF0ZSB0aGUgZm9sbG93ZXJzIGFuZCBsb2FkIHRoZSBuZXcgZG9jdW1lbnRcbiAgICAgICAgICAgICAgcmV0dXJuIGNsb25lRG9jIChlcnIpIC0+IGJlY29tZUxlYWRlcihlcnIsICgoZXJyKSAtPiBzZXRGb2xsb3dlcnMoZXJyLCBmaW5pc2hlZCkpKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAjIHRoZSBjdXJyZW50IHVzZXIgaGFzIHN3aXRjaGVkIGZyb20gZm9sbG93ZXIgdG8gc29sbyBtb2RlIHNvIGNsb25lIHRoZSBleGlzdGluZyBsZWFkZXIgZG9jdW1lbnQsIHVwZGF0ZSB0aGUgcnVuIHN0YXRlIHRvIHJlbW92ZSB0aGUgY29sbGFib3JhdG9yIGFuZCBsb2FkIHRoZSBuZXcgZG9jdW1lbnRcbiAgICAgICAgICAgICAgcmV0dXJuIGNsb25lRG9jIChlcnIpIC0+IHJlbW92ZUNvbGxhYm9yYXRvcihlcnIsIGZpbmlzaGVkKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgaWYgaGF2ZUNvbGxhYm9yYXRvcnNcbiAgICAgICAgICAgICMgdGhlIGN1cnJlbnQgdXNlciBoYXMgc3dpdGNoZWQgZnJvbSBzb2xvIG1vZGUgdG8gbGVhZGVyIHNvIHVwZGF0ZSBib3RoIHRoZSB1c2VyJ3MgYW5kIHRoZSBjb2xsYWJvcmF0b3JzIHJ1biBzdGF0ZXMgdXNpbmcgdGhlIGV4aXN0aW5nIGRvY3VtZW50XG4gICAgICAgICAgICByZXR1cm4gYmVjb21lTGVhZGVyIG51bGwsIChlcnIpIC0+IHNldEZvbGxvd2VycyhlcnIsIGZpbmlzaGVkKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICMgdGhlIGN1cnJlbnQgdXNlciBoYXMgb3BlbmVkIGFuIGV4aXN0aW5nIHNvbG8gbW9kZSBmaWxlIHNvIGp1c3Qgb3BlbiBpdFxuICAgICAgICAgICAgcmV0dXJuIGZpbmlzaGVkKClcblxuICAgICAgIyB3ZSBuZWVkIGEgc291cmNlSUQgdG8gYmUgYWJsZSB0byBjcmVhdGUgYSBjb3B5XG4gICAgICBpZiBub3Qgc291cmNlSURcbiAgICAgICAgY2FsbGJhY2sgXCJDb3VsZCBub3Qgb3BlbiB0aGUgc3BlY2lmaWVkIGRvY3VtZW50IGJlY2F1c2UgYW4gZXJyb3Igb2NjdXJyZWQgW25vU291cmNlXVwiXG4gICAgICAgIHJldHVyblxuXG4gICAgICAjICgyYikgcmVxdWVzdCBhIGNvcHkgb2YgdGhlIHNoYXJlZCBkb2N1bWVudFxuICAgICAgY3JlYXRlUGFyYW1zID0geyBzb3VyY2U6IHNvdXJjZUlEIH1cbiAgICAgICMgYWRkIGEga2V5IGlmIGdpdmVuIChmb3IgY29weWluZyBsaW5rZWQgcnVuIHN0YXRlcylcbiAgICAgIGlmIHJlYWRPbmx5S2V5XG4gICAgICAgIGNyZWF0ZVBhcmFtcy5hY2Nlc3NLZXkgPSBcIlJPOjoje3JlYWRPbmx5S2V5fVwiXG4gICAgICB7bWV0aG9kLCB1cmx9ID0gQGRvY1N0b3JlVXJsLnYyQ3JlYXRlRG9jdW1lbnQoY3JlYXRlUGFyYW1zKVxuICAgICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogbWV0aG9kXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICB9KVxuICAgICAgLmRvbmUgKGNyZWF0ZVJlc3BvbnNlLCBzdGF0dXMsIGpxWEhSKSA9PlxuXG4gICAgICAgIHByb2Nlc3NDcmVhdGVSZXNwb25zZSBjcmVhdGVSZXNwb25zZVxuICAgICAgICBpZiBoYXZlQ29sbGFib3JhdG9yc1xuICAgICAgICAgIGRvY1N0b3JlLmNvbGxhYm9yYXRvciA9ICdsZWFkZXInXG5cbiAgICAgICAgcHJvdmlkZXJEYXRhID0gXy5tZXJnZSh7fSwgZG9jU3RvcmUsIHsgdXJsOiBydW5TdGF0ZVVybCB9KVxuICAgICAgICB1cGRhdGVGaW5pc2hlZCA9IC0+IGxvYWRQcm92aWRlckZpbGUgcHJvdmlkZXJEYXRhLCBjYWxsYmFja1xuXG4gICAgICAgICMgdXBkYXRlIHRoZSBvd25lcnMgaW50ZXJhY3RpdmUgcnVuIHN0YXRlXG4gICAgICAgIHVwZGF0ZUludGVyYWN0aXZlUnVuU3RhdGVzIFtydW5TdGF0ZVVybF0sIGRvY1N0b3JlLCAoZXJyKSA9PlxuICAgICAgICAgIGlmIGVyclxuICAgICAgICAgICAgY2FsbGJhY2sgZXJyXG4gICAgICAgICAgZWxzZSBpZiBoYXZlQ29sbGFib3JhdG9yc1xuICAgICAgICAgICAgZG9jU3RvcmUuY29sbGFib3JhdG9yID0gJ2ZvbGxvd2VyJ1xuICAgICAgICAgICAgdXBkYXRlSW50ZXJhY3RpdmVSdW5TdGF0ZXMgQGNvbGxhYm9yYXRvclVybHMsIGRvY1N0b3JlLCAoZXJyKSAtPlxuICAgICAgICAgICAgICBpZiBlcnJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayBlcnJcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHVwZGF0ZUZpbmlzaGVkKClcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB1cGRhdGVGaW5pc2hlZCgpXG5cbiAgICAgIC5mYWlsIChqcVhIUiwgc3RhdHVzLCBlcnJvcikgLT5cbiAgICAgICAgY2FsbGJhY2sgXCJDb3VsZCBub3Qgb3BlbiB0aGUgc3BlY2lmaWVkIGRvY3VtZW50IGJlY2F1c2UgYW4gZXJyb3Igb2NjdXJyZWQgW2NyZWF0ZUNvcHldXCJcblxuICAgICNcbiAgICAjIFdlIGhhdmUgYSBydW4gc3RhdGUgVVJMIGFuZCBhIHNvdXJjZSBkb2N1bWVudC4gV2UgbXVzdCBjb3B5IHRoZSBzb3VyY2VcbiAgICAjIGRvY3VtZW50IGFuZCB1cGRhdGUgdGhlIHJ1biBzdGF0ZSBiZWZvcmUgb3BlbmluZyB0aGUgY29waWVkIGRvY3VtZW50LlxuICAgICNcbiAgICBpZiBvcGVuU2F2ZWRQYXJhbXMgYW5kIG9wZW5TYXZlZFBhcmFtcy51cmxcbiAgICAgICMgKDEpIHJlcXVlc3QgdGhlIGludGVyYWN0aXZlIHJ1biBzdGF0ZVxuICAgICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogJ0dFVCdcbiAgICAgICAgdXJsOiBvcGVuU2F2ZWRQYXJhbXMudXJsXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbidcbiAgICAgICAgeGhyRmllbGRzOlxuICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgfSlcbiAgICAgIC5kb25lIChkYXRhLCBzdGF0dXMsIGpxWEhSKSA9PlxuICAgICAgICBsYXJhRGF0YSA9IHtcbiAgICAgICAgICBvcGVyYXRpb246ICdvcGVuJ1xuICAgICAgICAgIHJ1blN0YXRlVXJsOiBvcGVuU2F2ZWRQYXJhbXMudXJsXG4gICAgICAgICAgZG9jdW1lbnRJRDogb3BlblNhdmVkUGFyYW1zLnNvdXJjZVxuICAgICAgICB9XG4gICAgICAgIGxhcmFEYXRhLnJ1bl9yZW1vdGVfZW5kcG9pbnQgPSBkYXRhLnJ1bl9yZW1vdGVfZW5kcG9pbnQgaWYgZGF0YT8ucnVuX3JlbW90ZV9lbmRwb2ludD9cbiAgICAgICAgQGxvZ0xhcmFEYXRhIGxhcmFEYXRhXG4gICAgICAgIHByb2Nlc3NJbml0aWFsUnVuU3RhdGUgb3BlblNhdmVkUGFyYW1zLnVybCwgb3BlblNhdmVkUGFyYW1zLnNvdXJjZSwgb3BlblNhdmVkUGFyYW1zLnJlYWRPbmx5S2V5LCBkYXRhXG4gICAgICAuZmFpbCAoanFYSFIsIHN0YXR1cywgZXJyb3IpIC0+XG4gICAgICAgIGNhbGxiYWNrIFwiQ291bGQgbm90IG9wZW4gdGhlIHNwZWNpZmllZCBkb2N1bWVudCBiZWNhdXNlIGFuIGVycm9yIG9jY3VycmVkIFtnZXRTdGF0ZV1cIlxuXG4gICAgICByZXR1cm5cblxuICAgIGNhbGxiYWNrIFwiQ2Fubm90IG9wZW4gdGhlIHNwZWNpZmllZCBkb2N1bWVudFwiXG5cbiAgZ2V0T3BlblNhdmVkUGFyYW1zOiAobWV0YWRhdGEpIC0+XG4gICAgcGFyYW1zID0gaWYgQG9wZW5TYXZlZFBhcmFtc1xuICAgICAgQG9wZW5TYXZlZFBhcmFtc1xuICAgIGVsc2UgaWYgQGxhcmFQYXJhbXNcbiAgICAgIHVybDogQGxhcmFQYXJhbXMudXJsXG4gICAgICBzb3VyY2U6IEBsYXJhUGFyYW1zLnNvdXJjZVxuICAgIGVsc2VcbiAgICAgIG1ldGFkYXRhXG4gICAgQGVuY29kZVBhcmFtcyBwYXJhbXNcblxubW9kdWxlLmV4cG9ydHMgPSBMYXJhUHJvdmlkZXJcbiIsIntkaXYsIGlucHV0LCBidXR0b259ID0gUmVhY3QuRE9NXG50ciA9IHJlcXVpcmUgJy4uL3V0aWxzL3RyYW5zbGF0ZSdcblxuUHJvdmlkZXJJbnRlcmZhY2UgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5Qcm92aWRlckludGVyZmFjZVxuY2xvdWRDb250ZW50RmFjdG9yeSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLmNsb3VkQ29udGVudEZhY3RvcnlcbkxvY2FsRmlsZUxpc3RUYWIgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4uL3ZpZXdzL2xvY2FsLWZpbGUtdGFiLWxpc3QtdmlldydcbkxvY2FsRmlsZVNhdmVUYWIgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4uL3ZpZXdzL2xvY2FsLWZpbGUtdGFiLXNhdmUtdmlldydcblxuY2xhc3MgTG9jYWxGaWxlUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckludGVyZmFjZVxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSwgQGNsaWVudCkgLT5cbiAgICBzdXBlclxuICAgICAgbmFtZTogTG9jYWxGaWxlUHJvdmlkZXIuTmFtZVxuICAgICAgZGlzcGxheU5hbWU6IEBvcHRpb25zLmRpc3BsYXlOYW1lIG9yICh0ciAnflBST1ZJREVSLkxPQ0FMX0ZJTEUnKVxuICAgICAgY2FwYWJpbGl0aWVzOlxuICAgICAgICBzYXZlOiB0cnVlXG4gICAgICAgIHJlc2F2ZTogZmFsc2VcbiAgICAgICAgZXhwb3J0OiB0cnVlXG4gICAgICAgIGxvYWQ6IHRydWVcbiAgICAgICAgbGlzdDogdHJ1ZVxuICAgICAgICByZW1vdmU6IGZhbHNlXG4gICAgICAgIHJlbmFtZTogZmFsc2VcbiAgICAgICAgY2xvc2U6IGZhbHNlXG5cbiAgQE5hbWU6ICdsb2NhbEZpbGUnXG5cbiAgZmlsdGVyVGFiQ29tcG9uZW50OiAoY2FwYWJpbGl0eSwgZGVmYXVsdENvbXBvbmVudCkgLT5cbiAgICBpZiBjYXBhYmlsaXR5IGlzICdsaXN0J1xuICAgICAgTG9jYWxGaWxlTGlzdFRhYlxuICAgIGVsc2UgaWYgKGNhcGFiaWxpdHkgaXMgJ3NhdmUnKSBvciAoY2FwYWJpbGl0eSBpcyAnZXhwb3J0JylcbiAgICAgIExvY2FsRmlsZVNhdmVUYWJcbiAgICBlbHNlXG4gICAgICBkZWZhdWx0Q29tcG9uZW50XG5cbiAgbGlzdDogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICAjIG5vdCByZWFsbHkgaW1wbGVtZW50ZWQgLSB3ZSBmbGFnIGl0IGFzIGltcGxlbWVudGVkIHNvIHdlIHNob3cgaW4gdGhlIGxpc3QgZGlhbG9nXG5cbiAgc2F2ZTogKGNvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICAjIG5vdCByZWFsbHkgaW1wbGVtZW50ZWQgLSB3ZSBmbGFnIGl0IGFzIGltcGxlbWVudGVkIHNvIHdlIGNhbiBhZGQgdGhlIGRvd25sb2FkIGJ1dHRvbiB0byB0aGUgc2F2ZSBkaWFsb2dcbiAgICBjYWxsYmFjaz8gbnVsbFxuXG4gIGxvYWQ6IChtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5vbmxvYWQgPSAobG9hZGVkKSAtPlxuICAgICAgY2FsbGJhY2sgbnVsbCwgY2xvdWRDb250ZW50RmFjdG9yeS5jcmVhdGVFbnZlbG9wZWRDbG91ZENvbnRlbnQgbG9hZGVkLnRhcmdldC5yZXN1bHRcbiAgICByZWFkZXIucmVhZEFzVGV4dCBtZXRhZGF0YS5wcm92aWRlckRhdGEuZmlsZVxuXG4gIGNhbk9wZW5TYXZlZDogLT5cbiAgICAjIHRoaXMgcHJldmVudHMgdGhlIGhhc2ggdG8gYmUgdXBkYXRlZFxuICAgIGZhbHNlXG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxGaWxlUHJvdmlkZXJcbiIsInRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuXG5Qcm92aWRlckludGVyZmFjZSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLlByb3ZpZGVySW50ZXJmYWNlXG5jbG91ZENvbnRlbnRGYWN0b3J5ID0gKHJlcXVpcmUgJy4vcHJvdmlkZXItaW50ZXJmYWNlJykuY2xvdWRDb250ZW50RmFjdG9yeVxuQ2xvdWRNZXRhZGF0YSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLkNsb3VkTWV0YWRhdGFcblxuY2xhc3MgTG9jYWxTdG9yYWdlUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckludGVyZmFjZVxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSwgQGNsaWVudCkgLT5cbiAgICBzdXBlclxuICAgICAgbmFtZTogTG9jYWxTdG9yYWdlUHJvdmlkZXIuTmFtZVxuICAgICAgZGlzcGxheU5hbWU6IEBvcHRpb25zLmRpc3BsYXlOYW1lIG9yICh0ciAnflBST1ZJREVSLkxPQ0FMX1NUT1JBR0UnKVxuICAgICAgdXJsRGlzcGxheU5hbWU6IEBvcHRpb25zLnVybERpc3BsYXlOYW1lXG4gICAgICBjYXBhYmlsaXRpZXM6XG4gICAgICAgIHNhdmU6IHRydWVcbiAgICAgICAgcmVzYXZlOiB0cnVlXG4gICAgICAgIGV4cG9ydDogdHJ1ZVxuICAgICAgICBsb2FkOiB0cnVlXG4gICAgICAgIGxpc3Q6IHRydWVcbiAgICAgICAgcmVtb3ZlOiB0cnVlXG4gICAgICAgIHJlbmFtZTogdHJ1ZVxuICAgICAgICBjbG9zZTogZmFsc2VcblxuICBATmFtZTogJ2xvY2FsU3RvcmFnZSdcbiAgQEF2YWlsYWJsZTogLT5cbiAgICByZXN1bHQgPSB0cnlcbiAgICAgIHRlc3QgPSAnTG9jYWxTdG9yYWdlUHJvdmlkZXI6OmF1dGgnXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0odGVzdCwgdGVzdClcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0KVxuICAgICAgdHJ1ZVxuICAgIGNhdGNoXG4gICAgICBmYWxzZVxuXG4gIHNhdmU6IChjb250ZW50LCBtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgdHJ5XG4gICAgICBmaWxlS2V5ID0gQF9nZXRLZXkobWV0YWRhdGEuZmlsZW5hbWUpXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0gZmlsZUtleSwgKGNvbnRlbnQuZ2V0Q29udGVudEFzSlNPTj8oKSBvciBjb250ZW50KVxuICAgICAgY2FsbGJhY2s/IG51bGxcbiAgICBjYXRjaCBlXG4gICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byBzYXZlOiAje2UubWVzc2FnZX1cIlxuXG4gIGxvYWQ6IChtZXRhZGF0YSwgY2FsbGJhY2spIC0+XG4gICAgdHJ5XG4gICAgICBjb250ZW50ID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtIEBfZ2V0S2V5IG1ldGFkYXRhLmZpbGVuYW1lXG4gICAgICBjYWxsYmFjayBudWxsLCBjbG91ZENvbnRlbnRGYWN0b3J5LmNyZWF0ZUVudmVsb3BlZENsb3VkQ29udGVudCBjb250ZW50XG4gICAgY2F0Y2ggZVxuICAgICAgY2FsbGJhY2sgXCJVbmFibGUgdG8gbG9hZCAnI3ttZXRhZGF0YS5uYW1lfSc6ICN7ZS5tZXNzYWdlfVwiXG5cbiAgbGlzdDogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBsaXN0ID0gW11cbiAgICBwcmVmaXggPSBAX2dldEtleSAobWV0YWRhdGE/LnBhdGgoKSBvciBbXSkuam9pbiAnLydcbiAgICBmb3Igb3duIGtleSBvZiB3aW5kb3cubG9jYWxTdG9yYWdlXG4gICAgICBpZiBrZXkuc3Vic3RyKDAsIHByZWZpeC5sZW5ndGgpIGlzIHByZWZpeFxuICAgICAgICBbZmlsZW5hbWUsIHJlbWFpbmRlci4uLl0gPSBrZXkuc3Vic3RyKHByZWZpeC5sZW5ndGgpLnNwbGl0KCcvJylcbiAgICAgICAgbmFtZSA9IGtleS5zdWJzdHIocHJlZml4Lmxlbmd0aClcbiAgICAgICAgaWYgQG1hdGNoZXNFeHRlbnNpb24gbmFtZVxuICAgICAgICAgIGxpc3QucHVzaCBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICAgICAgdHlwZTogaWYgcmVtYWluZGVyLmxlbmd0aCA+IDAgdGhlbiBDbG91ZE1ldGFkYXRhLkZvbGRlciBlbHNlIENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgICAgICAgcGFyZW50OiBtZXRhZGF0YVxuICAgICAgICAgICAgcHJvdmlkZXI6IEBcbiAgICBjYWxsYmFjayBudWxsLCBsaXN0XG5cbiAgcmVtb3ZlOiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIHRyeVxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtIEBfZ2V0S2V5KG1ldGFkYXRhLmZpbGVuYW1lKVxuICAgICAgY2FsbGJhY2s/IG51bGxcbiAgICBjYXRjaFxuICAgICAgY2FsbGJhY2s/ICdVbmFibGUgdG8gZGVsZXRlJ1xuXG4gIHJlbmFtZTogKG1ldGFkYXRhLCBuZXdOYW1lLCBjYWxsYmFjaykgLT5cbiAgICB0cnlcbiAgICAgIGNvbnRlbnQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0gQF9nZXRLZXkgbWV0YWRhdGEuZmlsZW5hbWVcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSBAX2dldEtleShDbG91ZE1ldGFkYXRhLndpdGhFeHRlbnNpb24gbmV3TmFtZSksIGNvbnRlbnRcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSBAX2dldEtleShtZXRhZGF0YS5maWxlbmFtZSlcbiAgICAgIG1ldGFkYXRhLnJlbmFtZSBuZXdOYW1lXG4gICAgICBjYWxsYmFjayBudWxsLCBtZXRhZGF0YVxuICAgIGNhdGNoXG4gICAgICBjYWxsYmFjaz8gJ1VuYWJsZSB0byByZW5hbWUnXG5cbiAgY2FuT3BlblNhdmVkOiAtPiB0cnVlXG5cbiAgb3BlblNhdmVkOiAob3BlblNhdmVkUGFyYW1zLCBjYWxsYmFjaykgLT5cbiAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICBuYW1lOiBvcGVuU2F2ZWRQYXJhbXNcbiAgICAgIHR5cGU6IENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgcGFyZW50OiBudWxsXG4gICAgICBwcm92aWRlcjogQFxuICAgIEBsb2FkIG1ldGFkYXRhLCAoZXJyLCBjb250ZW50KSAtPlxuICAgICAgY2FsbGJhY2sgZXJyLCBjb250ZW50LCBtZXRhZGF0YVxuXG4gIGdldE9wZW5TYXZlZFBhcmFtczogKG1ldGFkYXRhKSAtPlxuICAgIG1ldGFkYXRhLm5hbWVcblxuICBfZ2V0S2V5OiAobmFtZSA9ICcnKSAtPlxuICAgIFwiY2ZtOjoje25hbWUucmVwbGFjZSAvXFx0L2csICcgJ31cIlxuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsU3RvcmFnZVByb3ZpZGVyXG4iLCIjXG4jIFRoaXMgdXRpbGl0eSBjbGFzcyBzaW1wbGlmaWVzIHdvcmtpbmcgd2l0aCBkb2N1bWVudCBzdG9yZSBVUkxzXG4jXG5cbmppZmYgPSByZXF1aXJlICdqaWZmJ1xuXG5jbGFzcyBQYXRjaGFibGVDb250ZW50XG5cbiAgY29uc3RydWN0b3I6IChAcGF0Y2hPYmplY3RIYXNoLCBAc2F2ZWRDb250ZW50KSAtPlxuXG4gIGNyZWF0ZVBhdGNoOiAoY29udGVudCwgY2FuUGF0Y2gpIC0+XG4gICAgZGlmZiA9IGlmIGNhblBhdGNoIGFuZCBAc2F2ZWRDb250ZW50IHRoZW4gQF9jcmVhdGVEaWZmIEBzYXZlZENvbnRlbnQsIGNvbnRlbnRcbiAgICByZXN1bHQgPVxuICAgICAgc2hvdWxkUGF0Y2g6IGZhbHNlXG4gICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICBjb250ZW50SnNvbjogSlNPTi5zdHJpbmdpZnkgY29udGVudFxuICAgICAgZGlmZkxlbmd0aDogZGlmZiBhbmQgZGlmZi5sZW5ndGhcbiAgICAgIGRpZmZKc29uOiBkaWZmIGFuZCBKU09OLnN0cmluZ2lmeSBkaWZmXG5cbiAgICAjIG9ubHkgcGF0Y2ggaWYgdGhlIGRpZmYgaXMgc21hbGxlciB0aGFuIHNhdmluZyB0aGUgZW50aXJlIGZpbGVcbiAgICAjIGUuZy4gd2hlbiBsYXJnZSBudW1iZXJzIG9mIGNhc2VzIGFyZSBkZWxldGVkIHRoZSBkaWZmIGNhbiBiZSBsYXJnZXJcbiAgICBpZiBjYW5QYXRjaCBhbmQgcmVzdWx0LmRpZmZKc29uPyBhbmQgcmVzdWx0LmRpZmZKc29uLmxlbmd0aCA8IHJlc3VsdC5jb250ZW50SnNvbi5sZW5ndGhcbiAgICAgIHJlc3VsdC5zaG91bGRQYXRjaCA9IHRydWVcbiAgICAgIHJlc3VsdC5zZW5kQ29udGVudCA9IHJlc3VsdC5kaWZmSnNvblxuICAgICAgcmVzdWx0Lm1pbWVUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24tcGF0Y2granNvbidcbiAgICBlbHNlXG4gICAgICByZXN1bHQuc2VuZENvbnRlbnQgPSByZXN1bHQuY29udGVudEpzb25cblxuICAgIHJlc3VsdFxuXG4gIHVwZGF0ZUNvbnRlbnQ6IChjb250ZW50KSAtPlxuICAgIEBzYXZlZENvbnRlbnQgPSBjb250ZW50XG5cbiAgX2NyZWF0ZURpZmY6IChvYmoxLCBvYmoyKSAtPlxuICAgIHRyeVxuICAgICAgb3B0cyA9IHtcbiAgICAgICAgaGFzaDogQHBhdGNoT2JqZWN0SGFzaCBpZiB0eXBlb2YgQHBhdGNoT2JqZWN0SGFzaCBpcyBcImZ1bmN0aW9uXCJcbiAgICAgICAgaW52ZXJ0aWJsZTogZmFsc2UgIyBzbWFsbGVyIHBhdGNoZXMgYXJlIHdvcnRoIG1vcmUgdGhhbiBpbnZlcnRpYmlsaXR5XG4gICAgICB9XG4gICAgICAjIGNsZWFuIG9iamVjdHMgYmVmb3JlIGRpZmZpbmdcbiAgICAgIGNsZWFuZWRPYmoxID0gSlNPTi5wYXJzZSBKU09OLnN0cmluZ2lmeSBvYmoxXG4gICAgICBjbGVhbmVkT2JqMiA9IEpTT04ucGFyc2UgSlNPTi5zdHJpbmdpZnkgb2JqMlxuICAgICAgZGlmZiA9IGppZmYuZGlmZihjbGVhbmVkT2JqMSwgY2xlYW5lZE9iajIsIG9wdHMpXG4gICAgICByZXR1cm4gZGlmZlxuICAgIGNhdGNoXG4gICAgICByZXR1cm4gbnVsbFxuICAgIFxubW9kdWxlLmV4cG9ydHMgPSBQYXRjaGFibGVDb250ZW50XG4iLCJQcm92aWRlckludGVyZmFjZSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLlByb3ZpZGVySW50ZXJmYWNlXG5nZXRRdWVyeVBhcmFtID0gcmVxdWlyZSAnLi4vdXRpbHMvZ2V0LXF1ZXJ5LXBhcmFtJ1xuXG5jbGFzcyBQb3N0TWVzc2FnZVByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJJbnRlcmZhY2VcblxuICBATmFtZTogJ3Bvc3RNZXNzYWdlJ1xuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSwgQGNsaWVudCkgLT5cbiAgICBzdXBlclxuICAgICAgY2FwYWJpbGl0aWVzOlxuICAgICAgICBzYXZlOiBmYWxzZVxuICAgICAgICByZXNhdmU6IGZhbHNlXG4gICAgICAgIGV4cG9ydDogaWYgZ2V0UXVlcnlQYXJhbSBcInNhdmVTZWNvbmRhcnlGaWxlVmlhUG9zdE1lc3NhZ2VcIiB0aGVuICdhdXRvJyBlbHNlIGZhbHNlXG4gICAgICAgIGxvYWQ6IGZhbHNlXG4gICAgICAgIGxpc3Q6IGZhbHNlXG4gICAgICAgIHJlbW92ZTogZmFsc2VcbiAgICAgICAgcmVuYW1lOiBmYWxzZVxuICAgICAgICBjbG9zZTogZmFsc2VcblxuICBjYW5PcGVuU2F2ZWQ6IC0+IGZhbHNlXG5cbiAgc2F2ZUFzRXhwb3J0OiAoY29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2Uoe1xuICAgICAgYWN0aW9uOiBcInNhdmVTZWNvbmRhcnlGaWxlXCIsXG4gICAgICBleHRlbnNpb246IG1ldGFkYXRhLmV4dGVuc2lvbixcbiAgICAgIG1pbWVUeXBlOiBtZXRhZGF0YS5taW1lVHlwZSxcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9LCBcIipcIilcbiAgICBjYWxsYmFjaz8gbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvc3RNZXNzYWdlUHJvdmlkZXJcbiIsIntkaXZ9ID0gUmVhY3QuRE9NXG5cbmlzU3RyaW5nID0gcmVxdWlyZSAnLi4vdXRpbHMvaXMtc3RyaW5nJ1xuXG5jbGFzcyBDbG91ZEZpbGVcbiAgY29uc3RydWN0b3I6IChvcHRpb25zKSAtPlxuICAgIHtAY29udGVudCwgQG1ldGFkYXRhfSA9IG9wdGlvbnNcblxuY2xhc3MgQ2xvdWRNZXRhZGF0YVxuICBjb25zdHJ1Y3RvcjogKG9wdGlvbnMpIC0+XG4gICAge0BuYW1lLCBAdHlwZSwgQGRlc2NyaXB0aW9uLCBAY29udGVudCwgQHVybCwgQHByb3ZpZGVyID0gbnVsbCwgQHBhcmVudCA9IG51bGwsIEBwcm92aWRlckRhdGE9e30sIEBvdmVyd3JpdGFibGUsIEBzaGFyZWRDb250ZW50SWQsIEBzaGFyZWRDb250ZW50U2VjcmV0S2V5LCBAbWltZVR5cGV9ID0gb3B0aW9uc1xuICAgIEBfdXBkYXRlRmlsZW5hbWUoKVxuXG4gIEBGb2xkZXI6ICdmb2xkZXInXG4gIEBGaWxlOiAnZmlsZSdcbiAgQExhYmVsOiAnbGFiZWwnXG5cbiAgQEV4dGVuc2lvbjogbnVsbFxuXG4gIEBtYXBUeXBlVG9DbG91ZE1ldGFkYXRhVHlwZTogKGlUeXBlKSAtPlxuICAgICMgZm9yIG5vdyBtYXBwaW5nIGlzIDEtdG8tMSBkZWZhdWx0aW5nIHRvICdmaWxlJ1xuICAgIGlUeXBlIG9yIEBGaWxlXG5cbiAgQHdpdGhFeHRlbnNpb246IChuYW1lLCBkZWZhdWx0RXh0ZW5zaW9uLCBrZWVwT3JpZ2luYWxFeHRlbnNpb24pIC0+XG4gICAgaWYga2VlcE9yaWdpbmFsRXh0ZW5zaW9uIGFuZCB+bmFtZS5pbmRleE9mKFwiLlwiKVxuICAgICAgcmV0dXJuIG5hbWVcbiAgICBleHRlbnNpb24gPSBDbG91ZE1ldGFkYXRhLkV4dGVuc2lvbiBvciBkZWZhdWx0RXh0ZW5zaW9uXG4gICAgaWYgZXh0ZW5zaW9uXG4gICAgICBAbmV3RXh0ZW5zaW9uIG5hbWUsIGV4dGVuc2lvblxuICAgIGVsc2VcbiAgICAgIG5hbWVcblxuICBAbmV3RXh0ZW5zaW9uOiAobmFtZSwgZXh0ZW5zaW9uKSAtPlxuICAgICMgZHJvcCBsYXN0IGV4dGVuc2lvbiwgaWYgdGhlcmUgaXMgb25lXG4gICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGFzdEluZGV4T2YoJy4nKSkgb3IgbmFtZVxuICAgIG5hbWUgKyBcIi5cIiArIGV4dGVuc2lvblxuXG4gIHBhdGg6IC0+XG4gICAgX3BhdGggPSBbXVxuICAgIHBhcmVudCA9IEBwYXJlbnRcbiAgICB3aGlsZSBwYXJlbnQgaXNudCBudWxsXG4gICAgICBfcGF0aC51bnNoaWZ0IHBhcmVudFxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudFxuICAgIF9wYXRoXG5cbiAgcmVuYW1lOiAobmV3TmFtZSkgLT5cbiAgICBAbmFtZSA9IG5ld05hbWVcbiAgICBAX3VwZGF0ZUZpbGVuYW1lKClcblxuICBfdXBkYXRlRmlsZW5hbWU6IC0+XG4gICAgQGZpbGVuYW1lID0gQG5hbWVcbiAgICBpZiBAbmFtZT8uc3Vic3RyPyBhbmQgQ2xvdWRNZXRhZGF0YS5FeHRlbnNpb24/IGFuZCBAdHlwZSBpcyBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgIGV4dExlbiA9IENsb3VkTWV0YWRhdGEuRXh0ZW5zaW9uLmxlbmd0aFxuICAgICAgQG5hbWUgPSBAbmFtZS5zdWJzdHIoMCwgQG5hbWUubGVuZ3RoIC0gKGV4dExlbisxKSkgaWYgQG5hbWUuc3Vic3RyKC1leHRMZW4rMSkgaXMgXCIuI3tDbG91ZE1ldGFkYXRhLkV4dGVuc2lvbn1cIlxuICAgICAgQGZpbGVuYW1lID0gQ2xvdWRNZXRhZGF0YS53aXRoRXh0ZW5zaW9uIEBuYW1lLCBudWxsLCB0cnVlXG5cbiMgc2luZ2xldG9uIHRoYXQgY2FuIGNyZWF0ZSBDbG91ZENvbnRlbnQgd3JhcHBlZCB3aXRoIGdsb2JhbCBvcHRpb25zXG5jbGFzcyBDbG91ZENvbnRlbnRGYWN0b3J5XG4gIGNvbnN0cnVjdG9yOiAtPlxuICAgIEBlbnZlbG9wZU1ldGFkYXRhID0ge31cblxuICAjIHNldCBpbml0aWFsIGVudmVsb3BlTWV0YWRhdGEgb3IgdXBkYXRlIGluZGl2aWR1YWwgcHJvcGVydGllc1xuICBzZXRFbnZlbG9wZU1ldGFkYXRhOiAoZW52ZWxvcGVNZXRhZGF0YSkgLT5cbiAgICBmb3Iga2V5IG9mIGVudmVsb3BlTWV0YWRhdGFcbiAgICAgIEBlbnZlbG9wZU1ldGFkYXRhW2tleV0gPSBlbnZlbG9wZU1ldGFkYXRhW2tleV1cblxuICAjIHJldHVybnMgbmV3IENsb3VkQ29udGVudCBjb250YWluaW5nIGVudmVsb3BlZCBkYXRhXG4gIGNyZWF0ZUVudmVsb3BlZENsb3VkQ29udGVudDogKGNvbnRlbnQpIC0+XG4gICAgbmV3IENsb3VkQ29udGVudCAoQGVudmVsb3BDb250ZW50IGNvbnRlbnQpLCAoQF9pZGVudGlmeUNvbnRlbnRGb3JtYXQgY29udGVudClcblxuICAjIGVudmVsb3BzIGNvbnRlbnQgd2l0aCBtZXRhZGF0YSwgcmV0dXJucyBhbiBvYmplY3QuXG4gICMgSWYgY29udGVudCB3YXMgYWxyZWFkeSBhbiBvYmplY3QgKE9iamVjdCBvciBKU09OKSB3aXRoIG1ldGFkYXRhLFxuICAjIGFueSBleGlzdGluZyBtZXRhZGF0YSB3aWxsIGJlIHJldGFpbmVkLlxuICAjIE5vdGU6IGNhbGxpbmcgYGVudmVsb3BDb250ZW50YCBtYXkgYmUgc2FmZWx5IGNhbGxlZCBvbiBzb21ldGhpbmcgdGhhdFxuICAjIGhhcyBhbHJlYWR5IGhhZCBgZW52ZWxvcENvbnRlbnRgIGNhbGxlZCBvbiBpdCwgYW5kIHdpbGwgYmUgYSBuby1vcC5cbiAgZW52ZWxvcENvbnRlbnQ6IChjb250ZW50KSAtPlxuICAgIGVudmVsb3BlZENsb3VkQ29udGVudCA9IEBfd3JhcElmTmVlZGVkIGNvbnRlbnRcbiAgICBmb3Iga2V5IG9mIEBlbnZlbG9wZU1ldGFkYXRhXG4gICAgICBlbnZlbG9wZWRDbG91ZENvbnRlbnRba2V5XSA/PSBAZW52ZWxvcGVNZXRhZGF0YVtrZXldXG4gICAgcmV0dXJuIGVudmVsb3BlZENsb3VkQ29udGVudFxuXG4gIF9pZGVudGlmeUNvbnRlbnRGb3JtYXQ6IChjb250ZW50KSAtPlxuICAgIHJldHVybiBpZiBub3QgY29udGVudD9cbiAgICByZXN1bHQgPSB7IGlzQ2ZtV3JhcHBlZDogZmFsc2UsIGlzUHJlQ2ZtRm9ybWF0OiBmYWxzZSB9XG4gICAgaWYgaXNTdHJpbmcgY29udGVudFxuICAgICAgdHJ5IGNvbnRlbnQgPSBKU09OLnBhcnNlIGNvbnRlbnRcbiAgICAjIEN1cnJlbnRseSwgd2UgYXNzdW1lICdtZXRhZGF0YScgaXMgdG9wLWxldmVsIHByb3BlcnR5IGluXG4gICAgIyBub24tQ0ZNLXdyYXBwZWQgZG9jdW1lbnRzLiBDb3VsZCBwdXQgaW4gYSBjbGllbnQgY2FsbGJhY2tcbiAgICAjIHRoYXQgd291bGQgaWRlbnRpZnkgd2hldGhlciB0aGUgZG9jdW1lbnQgcmVxdWlyZWRcbiAgICAjIGNvbnZlcnNpb24gdG8gZWxpbWluYXRlIHRoaXMgYXNzdW1wdGlvbiBmcm9tIHRoZSBDRk0uXG4gICAgaWYgY29udGVudC5tZXRhZGF0YVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIGlmIGNvbnRlbnQuY2ZtVmVyc2lvbj8gb3IgY29udGVudC5jb250ZW50P1xuICAgICAgcmVzdWx0LmlzQ2ZtV3JhcHBlZCA9IHRydWVcbiAgICBlbHNlXG4gICAgICByZXN1bHQuaXNQcmVDZm1Gb3JtYXQgPSB0cnVlXG4gICAgcmVzdWx0XG5cbiAgIyBlbnZlbG9wcyBjb250ZW50IGluIHtjb250ZW50OiBjb250ZW50fSBpZiBuZWVkZWQsIHJldHVybnMgYW4gb2JqZWN0XG4gIF93cmFwSWZOZWVkZWQ6IChjb250ZW50KSAtPlxuICAgIGlmIGlzU3RyaW5nIGNvbnRlbnRcbiAgICAgIHRyeSBjb250ZW50ID0gSlNPTi5wYXJzZSBjb250ZW50XG4gICAgaWYgY29udGVudC5jb250ZW50P1xuICAgICAgcmV0dXJuIGNvbnRlbnRcbiAgICBlbHNlXG4gICAgICByZXR1cm4ge2NvbnRlbnR9XG5cbmNsYXNzIENsb3VkQ29udGVudFxuICAjIHdyYXBwaW5nIGRlZmF1bHRzIHRvIHRydWUgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IGNsaWVudCB2aWEgYXBwT3B0aW9uc1xuICBAd3JhcEZpbGVDb250ZW50OiB0cnVlXG5cbiAgY29uc3RydWN0b3I6IChAXyA9IHt9LCBAX2NvbnRlbnRGb3JtYXQpIC0+XG5cbiAgIyBnZXRDb250ZW50IGFuZCBnZXRDb250ZW50QXNKU09OIHJldHVybiB0aGUgZmlsZSBjb250ZW50IGFzIHN0b3JlZCBvbiBkaXNrXG4gIGdldENvbnRlbnQ6IC0+XG4gICAgaWYgQ2xvdWRDb250ZW50LndyYXBGaWxlQ29udGVudCB0aGVuIEBfIGVsc2UgQF8uY29udGVudFxuICBnZXRDb250ZW50QXNKU09OOiAtPlxuICAgIEpTT04uc3RyaW5naWZ5IGlmIENsb3VkQ29udGVudC53cmFwRmlsZUNvbnRlbnQgdGhlbiBAXyBlbHNlIEBfLmNvbnRlbnRcblxuICAjIHJldHVybnMgdGhlIGNsaWVudC12aXNpYmxlIGNvbnRlbnQgKGV4Y2x1ZGluZyB3cmFwcGVyIGZvciB3cmFwcGVkIGNsaWVudHMpXG4gIGdldENsaWVudENvbnRlbnQ6IC0+XG4gICAgQF8uY29udGVudFxuXG4gIHJlcXVpcmVzQ29udmVyc2lvbjogLT5cbiAgICAoQ2xvdWRDb250ZW50LndyYXBGaWxlQ29udGVudCBpc250IEBfY29udGVudEZvcm1hdD8uaXNDZm1XcmFwcGVkKSBvciBAX2NvbnRlbnRGb3JtYXQ/LmlzUHJlQ2ZtRm9ybWF0XG5cbiAgY2xvbmU6IC0+IG5ldyBDbG91ZENvbnRlbnQgKF8uY2xvbmVEZWVwIEBfKSwgKF8uY2xvbmVEZWVwIEBfY29udGVudEZvcm1hdClcblxuICBzZXRUZXh0OiAodGV4dCkgLT4gQF8uY29udGVudCA9IHRleHRcbiAgZ2V0VGV4dDogLT4gaWYgQF8uY29udGVudCBpcyBudWxsIHRoZW4gJycgZWxzZSBpZiBpc1N0cmluZyhAXy5jb250ZW50KSB0aGVuIEBfLmNvbnRlbnQgZWxzZSBKU09OLnN0cmluZ2lmeSBAXy5jb250ZW50XG5cbiAgYWRkTWV0YWRhdGE6IChtZXRhZGF0YSkgLT4gQF9ba2V5XSA9IG1ldGFkYXRhW2tleV0gZm9yIGtleSBvZiBtZXRhZGF0YVxuICBnZXQ6IChwcm9wKSAtPiBAX1twcm9wXVxuICBzZXQ6IChwcm9wLCB2YWx1ZSkgLT4gQF9bcHJvcF0gPSB2YWx1ZVxuICByZW1vdmU6IChwcm9wKSAtPiBkZWxldGUgQF9bcHJvcF1cblxuICBnZXRTaGFyZWRNZXRhZGF0YTogLT5cbiAgICAjIG9ubHkgaW5jbHVkZSBuZWNlc3NhcnkgZmllbGRzXG4gICAgc2hhcmVkID0ge31cbiAgICBzaGFyZWQuX3Blcm1pc3Npb25zID0gQF8uX3Blcm1pc3Npb25zIGlmIEBfLl9wZXJtaXNzaW9ucz9cbiAgICBzaGFyZWQuc2hhcmVFZGl0S2V5ID0gQF8uc2hhcmVFZGl0S2V5IGlmIEBfLnNoYXJlRWRpdEtleT9cbiAgICBzaGFyZWQuc2hhcmVkRG9jdW1lbnRJZCA9IEBfLnNoYXJlZERvY3VtZW50SWQgaWYgQF8uc2hhcmVkRG9jdW1lbnRJZD9cbiAgICBzaGFyZWQuYWNjZXNzS2V5cyA9IEBfLmFjY2Vzc0tleXMgaWYgQF8uYWNjZXNzS2V5cz9cbiAgICBzaGFyZWRcblxuICBjb3B5TWV0YWRhdGFUbzogKHRvKSAtPlxuICAgIG1ldGFkYXRhID0ge31cbiAgICBmb3Igb3duIGtleSwgdmFsdWUgb2YgQF9cbiAgICAgIGlmIGtleSBpc250ICdjb250ZW50J1xuICAgICAgICBtZXRhZGF0YVtrZXldID0gdmFsdWVcbiAgICB0by5hZGRNZXRhZGF0YSBtZXRhZGF0YVxuXG5jbGFzcyBQcm92aWRlckludGVyZmFjZVxuXG4gIGNvbnN0cnVjdG9yOiAob3B0aW9ucykgLT5cbiAgICB7QG5hbWUsIEBkaXNwbGF5TmFtZSwgQHVybERpc3BsYXlOYW1lLCBAY2FwYWJpbGl0aWVzfSA9IG9wdGlvbnNcblxuICBAQXZhaWxhYmxlOiAtPiB0cnVlXG5cbiAgY2FuOiAoY2FwYWJpbGl0eSkgLT5cbiAgICAhIUBjYXBhYmlsaXRpZXNbY2FwYWJpbGl0eV1cblxuICBjYW5BdXRvOiAoY2FwYWJpbGl0eSkgLT5cbiAgICBAY2FwYWJpbGl0aWVzW2NhcGFiaWxpdHldIGlzICdhdXRvJ1xuXG4gIGlzQXV0aG9yaXphdGlvblJlcXVpcmVkOiAtPlxuICAgIGZhbHNlXG5cbiAgYXV0aG9yaXplZDogKGNhbGxiYWNrKSAtPlxuICAgIGlmIGNhbGxiYWNrXG4gICAgICBjYWxsYmFjayB0cnVlXG4gICAgZWxzZVxuICAgICAgdHJ1ZVxuXG4gIHJlbmRlckF1dGhvcml6YXRpb25EaWFsb2c6IC0+XG4gICAgKEF1dGhvcml6YXRpb25Ob3RJbXBsZW1lbnRlZERpYWxvZyB7cHJvdmlkZXI6IEB9KVxuXG4gIHJlbmRlclVzZXI6IC0+XG4gICAgbnVsbFxuXG4gIGZpbHRlclRhYkNvbXBvbmVudDogKGNhcGFiaWxpdHksIGRlZmF1bHRDb21wb25lbnQpIC0+XG4gICAgZGVmYXVsdENvbXBvbmVudFxuXG4gIG1hdGNoZXNFeHRlbnNpb246IChuYW1lKSAtPlxuICAgIHJldHVybiBmYWxzZSBpZiBub3QgbmFtZVxuICAgIGlmIENsb3VkTWV0YWRhdGEuUmVhZGFibGVFeHRlbnNpb25zPyBhbmQgQ2xvdWRNZXRhZGF0YS5SZWFkYWJsZUV4dGVuc2lvbnMubGVuZ3RoID4gMFxuICAgICAgZm9yIGV4dGVuc2lvbiBpbiBDbG91ZE1ldGFkYXRhLlJlYWRhYmxlRXh0ZW5zaW9uc1xuICAgICAgICByZXR1cm4gdHJ1ZSBpZiBuYW1lLnN1YnN0cigtZXh0ZW5zaW9uLmxlbmd0aCkgaXMgZXh0ZW5zaW9uXG4gICAgICAgIGlmIGV4dGVuc2lvbiBpcyBcIlwiXG4gICAgICAgICAgcmV0dXJuIHRydWUgaWYgIX5uYW1lLmluZGV4T2YoXCIuXCIpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICBlbHNlXG4gICAgICAjIG1heSBzZWVtIHdlaXJkIGJ1dCBpdCBtZWFucyB0aGF0IHdpdGhvdXQgYW4gZXh0ZW5zaW9uIHNwZWNpZmllZCBhbGwgZmlsZXMgbWF0Y2hcbiAgICAgIHRydWVcblxuICBoYW5kbGVVcmxQYXJhbXM6IC0+XG4gICAgZmFsc2UgIyBieSBkZWZhdWx0LCBubyBhZGRpdGlvbmFsIFVSTCBoYW5kbGluZ1xuXG4gIGRpYWxvZzogKGNhbGxiYWNrKSAtPlxuICAgIEBfbm90SW1wbGVtZW50ZWQgJ2RpYWxvZydcblxuICBzYXZlOiAoY29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfbm90SW1wbGVtZW50ZWQgJ3NhdmUnXG5cbiAgc2F2ZUFzRXhwb3J0OiAoY29udGVudCwgbWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgICMgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpbnZva2VzIHNhdmVcbiAgICBpZiBAY2FuICdzYXZlJywgbWV0YWRhdGFcbiAgICAgIEBzYXZlIGNvbnRlbnQsIG1ldGFkYXRhLCBjYWxsYmFja1xuICAgIGVsc2VcbiAgICAgIEBfbm90SW1wbGVtZW50ZWQgJ3NhdmVBc0V4cG9ydCdcblxuICBsb2FkOiAoY2FsbGJhY2spIC0+XG4gICAgQF9ub3RJbXBsZW1lbnRlZCAnbG9hZCdcblxuICBsaXN0OiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfbm90SW1wbGVtZW50ZWQgJ2xpc3QnXG5cbiAgcmVtb3ZlOiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfbm90SW1wbGVtZW50ZWQgJ3JlbW92ZSdcblxuICByZW5hbWU6IChtZXRhZGF0YSwgbmV3TmFtZSwgY2FsbGJhY2spIC0+XG4gICAgQF9ub3RJbXBsZW1lbnRlZCAncmVuYW1lJ1xuXG4gIGNsb3NlOiAobWV0YWRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfbm90SW1wbGVtZW50ZWQgJ2Nsb3NlJ1xuXG4gIHNldEZvbGRlcjogKG1ldGFkYXRhKSAtPlxuICAgIEBfbm90SW1wbGVtZW50ZWQgJ3NldEZvbGRlcidcblxuICBjYW5PcGVuU2F2ZWQ6IC0+IGZhbHNlXG5cbiAgb3BlblNhdmVkOiAob3BlblNhdmVkUGFyYW1zLCBjYWxsYmFjaykgLT5cbiAgICBAX25vdEltcGxlbWVudGVkICdvcGVuU2F2ZWQnXG5cbiAgZ2V0T3BlblNhdmVkUGFyYW1zOiAobWV0YWRhdGEpIC0+XG4gICAgQF9ub3RJbXBsZW1lbnRlZCAnZ2V0T3BlblNhdmVkUGFyYW1zJ1xuXG4gIGZpbGVPcGVuZWQ6IC0+XG4gICAgIyBkbyBub3RoaW5nIGJ5IGRlZmF1bHRcblxuICBfbm90SW1wbGVtZW50ZWQ6IChtZXRob2ROYW1lKSAtPlxuICAgICMgdGhpcyB1c2VzIGEgYnJvd3NlciBhbGVydCBpbnN0ZWFkIG9mIGNsaWVudC5hbGVydCBiZWNhdXNlIHRoaXMgaXMganVzdCBoZXJlIGZvciBkZWJ1Z2dpbmdcbiAgICBhbGVydCBcIiN7bWV0aG9kTmFtZX0gbm90IGltcGxlbWVudGVkIGZvciAje0BuYW1lfSBwcm92aWRlclwiXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgQ2xvdWRGaWxlOiBDbG91ZEZpbGVcbiAgQ2xvdWRNZXRhZGF0YTogQ2xvdWRNZXRhZGF0YVxuICBDbG91ZENvbnRlbnQ6IENsb3VkQ29udGVudFxuICBjbG91ZENvbnRlbnRGYWN0b3J5OiBuZXcgQ2xvdWRDb250ZW50RmFjdG9yeSgpXG4gIFByb3ZpZGVySW50ZXJmYWNlOiBQcm92aWRlckludGVyZmFjZVxuIiwidHIgPSByZXF1aXJlICcuLi91dGlscy90cmFuc2xhdGUnXG5pc1N0cmluZyA9IHJlcXVpcmUgJy4uL3V0aWxzL2lzLXN0cmluZydcbmlzQXJyYXkgPSByZXF1aXJlICcuLi91dGlscy9pcy1hcnJheSdcblxuUHJvdmlkZXJJbnRlcmZhY2UgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5Qcm92aWRlckludGVyZmFjZVxuY2xvdWRDb250ZW50RmFjdG9yeSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLmNsb3VkQ29udGVudEZhY3RvcnlcbkNsb3VkTWV0YWRhdGEgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbmNsYXNzIFJlYWRPbmx5UHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckludGVyZmFjZVxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSwgQGNsaWVudCkgLT5cbiAgICBzdXBlclxuICAgICAgbmFtZTogUmVhZE9ubHlQcm92aWRlci5OYW1lXG4gICAgICBkaXNwbGF5TmFtZTogQG9wdGlvbnMuZGlzcGxheU5hbWUgb3IgKHRyICd+UFJPVklERVIuUkVBRF9PTkxZJylcbiAgICAgIHVybERpc3BsYXlOYW1lOiBAb3B0aW9ucy51cmxEaXNwbGF5TmFtZVxuICAgICAgY2FwYWJpbGl0aWVzOlxuICAgICAgICBzYXZlOiBmYWxzZVxuICAgICAgICByZXNhdmU6IGZhbHNlXG4gICAgICAgIGV4cG9ydDogZmFsc2VcbiAgICAgICAgbG9hZDogdHJ1ZVxuICAgICAgICBsaXN0OiB0cnVlXG4gICAgICAgIHJlbW92ZTogZmFsc2VcbiAgICAgICAgcmVuYW1lOiBmYWxzZVxuICAgICAgICBjbG9zZTogZmFsc2VcbiAgICBAdHJlZSA9IG51bGxcbiAgICBAcHJvbWlzZXMgPSBbXVxuXG4gIEBOYW1lOiAncmVhZE9ubHknXG5cbiAgbG9hZDogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBpZiBtZXRhZGF0YSBhbmQgbm90IGlzQXJyYXkgbWV0YWRhdGEgYW5kIG1ldGFkYXRhLnR5cGUgaXMgQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICBpZiBtZXRhZGF0YS5jb250ZW50P1xuICAgICAgICBjYWxsYmFjayBudWxsLCBtZXRhZGF0YS5jb250ZW50XG4gICAgICAgIHJldHVyblxuICAgICAgZWxzZSBpZiBtZXRhZGF0YS51cmw/XG4gICAgICAgICQuYWpheFxuICAgICAgICAgIGRhdGFUeXBlOiAnanNvbidcbiAgICAgICAgICB1cmw6IG1ldGFkYXRhLnVybFxuICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSAtPlxuICAgICAgICAgICAgY2FsbGJhY2sgbnVsbCwgY2xvdWRDb250ZW50RmFjdG9yeS5jcmVhdGVFbnZlbG9wZWRDbG91ZENvbnRlbnQgZGF0YVxuICAgICAgICAgIGVycm9yOiAtPiBjYWxsYmFjayBcIlVuYWJsZSB0byBsb2FkICcje21ldGFkYXRhLm5hbWV9J1wiXG4gICAgICAgIHJldHVyblxuICAgICAgZWxzZSBpZiBtZXRhZGF0YT8ubmFtZT9cbiAgICAgICAgQF9sb2FkVHJlZSAoZXJyLCB0cmVlKSA9PlxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayBlcnIgaWYgZXJyXG4gICAgICAgICAgZmlsZSA9IEBfZmluZEZpbGUgdHJlZSwgbWV0YWRhdGEubmFtZVxuICAgICAgICAgIGlmIGZpbGU/XG4gICAgICAgICAgICBAbG9hZCBmaWxlLCBjYWxsYmFjayAgICAgICAgICAjIGNhbGwgbG9hZCBhZ2FpbiB3aXRoIGZvdW5kIGZpbGUsIGFzIGl0IG1heSBiZSByZW1vdGVcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBjYWxsYmFjayBcIlVuYWJsZSB0byBsb2FkICcje21ldGFkYXRhLm5hbWV9J1wiXG4gICAgICAgICAgcmV0dXJuXG4gICAgZWxzZVxuICAgICAgY2FsbGJhY2sgXCJVbmFibGUgdG8gbG9hZCBzcGVjaWZpZWQgY29udGVudFwiXG5cbiAgbGlzdDogKG1ldGFkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBAX2xvYWRUcmVlIChlcnIsIHRyZWUpID0+XG4gICAgICByZXR1cm4gY2FsbGJhY2sgZXJyIGlmIGVyclxuICAgICAgaXRlbXMgPSBpZiBtZXRhZGF0YT8udHlwZSBpcyBDbG91ZE1ldGFkYXRhLkZvbGRlciB0aGVuIG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5jaGlsZHJlbiBlbHNlIEB0cmVlXG4gICAgICAjIGNsb25lIHRoZSBtZXRhZGF0YSBpdGVtcyBzbyB0aGF0IGFueSBjaGFuZ2VzIG1hZGUgdG8gdGhlIGZpbGVuYW1lIG9yIGNvbnRlbnQgaW4gdGhlIGVkaXQgaXMgbm90IGNhY2hlZFxuICAgICAgY2FsbGJhY2sgbnVsbCwgXy5tYXAgaXRlbXMsIChtZXRhZGF0YUl0ZW0pIC0+IG5ldyBDbG91ZE1ldGFkYXRhIG1ldGFkYXRhSXRlbVxuXG4gIGNhbk9wZW5TYXZlZDogLT4gdHJ1ZVxuXG4gIG9wZW5TYXZlZDogKG9wZW5TYXZlZFBhcmFtcywgY2FsbGJhY2spIC0+XG4gICAgbWV0YWRhdGEgPSBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgbmFtZTogdW5lc2NhcGUob3BlblNhdmVkUGFyYW1zKVxuICAgICAgdHlwZTogQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICBwYXJlbnQ6IG51bGxcbiAgICAgIHByb3ZpZGVyOiBAXG4gICAgQGxvYWQgbWV0YWRhdGEsIChlcnIsIGNvbnRlbnQpIC0+XG4gICAgICBjYWxsYmFjayBlcnIsIGNvbnRlbnQsIG1ldGFkYXRhXG5cbiAgZ2V0T3BlblNhdmVkUGFyYW1zOiAobWV0YWRhdGEpIC0+XG4gICAgbWV0YWRhdGEubmFtZVxuXG4gIF9sb2FkVHJlZTogKGNhbGxiYWNrKSAtPlxuICAgICMgd2FpdCBmb3IgYWxsIHByb21pc2VzIHRvIGJlIHJlc29sdmVkIGJlZm9yZSBwcm9jZWVkaW5nXG4gICAgY29tcGxldGUgPSAoaVRyZWUpID0+XG4gICAgICBQcm9taXNlLmFsbChAcHJvbWlzZXMpXG4gICAgICAgIC50aGVuICgtPlxuICAgICAgICAgIGlmIGlUcmVlP1xuICAgICAgICAgICAgY2FsbGJhY2sgbnVsbCwgaVRyZWVcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAjIGFuIGVtcHR5IGZvbGRlciBpcyB1bnVzdWFsIGJ1dCBub3QgbmVjZXNzYXJpbHkgYW4gZXJyb3JcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3I/IFwiTm8gY29udGVudHMgZm91bmQgZm9yICN7QGRpc3BsYXlOYW1lfSBwcm92aWRlclwiXG4gICAgICAgICAgICBjYWxsYmFjayBudWxsLCB7fVxuICAgICAgICApLFxuICAgICAgICAjIGlmIGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQsIHRoZW4gdGhlcmUgd2FzIGFuIGVycm9yXG4gICAgICAgICgtPiBjYWxsYmFjayBcIk5vIGNvbnRlbnRzIGZvdW5kIGZvciAje0BkaXNwbGF5TmFtZX0gcHJvdmlkZXJcIilcblxuICAgIGlmIEB0cmVlIGlzbnQgbnVsbFxuICAgICAgY29tcGxldGUgQHRyZWVcbiAgICBlbHNlIGlmIEBvcHRpb25zLmpzb25cbiAgICAgIEB0cmVlID0gQF9jb252ZXJ0SlNPTlRvTWV0YWRhdGFUcmVlIEBvcHRpb25zLmpzb25cbiAgICAgIGNvbXBsZXRlIEB0cmVlXG4gICAgZWxzZSBpZiBAb3B0aW9ucy5qc29uQ2FsbGJhY2tcbiAgICAgIEBvcHRpb25zLmpzb25DYWxsYmFjayAoZXJyLCBqc29uKSA9PlxuICAgICAgICBpZiBlcnJcbiAgICAgICAgICBjYWxsYmFjayBlcnJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEB0cmVlID0gQF9jb252ZXJ0SlNPTlRvTWV0YWRhdGFUcmVlIEBvcHRpb25zLmpzb25cbiAgICAgICAgICBjb21wbGV0ZSBAdHJlZVxuICAgIGVsc2UgaWYgQG9wdGlvbnMuc3JjXG4gICAgICAkLmFqYXhcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICB1cmw6IEBvcHRpb25zLnNyY1xuICAgICAgICBzdWNjZXNzOiAoaVJlc3BvbnNlKSA9PlxuICAgICAgICAgIEB0cmVlID0gQF9jb252ZXJ0SlNPTlRvTWV0YWRhdGFUcmVlIGlSZXNwb25zZVxuICAgICAgICAgICMgYWxwaGFiZXRpemUgcmVtb3RlbHkgbG9hZGVkIGZvbGRlciBjb250ZW50cyBpZiByZXF1ZXN0ZWRcbiAgICAgICAgICBpZiBAb3B0aW9ucy5hbHBoYWJldGl6ZVxuICAgICAgICAgICAgQHRyZWUuc29ydCAoaU1ldGExLCBpTWV0YTIpIC0+XG4gICAgICAgICAgICAgIHJldHVybiAtMSBpZiBpTWV0YTEubmFtZSA8IGlNZXRhMi5uYW1lXG4gICAgICAgICAgICAgIHJldHVybiAgMSBpZiBpTWV0YTEubmFtZSA+IGlNZXRhMi5uYW1lXG4gICAgICAgICAgICAgIHJldHVybiAgMFxuICAgICAgICAgIGNvbXBsZXRlIEB0cmVlXG4gICAgICAgIGVycm9yOiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PlxuICAgICAgICAgIGVycm9yTWV0YWRhdGEgPSBAX2NyZWF0ZUVycm9yTWV0YWRhdGEgbnVsbFxuICAgICAgICAgIEB0cmVlID0gWyBlcnJvck1ldGFkYXRhIF1cbiAgICAgICAgICBjb21wbGV0ZSBAdHJlZVxuICAgIGVsc2VcbiAgICAgIGNvbXBsZXRlIG51bGxcblxuICBfY29udmVydEpTT05Ub01ldGFkYXRhVHJlZTogKGpzb24sIHBhcmVudCA9IG51bGwpIC0+XG4gICAgdHJlZSA9IFtdXG5cbiAgICBpZiBpc0FycmF5IGpzb25cbiAgICAgICMgcGFyc2UgYXJyYXkgZm9ybWF0OlxuICAgICAgIyBbeyBuYW1lOiBcIi4uLlwiLCBjb250ZW50OiBcIi4uLlwifSwgeyBuYW1lOiBcIi4uLlwiLCB0eXBlOiAnZm9sZGVyJywgY2hpbGRyZW46IFsuLi5dIH1dXG4gICAgICBmb3IgaXRlbSBpbiBqc29uXG4gICAgICAgIHR5cGUgPSBDbG91ZE1ldGFkYXRhLm1hcFR5cGVUb0Nsb3VkTWV0YWRhdGFUeXBlIGl0ZW0udHlwZVxuICAgICAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICAgICAgbmFtZTogaXRlbS5uYW1lXG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLmRlc2NyaXB0aW9uXG4gICAgICAgICAgY29udGVudDogaWYgaXRlbS5jb250ZW50PyB0aGVuIGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50IGl0ZW0uY29udGVudCBlbHNlIHVuZGVmaW5lZFxuICAgICAgICAgIHVybDogaXRlbS51cmwgb3IgaXRlbS5sb2NhdGlvblxuICAgICAgICAgIHBhcmVudDogcGFyZW50XG4gICAgICAgICAgcHJvdmlkZXI6IEBcbiAgICAgICAgICBwcm92aWRlckRhdGE6XG4gICAgICAgICAgICBjaGlsZHJlbjogbnVsbFxuICAgICAgICBpZiB0eXBlIGlzIENsb3VkTWV0YWRhdGEuRm9sZGVyXG4gICAgICAgICAgbmV3Rm9sZGVyUHJvbWlzZSA9IChpSXRlbSwgaU1ldGFkYXRhKSA9PlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlIChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICAgICAgICAgIGlmIGlJdGVtLmNoaWxkcmVuP1xuICAgICAgICAgICAgICAgIGlNZXRhZGF0YS5wcm92aWRlckRhdGEuY2hpbGRyZW4gPSBAX2NvbnZlcnRKU09OVG9NZXRhZGF0YVRyZWUgaUl0ZW0uY2hpbGRyZW4sIGlNZXRhZGF0YVxuICAgICAgICAgICAgICAgIHJlc29sdmUgaU1ldGFkYXRhXG4gICAgICAgICAgICAgIGVsc2UgaWYgaUl0ZW0udXJsP1xuICAgICAgICAgICAgICAgICQuYWpheFxuICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICAgICAgICAgICAgdXJsOiBpSXRlbS51cmwsXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoaVJlc3BvbnNlKSA9PlxuICAgICAgICAgICAgICAgICAgICBpTWV0YWRhdGEucHJvdmlkZXJEYXRhLmNoaWxkcmVuID0gQF9jb252ZXJ0SlNPTlRvTWV0YWRhdGFUcmVlIGlSZXNwb25zZSwgaU1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICMgYWxwaGFiZXRpemUgcmVtb3RlbHkgbG9hZGVkIGZvbGRlciBjb250ZW50cyBpZiByZXF1ZXN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgQG9wdGlvbnMuYWxwaGFiZXRpemUgb3IgaUl0ZW0uYWxwaGFiZXRpemVcbiAgICAgICAgICAgICAgICAgICAgICBpTWV0YWRhdGEucHJvdmlkZXJEYXRhLmNoaWxkcmVuLnNvcnQgKGlNZXRhMSwgaU1ldGEyKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xIGlmIGlNZXRhMS5uYW1lIDwgaU1ldGEyLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgMSBpZiBpTWV0YTEubmFtZSA+IGlNZXRhMi5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIDBcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSBpTWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgIGVycm9yOiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PlxuICAgICAgICAgICAgICAgICAgICBlcnJvck1ldGFkYXRhID0gQF9jcmVhdGVFcnJvck1ldGFkYXRhIGlNZXRhZGF0YVxuICAgICAgICAgICAgICAgICAgICBpTWV0YWRhdGEucHJvdmlkZXJEYXRhLmNoaWxkcmVuID0gWyBlcnJvck1ldGFkYXRhIF1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSBpTWV0YWRhdGFcbiAgICAgICAgICBAcHJvbWlzZXMucHVzaCBuZXdGb2xkZXJQcm9taXNlIGl0ZW0sIG1ldGFkYXRhXG5cbiAgICAgICAgdHJlZS5wdXNoIG1ldGFkYXRhXG4gICAgZWxzZVxuICAgICAgIyBwYXJzZSBvcmlnaW5hbCBmb3JtYXQ6XG4gICAgICAjIHsgZmlsZW5hbWU6IFwiZmlsZSBjb250ZW50c1wiLCBmb2xkZXJOYW1lOiB7Li4uIGNvbnRlbnRzIC4uLn0gfVxuICAgICAgZm9yIG93biBmaWxlbmFtZSBvZiBqc29uXG4gICAgICAgIGl0ZW1Db250ZW50ID0ganNvbltmaWxlbmFtZV1cbiAgICAgICAgdHlwZSA9IGlmIGlzU3RyaW5nIGl0ZW1Db250ZW50IHRoZW4gQ2xvdWRNZXRhZGF0YS5GaWxlIGVsc2UgQ2xvdWRNZXRhZGF0YS5Gb2xkZXJcbiAgICAgICAgbWV0YWRhdGEgPSBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgICAgIG5hbWU6IGZpbGVuYW1lXG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgIGNvbnRlbnQ6IGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50IGl0ZW1Db250ZW50XG4gICAgICAgICAgcGFyZW50OiBwYXJlbnRcbiAgICAgICAgICBwcm92aWRlcjogQFxuICAgICAgICAgIHByb3ZpZGVyRGF0YTpcbiAgICAgICAgICAgIGNoaWxkcmVuOiBudWxsXG4gICAgICAgIGlmIHR5cGUgaXMgQ2xvdWRNZXRhZGF0YS5Gb2xkZXJcbiAgICAgICAgICBtZXRhZGF0YS5wcm92aWRlckRhdGEuY2hpbGRyZW4gPSBAX2NvbnZlcnRKU09OVG9NZXRhZGF0YVRyZWUgaXRlbUNvbnRlbnQsIG1ldGFkYXRhXG4gICAgICAgIHRyZWUucHVzaCBtZXRhZGF0YVxuXG4gICAgdHJlZVxuXG4gIF9maW5kRmlsZTogKGFyciwgZmlsZW5hbWUpIC0+XG4gICAgZm9yIGl0ZW0gaW4gYXJyXG4gICAgICBpZiBpdGVtLnR5cGUgaXMgQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICAgIGlmIGl0ZW0/Lm5hbWUgaXMgZmlsZW5hbWVcbiAgICAgICAgICByZXR1cm4gaXRlbVxuICAgICAgZWxzZSBpZiBpdGVtLnByb3ZpZGVyRGF0YT8uY2hpbGRyZW4/Lmxlbmd0aFxuICAgICAgICBmb3VuZENoaWxkID0gQF9maW5kRmlsZSBpdGVtLnByb3ZpZGVyRGF0YS5jaGlsZHJlbiwgZmlsZW5hbWVcbiAgICAgICAgaWYgZm91bmRDaGlsZD8gdGhlbiByZXR1cm4gZm91bmRDaGlsZFxuICAgIHJldHVybiBudWxsXG5cbiAgIyBSZW1vdGUgZm9sZGVyIGNvbnRlbnRzIGFyZSBsaWtlbHkgdG8gYmUgbG9hZGVkIGFzIHBhcnQgb2ZcbiAgIyBzYW1wbGUgZG9jdW1lbnQgaGllcmFyY2hpZXMuIFRoZSBpbmFiaWxpdHkgdG8gbG9hZCBvbmUgc3ViZm9sZGVyXG4gICMgb2YgZXhhbXBsZXMgc2hvdWxkbid0IG5lY2Vzc2FyaWx5IGJlIHRyZWF0ZWQgYXMgYSBmYXRhbCBlcnJvci5cbiAgIyBUaGVyZWZvcmUsIHdlIHB1dCBhbiBpdGVtIGluIHRoZSByZXR1cm5lZCByZXN1bHRzIHdoaWNoIGluZGljYXRlc1xuICAjIHRoZSBlcnJvciBhbmQgd2hpY2ggaXMgbm9uLXNlbGVjdGFibGUsIGJ1dCByZXNvbHZlIHRoZSBwcm9taXNlXG4gICMgc28gdGhhdCB0aGUgb3BlbiBjYW4gcHJvY2VlZCB3aXRob3V0IHRoZSBtaXNzaW5nIGZvbGRlciBjb250ZW50cy5cbiAgX2NyZWF0ZUVycm9yTWV0YWRhdGE6IChpUGFyZW50KSAtPlxuICAgIG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICBuYW1lOiB0ciBcIn5GSUxFX0RJQUxPRy5MT0FEX0ZPTERFUl9FUlJPUlwiXG4gICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkxhYmVsXG4gICAgICBjb250ZW50OiBcIlwiXG4gICAgICBwYXJlbnQ6IGlQYXJlbnRcbiAgICAgIHByb3ZpZGVyOiBAXG4gICAgICBwcm92aWRlckRhdGE6XG4gICAgICAgIGNoaWxkcmVuOiBudWxsXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZE9ubHlQcm92aWRlclxuIiwiUHJvdmlkZXJJbnRlcmZhY2UgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5Qcm92aWRlckludGVyZmFjZVxuY2xvdWRDb250ZW50RmFjdG9yeSA9IChyZXF1aXJlICcuL3Byb3ZpZGVyLWludGVyZmFjZScpLmNsb3VkQ29udGVudEZhY3RvcnlcbkNsb3VkTWV0YWRhdGEgPSAocmVxdWlyZSAnLi9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbiMgVGhpcyBwcm92aWRlciBnZXRzIGNyZWF0ZWQgYnkgdGhlIGNsaWVudCB3aGVuIG5lZWRlZCB0byBvcGVuIGEgdXJsIGRpcmVjdGx5LlxuIyBJdCBjYW5ub3QgYmUgYWRkZWQgYXMgb25lIG9mIHRoZSBhcHAncyBsaXN0IG9mIHByb3ZpZGVyc1xuXG5jbGFzcyBVUkxQcm92aWRlciBleHRlbmRzIFByb3ZpZGVySW50ZXJmYWNlXG5cbiAgY29uc3RydWN0b3I6IChAb3B0aW9ucyA9IHt9LCBAY2xpZW50KSAtPlxuICAgIHN1cGVyXG4gICAgICBjYXBhYmlsaXRpZXM6XG4gICAgICAgIHNhdmU6IGZhbHNlXG4gICAgICAgIHJlc2F2ZTogZmFsc2VcbiAgICAgICAgZXhwb3J0OiBmYWxzZVxuICAgICAgICBsb2FkOiBmYWxzZVxuICAgICAgICBsaXN0OiBmYWxzZVxuICAgICAgICByZW1vdmU6IGZhbHNlXG4gICAgICAgIHJlbmFtZTogZmFsc2VcbiAgICAgICAgY2xvc2U6IGZhbHNlXG5cbiAgY2FuT3BlblNhdmVkOiAtPiBmYWxzZVxuXG4gIG9wZW5GaWxlRnJvbVVybDogKHVybCwgY2FsbGJhY2spIC0+XG4gICAgbWV0YWRhdGEgPSBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgdHlwZTogQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICB1cmw6IHVybFxuICAgICAgcGFyZW50OiBudWxsXG4gICAgICBwcm92aWRlcjogQFxuXG4gICAgJC5hamF4XG4gICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICB1cmw6IG1ldGFkYXRhLnVybFxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIGNhbGxiYWNrIG51bGwsIGNsb3VkQ29udGVudEZhY3RvcnkuY3JlYXRlRW52ZWxvcGVkQ2xvdWRDb250ZW50KGRhdGEpLCBtZXRhZGF0YVxuICAgICAgZXJyb3I6IC0+IGNhbGxiYWNrIFwiVW5hYmxlIHRvIGxvYWQgZG9jdW1lbnQgZnJvbSAnI3ttZXRhZGF0YS51cmx9J1wiXG5cbm1vZHVsZS5leHBvcnRzID0gVVJMUHJvdmlkZXJcbiIsInRyID0gcmVxdWlyZSAnLi91dGlscy90cmFuc2xhdGUnXG5pc1N0cmluZyA9IHJlcXVpcmUgJy4vdXRpbHMvaXMtc3RyaW5nJ1xuXG5jbGFzcyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudFxuXG4gIGNvbnN0cnVjdG9yOiAoQHR5cGUsIEBkYXRhID0ge30pIC0+XG5cbmNsYXNzIENsb3VkRmlsZU1hbmFnZXJVSU1lbnVcblxuICBARGVmYXVsdE1lbnU6IFsnbmV3RmlsZURpYWxvZycsICdvcGVuRmlsZURpYWxvZycsICdyZXZlcnRTdWJNZW51JywgJ3NlcGFyYXRvcicsICdzYXZlJywgJ2NyZWF0ZUNvcHknLCAnc2hhcmVTdWJNZW51JywgJ3JlbmFtZURpYWxvZyddXG5cbiAgY29uc3RydWN0b3I6IChvcHRpb25zLCBjbGllbnQpIC0+XG4gICAgQG9wdGlvbnMgPSBvcHRpb25zXG4gICAgQGl0ZW1zID0gQHBhcnNlTWVudUl0ZW1zIG9wdGlvbnMubWVudSwgY2xpZW50XG5cbiAgcGFyc2VNZW51SXRlbXM6IChtZW51SXRlbXMsIGNsaWVudCkgLT5cbiAgICBzZXRBY3Rpb24gPSAoYWN0aW9uKSAtPlxuICAgICAgY2xpZW50W2FjdGlvbl0/LmJpbmQoY2xpZW50KSBvciAoLT4gY2xpZW50LmFsZXJ0IFwiTm8gI3thY3Rpb259IGFjdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGNsaWVudFwiKVxuXG4gICAgc2V0RW5hYmxlZCA9IChhY3Rpb24pIC0+XG4gICAgICBzd2l0Y2ggYWN0aW9uXG4gICAgICAgIHdoZW4gJ3JldmVydFN1Yk1lbnUnXG4gICAgICAgICAgIyByZXZlcnQgc3ViLW1lbnUgc3RhdGUgZGVwZW5kcyBvbiBwcmVzZW5jZSBvZiBzaGFyZUVkaXRLZXlcbiAgICAgICAgICAtPiAoY2xpZW50LnN0YXRlLm9wZW5lZENvbnRlbnQ/IGFuZCBjbGllbnQuc3RhdGUubWV0YWRhdGE/KSBvciBjbGllbnQuY2FuRWRpdFNoYXJlZCgpXG4gICAgICAgIHdoZW4gJ3JldmVydFRvTGFzdE9wZW5lZERpYWxvZydcbiAgICAgICAgICAtPiBjbGllbnQuc3RhdGUub3BlbmVkQ29udGVudD8gYW5kIGNsaWVudC5zdGF0ZS5tZXRhZGF0YT9cbiAgICAgICAgd2hlbiAnc2hhcmVHZXRMaW5rJywgJ3NoYXJlU3ViTWVudSdcbiAgICAgICAgICAtPiBjbGllbnQuc3RhdGUuc2hhcmVQcm92aWRlcj9cbiAgICAgICAgd2hlbiAncmV2ZXJ0VG9TaGFyZWREaWFsb2cnXG4gICAgICAgICAgIyByZXZlcnQgdG8gc2hhcmVkIG1lbnUgaXRlbSBzdGF0ZSBkZXBlbmRzIG9uIHNoYXJlZERvY3VtZW50SWRcbiAgICAgICAgICAtPiBjbGllbnQuaXNTaGFyZWQoKVxuICAgICAgICB3aGVuICdzaGFyZVVwZGF0ZSdcbiAgICAgICAgICAjIHNoYXJlVXBkYXRlIG1lbnUgaXRlbSBzdGF0ZSBkZXBlbmRzIG9uIHByZXNlbmNlIG9mIHNoYXJlRWRpdEtleSBvciByZWFkV3JpdGUgYWNjZXNzS2V5XG4gICAgICAgICAgLT4gY2xpZW50LmNhbkVkaXRTaGFyZWQoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdHJ1ZVxuXG4gICAgZ2V0SXRlbXMgPSAoc3ViTWVudUl0ZW1zKSA9PlxuICAgICAgaWYgc3ViTWVudUl0ZW1zXG4gICAgICAgIEBwYXJzZU1lbnVJdGVtcyBzdWJNZW51SXRlbXMsIGNsaWVudFxuICAgICAgZWxzZVxuICAgICAgICBudWxsXG5cbiAgICBuYW1lcyA9XG4gICAgICBuZXdGaWxlRGlhbG9nOiB0ciBcIn5NRU5VLk5FV1wiXG4gICAgICBvcGVuRmlsZURpYWxvZzogdHIgXCJ+TUVOVS5PUEVOXCJcbiAgICAgIGNsb3NlRmlsZURpYWxvZzogdHIgXCJ+TUVOVS5DTE9TRVwiXG4gICAgICByZXZlcnRUb0xhc3RPcGVuZWREaWFsb2c6IHRyIFwifk1FTlUuUkVWRVJUX1RPX0xBU1RfT1BFTkVEXCJcbiAgICAgIHJldmVydFRvU2hhcmVkRGlhbG9nOiB0ciBcIn5NRU5VLlJFVkVSVF9UT19TSEFSRURfVklFV1wiXG4gICAgICBzYXZlOiB0ciBcIn5NRU5VLlNBVkVcIlxuICAgICAgc2F2ZUZpbGVBc0RpYWxvZzogdHIgXCJ+TUVOVS5TQVZFX0FTXCJcbiAgICAgIHNhdmVTZWNvbmRhcnlGaWxlQXNEaWFsb2c6IHRyIFwifk1FTlUuRVhQT1JUX0FTXCJcbiAgICAgIGNyZWF0ZUNvcHk6IHRyIFwifk1FTlUuQ1JFQVRFX0NPUFlcIlxuICAgICAgc2hhcmVHZXRMaW5rOiB0ciBcIn5NRU5VLlNIQVJFX0dFVF9MSU5LXCJcbiAgICAgIHNoYXJlVXBkYXRlOiB0ciBcIn5NRU5VLlNIQVJFX1VQREFURVwiXG4gICAgICBkb3dubG9hZERpYWxvZzogdHIgXCJ+TUVOVS5ET1dOTE9BRFwiXG4gICAgICByZW5hbWVEaWFsb2c6IHRyIFwifk1FTlUuUkVOQU1FXCJcbiAgICAgIHJldmVydFN1Yk1lbnU6IHRyIFwifk1FTlUuUkVWRVJUX1RPXCJcbiAgICAgIHNoYXJlU3ViTWVudTogdHIgXCJ+TUVOVS5TSEFSRVwiXG5cbiAgICBzdWJNZW51cyA9XG4gICAgICByZXZlcnRTdWJNZW51OiBbJ3JldmVydFRvTGFzdE9wZW5lZERpYWxvZycsICdyZXZlcnRUb1NoYXJlZERpYWxvZyddXG4gICAgICBzaGFyZVN1Yk1lbnU6IFsnc2hhcmVHZXRMaW5rJywgJ3NoYXJlVXBkYXRlJ11cblxuICAgIGl0ZW1zID0gW11cbiAgICBmb3IgaXRlbSwgaSBpbiBtZW51SXRlbXNcbiAgICAgIGlmIGl0ZW0gaXMgJ3NlcGFyYXRvcidcbiAgICAgICAgbWVudUl0ZW0gPVxuICAgICAgICAgIGtleTogXCJzZXBlcmF0b3Ije2l9XCJcbiAgICAgICAgICBzZXBhcmF0b3I6IHRydWVcbiAgICAgIGVsc2UgaWYgaXNTdHJpbmcgaXRlbVxuICAgICAgICBtZW51SXRlbSA9XG4gICAgICAgICAga2V5OiBpdGVtXG4gICAgICAgICAgbmFtZTogQG9wdGlvbnMubWVudU5hbWVzP1tpdGVtXSBvciBuYW1lc1tpdGVtXSBvciBcIlVua25vd24gaXRlbTogI3tpdGVtfVwiXG4gICAgICAgICAgZW5hYmxlZDogc2V0RW5hYmxlZCBpdGVtXG4gICAgICAgICAgaXRlbXM6IGdldEl0ZW1zIHN1Yk1lbnVzW2l0ZW1dXG4gICAgICAgICAgYWN0aW9uOiBzZXRBY3Rpb24gaXRlbVxuICAgICAgZWxzZVxuICAgICAgICBtZW51SXRlbSA9IGl0ZW1cbiAgICAgICAgIyBjbGllbnRzIGNhbiBwYXNzIGluIGN1c3RvbSB7bmFtZTouLi4sIGFjdGlvbjouLi59IG1lbnUgaXRlbXMgd2hlcmUgdGhlIGFjdGlvbiBjYW4gYmUgYSBjbGllbnQgZnVuY3Rpb24gbmFtZSBvciBvdGhlcndpc2UgaXQgaXMgYXNzdW1lZCBhY3Rpb24gaXMgYSBmdW5jdGlvblxuICAgICAgICBpZiBpc1N0cmluZyBpdGVtLmFjdGlvblxuICAgICAgICAgIG1lbnVJdGVtLmtleSA9IGl0ZW0uYWN0aW9uXG4gICAgICAgICAgbWVudUl0ZW0uZW5hYmxlZCA9IHNldEVuYWJsZWQgaXRlbS5hY3Rpb25cbiAgICAgICAgICBtZW51SXRlbS5hY3Rpb24gPSBzZXRBY3Rpb24gaXRlbS5hY3Rpb25cbiAgICAgICAgZWxzZVxuICAgICAgICAgIG1lbnVJdGVtLmVuYWJsZWQgb3I9IHRydWVcbiAgICAgICAgbWVudUl0ZW0uaXRlbXMgPSBnZXRJdGVtcyhpdGVtLml0ZW1zKSBpZiBpdGVtLml0ZW1zXG4gICAgICBpdGVtcy5wdXNoIG1lbnVJdGVtXG4gICAgaXRlbXNcblxuY2xhc3MgQ2xvdWRGaWxlTWFuYWdlclVJXG5cbiAgY29uc3RydWN0b3I6IChAY2xpZW50KS0+XG4gICAgQG1lbnUgPSBudWxsXG4gICAgQGxpc3RlbmVyQ2FsbGJhY2tzID0gW11cblxuICBpbml0OiAob3B0aW9ucykgLT5cbiAgICBvcHRpb25zID0gb3B0aW9ucyBvciB7fVxuICAgICMgc2tpcCB0aGUgbWVudSBpZiBleHBsaWNpdHkgc2V0IHRvIG51bGwgKG1lYW5pbmcgbm8gbWVudSlcbiAgICBpZiBvcHRpb25zLm1lbnUgaXNudCBudWxsXG4gICAgICBpZiB0eXBlb2Ygb3B0aW9ucy5tZW51IGlzICd1bmRlZmluZWQnXG4gICAgICAgIG9wdGlvbnMubWVudSA9IENsb3VkRmlsZU1hbmFnZXJVSU1lbnUuRGVmYXVsdE1lbnVcbiAgICAgIEBtZW51ID0gbmV3IENsb3VkRmlsZU1hbmFnZXJVSU1lbnUgb3B0aW9ucywgQGNsaWVudFxuXG4gICMgZm9yIFJlYWN0IHRvIGxpc3RlbiBmb3IgZGlhbG9nIGNoYW5nZXNcbiAgbGlzdGVuOiAoY2FsbGJhY2spIC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2tzLnB1c2ggY2FsbGJhY2tcblxuICBsaXN0ZW5lckNhbGxiYWNrOiAoZXZ0KSAtPlxuICAgIGZvciBjYWxsYmFjayBpbiBAbGlzdGVuZXJDYWxsYmFja3NcbiAgICAgIGNhbGxiYWNrIGV2dFxuXG4gIGFwcGVuZE1lbnVJdGVtOiAoaXRlbSkgLT5cbiAgICBAbGlzdGVuZXJDYWxsYmFjayBuZXcgQ2xvdWRGaWxlTWFuYWdlclVJRXZlbnQgJ2FwcGVuZE1lbnVJdGVtJywgaXRlbVxuXG4gIHByZXBlbmRNZW51SXRlbTogKGl0ZW0pIC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2sgbmV3IENsb3VkRmlsZU1hbmFnZXJVSUV2ZW50ICdwcmVwZW5kTWVudUl0ZW0nLCBpdGVtXG5cbiAgcmVwbGFjZU1lbnVJdGVtOiAoa2V5LCBpdGVtKSAtPlxuICAgIEBsaXN0ZW5lckNhbGxiYWNrIG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudCAncmVwbGFjZU1lbnVJdGVtJyxcbiAgICAgIGtleToga2V5XG4gICAgICBpdGVtOiBpdGVtXG5cbiAgaW5zZXJ0TWVudUl0ZW1CZWZvcmU6IChrZXksIGl0ZW0pIC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2sgbmV3IENsb3VkRmlsZU1hbmFnZXJVSUV2ZW50ICdpbnNlcnRNZW51SXRlbUJlZm9yZScsXG4gICAgICBrZXk6IGtleVxuICAgICAgaXRlbTogaXRlbVxuXG4gIGluc2VydE1lbnVJdGVtQWZ0ZXI6IChrZXksIGl0ZW0pIC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2sgbmV3IENsb3VkRmlsZU1hbmFnZXJVSUV2ZW50ICdpbnNlcnRNZW51SXRlbUFmdGVyJyxcbiAgICAgIGtleToga2V5XG4gICAgICBpdGVtOiBpdGVtXG5cbiAgc2V0TWVudUJhckluZm86IChpbmZvKSAtPlxuICAgIEBsaXN0ZW5lckNhbGxiYWNrIG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudCAnc2V0TWVudUJhckluZm8nLCBpbmZvXG5cbiAgc2F2ZUZpbGVEaWFsb2c6IChjYWxsYmFjaykgLT5cbiAgICBAX3Nob3dQcm92aWRlckRpYWxvZyAnc2F2ZUZpbGUnLCAodHIgJ35ESUFMT0cuU0FWRScpLCBjYWxsYmFja1xuXG4gIHNhdmVGaWxlQXNEaWFsb2c6IChjYWxsYmFjaykgLT5cbiAgICBAX3Nob3dQcm92aWRlckRpYWxvZyAnc2F2ZUZpbGVBcycsICh0ciAnfkRJQUxPRy5TQVZFX0FTJyksIGNhbGxiYWNrXG5cbiAgc2F2ZVNlY29uZGFyeUZpbGVBc0RpYWxvZzogKGRhdGEsIGNhbGxiYWNrKSAtPlxuICAgIEBfc2hvd1Byb3ZpZGVyRGlhbG9nICdzYXZlU2Vjb25kYXJ5RmlsZUFzJywgKHRyICd+RElBTE9HLkVYUE9SVF9BUycpLCBjYWxsYmFjaywgZGF0YVxuXG4gIG9wZW5GaWxlRGlhbG9nOiAoY2FsbGJhY2spIC0+XG4gICAgQF9zaG93UHJvdmlkZXJEaWFsb2cgJ29wZW5GaWxlJywgKHRyICd+RElBTE9HLk9QRU4nKSwgY2FsbGJhY2tcblxuICBpbXBvcnREYXRhRGlhbG9nOiAoY2FsbGJhY2spIC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2sgbmV3IENsb3VkRmlsZU1hbmFnZXJVSUV2ZW50ICdzaG93SW1wb3J0RGlhbG9nJyxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuXG4gIGRvd25sb2FkRGlhbG9nOiAoZmlsZW5hbWUsIGNvbnRlbnQsIGNhbGxiYWNrKSAtPlxuICAgIEBsaXN0ZW5lckNhbGxiYWNrIG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudCAnc2hvd0Rvd25sb2FkRGlhbG9nJyxcbiAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgY29udGVudDogY29udGVudFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG5cbiAgcmVuYW1lRGlhbG9nOiAoZmlsZW5hbWUsIGNhbGxiYWNrKSAtPlxuICAgIEBsaXN0ZW5lckNhbGxiYWNrIG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudCAnc2hvd1JlbmFtZURpYWxvZycsXG4gICAgICBmaWxlbmFtZTogZmlsZW5hbWVcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuXG4gIHNoYXJlRGlhbG9nOiAoY2xpZW50LCBlbmFibGVMYXJhU2hhcmluZz1mYWxzZSkgLT5cbiAgICBAbGlzdGVuZXJDYWxsYmFjayBuZXcgQ2xvdWRGaWxlTWFuYWdlclVJRXZlbnQgJ3Nob3dTaGFyZURpYWxvZycsXG4gICAgICBjbGllbnQ6IGNsaWVudFxuICAgICAgZW5hYmxlTGFyYVNoYXJpbmc6IGVuYWJsZUxhcmFTaGFyaW5nXG5cbiAgc2hvd0Jsb2NraW5nTW9kYWw6IChtb2RhbFByb3BzKSAtPlxuICAgIEBsaXN0ZW5lckNhbGxiYWNrIG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudCAnc2hvd0Jsb2NraW5nTW9kYWwnLCBtb2RhbFByb3BzXG5cbiAgaGlkZUJsb2NraW5nTW9kYWw6IC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2sgbmV3IENsb3VkRmlsZU1hbmFnZXJVSUV2ZW50ICdoaWRlQmxvY2tpbmdNb2RhbCdcblxuICBlZGl0SW5pdGlhbEZpbGVuYW1lOiAtPlxuICAgIEBsaXN0ZW5lckNhbGxiYWNrIG5ldyBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudCAnZWRpdEluaXRpYWxGaWxlbmFtZSdcblxuICBhbGVydERpYWxvZzogKG1lc3NhZ2UsIHRpdGxlLCBjYWxsYmFjaykgLT5cbiAgICBAbGlzdGVuZXJDYWxsYmFjayBuZXcgQ2xvdWRGaWxlTWFuYWdlclVJRXZlbnQgJ3Nob3dBbGVydERpYWxvZycsXG4gICAgICB0aXRsZTogdGl0bGVcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuXG4gIGNvbmZpcm1EaWFsb2c6IChwYXJhbXMpIC0+XG4gICAgQGxpc3RlbmVyQ2FsbGJhY2sgbmV3IENsb3VkRmlsZU1hbmFnZXJVSUV2ZW50ICdzaG93Q29uZmlybURpYWxvZycsIHBhcmFtc1xuXG4gIF9zaG93UHJvdmlkZXJEaWFsb2c6IChhY3Rpb24sIHRpdGxlLCBjYWxsYmFjaywgZGF0YSkgLT5cbiAgICBAbGlzdGVuZXJDYWxsYmFjayBuZXcgQ2xvdWRGaWxlTWFuYWdlclVJRXZlbnQgJ3Nob3dQcm92aWRlckRpYWxvZycsXG4gICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgdGl0bGU6IHRpdGxlXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgIGRhdGE6IGRhdGFcblxubW9kdWxlLmV4cG9ydHMgPVxuICBDbG91ZEZpbGVNYW5hZ2VyVUlFdmVudDogQ2xvdWRGaWxlTWFuYWdlclVJRXZlbnRcbiAgQ2xvdWRGaWxlTWFuYWdlclVJOiBDbG91ZEZpbGVNYW5hZ2VyVUlcbiAgQ2xvdWRGaWxlTWFuYWdlclVJTWVudTogQ2xvdWRGaWxlTWFuYWdlclVJTWVudVxuIiwibW9kdWxlLmV4cG9ydHMgPSAocGFyYW0pIC0+XG4gIHJldCA9IG51bGxcbiAgbG9jYXRpb24uaGFzaC5zdWJzdHIoMSkuc3BsaXQoXCImXCIpLnNvbWUgKHBhaXIpIC0+XG4gICAga2V5ID0gcGFpci5zcGxpdChcIj1cIilbMF1cbiAgICBpZiBrZXkgaXMgcGFyYW1cbiAgICAgIHZhbHVlID0gcGFpci5zcGxpdChcIj1cIilbMV1cbiAgICAgIGxvb3BcbiAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpXG4gICAgICAgICMgZGVhbCB3aXRoIG11bHRpcGx5LWVuY29kZWQgdmFsdWVzXG4gICAgICAgIGJyZWFrIHVubGVzcyAvJTIwfCUyNS8udGVzdCh2YWx1ZSlcbiAgICAgIHJldCA9IHZhbHVlXG4gIHJldFxuIiwibW9kdWxlLmV4cG9ydHMgPSAocGFyYW0pIC0+XG4gIHBhcmFtID0gcGFyYW0ucmVwbGFjZSgvW1xcW10vLCBcIlxcXFxbXCIpLnJlcGxhY2UoL1tcXF1dLywgXCJcXFxcXVwiKVxuICByZWdleFMgPSBcIltcXFxcPyZdXCIgKyBwYXJhbSArIFwiPShbXiYjXSopXCJcbiAgcmVnZXggPSBuZXcgUmVnRXhwIHJlZ2V4U1xuICByZXN1bHRzID0gcmVnZXguZXhlYyB3aW5kb3cubG9jYXRpb24uaHJlZlxuICBpZiByZXN1bHRzPy5sZW5ndGggPiAxXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCByZXN1bHRzWzFdXG4gIGVsc2VcbiAgICByZXR1cm4gbnVsbFxuIiwiIyBodHRwczovL2NvZmZlZXNjcmlwdC1jb29rYm9vay5naXRodWIuaW8vY2hhcHRlcnMvYXJyYXlzL2NoZWNrLXR5cGUtaXMtYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gKHZhbHVlKSAtPiBBcnJheS5pc0FycmF5IHZhbHVlIG9yIHt9LnRvU3RyaW5nLmNhbGwgdmFsdWUgaXMgJ1tvYmplY3QgQXJyYXldJ1xuIiwibW9kdWxlLmV4cG9ydHMgPSAocGFyYW0pIC0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJhbSkgaXMgJ1tvYmplY3QgU3RyaW5nXSdcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcIn5NRU5VQkFSLlVOVElUTEVEX0RPQ1VNRU5UXCI6IFwiRG9rdW1lbnQxXCIsXG4gICAgXCJ+TUVOVS5ORVdcIjogXCJOZXVcIixcbiAgICBcIn5NRU5VLk9QRU5cIjogXCLDlmZmbmVuXCIsXG4gICAgXCJ+TUVOVS5DTE9TRVwiOiBcIlNjaGxpZcOfZW5cIixcbiAgICBcIn5NRU5VLklNUE9SVF9EQVRBXCI6IFwiRGF0ZW4gaW1wb3J0aWVyZW4gLi4uXCIsXG4gICAgXCJ+TUVOVS5TQVZFXCI6IFwiU3BlaWNoZXJuXCIsXG4gICAgXCJ+TUVOVS5TQVZFX0FTXCI6IFwiU3BlaWNoZXJuIHVudGVyIC4uLlwiLFxuICAgIFwifk1FTlUuRVhQT1JUX0FTXCI6IFwiRGF0ZWkgZXhwb3J0aWVyZW4gYWxzIC4uLlwiLFxuICAgIFwifk1FTlUuQ1JFQVRFX0NPUFlcIjogXCJLb3BpZSBlcnN0ZWxsZW5cIixcbiAgICBcIn5NRU5VLlNIQVJFXCI6IFwiVGVpbGVuIC4uLlwiLFxuICAgIFwifk1FTlUuU0hBUkVfR0VUX0xJTktcIjogXCJMaW5rIGVyaGFsdGVuIGbDvHIgZ2V0ZWlsdGUgQW5zaWNodFwiLFxuICAgIFwifk1FTlUuU0hBUkVfVVBEQVRFXCI6IFwiR2V0ZWlsdGUgQW5zaWNodCBha3R1YWxpc2llcmVuXCIsXG4gICAgXCJ+TUVOVS5ET1dOTE9BRFwiOiBcIkRvd25sb2FkXCIsXG4gICAgXCJ+TUVOVS5SRU5BTUVcIjogXCJVbWJlbmVubmVuXCIsXG4gICAgXCJ+TUVOVS5SRVZFUlRfVE9cIjogXCJadXLDvGNra2VocmVuIC4uLlwiLFxuICAgIFwifk1FTlUuUkVWRVJUX1RPX0xBU1RfT1BFTkVEXCI6IFwiS8O8cnpsaWNoIGdlw7ZmZm5ldGUgRmFzc3VuZ1wiLFxuICAgIFwifk1FTlUuUkVWRVJUX1RPX1NIQVJFRF9WSUVXXCI6IFwiR2V0ZWlsdGUgQW5zaWNodFwiLFxuICAgIFwifkRJQUxPRy5TQVZFXCI6IFwiU3BlaWNoZXJuXCIsXG4gICAgXCJ+RElBTE9HLlNBVkVfQVNcIjogXCJTcGVpY2hlcm4gdW50ZXIgLi4uXCIsXG4gICAgXCJ+RElBTE9HLkVYUE9SVF9BU1wiOiBcIkRhdGVpIGV4cG9ydGllcmVuIGFscyAuLi5cIixcbiAgICBcIn5ESUFMT0cuQ1JFQVRFX0NPUFlcIjogXCJLb3BpZSBlcnN0ZWxsZW4gLi4uXCIsXG4gICAgXCJ+RElBTE9HLk9QRU5cIjogXCLDlmZmbmVuXCIsXG4gICAgXCJ+RElBTE9HLkRPV05MT0FEXCI6IFwiRG93bmxvYWRcIixcbiAgICBcIn5ESUFMT0cuUkVOQU1FXCI6IFwiVW1iZW5lbm5lblwiLFxuICAgIFwifkRJQUxPRy5TSEFSRURcIjogXCJUZWlsZW5cIixcbiAgICBcIn5ESUFMT0cuSU1QT1JUX0RBVEFcIjogXCJEYXRlbiBpbXBvcnRpZXJlblwiLFxuICAgIFwiflBST1ZJREVSLkxPQ0FMX1NUT1JBR0VcIjogXCJMb2NhbCBTdG9yYWdlXCIsXG4gICAgXCJ+UFJPVklERVIuUkVBRF9PTkxZXCI6IFwiTGVzZWFuc2ljaHRcIixcbiAgICBcIn5QUk9WSURFUi5HT09HTEVfRFJJVkVcIjogXCJHb29nbGUgRHJpdmVcIixcbiAgICBcIn5QUk9WSURFUi5ET0NVTUVOVF9TVE9SRVwiOiBcIkNvbmNvcmQgQ2xvdWRcIixcbiAgICBcIn5QUk9WSURFUi5MT0NBTF9GSUxFXCI6IFwiTG9rYWxlIERhdGVpXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWSU5HXCI6IFwiU3BlaWNoZXJuXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWRURcIjogXCJHZXNwZWljaGVydFwiLFxuICAgIFwifkZJTEVfU1RBVFVTLlNBVkVEX1RPX1BST1ZJREVSXCI6IFwiQWxsIGNoYW5nZXMgc2F2ZWQgdG8gJXtwcm92aWRlck5hbWV9XCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuVU5TQVZFRFwiOiBcIlVuZ2VzcGVpY2hlcnRcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5GSUxFTkFNRVwiOiBcIkRhdGVpbmFtZVwiLFxuICAgIFwifkZJTEVfRElBTE9HLk9QRU5cIjogXCLDlmZmbmVuXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuU0FWRVwiOiBcIlNwZWljaGVyblwiLFxuICAgIFwifkZJTEVfRElBTE9HLkNBTkNFTFwiOiBcIkFiYnJlY2hlblwiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRVwiOiBcIkzDtnNjaGVuXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFX0NPTkZJUk1cIjogXCJTaW5kIFNpZSBzaWNoZXIsIGRhc3MgJXtmaWxlbmFtZX0gZ2Vsw7ZzY2h0IHdlcmRlbiBzb2xsP1wiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRURfVElUTEVcIjogXCJEYXRlaSBsw7ZzY2hlblwiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRURfTUVTU0FHRVwiOiBcIiV7ZmlsZW5hbWV9IHd1cmRlIGdlbMO2c2NodFwiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURJTkdcIjogXCJMYWRlbi4uLlwiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURfRk9MREVSX0VSUk9SXCI6IFwiKioqIEZlaGxlciBiZWltIExhZGVuIGRlciBPcmRuZXJpbmhhbHRlICoqKlwiLFxuICAgIFwifkZJTEVfRElBTE9HLkRPV05MT0FEXCI6IFwiRG93bmxvYWRcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5ET1dOTE9BRF9OT1RFXCI6IFwiQWNodHVuZzogQmVpIFNhZmFyaSBrw7ZubnRlIGRpZXNlIERhdGVpIFxcXCJ1bmJla2FubnRcXFwiIGhlacOfZW4gdW5kIHNvbGx0ZSBtYW51ZWxsIG1pdCBkZXIgLmNvZGFwIEVyd2VpdGVydW5nIHZlcnNlaGVuIHdlcmRlbi5cIixcbiAgICBcIn5ET1dOTE9BRF9ESUFMT0cuRE9XTkxPQURcIjogXCJEb3dubG9hZFwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5DQU5DRUxcIjogXCJBYmJyZWNoZW5cIixcbiAgICBcIn5ET1dOTE9BRF9ESUFMT0cuSU5DTFVERV9TSEFSRV9JTkZPXCI6IFwiSW5jbHVkZSBzaGFyaW5nIGluZm9ybWF0aW9uIGluIGRvd25sb2FkZWQgZmlsZVwiLFxuICAgIFwiflJFTkFNRV9ESUFMT0cuUkVOQU1FXCI6IFwiVW1iZW5lbm5lblwiLFxuICAgIFwiflJFTkFNRV9ESUFMT0cuQ0FOQ0VMXCI6IFwiQWJicmVjaGVuXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlcIjogXCJLb3BpZXJlblwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5WSUVXXCI6IFwiVmlld1wiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DTE9TRVwiOiBcIlNjaGxpZcOfZW5cIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9TVUNDRVNTXCI6IFwiVGhlIGluZm8gaGFzIGJlZW4gY29waWVkIHRvIHRoZSBjbGlwYm9hcmQuXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlfRVJST1JcIjogXCJTb3JyeSwgdGhlIGluZm8gd2FzIG5vdCBhYmxlIHRvIGJlIGNvcGllZCB0byB0aGUgY2xpcGJvYXJkLlwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZX1RJVExFXCI6IFwiQ29weSBSZXN1bHRcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuTE9OR0VWSVRZX1dBUk5JTkdcIjogXCJUaGUgc2hhcmVkIGNvcHkgb2YgdGhpcyBkb2N1bWVudCB3aWxsIGJlIHJldGFpbmVkIHVudGlsIGl0IGhhcyBub3QgYmVlbiBhY2Nlc3NlZCBmb3Igb3ZlciBhIHllYXIuXCIsXG4gICAgXCJ+U0hBUkVfVVBEQVRFLlRJVExFXCI6IFwiU2hhcmVkIFZpZXcgVXBkYXRlZFwiLFxuICAgIFwiflNIQVJFX1VQREFURS5NRVNTQUdFXCI6IFwiVGhlIHNoYXJlZCB2aWV3IHdhcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5cIixcbiAgICBcIn5DT05GSVJNLk9QRU5fRklMRVwiOiBcIllvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcy4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIG9wZW4gYSBuZXcgZG9jdW1lbnQ/XCIsXG4gICAgXCJ+Q09ORklSTS5ORVdfRklMRVwiOiBcIllvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcy4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBkb2N1bWVudD9cIixcbiAgICBcIn5DT05GSVJNLkFVVEhPUklaRV9PUEVOXCI6IFwiQXV0aG9yaXphdGlvbiBpcyByZXF1aXJlZCB0byBvcGVuIHRoZSBkb2N1bWVudC4gV291bGQgeW91IGxpa2UgdG8gcHJvY2VlZCB3aXRoIGF1dGhvcml6YXRpb24/XCIsXG4gICAgXCJ+Q09ORklSTS5BVVRIT1JJWkVfU0FWRVwiOiBcIkF1dGhvcml6YXRpb24gaXMgcmVxdWlyZWQgdG8gc2F2ZSB0aGUgZG9jdW1lbnQuIFdvdWxkIHlvdSBsaWtlIHRvIHByb2NlZWQgd2l0aCBhdXRob3JpemF0aW9uP1wiLFxuICAgIFwifkNPTkZJUk0uQ0xPU0VfRklMRVwiOiBcIllvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcy4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNsb3NlIHRoZSBkb2N1bWVudD9cIixcbiAgICBcIn5DT05GSVJNLlJFVkVSVF9UT19MQVNUX09QRU5FRFwiOiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXZlcnQgdGhlIGRvY3VtZW50IHRvIGl0cyBtb3N0IHJlY2VudGx5IG9wZW5lZCBzdGF0ZT9cIixcbiAgICBcIn5DT05GSVJNLlJFVkVSVF9UT19TSEFSRURfVklFV1wiOiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXZlcnQgdGhlIGRvY3VtZW50IHRvIGl0cyBtb3N0IHJlY2VudGx5IHNoYXJlZCBzdGF0ZT9cIixcbiAgICBcIn5DT05GSVJNX0RJQUxPRy5USVRMRVwiOiBcIkFyZSB5b3Ugc3VyZT9cIixcbiAgICBcIn5DT05GSVJNX0RJQUxPRy5ZRVNcIjogXCJKYVwiLFxuICAgIFwifkNPTkZJUk1fRElBTE9HLk5PXCI6IFwiTmVpblwiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLkRST1BfRklMRV9IRVJFXCI6IFwiRHJvcCBmaWxlIGhlcmUgb3IgY2xpY2sgaGVyZSB0byBzZWxlY3QgYSBmaWxlLlwiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX1NFTEVDVEVEXCI6IFwiU29ycnksIHlvdSBjYW4gY2hvb3NlIG9ubHkgb25lIGZpbGUgdG8gb3Blbi5cIixcbiAgICBcIn5MT0NBTF9GSUxFX0RJQUxPRy5NVUxUSVBMRV9GSUxFU19EUk9QUEVEXCI6IFwiU29ycnksIHlvdSBjYW4ndCBkcm9wIG1vcmUgdGhhbiBvbmUgZmlsZS5cIixcbiAgICBcIn5JTVBPUlQuTE9DQUxfRklMRVwiOiBcIkxvY2FsIEZpbGVcIixcbiAgICBcIn5JTVBPUlQuVVJMXCI6IFwiVVJMXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5NVUxUSVBMRV9VUkxTX0RST1BQRURcIjogXCJTb3JyeSwgeW91IGNhbiBjaG9vc2Ugb25seSBvbmUgdXJsIHRvIG9wZW4uXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5QTEVBU0VfRU5URVJfVVJMXCI6IFwiUGxlYXNlIGVudGVyIGEgdXJsIHRvIGltcG9ydC5cIixcbiAgICBcIn5VUkxfVEFCLkRST1BfVVJMX0hFUkVcIjogXCJEcm9wIFVSTCBoZXJlIG9yIGVudGVyIFVSTCBiZWxvd1wiLFxuICAgIFwiflVSTF9UQUIuSU1QT1JUXCI6IFwiSW1wb3J0XCIsXG4gICAgXCJ+Q0xJRU5UX0VSUk9SLlRJVExFXCI6IFwiRXJyb3JcIixcbiAgICBcIn5BTEVSVF9ESUFMT0cuVElUTEVcIjogXCJBbGVydFwiLFxuICAgIFwifkFMRVJUX0RJQUxPRy5DTE9TRVwiOiBcIkNsb3NlXCIsXG4gICAgXCJ+QUxFUlQuTk9fUFJPVklERVJcIjogXCJDb3VsZCBub3Qgb3BlbiB0aGUgc3BlY2lmaWVkIGRvY3VtZW50IGJlY2F1c2UgYW4gYXBwcm9wcmlhdGUgcHJvdmlkZXIgaXMgbm90IGF2YWlsYWJsZS5cIixcbiAgICBcIn5HT09HTEVfRFJJVkUuTE9HSU5fQlVUVE9OX0xBQkVMXCI6IFwiTG9naW4gdG8gR29vZ2xlXCIsXG4gICAgXCJ+R09PR0xFX0RSSVZFLkNPTk5FQ1RJTkdfTUVTU0FHRVwiOiBcIkNvbm5lY3RpbmcgdG8gR29vZ2xlLi4uXCIsXG4gICAgXCJ+R09PR0xFX0RSSVZFLkVSUk9SX01JU1NJTkdfQ0xJRU5USURcIjogXCJNaXNzaW5nIHJlcXVpcmVkIGNsaWVudElkIGluIGdvb2dsZURyaXZlIHByb3ZpZGVyIG9wdGlvbnNcIixcbiAgICBcIn5ET0NTVE9SRS5MT0FEXzQwM19FUlJPUlwiOiBcIllvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gbG9hZCAle2ZpbGVuYW1lfS48YnI+PGJyPklmIHlvdSBhcmUgdXNpbmcgc29tZSBlbHNlJ3Mgc2hhcmVkIGRvY3VtZW50IGl0IG1heSBoYXZlIGJlZW4gdW5zaGFyZWQuXCIsXG4gICAgXCJ+RE9DU1RPUkUuTE9BRF9TSEFSRURfNDA0X0VSUk9SXCI6IFwiVW5hYmxlIHRvIGxvYWQgdGhlIHJlcXVlc3RlZCBzaGFyZWQgZG9jdW1lbnQuPGJyPjxicj5QZXJoYXBzIHRoZSBmaWxlIHdhcyBub3Qgc2hhcmVkP1wiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfNDA0X0VSUk9SXCI6IFwiVW5hYmxlIHRvIGxvYWQgJXtmaWxlbmFtZX1cIixcbiAgICBcIn5ET0NTVE9SRS5TQVZFXzQwM19FUlJPUlwiOiBcIllvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gc2F2ZSAnJXtmaWxlbmFtZX0nLjxicj48YnI+WW91IG1heSBuZWVkIHRvIGxvZyBpbiBhZ2Fpbi5cIixcbiAgICBcIn5ET0NTVE9SRS5TQVZFX0RVUExJQ0FURV9FUlJPUlwiOiBcIlVuYWJsZSB0byBjcmVhdGUgJXtmaWxlbmFtZX0uICBGaWxlIGFscmVhZHkgZXhpc3RzLlwiLFxuICAgIFwifkRPQ1NUT1JFLlNBVkVfRVJST1JfV0lUSF9NRVNTQUdFXCI6IFwiVW5hYmxlIHRvIHNhdmUgJXtmaWxlbmFtZX06IFsle21lc3NhZ2V9XVwiLFxuICAgIFwifkRPQ1NUT1JFLlNBVkVfRVJST1JcIjogXCJVbmFibGUgdG8gc2F2ZSAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkRPQ1NUT1JFLlJFTU9WRV80MDNfRVJST1JcIjogXCJZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHJlbW92ZSAle2ZpbGVuYW1lfS48YnI+PGJyPllvdSBtYXkgbmVlZCB0byBsb2cgaW4gYWdhaW4uXCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVNT1ZFX0VSUk9SXCI6IFwiVW5hYmxlIHRvIHJlbW92ZSAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkRPQ1NUT1JFLlJFTkFNRV80MDNfRVJST1JcIjogXCJZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHJlbmFtZSAle2ZpbGVuYW1lfS48YnI+PGJyPllvdSBtYXkgbmVlZCB0byBsb2cgaW4gYWdhaW4uXCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVOQU1FX0VSUk9SXCI6IFwiVW5hYmxlIHRvIHJlbmFtZSAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX1RJVExFXCI6IFwiQ29uY29yZCBDbG91ZCBBbGVydFwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQUxFUlRfU0FWRV9USVRMRVwiOiBcIkNvbmNvcmQgQ2xvdWQgQWxlcnRcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLkNPTkZJUk1fU0FWRV9FTFNFV0hFUkVcIjogXCJTYXZlIEVsc2V3aGVyZVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9ET19JVF9MQVRFUlwiOiBcIkknbGwgZG8gaXQgbGF0ZXJcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLlNIVVRfRE9XTl9NRVNTQUdFXCI6IFwiVGhlIENvbmNvcmQgQ2xvdWQgaGFzIGJlZW4gc2h1dCBkb3duIVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uUExFQVNFX1NBVkVfRUxTRVdIRVJFXCI6IFwiUGxlYXNlIHNhdmUgeW91ciBkb2N1bWVudHMgdG8gYW5vdGhlciBsb2NhdGlvbi5cIlxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIn5NRU5VQkFSLlVOVElUTEVEX0RPQ1VNRU5UXCI6IFwiVW50aXRsZWQgRG9jdW1lbnRcIixcblxuICBcIn5NRU5VLk5FV1wiOiBcIk5ld1wiLFxuICBcIn5NRU5VLk9QRU5cIjogXCJPcGVuIC4uLlwiLFxuICBcIn5NRU5VLkNMT1NFXCI6IFwiQ2xvc2VcIixcbiAgXCJ+TUVOVS5JTVBPUlRfREFUQVwiOiBcIkltcG9ydCBkYXRhLi4uXCIsXG4gIFwifk1FTlUuU0FWRVwiOiBcIlNhdmVcIixcbiAgXCJ+TUVOVS5TQVZFX0FTXCI6IFwiU2F2ZSBBcyAuLi5cIixcbiAgXCJ+TUVOVS5FWFBPUlRfQVNcIjogXCJFeHBvcnQgRmlsZSBBcyAuLi5cIixcbiAgXCJ+TUVOVS5DUkVBVEVfQ09QWVwiOiBcIkNyZWF0ZSBhIGNvcHlcIixcbiAgXCJ+TUVOVS5TSEFSRVwiOiBcIlNoYXJlLi4uXCIsXG4gIFwifk1FTlUuU0hBUkVfR0VUX0xJTktcIjogXCJHZXQgbGluayB0byBzaGFyZWQgdmlld1wiLFxuICBcIn5NRU5VLlNIQVJFX1VQREFURVwiOiBcIlVwZGF0ZSBzaGFyZWQgdmlld1wiLFxuICBcIn5NRU5VLkRPV05MT0FEXCI6IFwiRG93bmxvYWRcIixcbiAgXCJ+TUVOVS5SRU5BTUVcIjogXCJSZW5hbWVcIixcbiAgXCJ+TUVOVS5SRVZFUlRfVE9cIjogXCJSZXZlcnQgdG8uLi5cIixcbiAgXCJ+TUVOVS5SRVZFUlRfVE9fTEFTVF9PUEVORURcIjogXCJSZWNlbnRseSBvcGVuZWQgc3RhdGVcIixcbiAgXCJ+TUVOVS5SRVZFUlRfVE9fU0hBUkVEX1ZJRVdcIjogXCJTaGFyZWQgdmlld1wiLFxuXG4gIFwifkRJQUxPRy5TQVZFXCI6IFwiU2F2ZVwiLFxuICBcIn5ESUFMT0cuU0FWRV9BU1wiOiBcIlNhdmUgQXMgLi4uXCIsXG4gIFwifkRJQUxPRy5FWFBPUlRfQVNcIjogXCJFeHBvcnQgRmlsZSBBcyAuLi5cIixcbiAgXCJ+RElBTE9HLkNSRUFURV9DT1BZXCI6IFwiQ3JlYXRlIEEgQ29weSAuLi5cIixcbiAgXCJ+RElBTE9HLk9QRU5cIjogXCJPcGVuXCIsXG4gIFwifkRJQUxPRy5ET1dOTE9BRFwiOiBcIkRvd25sb2FkXCIsXG4gIFwifkRJQUxPRy5SRU5BTUVcIjogXCJSZW5hbWVcIixcbiAgXCJ+RElBTE9HLlNIQVJFRFwiOiBcIlNoYXJlXCIsXG4gIFwifkRJQUxPRy5JTVBPUlRfREFUQVwiOiBcIkltcG9ydCBEYXRhXCIsXG5cbiAgXCJ+UFJPVklERVIuTE9DQUxfU1RPUkFHRVwiOiBcIkxvY2FsIFN0b3JhZ2VcIixcbiAgXCJ+UFJPVklERVIuUkVBRF9PTkxZXCI6IFwiUmVhZCBPbmx5XCIsXG4gIFwiflBST1ZJREVSLkdPT0dMRV9EUklWRVwiOiBcIkdvb2dsZSBEcml2ZVwiLFxuICBcIn5QUk9WSURFUi5ET0NVTUVOVF9TVE9SRVwiOiBcIkNvbmNvcmQgQ2xvdWRcIixcbiAgXCJ+UFJPVklERVIuTE9DQUxfRklMRVwiOiBcIkxvY2FsIEZpbGVcIixcblxuICBcIn5GSUxFX1NUQVRVUy5TQVZJTkdcIjogXCJTYXZpbmcuLi5cIixcbiAgXCJ+RklMRV9TVEFUVVMuU0FWRURcIjogXCJBbGwgY2hhbmdlcyBzYXZlZFwiLFxuICBcIn5GSUxFX1NUQVRVUy5TQVZFRF9UT19QUk9WSURFUlwiOiBcIkFsbCBjaGFuZ2VzIHNhdmVkIHRvICV7cHJvdmlkZXJOYW1lfVwiLFxuICBcIn5GSUxFX1NUQVRVUy5VTlNBVkVEXCI6IFwiVW5zYXZlZFwiLFxuXG4gIFwifkZJTEVfRElBTE9HLkZJTEVOQU1FXCI6IFwiRmlsZW5hbWVcIixcbiAgXCJ+RklMRV9ESUFMT0cuT1BFTlwiOiBcIk9wZW5cIixcbiAgXCJ+RklMRV9ESUFMT0cuU0FWRVwiOiBcIlNhdmVcIixcbiAgXCJ+RklMRV9ESUFMT0cuQ0FOQ0VMXCI6IFwiQ2FuY2VsXCIsXG4gIFwifkZJTEVfRElBTE9HLlJFTU9WRVwiOiBcIkRlbGV0ZVwiLFxuICBcIn5GSUxFX0RJQUxPRy5SRU1PVkVfQ09ORklSTVwiOiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgJXtmaWxlbmFtZX0/XCIsXG4gIFwifkZJTEVfRElBTE9HLlJFTU9WRURfVElUTEVcIjogXCJEZWxldGVkIEZpbGVcIixcbiAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9NRVNTQUdFXCI6IFwiJXtmaWxlbmFtZX0gd2FzIGRlbGV0ZWRcIixcbiAgXCJ+RklMRV9ESUFMT0cuTE9BRElOR1wiOiBcIkxvYWRpbmcuLi5cIixcbiAgXCJ+RklMRV9ESUFMT0cuTE9BRF9GT0xERVJfRVJST1JcIjogXCIqKiogRXJyb3IgbG9hZGluZyBmb2xkZXIgY29udGVudHMgKioqXCIsXG4gIFwifkZJTEVfRElBTE9HLkRPV05MT0FEXCI6IFwiRG93bmxvYWRcIixcbiAgXCJ+RklMRV9ESUFMT0cuRE9XTkxPQURfTk9URVwiOiBcIk5PVEU6IE9uIFNhZmFyaSBmaWxlIG1heSBiZSBcXFwiVW5rbm93blxcXCIgYW5kIHNob3VsZCBiZSBtYW51YWxseSByZW5hbWVkIHdpdGggYSAuY29kYXAgZXh0ZW5zaW9uLlwiLFxuXG5cbiAgXCJ+RE9XTkxPQURfRElBTE9HLkRPV05MT0FEXCI6IFwiRG93bmxvYWRcIixcbiAgXCJ+RE9XTkxPQURfRElBTE9HLkNBTkNFTFwiOiBcIkNhbmNlbFwiLFxuICBcIn5ET1dOTE9BRF9ESUFMT0cuSU5DTFVERV9TSEFSRV9JTkZPXCI6IFwiSW5jbHVkZSBzaGFyaW5nIGluZm9ybWF0aW9uIGluIGRvd25sb2FkZWQgZmlsZVwiLFxuXG4gIFwiflJFTkFNRV9ESUFMT0cuUkVOQU1FXCI6IFwiUmVuYW1lXCIsXG4gIFwiflJFTkFNRV9ESUFMT0cuQ0FOQ0VMXCI6IFwiQ2FuY2VsXCIsXG5cbiAgXCJ+U0hBUkVfRElBTE9HLkNPUFlcIjogXCJDb3B5XCIsXG4gIFwiflNIQVJFX0RJQUxPRy5WSUVXXCI6IFwiVmlld1wiLFxuICBcIn5TSEFSRV9ESUFMT0cuQ0xPU0VcIjogXCJDbG9zZVwiLFxuICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9TVUNDRVNTXCI6IFwiVGhlIGluZm8gaGFzIGJlZW4gY29waWVkIHRvIHRoZSBjbGlwYm9hcmQuXCIsXG4gIFwiflNIQVJFX0RJQUxPRy5DT1BZX0VSUk9SXCI6IFwiU29ycnksIHRoZSBpbmZvIHdhcyBub3QgYWJsZSB0byBiZSBjb3BpZWQgdG8gdGhlIGNsaXBib2FyZC5cIixcbiAgXCJ+U0hBUkVfRElBTE9HLkNPUFlfVElUTEVcIjogXCJDb3B5IFJlc3VsdFwiLFxuICBcIn5TSEFSRV9ESUFMT0cuTE9OR0VWSVRZX1dBUk5JTkdcIjogXCJUaGUgc2hhcmVkIGNvcHkgb2YgdGhpcyBkb2N1bWVudCB3aWxsIGJlIHJldGFpbmVkIHVudGlsIGl0IGhhcyBub3QgYmVlbiBhY2Nlc3NlZCBmb3Igb3ZlciBhIHllYXIuXCIsXG5cbiAgXCJ+U0hBUkVfVVBEQVRFLlRJVExFXCI6IFwiU2hhcmVkIFZpZXcgVXBkYXRlZFwiLFxuICBcIn5TSEFSRV9VUERBVEUuTUVTU0FHRVwiOiBcIlRoZSBzaGFyZWQgdmlldyB3YXMgdXBkYXRlZCBzdWNjZXNzZnVsbHkuXCIsXG5cbiAgXCJ+Q09ORklSTS5PUEVOX0ZJTEVcIjogXCJZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBvcGVuIGEgbmV3IGRvY3VtZW50P1wiLFxuICBcIn5DT05GSVJNLk5FV19GSUxFXCI6IFwiWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY3JlYXRlIGEgbmV3IGRvY3VtZW50P1wiLFxuICBcIn5DT05GSVJNLkFVVEhPUklaRV9PUEVOXCI6IFwiQXV0aG9yaXphdGlvbiBpcyByZXF1aXJlZCB0byBvcGVuIHRoZSBkb2N1bWVudC4gV291bGQgeW91IGxpa2UgdG8gcHJvY2VlZCB3aXRoIGF1dGhvcml6YXRpb24/XCIsXG4gIFwifkNPTkZJUk0uQVVUSE9SSVpFX1NBVkVcIjogXCJBdXRob3JpemF0aW9uIGlzIHJlcXVpcmVkIHRvIHNhdmUgdGhlIGRvY3VtZW50LiBXb3VsZCB5b3UgbGlrZSB0byBwcm9jZWVkIHdpdGggYXV0aG9yaXphdGlvbj9cIixcbiAgXCJ+Q09ORklSTS5DTE9TRV9GSUxFXCI6IFwiWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xvc2UgdGhlIGRvY3VtZW50P1wiLFxuICBcIn5DT05GSVJNLlJFVkVSVF9UT19MQVNUX09QRU5FRFwiOiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXZlcnQgdGhlIGRvY3VtZW50IHRvIGl0cyBtb3N0IHJlY2VudGx5IG9wZW5lZCBzdGF0ZT9cIixcbiAgXCJ+Q09ORklSTS5SRVZFUlRfVE9fU0hBUkVEX1ZJRVdcIjogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmV2ZXJ0IHRoZSBkb2N1bWVudCB0byBpdHMgbW9zdCByZWNlbnRseSBzaGFyZWQgc3RhdGU/XCIsXG5cbiAgXCJ+Q09ORklSTV9ESUFMT0cuVElUTEVcIjogXCJBcmUgeW91IHN1cmU/XCIsXG4gIFwifkNPTkZJUk1fRElBTE9HLllFU1wiOiBcIlllc1wiLFxuICBcIn5DT05GSVJNX0RJQUxPRy5OT1wiOiBcIk5vXCIsXG5cbiAgXCJ+TE9DQUxfRklMRV9ESUFMT0cuRFJPUF9GSUxFX0hFUkVcIjogXCJEcm9wIGZpbGUgaGVyZSBvciBjbGljayBoZXJlIHRvIHNlbGVjdCBhIGZpbGUuXCIsXG4gIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX1NFTEVDVEVEXCI6IFwiU29ycnksIHlvdSBjYW4gY2hvb3NlIG9ubHkgb25lIGZpbGUgdG8gb3Blbi5cIixcbiAgXCJ+TE9DQUxfRklMRV9ESUFMT0cuTVVMVElQTEVfRklMRVNfRFJPUFBFRFwiOiBcIlNvcnJ5LCB5b3UgY2FuJ3QgZHJvcCBtb3JlIHRoYW4gb25lIGZpbGUuXCIsXG5cbiAgXCJ+SU1QT1JULkxPQ0FMX0ZJTEVcIjogXCJMb2NhbCBGaWxlXCIsXG4gIFwifklNUE9SVC5VUkxcIjogXCJVUkxcIixcblxuICBcIn5JTVBPUlRfVVJMLk1VTFRJUExFX1VSTFNfRFJPUFBFRFwiOiBcIlNvcnJ5LCB5b3UgY2FuIGNob29zZSBvbmx5IG9uZSB1cmwgdG8gb3Blbi5cIixcbiAgXCJ+SU1QT1JUX1VSTC5QTEVBU0VfRU5URVJfVVJMXCI6IFwiUGxlYXNlIGVudGVyIGEgdXJsIHRvIGltcG9ydC5cIixcblxuICBcIn5VUkxfVEFCLkRST1BfVVJMX0hFUkVcIjogXCJEcm9wIFVSTCBoZXJlIG9yIGVudGVyIFVSTCBiZWxvd1wiLFxuICBcIn5VUkxfVEFCLklNUE9SVFwiOiBcIkltcG9ydFwiLFxuXG4gIFwifkNMSUVOVF9FUlJPUi5USVRMRVwiOiBcIkVycm9yXCIsXG5cbiAgXCJ+QUxFUlRfRElBTE9HLlRJVExFXCI6IFwiQWxlcnRcIixcbiAgXCJ+QUxFUlRfRElBTE9HLkNMT1NFXCI6IFwiQ2xvc2VcIixcblxuICBcIn5BTEVSVC5OT19QUk9WSURFUlwiOiBcIkNvdWxkIG5vdCBvcGVuIHRoZSBzcGVjaWZpZWQgZG9jdW1lbnQgYmVjYXVzZSBhbiBhcHByb3ByaWF0ZSBwcm92aWRlciBpcyBub3QgYXZhaWxhYmxlLlwiLFxuXG4gIFwifkdPT0dMRV9EUklWRS5MT0dJTl9CVVRUT05fTEFCRUxcIjogXCJMb2dpbiB0byBHb29nbGVcIixcbiAgXCJ+R09PR0xFX0RSSVZFLkNPTk5FQ1RJTkdfTUVTU0FHRVwiOiBcIkNvbm5lY3RpbmcgdG8gR29vZ2xlLi4uXCIsXG4gIFwifkdPT0dMRV9EUklWRS5FUlJPUl9NSVNTSU5HX0NMSUVOVElEXCI6IFwiTWlzc2luZyByZXF1aXJlZCBjbGllbnRJZCBpbiBnb29nbGVEcml2ZSBwcm92aWRlciBvcHRpb25zXCIsXG5cbiAgXCJ+RE9DU1RPUkUuTE9BRF80MDNfRVJST1JcIjogXCJZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGxvYWQgJXtmaWxlbmFtZX0uPGJyPjxicj5JZiB5b3UgYXJlIHVzaW5nIHNvbWUgZWxzZSdzIHNoYXJlZCBkb2N1bWVudCBpdCBtYXkgaGF2ZSBiZWVuIHVuc2hhcmVkLlwiLFxuICBcIn5ET0NTVE9SRS5MT0FEX1NIQVJFRF80MDRfRVJST1JcIjogXCJVbmFibGUgdG8gbG9hZCB0aGUgcmVxdWVzdGVkIHNoYXJlZCBkb2N1bWVudC48YnI+PGJyPlBlcmhhcHMgdGhlIGZpbGUgd2FzIG5vdCBzaGFyZWQ/XCIsXG4gIFwifkRPQ1NUT1JFLkxPQURfNDA0X0VSUk9SXCI6IFwiVW5hYmxlIHRvIGxvYWQgJXtmaWxlbmFtZX1cIixcbiAgXCJ+RE9DU1RPUkUuU0FWRV80MDNfRVJST1JcIjogXCJZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHNhdmUgJyV7ZmlsZW5hbWV9Jy48YnI+PGJyPllvdSBtYXkgbmVlZCB0byBsb2cgaW4gYWdhaW4uXCIsXG4gIFwifkRPQ1NUT1JFLlNBVkVfRFVQTElDQVRFX0VSUk9SXCI6IFwiVW5hYmxlIHRvIGNyZWF0ZSAle2ZpbGVuYW1lfS4gIEZpbGUgYWxyZWFkeSBleGlzdHMuXCIsXG4gIFwifkRPQ1NUT1JFLlNBVkVfRVJST1JfV0lUSF9NRVNTQUdFXCI6IFwiVW5hYmxlIHRvIHNhdmUgJXtmaWxlbmFtZX06IFsle21lc3NhZ2V9XVwiLFxuICBcIn5ET0NTVE9SRS5TQVZFX0VSUk9SXCI6IFwiVW5hYmxlIHRvIHNhdmUgJXtmaWxlbmFtZX1cIixcbiAgXCJ+RE9DU1RPUkUuUkVNT1ZFXzQwM19FUlJPUlwiOiBcIllvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gcmVtb3ZlICV7ZmlsZW5hbWV9Ljxicj48YnI+WW91IG1heSBuZWVkIHRvIGxvZyBpbiBhZ2Fpbi5cIixcbiAgXCJ+RE9DU1RPUkUuUkVNT1ZFX0VSUk9SXCI6IFwiVW5hYmxlIHRvIHJlbW92ZSAle2ZpbGVuYW1lfVwiLFxuICBcIn5ET0NTVE9SRS5SRU5BTUVfNDAzX0VSUk9SXCI6IFwiWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byByZW5hbWUgJXtmaWxlbmFtZX0uPGJyPjxicj5Zb3UgbWF5IG5lZWQgdG8gbG9nIGluIGFnYWluLlwiLFxuICBcIn5ET0NTVE9SRS5SRU5BTUVfRVJST1JcIjogXCJVbmFibGUgdG8gcmVuYW1lICV7ZmlsZW5hbWV9XCIsXG5cbiAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX1NBVkVfVElUTEVcIjogXCJDb25jb3JkIENsb3VkIEFsZXJ0XCIsXG4gIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQUxFUlRfU0FWRV9USVRMRVwiOiBcIkNvbmNvcmQgQ2xvdWQgQWxlcnRcIixcbiAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX1NBVkVfRUxTRVdIRVJFXCI6IFwiU2F2ZSBFbHNld2hlcmVcIixcbiAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX0RPX0lUX0xBVEVSXCI6IFwiSSdsbCBkbyBpdCBsYXRlclwiLFxuICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLlNIVVRfRE9XTl9NRVNTQUdFXCI6IFwiVGhlIENvbmNvcmQgQ2xvdWQgaGFzIGJlZW4gc2h1dCBkb3duIVwiLFxuICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLlBMRUFTRV9TQVZFX0VMU0VXSEVSRVwiOiBcIlBsZWFzZSBzYXZlIHlvdXIgZG9jdW1lbnRzIHRvIGFub3RoZXIgbG9jYXRpb24uXCJcbn1cblxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICAgIFwifk1FTlVCQVIuVU5USVRMRURfRE9DVU1FTlRcIjogXCJEb2N1bWVudG8gc2luIHTDrXR1bG9cIixcbiAgICBcIn5NRU5VLk5FV1wiOiBcIk51ZXZvXCIsXG4gICAgXCJ+TUVOVS5PUEVOXCI6IFwiQWJyaXIgLi4uXCIsXG4gICAgXCJ+TUVOVS5DTE9TRVwiOiBcIkNlcnJhclwiLFxuICAgIFwifk1FTlUuSU1QT1JUX0RBVEFcIjogXCJJbXBvcnRhciBkYXRvcy4uLlwiLFxuICAgIFwifk1FTlUuU0FWRVwiOiBcIkd1YXJkYXJcIixcbiAgICBcIn5NRU5VLlNBVkVfQVNcIjogXCJHdWFyZGFyIGNvbW8gLi4uXCIsXG4gICAgXCJ+TUVOVS5FWFBPUlRfQVNcIjogXCJFeHBvcnRhciBhcmNoaXZvIGNvbW8gLi4uXCIsXG4gICAgXCJ+TUVOVS5DUkVBVEVfQ09QWVwiOiBcIkNyZWFyIHVuYSBjb3BpYVwiLFxuICAgIFwifk1FTlUuU0hBUkVcIjogXCJDb21wYXJ0aXIuLi5cIixcbiAgICBcIn5NRU5VLlNIQVJFX0dFVF9MSU5LXCI6IFwiT2J0ZW5lciBlbmxhY2UgZGUgbGEgdmlzdGEgY29tcGFydGlkYVwiLFxuICAgIFwifk1FTlUuU0hBUkVfVVBEQVRFXCI6IFwiQWN0dWFsaXphciB2aXN0YSBjb21wYXJ0aWRhXCIsXG4gICAgXCJ+TUVOVS5ET1dOTE9BRFwiOiBcIkJhamFyXCIsXG4gICAgXCJ+TUVOVS5SRU5BTUVcIjogXCJSZW5vbWJyYXJcIixcbiAgICBcIn5NRU5VLlJFVkVSVF9UT1wiOiBcIlJldmVydGlyIGEuLi5cIixcbiAgICBcIn5NRU5VLlJFVkVSVF9UT19MQVNUX09QRU5FRFwiOiBcIkVzdGFkbyByZWNpZW50ZW1lbnRlIGFiaWVydG9cIixcbiAgICBcIn5NRU5VLlJFVkVSVF9UT19TSEFSRURfVklFV1wiOiBcIlZpc3RhIGNvbXBhcnRpZGFcIixcbiAgICBcIn5ESUFMT0cuU0FWRVwiOiBcIkd1YXJkYXJcIixcbiAgICBcIn5ESUFMT0cuU0FWRV9BU1wiOiBcIkd1YXJkYXIgY29tbyAuLi5cIixcbiAgICBcIn5ESUFMT0cuRVhQT1JUX0FTXCI6IFwiRXhwb3J0YXIgYXJjaGl2byBjb21vIC4uLlwiLFxuICAgIFwifkRJQUxPRy5DUkVBVEVfQ09QWVwiOiBcIkNyZWFyIHVuYSBjb3BpYSAuLi5cIixcbiAgICBcIn5ESUFMT0cuT1BFTlwiOiBcIkFicmlyXCIsXG4gICAgXCJ+RElBTE9HLkRPV05MT0FEXCI6IFwiQmFqYXJcIixcbiAgICBcIn5ESUFMT0cuUkVOQU1FXCI6IFwiUmVub21icmFyXCIsXG4gICAgXCJ+RElBTE9HLlNIQVJFRFwiOiBcIkNvbXBhcnRpclwiLFxuICAgIFwifkRJQUxPRy5JTVBPUlRfREFUQVwiOiBcIkltcG9ydGFyIGRhdG9zXCIsXG4gICAgXCJ+UFJPVklERVIuTE9DQUxfU1RPUkFHRVwiOiBcIkFsbWFjZW5hbWllbnRvIGxvY2FsXCIsXG4gICAgXCJ+UFJPVklERVIuUkVBRF9PTkxZXCI6IFwiU8OzbG8gbGVjdHVyYVwiLFxuICAgIFwiflBST1ZJREVSLkdPT0dMRV9EUklWRVwiOiBcIkdvb2dsZSBEcml2ZVwiLFxuICAgIFwiflBST1ZJREVSLkRPQ1VNRU5UX1NUT1JFXCI6IFwiQ29uY29yZCBDbG91ZFwiLFxuICAgIFwiflBST1ZJREVSLkxPQ0FMX0ZJTEVcIjogXCJBcmNoaXZvIGxvY2FsXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWSU5HXCI6IFwiR3VhcmRhbmRvLi4uXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWRURcIjogXCJTZSBndWFyZGFyb24gdG9kb3MgbG9zIGNhbWJpb3NcIixcbiAgICBcIn5GSUxFX1NUQVRVUy5TQVZFRF9UT19QUk9WSURFUlwiOiBcIlNlIGd1YXJkYXJvbiB0b2RvcyBsb3MgY2FtYmlvcyBlbiAle3Byb3ZpZGVyTmFtZX1cIixcbiAgICBcIn5GSUxFX1NUQVRVUy5VTlNBVkVEXCI6IFwiU2luIGd1YXJkYXJcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5GSUxFTkFNRVwiOiBcIk5vbWJyZSBkZSBhcmNoaXZvXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuT1BFTlwiOiBcIkFicmlyXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuU0FWRVwiOiBcIkd1YXJkYXJcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5DQU5DRUxcIjogXCJDYW5jZWxhclwiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRVwiOiBcIkVsaW1pbmFyXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFX0NPTkZJUk1cIjogXCLCv0NvbmZpcm1hIGVsaW1pbmFyIGVsIGFyY2hpdm8gJXtmaWxlbmFtZX0/XCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9USVRMRVwiOiBcIkFyY2hpdm8gZWxpbWluYWRvXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9NRVNTQUdFXCI6IFwiJXtmaWxlbmFtZX0gZnVlIGVsaW1pbmFkb1wiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURJTkdcIjogXCJDYXJnYW5kby4uLlwiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURfRk9MREVSX0VSUk9SXCI6IFwiKioqIEVycm9yIGFsIGNhcmdhciBjb250ZW5pZG8gZGUgbGEgY2FycGV0YSAqKipcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5ET1dOTE9BRFwiOiBcIkJhamFyXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuRE9XTkxPQURfTk9URVwiOiBcIk5PVEE6IEVuIFNhZmFyaSBlbCBhcmNoaXZvIHB1ZWRlIHNlciBcXFwiRGVzY29ub2NpZG9cXFwiIHkgZGViZW4gc2VyIHJlbm9tYnJhZG8gZGUgbWFuZXJhIG1hbnVhbCBjb24gZXh0ZW5zacOzbiAuY29kYXBcIixcbiAgICBcIn5ET1dOTE9BRF9ESUFMT0cuRE9XTkxPQURcIjogXCJCYWphclwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5DQU5DRUxcIjogXCJDYW5jZWxhclwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5JTkNMVURFX1NIQVJFX0lORk9cIjogXCJJbmNsdWlyIGluZm9ybWFjacOzbiBwYXJhIGNvbXBhcnRpciBlbiBhcmNoaXZvIGJhamFkb1wiLFxuICAgIFwiflJFTkFNRV9ESUFMT0cuUkVOQU1FXCI6IFwiUmVub21icmFyXCIsXG4gICAgXCJ+UkVOQU1FX0RJQUxPRy5DQU5DRUxcIjogXCJDYW5jZWxhclwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZXCI6IFwiQ29waWFyXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLlZJRVdcIjogXCJWZXJcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ0xPU0VcIjogXCJDZXJyYXJcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9TVUNDRVNTXCI6IFwiTGEgaW5mb3JtYWNpw7NuIGhhIHNpZG8gY29waWFkYSBhbCBwb3J0YXBhcGVsZXNcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9FUlJPUlwiOiBcIkRpc2N1bHBhcywgbGEgaW5mb3JtYWNpw7NuIG5vIHB1ZG8gY29waWFyc2UgYWwgcG9ydGFwYXBlbGVzXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlfVElUTEVcIjogXCJSZXN1bHRhZG8gZGUgbGEgY29waWFcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuTE9OR0VWSVRZX1dBUk5JTkdcIjogXCJMYSBjb3BpYSBjb21wYXJ0aWRhIGRlIGVzdGUgZG9jdW1lbnRvIHNlcsOhIHJldGVuaWRhIGhhc3RhIHF1ZSBubyBzZWEgYWNjZWRpZGEgYSBsbyBsYXJnbyBkZSB1biBhw7FvLlwiLFxuICAgIFwiflNIQVJFX1VQREFURS5USVRMRVwiOiBcIlNlIGFjdHVhbGl6w7MgbGEgdmlzdGEgY29tcGFydGlkYVwiLFxuICAgIFwiflNIQVJFX1VQREFURS5NRVNTQUdFXCI6IFwiTGEgdmlzdGEgY29tcGFydGlkYSBmdWUgYWN0dWFsaXphZGEgZXhpdG9zYW1lbnRlLlwiLFxuICAgIFwifkNPTkZJUk0uT1BFTl9GSUxFXCI6IFwiSGF5IGNhbWJpb3Mgc2luIGd1YXJkYXIuIMK/RGVzZWEgaWd1YWwgYWJyaXIgdW4gbnVldm8gZG9jdW1lbnRvP1wiLFxuICAgIFwifkNPTkZJUk0uTkVXX0ZJTEVcIjogXCJIYXkgY2FtYmlvcyBzaW4gZ3VhcmRhci4gwr9EZXNlYSBpZ3VhbCBjcmVhciB1biBudWV2byBkb2N1bWVudG8/XCIsXG4gICAgXCJ+Q09ORklSTS5BVVRIT1JJWkVfT1BFTlwiOiBcIlNlIHJlcXVpZXJlIGF1dG9yaXphY2nDs24gcGFyYSBhYnJpciBlbCBkb2N1bWVudG8uIMK/RGVzZWEgcHJvY2VkZXIgY29uIGxhIGF1dG9yaXphY2nDs24/XCIsXG4gICAgXCJ+Q09ORklSTS5BVVRIT1JJWkVfU0FWRVwiOiBcIlNlIHJlcXVpZXJlIGF1dG9yaXphY2nDs24gcGFyYSBndWFyZGFyIGVsIGRvY3VtZW50by4gwr9EZXNlYSBwcm9jZWRlciBjb24gbGEgYXV0b3JpemFjacOzbj9cIixcbiAgICBcIn5DT05GSVJNLkNMT1NFX0ZJTEVcIjogXCJIYXkgY2FtYmlvcyBzaW4gZ3VhcmRhci4gwr9EZXNlYSBpZ3VhbCBjZXJyYXIgZWwgZG9jdW1lbnRvP1wiLFxuICAgIFwifkNPTkZJUk0uUkVWRVJUX1RPX0xBU1RfT1BFTkVEXCI6IFwiwr9Db25maXJtYSBxdWUgcXVpZXJlIHJldmVydGlyIGVsIGRvY3VtZW50byBhIHN1IGVzdGFkbyBhYmllcnRvIG3DoXMgcmVjaWVudGU/XCIsXG4gICAgXCJ+Q09ORklSTS5SRVZFUlRfVE9fU0hBUkVEX1ZJRVdcIjogXCLCv0NvbmZpcm1hIHF1ZSBxdWllcmUgcmV2ZXJ0aXIgZWwgZG9jdW1lbnRvIGEgc3UgZXN0YWRvIGNvbXBhcnRpZG8gbcOhcyByZWNpZW50ZT9cIixcbiAgICBcIn5DT05GSVJNX0RJQUxPRy5USVRMRVwiOiBcIsK/Q29uZmlybWE/XCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuWUVTXCI6IFwiU8OtXCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuTk9cIjogXCJOb1wiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLkRST1BfRklMRV9IRVJFXCI6IFwiQXJyYXN0cmFyIGFyY2hpdm8gYWPDoSBvIGNsaWMgYWPDoSBwYXJhIHNlbGVjY2lvbmFyIHVuIGFyY2hpdm8uXCIsXG4gICAgXCJ+TE9DQUxfRklMRV9ESUFMT0cuTVVMVElQTEVfRklMRVNfU0VMRUNURURcIjogXCJEaXNjdWxwYXMsIHPDs2xvIHNlIHB1ZWRlIGVsZWdpciB1biBhcmNoaXZvIHBhcmEgYWJyaXIuXCIsXG4gICAgXCJ+TE9DQUxfRklMRV9ESUFMT0cuTVVMVElQTEVfRklMRVNfRFJPUFBFRFwiOiBcIkRpc2N1bHBhcywgbm8gc2UgcHVlZGVuIHNvbHRhciBtw6FzIGRlIHVuIGFyY2hpdm8uXCIsXG4gICAgXCJ+SU1QT1JULkxPQ0FMX0ZJTEVcIjogXCJBcmNoaXZvIGxvY2FsXCIsXG4gICAgXCJ+SU1QT1JULlVSTFwiOiBcIlVSTFwiLFxuICAgIFwifklNUE9SVF9VUkwuTVVMVElQTEVfVVJMU19EUk9QUEVEXCI6IFwiRGlzY3VscGFzLCBzw7NsbyBzZSBwdWVkZSBlbGVnaXIgdW5hIFVSTCBwYXJhIGFicmlyXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5QTEVBU0VfRU5URVJfVVJMXCI6IFwiUG9yIGZhdm9yIGluZ3Jlc2FyIHVuYSBVUkwgcGFyYSBpbXBvcnRhci5cIixcbiAgICBcIn5VUkxfVEFCLkRST1BfVVJMX0hFUkVcIjogXCJBcnJhc3RyYXIgVVJMIGFjw6Egb3IgaW5ncmVzYXIgVVJMIGRlYmFqb1wiLFxuICAgIFwiflVSTF9UQUIuSU1QT1JUXCI6IFwiSW1wb3J0YXJcIixcbiAgICBcIn5DTElFTlRfRVJST1IuVElUTEVcIjogXCJFcnJvclwiLFxuICAgIFwifkFMRVJUX0RJQUxPRy5USVRMRVwiOiBcIkFsZXJ0YVwiLFxuICAgIFwifkFMRVJUX0RJQUxPRy5DTE9TRVwiOiBcIkNlcnJhclwiLFxuICAgIFwifkFMRVJULk5PX1BST1ZJREVSXCI6IFwiTm8gc2UgcHVkbyBhYnJpciBlbCBkb2N1bWVudG8gZXNwZWNpZmljYWRvIHBvcnF1ZSBubyBoYXkgZGlzcG9uaWJsZSB1biBwcm92ZWVkb3IgYXByb3BpYWRvLlwiLFxuICAgIFwifkdPT0dMRV9EUklWRS5MT0dJTl9CVVRUT05fTEFCRUxcIjogXCJMb2d1ZWFyc2UgZW4gR29vZ2xlXCIsXG4gICAgXCJ+R09PR0xFX0RSSVZFLkNPTk5FQ1RJTkdfTUVTU0FHRVwiOiBcIkNvbmVjdGFuZG8gY29uIEdvb2dsZS4uLlwiLFxuICAgIFwifkdPT0dMRV9EUklWRS5FUlJPUl9NSVNTSU5HX0NMSUVOVElEXCI6IFwiRmFsdGEgZWwgaWQgZGUgY2xpZW50ZSByZXF1ZXJpZG8gZW4gbGFzIG9wY2lvbmVzIGRlIHByb3ZlZWRvciBkZSBHb29nbGVEcml2ZVwiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfNDAzX0VSUk9SXCI6IFwiTm8gdGllbmUgcGVybWlzbyBwYXJhIGNhcmdhciBlbCBhcmNoaXZvICV7ZmlsZW5hbWV9Ljxicj48YnI+U2kgZXN0w6EgdXNhbmRvIHVuIGRvY3VtZW50byBjb21wYXJ0aWRvIHBvciBvdHJvIHF1aXrDoXMgbm8gZXN0w6kgbcOhcyBjb21wYXJ0aWRvLlwiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfU0hBUkVEXzQwNF9FUlJPUlwiOiBcIk5vIHNlIHB1ZG8gY2FyZ2FyIGVsIGRvY3VtZW50byBjb21wYXJ0aWRvIHJlcXVlcmlkby48YnI+PGJyPlF1aXrDoXMgZWwgYXJjaGl2byBubyBoYXlhIHNpZG8gY29tcGFydGlkbyBkZSBtb2RvIGFkZWN1YWRvXCIsXG4gICAgXCJ+RE9DU1RPUkUuTE9BRF80MDRfRVJST1JcIjogXCJObyBzZSBwdWRvIGNhcmdhciBlbCBhcmNoaXZvICV7ZmlsZW5hbWV9XCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV80MDNfRVJST1JcIjogXCJObyB0aWVuZSBwZXJtaXNvIHBhcmEgZ3VhcmRhciBlbCBhcmNoaXZvICcle2ZpbGVuYW1lfScuPGJyPjxicj5OZWNlc2l0YSBsb2d1ZWFyc2UgZGUgbnVldm8uXFxuXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV9EVVBMSUNBVEVfRVJST1JcIjogXCJObyBzZSBwdWRvIGNyZWFyICV7ZmlsZW5hbWV9LiBZYSBleGlzdGUgdW4gYXJjaGl2byBjb24gZXNlIG5vbWJyZS5cXG5cIixcbiAgICBcIn5ET0NTVE9SRS5TQVZFX0VSUk9SX1dJVEhfTUVTU0FHRVwiOiBcIk5vIHNlIHB1ZG8gZ3VhcmRhciAle2ZpbGVuYW1lfTogWyV7bWVzc2FnZX1dXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV9FUlJPUlwiOiBcIk5vIHNlIHB1ZG8gZ3VhcmRhciAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkRPQ1NUT1JFLlJFTU9WRV80MDNfRVJST1JcIjogXCJObyB0aWVuZSBwZXJtaXNvIHBhcmEgcXVpdGFyIGVsIGFyY2hpdm8gJXtmaWxlbmFtZX0uPGJyPjxicj5OZWNlc2l0YSBsb2d1ZWFyc2UgZGUgbnVldm8uXCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVNT1ZFX0VSUk9SXCI6IFwiTm8gc2UgcHVkbyByZW1vdmVyICV7ZmlsZW5hbWV9XCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVOQU1FXzQwM19FUlJPUlwiOiBcIk5vIHRpZW5lIHBlcm1pc28gcGFyYSByZW5vbWJyYXIgZWwgYXJjaGl2byAle2ZpbGVuYW1lfS48YnI+PGJyPk5lY2VzaXRhIGxvZ3VlYXJzZSBkZSBudWV2by5cIixcbiAgICBcIn5ET0NTVE9SRS5SRU5BTUVfRVJST1JcIjogXCJObyBzZSBwdWRvIHJlbm9tYnJhciAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX1RJVExFXCI6IFwiQWxlcnRhIGRlIENvbmNvcmQgQ2xvdWRcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLkFMRVJUX1NBVkVfVElUTEVcIjogXCJBbGVydGEgZGUgQ29uY29yZCBDbG91ZFwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX0VMU0VXSEVSRVwiOiBcIkd1YXJkYXIgZW4gY3VhbHF1aWVyIGx1Z2FyXCIsXG4gICAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX0RPX0lUX0xBVEVSXCI6IFwiTG8gaGFyw6kgbcOhcyB0YXJkZVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uU0hVVF9ET1dOX01FU1NBR0VcIjogXCJDb25jb3JkIENsb3VkIGhhIHNpZG8gY2VycmFkb1wiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uUExFQVNFX1NBVkVfRUxTRVdIRVJFXCI6IFwiUG9yIGZhdm9yIGd1YXJkYXIgc3VzIGRvY3VtZW50b3MgZW4gb3RyYSB1YmljYWNpw7NuLlwiXG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gICAgXCJ+TUVOVUJBUi5VTlRJVExFRF9ET0NVTUVOVFwiOiBcItee16HXnteaINec15Ag16nXnteV16hcIixcbiAgICBcIn5NRU5VLk5FV1wiOiBcIteX15PXqVwiLFxuICAgIFwifk1FTlUuT1BFTlwiOiBcItek16rXl1wiLFxuICAgIFwifk1FTlUuQ0xPU0VcIjogXCLXodeS15XXqFwiLFxuICAgIFwifk1FTlUuSU1QT1JUX0RBVEFcIjogXCLXmdeR15Ag16DXqteV16DXmdedXCIsXG4gICAgXCJ+TUVOVS5TQVZFXCI6IFwi16nXnteV16hcIixcbiAgICBcIn5NRU5VLlNBVkVfQVNcIjogXCLXqdee15XXqCDXkdep151cIixcbiAgICBcIn5NRU5VLkVYUE9SVF9BU1wiOiBcIteZ16bXkCDXp9eV15HXpVwiLFxuICAgIFwifk1FTlUuQ1JFQVRFX0NPUFlcIjogXCLXpteV16gg16LXldeq16dcIixcbiAgICBcIn5NRU5VLlNIQVJFXCI6IFwi16nXqtejXCIsXG4gICAgXCJ+TUVOVS5TSEFSRV9HRVRfTElOS1wiOiBcIten15HXnCDXp9eZ16nXldeoINec16bXpNeZ15Qg16nXmdeq15XXpNeZ16pcIixcbiAgICBcIn5NRU5VLlNIQVJFX1VQREFURVwiOiBcItei15PXm9efINem16TXmdeUINep15nXqteV16TXmdeqXCIsXG4gICAgXCJ+TUVOVS5ET1dOTE9BRFwiOiBcIteU15XXqNeTXCIsXG4gICAgXCJ+TUVOVS5SRU5BTUVcIjogXCLXqdeg15Qg16nXnVwiLFxuICAgIFwifk1FTlUuUkVWRVJUX1RPXCI6IFwi15TXl9eW16gg15xcIixcbiAgICBcIn5NRU5VLlJFVkVSVF9UT19MQVNUX09QRU5FRFwiOiBcItee16bXkSDXpNeq15XXlyDXnNeQ15fXqNeV16DXlFwiLFxuICAgIFwifk1FTlUuUkVWRVJUX1RPX1NIQVJFRF9WSUVXXCI6IFwi16bXpNeZ15Qg16nXmdeq15XXpNeZ16pcIixcbiAgICBcIn5ESUFMT0cuU0FWRVwiOiBcItep157XldeoXCIsXG4gICAgXCJ+RElBTE9HLlNBVkVfQVNcIjogXCLXqdee15XXqCDXkdep151cIixcbiAgICBcIn5ESUFMT0cuRVhQT1JUX0FTXCI6IFwi15nXpteQINen15XXkdelINebXCIsXG4gICAgXCJ+RElBTE9HLkNSRUFURV9DT1BZXCI6IFwi16bXldeoINei15XXqtenLi4uXCIsXG4gICAgXCJ+RElBTE9HLk9QRU5cIjogXCLXpNeq15dcIixcbiAgICBcIn5ESUFMT0cuRE9XTkxPQURcIjogXCLXlNeV16jXk1wiLFxuICAgIFwifkRJQUxPRy5SRU5BTUVcIjogXCLXqdeg15Qg16nXnVwiLFxuICAgIFwifkRJQUxPRy5TSEFSRURcIjogXCLXqdeq16NcIixcbiAgICBcIn5ESUFMT0cuSU1QT1JUX0RBVEFcIjogXCLXmdeR15Ag16DXqteV16DXmdedXCIsXG4gICAgXCJ+UFJPVklERVIuTE9DQUxfU1RPUkFHRVwiOiBcIteQ15fXodeV158g157Xp9eV157XmVwiLFxuICAgIFwiflBST1ZJREVSLlJFQURfT05MWVwiOiBcIten16jXmdeQ15Qg15HXnNeR15NcIixcbiAgICBcIn5QUk9WSURFUi5HT09HTEVfRFJJVkVcIjogXCLXqdeo16ogR09PR0xFXCIsXG4gICAgXCJ+UFJPVklERVIuRE9DVU1FTlRfU1RPUkVcIjogXCLXoteg158gQ09OQ09SRFwiLFxuICAgIFwiflBST1ZJREVSLkxPQ0FMX0ZJTEVcIjogXCLXp9eV15HXpSDXnten15XXnteZXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWSU5HXCI6IFwi16nXldee16guLi5cIixcbiAgICBcIn5GSUxFX1NUQVRVUy5TQVZFRFwiOiBcIteb15wg15TXqdeZ16DXldeZ15nXnSDXoNep157XqNeVXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWRURfVE9fUFJPVklERVJcIjogXCLXm9ecINeU16nXmdeg15XXmdeZ150g16DXqdee16jXlSDXnCAle3Byb3ZpZGVyTmFtZX1cIixcbiAgICBcIn5GSUxFX1NUQVRVUy5VTlNBVkVEXCI6IFwi15zXkCDXqdee15XXqFwiLFxuICAgIFwifkZJTEVfRElBTE9HLkZJTEVOQU1FXCI6IFwi16nXnSDXp9eV15HXpVwiLFxuICAgIFwifkZJTEVfRElBTE9HLk9QRU5cIjogXCLXpNeq15dcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5TQVZFXCI6IFwi16nXnteV16hcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5DQU5DRUxcIjogXCLXkdeY15xcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5SRU1PVkVcIjogXCLXnteX16dcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5SRU1PVkVfQ09ORklSTVwiOiBcIteU15DXnSDXkNeq150g15HXmNeV15fXmdedINep15HXqNem15XXoNeb150g15zXnteX15XXpyDXkNeqICV7ZmlsZW5hbWV9XCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9USVRMRVwiOiBcIten15XXkdelINee15fXldenXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9NRVNTQUdFXCI6IFwiJXtmaWxlbmFtZX0g16DXnteX16dcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5MT0FESU5HXCI6IFwi15jXldei158uLi5cIixcbiAgICBcIn5GSUxFX0RJQUxPRy5MT0FEX0ZPTERFUl9FUlJPUlwiOiBcIioqKiDXmNei15XXqiDXkdei16og15jXoteZ16DXqiDXqteV15vXnyDXlNen15XXkdelICoqKlwiLFxuICAgIFwifkZJTEVfRElBTE9HLkRPV05MT0FEXCI6IFwi15TXldeo15NcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5ET1dOTE9BRF9OT1RFXCI6IFwi16nXmdedINec15E6INeU16fXldeR16Ug16DXqdee16gg15sn15zXkCDXmdeT15XXoicg15XXpteo15nXmiDXnNep16DXldeqINeQ16og15TXqdedINeZ15PXoNeZ16og16LXnSDXqteV16HXpNeqIC5DT0RBUFwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5ET1dOTE9BRFwiOiBcIteU15XXqNeTXCIsXG4gICAgXCJ+RE9XTkxPQURfRElBTE9HLkNBTkNFTFwiOiBcIteR15jXnFwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5JTkNMVURFX1NIQVJFX0lORk9cIjogXCLXpteo16Mg16DXqteV16DXmSDXqdeZ16rXldejINeR16fXldeR16Ug16nXlNeV16jXk1wiLFxuICAgIFwiflJFTkFNRV9ESUFMT0cuUkVOQU1FXCI6IFwi16nXoNeUINep151cIixcbiAgICBcIn5SRU5BTUVfRElBTE9HLkNBTkNFTFwiOiBcIteR15jXnFwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZXCI6IFwi15TXoteq16dcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuVklFV1wiOiBcItem16TXlFwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DTE9TRVwiOiBcIteh15LXldeoXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlfU1VDQ0VTU1wiOiBcIteU157XmdeT16Ig15TXldei16rXpyDXnNec15XXl1wiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZX0VSUk9SXCI6IFwi16HXnNeZ15fXlCwg15TXnteZ15PXoiDXnNeQINeg15nXqtefINec15TXoteq16fXlCDXnNec15XXl1wiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZX1RJVExFXCI6IFwi15TXoteq16cg16rXldem15DXlFwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5MT05HRVZJVFlfV0FSTklOR1wiOiBcIteU16LXldeq16cg15TXqdeZ16rXldek15kg16nXnCDXnteh157XmiDXlteUINeZ16nXnteoINei15Mg16nXoNeUINec15zXkCDXqdeZ157XldepXCIsXG4gICAgXCJ+U0hBUkVfVVBEQVRFLlRJVExFXCI6IFwi16bXpNeZ15Qg16nXmdeq15XXpNeZ16og16LXldeT15vXoNeUXCIsXG4gICAgXCJ+U0hBUkVfVVBEQVRFLk1FU1NBR0VcIjogXCLXlNem16TXmdeUINeU16nXmdeq15XXpNeZ16og16LXldeT15vXoNeUINeR15TXptec15fXlFwiLFxuICAgIFwifkNPTkZJUk0uT1BFTl9GSUxFXCI6IFwi15nXqdeg150g16nXmdeg15XXmdeZ150g15zXkCDXqdee15XXqNeZ150uINeU15DXnSDXkNeq150g15HXmNeV15fXmdedINep15HXqNem15XXoNeb150g15zXpNeq15XXlyDXnteh157XmiDXl9eT16k/XCIsXG4gICAgXCJ+Q09ORklSTS5ORVdfRklMRVwiOiBcIteZ16nXoNedINep15nXoNeV15nXmdedINec15Ag16nXnteV16jXmdedLiDXlNeQ150g15DXqtedINeR15jXldeX15nXnSDXqdeR16jXpteV16DXm9edINec15nXpteV16gg157Xodee15og15fXk9epP1wiLFxuICAgIFwifkNPTkZJUk0uQVVUSE9SSVpFX09QRU5cIjogXCLXoNeT16jXqSDXkNeZ16nXldeoINec16TXqteZ15fXqiDXlNee16HXnteaLiDXnNeU157XqdeZ15og16LXnSDXkNeZ16nXldeoP1wiLFxuICAgIFwifkNPTkZJUk0uQVVUSE9SSVpFX1NBVkVcIjogXCLXoNeT16jXqSDXkNeZ16nXldeoINec16nXnteZ16jXqiDXlNee16HXnteaLiDXnNeU157XqdeZ15og16LXnSDXkNeZ16nXldeoP1wiLFxuICAgIFwifkNPTkZJUk0uQ0xPU0VfRklMRVwiOiBcIteZ16nXoNedINep15nXoNeV15nXmdedINec15Ag16nXnteV16jXmdedLiDXnNeh15LXldeoINeQ16og15TXnteh157Xmj9cIixcbiAgICBcIn5DT05GSVJNLlJFVkVSVF9UT19MQVNUX09QRU5FRFwiOiBcIteR15jXldeXINep15HXqNem15XXoNeb150g15zXlNeX15bXmdeoINeQ16og15TXnteh157XmiDXnNee16bXkSDXlNek16rXldeXINeU15DXl9eo15XXnz9cIixcbiAgICBcIn5DT05GSVJNLlJFVkVSVF9UT19TSEFSRURfVklFV1wiOiBcIteR15jXldeXINep15HXqNem15XXoNeb150g15zXlNeX15bXmdeoINeQ16og15TXnteh157XmiDXnNee16bXkSDXlNep15nXqteV16TXmSDXlNeQ15fXqNeV158/XCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuVElUTEVcIjogXCLXkdeY15XXlz9cIixcbiAgICBcIn5DT05GSVJNX0RJQUxPRy5ZRVNcIjogXCLXm9efXCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuTk9cIjogXCLXnNeQXCIsXG4gICAgXCJ+TE9DQUxfRklMRV9ESUFMT0cuRFJPUF9GSUxFX0hFUkVcIjogXCLXqdeX16jXqCDXp9eV15HXpSDXm9eQ158g15DXlSDXlNen15zXpyDXnNeR15fXmdeo16og16fXldeR16VcIixcbiAgICBcIn5MT0NBTF9GSUxFX0RJQUxPRy5NVUxUSVBMRV9GSUxFU19TRUxFQ1RFRFwiOiBcIteh15zXmdeX15QsINeg15nXqtefINec15HXl9eV16gg16jXpyDXp9eV15HXpSDXkNeX15Mg15zXpNeq15nXl9eULlwiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX0RST1BQRURcIjogXCLXodec15nXl9eULCDXnNeQINeg15nXqtefINec16nXl9eo16gg15nXldeq16gg157Xp9eV15HXpSDXkNeX15MuXCIsXG4gICAgXCJ+SU1QT1JULkxPQ0FMX0ZJTEVcIjogXCLXp9eV15HXpSDXnten15XXnteZXCIsXG4gICAgXCJ+SU1QT1JULlVSTFwiOiBcIlVSTFwiLFxuICAgIFwifklNUE9SVF9VUkwuTVVMVElQTEVfVVJMU19EUk9QUEVEXCI6IFwi16HXnNeZ15fXlCwg16DXmdeq158g15zXpNeq15XXlyDXqNenINen15nXqdeV16gg15DXl9eTXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5QTEVBU0VfRU5URVJfVVJMXCI6IFwi15TXp9ec15nXk9eVIFVSTCDXnNeZ15HXldeQXCIsXG4gICAgXCJ+VVJMX1RBQi5EUk9QX1VSTF9IRVJFXCI6IFwi16nXl9eo16ggVVJMINek15Qg15DXlSDXlNen15zXkyBVUkwg157XqteX16pcIixcbiAgICBcIn5VUkxfVEFCLklNUE9SVFwiOiBcIteZ15HXkFwiLFxuICAgIFwifkNMSUVOVF9FUlJPUi5USVRMRVwiOiBcIteY16LXldeqXCIsXG4gICAgXCJ+QUxFUlRfRElBTE9HLlRJVExFXCI6IFwi15DXlteU16jXlFwiLFxuICAgIFwifkFMRVJUX0RJQUxPRy5DTE9TRVwiOiBcIteh15LXldeoXCIsXG4gICAgXCJ+QUxFUlQuTk9fUFJPVklERVJcIjogXCLXnNeQINeg15nXqtefINec16TXqteV15cg15DXqiDXlNee16HXnteaINee16TXoNeZINep15TXqdeo16og15DXmdeg15Ug15bXnteZ159cIixcbiAgICBcIn5HT09HTEVfRFJJVkUuTE9HSU5fQlVUVE9OX0xBQkVMXCI6IFwi15TXm9eg16Eg15xHT09HTEVcIixcbiAgICBcIn5HT09HTEVfRFJJVkUuQ09OTkVDVElOR19NRVNTQUdFXCI6IFwi157XqteX15HXqCDXnEdPT0dMRVwiLFxuICAgIFwifkdPT0dMRV9EUklWRS5FUlJPUl9NSVNTSU5HX0NMSUVOVElEXCI6IFwi15fXodeo15nXnSDXpNeo15jXmSDXnNen15XXlyDXkUdPT0dMRVwiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfNDAzX0VSUk9SXCI6IFwi15DXmdefINeQ15nXqdeV16gg15zXpNeq15XXlyDXkNeqICUuINeQ150g15DXqtedINee16nXqtee16nXmdedINeR157Xodee15og16nXmdeq15XXpNeZINep15wg157Xmdep15TXlSDXkNeX16gg15nXmdeq15vXnyDXqdeU16fXldeR16Ug15zXkCDXoNep157XqC5cIixcbiAgICBcIn5ET0NTVE9SRS5MT0FEX1NIQVJFRF80MDRfRVJST1JcIjogXCLXnNeQINeg15nXqtefINec15TXotec15XXqiDXkNeqINeU157Xodee15og15TXqdeZ16rXldek15kg15TXnteR15XXp9epLiDXkNeV15zXmSDXlNen15XXkdelINec15Ag16nXldeq16M/XCIsXG4gICAgXCJ+RE9DU1RPUkUuTE9BRF80MDRfRVJST1JcIjogXCLXnNeQINeg15nXqtefINec15TXotec15XXqiDXkNeqICVcIixcbiAgICBcIn5ET0NTVE9SRS5TQVZFXzQwM19FUlJPUlwiOiBcIteQ15nXnyDXkNeZ16nXldeoINec16nXnteZ16jXqiAnJXtmaWxlbmFtZX0nLjxicj48YnI+INeZ15nXqteb158g16nXqtem15jXqNeb15Ug15zXlNeb16DXoSDXqdeV15EuXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV9EVVBMSUNBVEVfRVJST1JcIjogXCLXnNeQINeg15nXqtefINec15nXpteV16gg15DXqiAle2ZpbGVuYW1lfSDXlNen15XXkdelINeb15HXqCDXp9eZ15nXnS5cIixcbiAgICBcIn5ET0NTVE9SRS5TQVZFX0VSUk9SX1dJVEhfTUVTU0FHRVwiOiBcItec15Ag16DXmdeq158g15zXqdee15XXqCDXkNeqICV7ZmlsZW5hbWV9OiBbJXttZXNzYWdlfV1cIixcbiAgICBcIn5ET0NTVE9SRS5TQVZFX0VSUk9SXCI6IFwi15zXkCDXoNeZ16rXnyDXnNep157XldeoINeQ16ogJXtmaWxlbmFtZX1cIixcbiAgICBcIn5ET0NTVE9SRS5SRU1PVkVfNDAzX0VSUk9SXCI6IFwi15DXmdefINeQ15nXqdeV16gg15zXlNeh16jXqiAle2ZpbGVuYW1lfS48YnI+PGJyPiDXmdepINem15XXqNeaINec15TXm9eg16Eg16nXldeRLlwiLFxuICAgIFwifkRPQ1NUT1JFLlJFTU9WRV9FUlJPUlwiOiBcItec15Ag16DXmdeq158g15zXlNeh15nXqCDXkNeqICV7ZmlsZW5hbWV9XCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVOQU1FXzQwM19FUlJPUlwiOiBcIteQ15nXnyDXkNeZ16nXldeoINec16nXmdeg15XXmSDXqdedICV7ZmlsZW5hbWV9Ljxicj48YnI+INeZ16kg16bXldeo15og15zXlNeb16DXoSDXqdeV15EuXCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVOQU1FX0VSUk9SXCI6IFwi15zXkCDXoNeZ16rXnyDXnNep16DXldeqINeQ16og16nXnSAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX1RJVExFXCI6IFwi15DXlteU16jXqiDXoteg158gQ09OQ09SRFwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQUxFUlRfU0FWRV9USVRMRVwiOiBcIteQ15bXlNeo16og16LXoNefIENPTkNPUkRcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLkNPTkZJUk1fU0FWRV9FTFNFV0hFUkVcIjogXCLXqdee15XXqCDXkdee16fXldedINeQ15fXqFwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9ET19JVF9MQVRFUlwiOiBcIteZ15XXqteoINee15DXldeX16hcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLlNIVVRfRE9XTl9NRVNTQUdFXCI6IFwi16LXoNefIENPTkNPUkQg16DXodeS16ghXCIsXG4gICAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5QTEVBU0VfU0FWRV9FTFNFV0hFUkVcIjogXCLXqdee15XXqCDXnteh157XmiDXkdee15nXp9eV150g15DXl9eoLlwiXG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gICAgXCJ+TUVOVUJBUi5VTlRJVExFRF9ET0NVTUVOVFwiOiBcIsSwc2ltc2l6IERvc3lhXCIsXG4gICAgXCJ+TUVOVS5ORVdcIjogXCJZZW5pXCIsXG4gICAgXCJ+TUVOVS5PUEVOXCI6IFwiQcOnXCIsXG4gICAgXCJ+TUVOVS5DTE9TRVwiOiBcIkthcGF0XCIsXG4gICAgXCJ+TUVOVS5JTVBPUlRfREFUQVwiOiBcIlZlcmlsZXJpIGFrdGFyLi4uXCIsXG4gICAgXCJ+TUVOVS5TQVZFXCI6IFwiS2F5ZGV0XCIsXG4gICAgXCJ+TUVOVS5TQVZFX0FTXCI6IFwiRmFya2zEsSBrYXlkZXQuLi5cIixcbiAgICBcIn5NRU5VLkVYUE9SVF9BU1wiOiBcIkRvc3lhecSxIGTEscWfYSBha3RhciAuLi5cIixcbiAgICBcIn5NRU5VLkNSRUFURV9DT1BZXCI6IFwiWWVuaSBiaXIga29weWEgb2x1xZ90dXJcIixcbiAgICBcIn5NRU5VLlNIQVJFXCI6IFwiUGF5bGHFny4uLlwiLFxuICAgIFwifk1FTlUuU0hBUkVfR0VUX0xJTktcIjogXCJQYXlsYcWfxLFsYWJpbGlyIEJhxJ9sYW50xLF5xLEgQWxcIixcbiAgICBcIn5NRU5VLlNIQVJFX1VQREFURVwiOiBcIlBheWxhxZ/EsW3EsSBHw7xuY2VsbGVcIixcbiAgICBcIn5NRU5VLkRPV05MT0FEXCI6IFwixLBuZGlyXCIsXG4gICAgXCJ+TUVOVS5SRU5BTUVcIjogXCJZZW5pZGVuIEFkbGFuZMSxclwiLFxuICAgIFwifk1FTlUuUkVWRVJUX1RPXCI6IFwiRMO2bsO8xZ90w7xyXCIsXG4gICAgXCJ+TUVOVS5SRVZFUlRfVE9fTEFTVF9PUEVORURcIjogXCJTb24gQcOnxLFsYW4gVmVyc2l5b25cIixcbiAgICBcIn5NRU5VLlJFVkVSVF9UT19TSEFSRURfVklFV1wiOiBcIlBheWxhxZ/EsW1sxLEgZ8O2csO8bsO8bVwiLFxuICAgIFwifkRJQUxPRy5TQVZFXCI6IFwiS2F5ZGV0XCIsXG4gICAgXCJ+RElBTE9HLlNBVkVfQVNcIjogXCJGYXJrbMSxIGtheWRldFwiLFxuICAgIFwifkRJQUxPRy5FWFBPUlRfQVNcIjogXCJEb3N5YXnEsSBExLHFn2EgQWt0YXIuLi5cIixcbiAgICBcIn5ESUFMT0cuQ1JFQVRFX0NPUFlcIjogXCJLb3B5YXPEsW7EsSBPbHXFn3R1ci4uLlwiLFxuICAgIFwifkRJQUxPRy5PUEVOXCI6IFwiQcOnXCIsXG4gICAgXCJ+RElBTE9HLkRPV05MT0FEXCI6IFwixLBuZGlyXCIsXG4gICAgXCJ+RElBTE9HLlJFTkFNRVwiOiBcIlllbmlkZW4gQWRsYW5kxLFyXCIsXG4gICAgXCJ+RElBTE9HLlNIQVJFRFwiOiBcIlBheWxhxZ9cIixcbiAgICBcIn5ESUFMT0cuSU1QT1JUX0RBVEFcIjogXCJWZXJpbGVyaSBBa3RhclwiLFxuICAgIFwiflBST1ZJREVSLkxPQ0FMX1NUT1JBR0VcIjogXCJZZXJlbCBEZXBvbGFtYVwiLFxuICAgIFwiflBST1ZJREVSLlJFQURfT05MWVwiOiBcIllhbG7EsXpjYSBPa3VuYWJpbGlyXCIsXG4gICAgXCJ+UFJPVklERVIuR09PR0xFX0RSSVZFXCI6IFwiR29vZ2xlIERyaXZlXCIsXG4gICAgXCJ+UFJPVklERVIuRE9DVU1FTlRfU1RPUkVcIjogXCJDb25jb3JkIEJ1bHV0IERlcG9sYW1hXCIsXG4gICAgXCJ+UFJPVklERVIuTE9DQUxfRklMRVwiOiBcIlllcmVsIERvc3lhbGFyXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWSU5HXCI6IFwiS2F5ZGVkaWxpeW9yLi4uXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWRURcIjogXCJUw7xtIGRlxJ9pxZ9pa2xpa2xlciBrYXlkZWRpbGRpXCIsXG4gICAgXCJ+RklMRV9TVEFUVVMuU0FWRURfVE9fUFJPVklERVJcIjogXCJUw7xtIERlxJ9pxZ9pa2xpa2xlciAle3Byb3ZpZGVyTmFtZX0gT2xhcmFrIEtheWRlZGlsZGlcIixcbiAgICBcIn5GSUxFX1NUQVRVUy5VTlNBVkVEXCI6IFwiS2F5ZGVkaWxtZW1pxZ9cIixcbiAgICBcIn5GSUxFX0RJQUxPRy5GSUxFTkFNRVwiOiBcIkRvc3lhIEFkxLFcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5PUEVOXCI6IFwiQcOnXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuU0FWRVwiOiBcIktheWRldFwiLFxuICAgIFwifkZJTEVfRElBTE9HLkNBTkNFTFwiOiBcIsSwcHRhbFwiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRVwiOiBcIlNpbFwiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRV9DT05GSVJNXCI6IFwiJXtmaWxlbmFtZX0gZG9zeWFzxLFuxLEgc2lsbWVrIGlzdGVkacSfaW5pemUgZW1pbiBtaXNpbml6P1wiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRURfVElUTEVcIjogXCJEb3N5YSBTaWxpbmRpXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9NRVNTQUdFXCI6IFwiJXtmaWxlbmFtZX0gZG9zeWFzxLEgc2lsaW5kaVwiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURJTkdcIjogXCJZw7xrbGVuaXlvci4uLlwiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURfRk9MREVSX0VSUk9SXCI6IFwixLDDp2VyaWsgecO8a2xlbmlya2VuIGhhdGEgb2x1xZ90dS5cIixcbiAgICBcIn5GSUxFX0RJQUxPRy5ET1dOTE9BRFwiOiBcIsSwbmRpclwiLFxuICAgIFwifkZJTEVfRElBTE9HLkRPV05MT0FEX05PVEVcIjogXCJOT1Q6IFNhZmFyaSBpbGUgw6dhbMSxxZ/EsXJrZW4gZG9zeWEgXFxcIkJpbGlubWV5ZW5cXFwiIG9sYXJhayBnw7Zyw7xsZWJpbGlyIHZlIC5jb2RhcCB1emFudMSxc8SxIG9sYXJhayBlbCBpbGUgeWVuaWRlbiBhZGxhbmTEsXLEsWxtYXPEsSBnZXJla2ViaWxpci5cIixcbiAgICBcIn5ET1dOTE9BRF9ESUFMT0cuRE9XTkxPQURcIjogXCLEsG5kaXJcIixcbiAgICBcIn5ET1dOTE9BRF9ESUFMT0cuQ0FOQ0VMXCI6IFwixLBwdGFsXCIsXG4gICAgXCJ+RE9XTkxPQURfRElBTE9HLklOQ0xVREVfU0hBUkVfSU5GT1wiOiBcIlBheWxhxZ/EsWxhbiBiaWxnaWxlcmkgaW5kaXJpbGVuIGRvc3lheWEgZGFoaWwgZXQuXCIsXG4gICAgXCJ+UkVOQU1FX0RJQUxPRy5SRU5BTUVcIjogXCJZZW5pZGVuIEFkbGFuZMSxclwiLFxuICAgIFwiflJFTkFNRV9ESUFMT0cuQ0FOQ0VMXCI6IFwixLBwdGFsXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlcIjogXCJLb3B5YWxhXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLlZJRVdcIjogXCJHw7Zyw7xudMO8bGVcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ0xPU0VcIjogXCJLYXBhdFwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZX1NVQ0NFU1NcIjogXCLEsMOnZXJpayBwYW5veWEga29weWFsYW5kxLEuXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlfRVJST1JcIjogXCLDnHpnw7xuw7x6LCBidSBpw6dlcmlrIHBhbm95YSBrb3B5YWxhbmFtYWTEsS5cIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9USVRMRVwiOiBcIlNvbnVjdSBLb3B5YWxhXCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkxPTkdFVklUWV9XQVJOSU5HXCI6IFwiQnUgZG9zeWFuxLFuIGJpciDDtnJuZcSfaSBiaXIgecSxbGRhbiBmYXpsYSBiaXIgc8O8cmUgZXJpxZ9pbG1lZGnEn2kgdGFrdGlyZGUgc2FrbGFuYWNha3TEsXIuXCIsXG4gICAgXCJ+U0hBUkVfVVBEQVRFLlRJVExFXCI6IFwiUGF5bGHFn8SxbGFuIGfDtnLDvG7DvG0gZ8O8bmNlbGxlbmRpXCIsXG4gICAgXCJ+U0hBUkVfVVBEQVRFLk1FU1NBR0VcIjogXCJQYXlsYcWfxLFsYW4gZ8O2csO8bsO8bSBiYcWfYXLEsXlsYSBnw7xuY2VsbGVuZGkuXCIsXG4gICAgXCJ+Q09ORklSTS5PUEVOX0ZJTEVcIjogXCJEZcSfacWfaWtsaWtsZXJpIGtheWRldG1lZGluaXouIFllbmkgYmlyIGRvc3lhIGHDp21hayBpc3RlZGnEn2luaXplIGVtaW4gbWlzaW5pej9cIixcbiAgICBcIn5DT05GSVJNLk5FV19GSUxFXCI6IFwiRGXEn2nFn2lrbGlrbGVyaSBrYXlkZXRtZWRpbml6LiBZZW5pIGJpciBkb3N5YSBvbHXFn3R1cm1hayBpc3RlZGnEn2luaXplIGVtaW4gbWlzaW5pej9cIixcbiAgICBcIn5DT05GSVJNLkFVVEhPUklaRV9PUEVOXCI6IFwiQnUgZG9zeWF5xLEgYcOnbWFrIGnDp2luIHlldGtpbGkgb2xtYW7EsXogZ2VyZWttZWt0ZWRpci4gRGV2YW0gZXRtZWsgaXN0aXlvciBtdXN1bnV6P1wiLFxuICAgIFwifkNPTkZJUk0uQVVUSE9SSVpFX1NBVkVcIjogXCJCdSBkb3N5YXnEsSBrYXlkZXRtZWsgacOnaW4geWV0a2lsaSBvbG1hbsSxeiBnZXJla21la3RlZGlyLiBEZXZhbSBldG1layBpc3RpeW9yIG11c3VudXo/XCIsXG4gICAgXCJ+Q09ORklSTS5DTE9TRV9GSUxFXCI6IFwiRGXEn2nFn2lrbGlrbGVyaSBrYXlkZXRtZWRpbml6LiBEb3N5YXnEsSBrYXBhdG1hayBpc3RlZGnEn2luaXplIGVtaW4gbWlzaW5pej9cIixcbiAgICBcIn5DT05GSVJNLlJFVkVSVF9UT19MQVNUX09QRU5FRFwiOiBcIkRvc3lhecSxIGVuIHNvbiBhw6fEsWxhbiBoYWxpbmUgZ2VyaSBkw7ZuZMO8cm1layBpc3RlZGnEn2luaXplIGVtaW4gbWlzaW5pej9cIixcbiAgICBcIn5DT05GSVJNLlJFVkVSVF9UT19TSEFSRURfVklFV1wiOiBcIkRvc3lhecSxIGVuIHNvbiBwYXlsYcWfxLFsYW4gaGFsaW5lIGdlcmkgZMO2bmTDvHJtZWsgaXN0ZWRpxJ9pbml6ZSBlbWluIG1pc2luaXo/XCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuVElUTEVcIjogXCJFbWluIG1pc2luaXo/XCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuWUVTXCI6IFwiRXZldFwiLFxuICAgIFwifkNPTkZJUk1fRElBTE9HLk5PXCI6IFwiSGF5xLFyXCIsXG4gICAgXCJ+TE9DQUxfRklMRV9ESUFMT0cuRFJPUF9GSUxFX0hFUkVcIjogXCJEb3N5YXnEsSBidXJheWEgc8O8csO8a2xleWluaXogdmV5YSBiaXIgZG9zeWEgc2XDp21layBpw6dpbiB0xLFrbGF5xLFuxLF6LlwiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX1NFTEVDVEVEXCI6IFwiw5x6Z8O8bsO8eiwgYcOnbWFrIGnDp2luIHlhbG7EsXpjYSBiaXIgZG9zeWEgc2XDp2ViaWxpcnNpbml6LlwiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX0RST1BQRURcIjogXCLDnHpnw7xuw7x6LCBiaXIgZG9zeWFkYW4gZGFoYSBmYXpsYXPEsW7EsSBzw7xyw7xrbGV5ZW1lenNpbml6LlwiLFxuICAgIFwifklNUE9SVC5MT0NBTF9GSUxFXCI6IFwiWWVyZWwgRG9zeWFcIixcbiAgICBcIn5JTVBPUlQuVVJMXCI6IFwiVVJMXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5NVUxUSVBMRV9VUkxTX0RST1BQRURcIjogXCLDnHpnw7xuw7x6LCB5YWxuxLF6Y2EgYmlyIGRvc3lhecSxIHVybCBpbGUgYcOnYWJpbGlyc2luaXouXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5QTEVBU0VfRU5URVJfVVJMXCI6IFwiTMO8dGZlbiBpw6dlcmkgYWt0YXJtYWsgacOnaW4gdXJsIGdpcmluaXouXCIsXG4gICAgXCJ+VVJMX1RBQi5EUk9QX1VSTF9IRVJFXCI6IFwiVVJMJ3lpIGJ1cmF5YSBzw7xyw7xrbGV5aW5peiB2ZXlhIFVSTCd5aSBnaXJpbml6LlwiLFxuICAgIFwiflVSTF9UQUIuSU1QT1JUXCI6IFwixLDDp2UgQWt0YXJcIixcbiAgICBcIn5DTElFTlRfRVJST1IuVElUTEVcIjogXCJIYXRhXCIsXG4gICAgXCJ+QUxFUlRfRElBTE9HLlRJVExFXCI6IFwiVXlhcsSxXCIsXG4gICAgXCJ+QUxFUlRfRElBTE9HLkNMT1NFXCI6IFwiS2FwYXRcIixcbiAgICBcIn5BTEVSVC5OT19QUk9WSURFUlwiOiBcIkJlbGlydGlsZW4gZG9zeWEgdXlndW4gYmlyIHNhxJ9sYXnEsWPEsSBidWx1bm1hZMSxxJ/EsW5kYW4gYcOnxLFsYW3EsXlvci5cIixcbiAgICBcIn5HT09HTEVfRFJJVkUuTE9HSU5fQlVUVE9OX0xBQkVMXCI6IFwiR29vZ2xlIGlsZSBPdHVydW0gQcOnXCIsXG4gICAgXCJ+R09PR0xFX0RSSVZFLkNPTk5FQ1RJTkdfTUVTU0FHRVwiOiBcIkdvb2dsZSdhIGJhxJ9sYW7EsWzEsXlvci4uLlwiLFxuICAgIFwifkdPT0dMRV9EUklWRS5FUlJPUl9NSVNTSU5HX0NMSUVOVElEXCI6IFwiR29vZ2xlIEt1bGxhbsSxY8SxIEtpbWxpxJ9pIGJ1bHVuYW1hZMSxLlwiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfNDAzX0VSUk9SXCI6IFwiJXtmaWxlbmFtZX0gZG9zeWFzxLFuxLEgYcOnbWFrIGnDp2luIGdlcmVrbGkgaXppbmxlcmUgc2FoaXAgZGXEn2lsc2luaXouPGJyPjxicj5FxJ9lciBiYcWfa2FzxLFuxLFuIGRvc3lhc8SxbsSxIGt1bGxhbsSxeW9yc2FuxLF6IGRvc3lhIHBheWxhxZ/EsW1kYSBvbG1heWFiaWxpci5cIixcbiAgICBcIn5ET0NTVE9SRS5MT0FEX1NIQVJFRF80MDRfRVJST1JcIjogXCJQYXlsYcWfxLFsbWFrIGlzdGVuZW4gZMO2a8O8bWFuIHnDvGtsZW5lbWl5b3IuPGJyPjxicj5Eb3N5YSBwYXlsYcWfxLFtZGEgb2xtYXlhYmlsaXI/XCIsXG4gICAgXCJ+RE9DU1RPUkUuTE9BRF80MDRfRVJST1JcIjogXCIle2ZpbGVuYW1lfSBkb3N5YXPEsSB5w7xrbGVuZW1peW9yXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV80MDNfRVJST1JcIjogXCInJXtmaWxlbmFtZX0nIGRvc3lhc8SxbsSxIGtheWRldG1layBpw6dpbiBnZXJla2xpIGl6aW5sZXJlIHNhaGlwIGRlxJ9pbHNpbml6IC48YnI+PGJyPlRla3JhciBvdHVydW0gYcOnbWFuxLF6IGdlcmVrbWVrdGVkaXIuXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV9EVVBMSUNBVEVfRVJST1JcIjogXCIle2ZpbGVuYW1lfSBkb3N5YXPEsSBvbHXFn3R1cnVsYW3EsXlvci4gRG9zeWEgemF0ZW4gbWV2Y3V0LlwiLFxuICAgIFwifkRPQ1NUT1JFLlNBVkVfRVJST1JfV0lUSF9NRVNTQUdFXCI6IFwiJXtmaWxlbmFtZX0gZG9zeWFzxLEga2F5ZGVkaWxlbWV6LjogWyV7bWVzc2FnZX1dXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV9FUlJPUlwiOiBcIiV7ZmlsZW5hbWV9IGRvc3lhc8SxIGtheWRlZGlsZW1lei5cIixcbiAgICBcIn5ET0NTVE9SRS5SRU1PVkVfNDAzX0VSUk9SXCI6IFwiJXtmaWxlbmFtZX0gZG9zeWFzxLFuxLEga2FsZMSxcm1hayBpw6dpbiBnZXJla2xpIGl6aW5sZXJlIHNhaGlwIGRlxJ9pbHNpbml6Ljxicj48YnI+VGVrcmFyIG90dXJ1bSBhw6dtYW7EsXogZ2VyZWttZWt0ZWRpci5cIixcbiAgICBcIn5ET0NTVE9SRS5SRU1PVkVfRVJST1JcIjogXCIle2ZpbGVuYW1lfSBkb3N5YXPEsSBrYWxkxLFyxLFsYW1helwiLFxuICAgIFwifkRPQ1NUT1JFLlJFTkFNRV80MDNfRVJST1JcIjogXCIle2ZpbGVuYW1lfSBkb3N5YXPEsW7EsSB5ZW5pZGVuIGFkbGFuZMSxcm1hayBpw6dpbiBnZXJla2xpIGl6aW5sZXJlIHNhaGlwIGRlxJ9pbHNpbml6Ljxicj48YnI+VGVrcmFyIG90dXJ1bSBhw6dtYW7EsXogZ2VyZWttZWt0ZWRpci5cIixcbiAgICBcIn5ET0NTVE9SRS5SRU5BTUVfRVJST1JcIjogXCIle2ZpbGVuYW1lfSBkb3N5YXPEsSB5ZW5pZGVuIGFkbGFuZMSxcsSxbGFtYWTEsVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX1RJVExFXCI6IFwiQ29uY29yZCBCdWx1dCBEZXBvbGFtYSBVeWFyxLFzxLFcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLkFMRVJUX1NBVkVfVElUTEVcIjogXCJDb25jb3JkIEJ1bHV0IERlcG9sYW1hIFV5YXLEsXPEsVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX0VMU0VXSEVSRVwiOiBcIkZhcmtsxLEgYmlyIHllcmUga2F5ZGV0XCIsXG4gICAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5DT05GSVJNX0RPX0lUX0xBVEVSXCI6IFwiQnVudSBzb25yYSB5YXBhY2HEn8SxbVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uU0hVVF9ET1dOX01FU1NBR0VcIjogXCJDb25jb3JkIEJ1bHV0IERlcG9sYW1hIHNpc3RlbWkga2FwYXTEsWxkxLEhXCIsXG4gICAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5QTEVBU0VfU0FWRV9FTFNFV0hFUkVcIjogXCJMw7x0ZmVuIGRvc3lhbsSxesSxIGZhcmtsxLEgYmlyIHllcmUga2F5ZGVkaW4uXCJcbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcIn5NRU5VQkFSLlVOVElUTEVEX0RPQ1VNRU5UXCI6IFwi5pyq5ZG95ZCN5paH5Lu2XCIsXG4gICAgXCJ+TUVOVS5ORVdcIjogXCLmlrDlop5cIixcbiAgICBcIn5NRU5VLk9QRU5cIjogXCLplovllZ8gLi4uXCIsXG4gICAgXCJ+TUVOVS5DTE9TRVwiOiBcIumXnOmWiVwiLFxuICAgIFwifk1FTlUuSU1QT1JUX0RBVEFcIjogXCLljK/lhaXos4fmlpkuLi5cIixcbiAgICBcIn5NRU5VLlNBVkVcIjogXCLlhLLlrZhcIixcbiAgICBcIn5NRU5VLlNBVkVfQVNcIjogXCLlj6blrZjoh7MgLi4uXCIsXG4gICAgXCJ+TUVOVS5FWFBPUlRfQVNcIjogXCLljK/lh7rmlofku7YgLi4uXCIsXG4gICAgXCJ+TUVOVS5DUkVBVEVfQ09QWVwiOiBcIuW7uueri+ikh+acrFwiLFxuICAgIFwifk1FTlUuU0hBUkVcIjogXCLliIbkuqsuLi5cIixcbiAgICBcIn5NRU5VLlNIQVJFX0dFVF9MSU5LXCI6IFwi5Y+W5b6X6YCj57WQXCIsXG4gICAgXCJ+TUVOVS5TSEFSRV9VUERBVEVcIjogXCLmm7TmlrDmlofku7blhaflrrlcIixcbiAgICBcIn5NRU5VLkRPV05MT0FEXCI6IFwi5LiL6LyJXCIsXG4gICAgXCJ+TUVOVS5SRU5BTUVcIjogXCLph43mlrDlkb3lkI1cIixcbiAgICBcIn5NRU5VLlJFVkVSVF9UT1wiOiBcIuW+qeWOn+iHsy4uLlwiLFxuICAgIFwifk1FTlUuUkVWRVJUX1RPX0xBU1RfT1BFTkVEXCI6IFwi6ZaL5ZWf54uA5oWLXCIsXG4gICAgXCJ+TUVOVS5SRVZFUlRfVE9fU0hBUkVEX1ZJRVdcIjogXCLliIbkuqvmlofku7ZcIixcbiAgICBcIn5ESUFMT0cuU0FWRVwiOiBcIuWEsuWtmFwiLFxuICAgIFwifkRJQUxPRy5TQVZFX0FTXCI6IFwi5Y+m5a2Y6IezIC4uLlwiLFxuICAgIFwifkRJQUxPRy5FWFBPUlRfQVNcIjogXCLljK/lh7rmlofku7YgLi4uXCIsXG4gICAgXCJ+RElBTE9HLkNSRUFURV9DT1BZXCI6IFwi5bu656uL6KSH5pysIC4uLlwiLFxuICAgIFwifkRJQUxPRy5PUEVOXCI6IFwi6ZaL5ZWfXCIsXG4gICAgXCJ+RElBTE9HLkRPV05MT0FEXCI6IFwi5LiL6LyJXCIsXG4gICAgXCJ+RElBTE9HLlJFTkFNRVwiOiBcIumHjeaWsOWRveWQjVwiLFxuICAgIFwifkRJQUxPRy5TSEFSRURcIjogXCLliIbkuqtcIixcbiAgICBcIn5ESUFMT0cuSU1QT1JUX0RBVEFcIjogXCLph43opoHos4fmlplcIixcbiAgICBcIn5QUk9WSURFUi5MT0NBTF9TVE9SQUdFXCI6IFwi5pys5Zyw5YSy5a2YXCIsXG4gICAgXCJ+UFJPVklERVIuUkVBRF9PTkxZXCI6IFwi5ZSv6K6AXCIsXG4gICAgXCJ+UFJPVklERVIuR09PR0xFX0RSSVZFXCI6IFwiR29vZ2xlIOmbsuerr+ehrOein1wiLFxuICAgIFwiflBST1ZJREVSLkRPQ1VNRU5UX1NUT1JFXCI6IFwiQ29uY29yZCBDbG91ZFwiLFxuICAgIFwiflBST1ZJREVSLkxPQ0FMX0ZJTEVcIjogXCLmnKzlnLDmqpTmoYhcIixcbiAgICBcIn5GSUxFX1NUQVRVUy5TQVZJTkdcIjogXCLlhLLlrZguLi5cIixcbiAgICBcIn5GSUxFX1NUQVRVUy5TQVZFRFwiOiBcIuW3suWEsuWtmOaJgOacieabtOaUuVwiLFxuICAgIFwifkZJTEVfU1RBVFVTLlNBVkVEX1RPX1BST1ZJREVSXCI6IFwi5YSy5a2Y5pu05pS56IezICV7cHJvdmlkZXJOYW1lfVwiLFxuICAgIFwifkZJTEVfU1RBVFVTLlVOU0FWRURcIjogXCLmnKrlhLLlrZhcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5GSUxFTkFNRVwiOiBcIuaqlOahiOWQjeeosVwiLFxuICAgIFwifkZJTEVfRElBTE9HLk9QRU5cIjogXCLplovllZ9cIixcbiAgICBcIn5GSUxFX0RJQUxPRy5TQVZFXCI6IFwi5YSy5a2YXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuQ0FOQ0VMXCI6IFwi5Y+W5raIXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFXCI6IFwi5Yiq6ZmkXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFX0NPTkZJUk1cIjogXCLmgqjnorrlrpropoHliKrpmaQgJXtmaWxlbmFtZX0/XCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9USVRMRVwiOiBcIuWIqumZpOaqlOahiFwiLFxuICAgIFwifkZJTEVfRElBTE9HLlJFTU9WRURfTUVTU0FHRVwiOiBcIiV7ZmlsZW5hbWV9IOW3suWIqumZpFwiLFxuICAgIFwifkZJTEVfRElBTE9HLkxPQURJTkdcIjogXCLoroDlj5bkuK0uLi5cIixcbiAgICBcIn5GSUxFX0RJQUxPRy5MT0FEX0ZPTERFUl9FUlJPUlwiOiBcIioqKiDovInlhaXmlofku7bmmYLnmbznlJ/pjK/oqqQgKioqXCIsXG4gICAgXCJ+RklMRV9ESUFMT0cuRE9XTkxPQURcIjogXCLkuIvovIlcIixcbiAgICBcIn5GSUxFX0RJQUxPRy5ET1dOTE9BRF9OT1RFXCI6IFwiTk9URTog5L2/55SoU2FmYXJpIOaqlOahiOWPr+iDveiuiueCuiBcXFwiVW5rbm93blxcXCIg5oKo6ZyA6KaB5Zyo5omL5YuV5pu05pS55Ymv5qqU5ZCN54K6IC5jb2RhcFwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5ET1dOTE9BRFwiOiBcIuS4i+i8iVwiLFxuICAgIFwifkRPV05MT0FEX0RJQUxPRy5DQU5DRUxcIjogXCLlj5bmtohcIixcbiAgICBcIn5ET1dOTE9BRF9ESUFMT0cuSU5DTFVERV9TSEFSRV9JTkZPXCI6IFwi5LiL6LyJ55qE5qqU5qGI5Lit5YyF5ZCr5YiG5Lqr55qE5qqU5qGIXCIsXG4gICAgXCJ+UkVOQU1FX0RJQUxPRy5SRU5BTUVcIjogXCLph43mlrDlkb3lkI1cIixcbiAgICBcIn5SRU5BTUVfRElBTE9HLkNBTkNFTFwiOiBcIuWPlua2iFwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5DT1BZXCI6IFwi6KSH6KO9XCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLlZJRVdcIjogXCLmqqLoppZcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ0xPU0VcIjogXCLpl5zplolcIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9TVUNDRVNTXCI6IFwi6KiK5oGv5bey6KSH6KO9XCIsXG4gICAgXCJ+U0hBUkVfRElBTE9HLkNPUFlfRVJST1JcIjogXCLmirHmrYnvvIzoqIrmga/nhKHms5XopIfoo71cIixcbiAgICBcIn5TSEFSRV9ESUFMT0cuQ09QWV9USVRMRVwiOiBcIuikh+ijvee1kOaenFwiLFxuICAgIFwiflNIQVJFX0RJQUxPRy5MT05HRVZJVFlfV0FSTklOR1wiOiBcIuiLpeS4gOW5tOaykuS6uuS9v+eUqOacrOaWh+S7tuS5i+ikh+acrO+8jOWJh+atpOikh+acrOWwh+acg+iiq+WIqumZpFwiLFxuICAgIFwiflNIQVJFX1VQREFURS5USVRMRVwiOiBcIuabtOaWsOaWh+S7tuWFp+WuuVwiLFxuICAgIFwiflNIQVJFX1VQREFURS5NRVNTQUdFXCI6IFwi5paH5Lu25YWn5a655bey5pu05pawXCIsXG4gICAgXCJ+Q09ORklSTS5PUEVOX0ZJTEVcIjogXCLlsJrmnKrlhLLlrZjorormm7TvvIzmgqjnorrlrpropoHplovllZ/mlrDnmoTmlofku7Y/XCIsXG4gICAgXCJ+Q09ORklSTS5ORVdfRklMRVwiOiBcIuWwmuacquWEsuWtmOiuiuabtO+8jOaCqOeiuuWumuimgeW7uueri+aWsOeahOaWh+S7tj9cIixcbiAgICBcIn5DT05GSVJNLkFVVEhPUklaRV9PUEVOXCI6IFwi5pys5paH5Lu26ZyA6KaB5o6I5qyK5omN6IO96ZaL5ZWf77yM5oKo6KaB5YmN5b6A6KqN6K2J5ZeOPyBcIixcbiAgICBcIn5DT05GSVJNLkFVVEhPUklaRV9TQVZFXCI6IFwi5pys5paH5Lu26ZyA6KaB5o6I5qyK5omN6IO95YSy5a2Y77yM5oKo6KaB5YmN5b6A6KqN6K2J5ZeOPyBcIixcbiAgICBcIn5DT05GSVJNLkNMT1NFX0ZJTEVcIjogXCLlsJrmnKrlhLLlrZjorormm7TvvIzmgqjnorrlrpropoHpl5zplonmlofku7bll44/XCIsXG4gICAgXCJ+Q09ORklSTS5SRVZFUlRfVE9fTEFTVF9PUEVORURcIjogXCLmgqjnorrlrpropoHlsIfmlofku7blm57lvqnoh7PmnIDov5HplovllZ/nmoTni4DmhYvll44/XCIsXG4gICAgXCJ+Q09ORklSTS5SRVZFUlRfVE9fU0hBUkVEX1ZJRVdcIjogXCLmgqjnorrlrpropoHlsIfmlofku7blm57lvqnoh7PmnIDov5HliIbkuqvnmoTni4DmhYvll44/XCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuVElUTEVcIjogXCLnorrlrpo/XCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuWUVTXCI6IFwi5pivXCIsXG4gICAgXCJ+Q09ORklSTV9ESUFMT0cuTk9cIjogXCLlkKZcIixcbiAgICBcIn5MT0NBTF9GSUxFX0RJQUxPRy5EUk9QX0ZJTEVfSEVSRVwiOiBcIuWwh+aqlOahiOaLluabs+iHs+atpOaIlum7nuaTiuS7pemBuOWPluaqlOahiFwiLFxuICAgIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX1NFTEVDVEVEXCI6IFwi5oqx5q2JLCDmgqjlj6rog73pgbjlj5bkuIDlgIvmqpTmoYhcIixcbiAgICBcIn5MT0NBTF9GSUxFX0RJQUxPRy5NVUxUSVBMRV9GSUxFU19EUk9QUEVEXCI6IFwi5oqx5q2JLCDmgqjnhKHms5Xmi5bmm7PotoXpgY7kuIDlgIvmqpTmoYhcIixcbiAgICBcIn5JTVBPUlQuTE9DQUxfRklMRVwiOiBcIuacrOWcsOaqlOahiFwiLFxuICAgIFwifklNUE9SVC5VUkxcIjogXCLntrLlnYBcIixcbiAgICBcIn5JTVBPUlRfVVJMLk1VTFRJUExFX1VSTFNfRFJPUFBFRFwiOiBcIuaKseatiSwg5oKo5Y+q6IO96YG45pOH5LiA5YCL6ZaL5ZWf57ay5Z2AXCIsXG4gICAgXCJ+SU1QT1JUX1VSTC5QTEVBU0VfRU5URVJfVVJMXCI6IFwi6KuL6Ly45YWl6KaB5Yyv5YWl55qE57ay5Z2AXCIsXG4gICAgXCJ+VVJMX1RBQi5EUk9QX1VSTF9IRVJFXCI6IFwi5Zyo5LiL6Z2i6Ly45YWl57ay5Z2AXCIsXG4gICAgXCJ+VVJMX1RBQi5JTVBPUlRcIjogXCLljK/lhaVcIixcbiAgICBcIn5DTElFTlRfRVJST1IuVElUTEVcIjogXCLpjK/oqqRcIixcbiAgICBcIn5BTEVSVF9ESUFMT0cuVElUTEVcIjogXCLorablkYpcIixcbiAgICBcIn5BTEVSVF9ESUFMT0cuQ0xPU0VcIjogXCLpl5zplolcIixcbiAgICBcIn5BTEVSVC5OT19QUk9WSURFUlwiOiBcIueEoeazlemWi+WVn+aMh+WumueahOaWh+S7tu+8jOWboOeCuuaqlOahiOmhnuWei+S4jeWPl+aUr+aPtFwiLFxuICAgIFwifkdPT0dMRV9EUklWRS5MT0dJTl9CVVRUT05fTEFCRUxcIjogXCLnmbvlhaVHb29nbGVcIixcbiAgICBcIn5HT09HTEVfRFJJVkUuQ09OTkVDVElOR19NRVNTQUdFXCI6IFwi6YCj57WQ6IezIEdvb2dsZS4uLlwiLFxuICAgIFwifkdPT0dMRV9EUklWRS5FUlJPUl9NSVNTSU5HX0NMSUVOVElEXCI6IFwi5ZyoZ29vZ2xlRHJpdmXnqIvluo/kuK3nvLrlsJHluLPmiLbos4fmlplcIixcbiAgICBcIn5ET0NTVE9SRS5MT0FEXzQwM19FUlJPUlwiOiBcIuaCqOaykuacieasiumZkOiugOWPliAle2ZpbGVuYW1lfS48YnI+PGJyPuiLpeaCqOaYr+S9v+eUqOWFtuS7luS6uuWFseS6q+eahOaqlOahiOWJh+WPr+iDveW3sue2k+WPlua2iOWFseS6q1wiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfU0hBUkVEXzQwNF9FUlJPUlwiOiBcIueEoeazleiugOWPluatpOWFseS6q+aqlOahiDxicj48YnI+5Y+v6IO95qqU5qGI5bey5Y+W5raI5YWx5LqrP1wiLFxuICAgIFwifkRPQ1NUT1JFLkxPQURfNDA0X0VSUk9SXCI6IFwi54Sh5rOV6K6A5Y+WICV7ZmlsZW5hbWV9XCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV80MDNfRVJST1JcIjogXCLmgqjmspLmnInmrIrpmZDlhLLlrZggJyV7ZmlsZW5hbWV9Jy48YnI+PGJyPuaCqOWPr+iDvemcgOimgeWGjeasoeeZu+WFpVwiLFxuICAgIFwifkRPQ1NUT1JFLlNBVkVfRFVQTElDQVRFX0VSUk9SXCI6IFwi54Sh5rOV5bu656uLICV7ZmlsZW5hbWV9LiAg5qqU5qGI5bey5a2Y5ZyoXCIsXG4gICAgXCJ+RE9DU1RPUkUuU0FWRV9FUlJPUl9XSVRIX01FU1NBR0VcIjogXCLnhKHms5XlhLLlrZggJXtmaWxlbmFtZX06IFsle21lc3NhZ2V9XVwiLFxuICAgIFwifkRPQ1NUT1JFLlNBVkVfRVJST1JcIjogXCLnhKHms5XlhLLlrZggJXtmaWxlbmFtZX1cIixcbiAgICBcIn5ET0NTVE9SRS5SRU1PVkVfNDAzX0VSUk9SXCI6IFwi5oKo5rKS5pyJ5qyK6ZmQ56e76ZmkICV7ZmlsZW5hbWV9Ljxicj48YnI+5oKo5Y+v6IO96ZyA6KaB5YaN5qyh55m75YWlXCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVNT1ZFX0VSUk9SXCI6IFwi54Sh5rOV56e76ZmkICV7ZmlsZW5hbWV9XCIsXG4gICAgXCJ+RE9DU1RPUkUuUkVOQU1FXzQwM19FUlJPUlwiOiBcIuaCqOaykuacieasiumZkOabtOaUueWQjeeosSAle2ZpbGVuYW1lfS48YnI+PGJyPuaCqOWPr+iDvemcgOimgeWGjeasoeeZu+WFpVwiLFxuICAgIFwifkRPQ1NUT1JFLlJFTkFNRV9FUlJPUlwiOiBcIueEoeazleabtOaUueWQjeeosSAle2ZpbGVuYW1lfVwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX1RJVExFXCI6IFwiQ29uY29yZCBDbG91ZCDorablkYpcIixcbiAgICBcIn5DT05DT1JEX0NMT1VEX0RFUFJFQ0FUSU9OLkFMRVJUX1NBVkVfVElUTEVcIjogXCJDb25jb3JkIENsb3VkIOitpuWRilwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9TQVZFX0VMU0VXSEVSRVwiOiBcIuWEsuWtmOiHs+WFtuS7luS9jee9rlwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uQ09ORklSTV9ET19JVF9MQVRFUlwiOiBcIueojeW+jOaTjeS9nFwiLFxuICAgIFwifkNPTkNPUkRfQ0xPVURfREVQUkVDQVRJT04uU0hVVF9ET1dOX01FU1NBR0VcIjogXCJUaGUgQ29uY29yZCBDbG91ZCBoYXMgYmVlbiBzaHV0IGRvd24hXCIsXG4gICAgXCJ+Q09OQ09SRF9DTE9VRF9ERVBSRUNBVElPTi5QTEVBU0VfU0FWRV9FTFNFV0hFUkVcIjogXCJQbGVhc2Ugc2F2ZSB5b3VyIGRvY3VtZW50cyB0byBhbm90aGVyIGxvY2F0aW9uLlwiXG59XG4iLCJ1cmxQYXJhbXMgPSByZXF1aXJlICcuL3VybC1wYXJhbXMnXG5cbmxhbmd1YWdlRmlsZXMgPSB7XG4gICdkZSc6IHJlcXVpcmUgJy4vbGFuZy9kZSdcbiAgJ2VuLVVTJzogcmVxdWlyZSAnLi9sYW5nL2VuLVVTJ1xuICAnZXMnOiByZXF1aXJlICcuL2xhbmcvZXMnXG4gICdoZSc6IHJlcXVpcmUgJy4vbGFuZy9oZSdcbiAgJ3RyJzogcmVxdWlyZSAnLi9sYW5nL3RyJ1xuICAnemgtVFcnOiByZXF1aXJlICcuL2xhbmcvemgtVFcnXG59XG5cbnRyYW5zbGF0aW9ucyA9ICB7fVxuXy5lYWNoIGxhbmd1YWdlRmlsZXMsIChsYW5nQ29udGVudHMsIGxhbmdLZXkpIC0+XG4gIHRyYW5zbGF0aW9uc1tsYW5nS2V5XSA9IGxhbmdDb250ZW50c1xuICAjIGFjY2VwdCBmdWxsIGtleSB3aXRoIHJlZ2lvbiBjb2RlIG9yIGp1c3QgdGhlIGxhbmd1YWdlIGNvZGVcbiAgaWYgKGRhc2hMb2MgPSBsYW5nS2V5LmluZGV4T2YoJy0nKSkgPiAwXG4gICAgbGFuZyA9IGxhbmdLZXkuc3Vic3RyaW5nKDAsIGRhc2hMb2MpXG4gICAgdHJhbnNsYXRpb25zW2xhbmddID0gbGFuZ0NvbnRlbnRzXG4gIHJldHVyblxuXG5kZWZhdWx0TGFuZyA9IG51bGxcbiMgZGVmYXVsdCB0byBFbmdsaXNoIHVubGVzcyB0aGUgdXNlciBleHByZXNzZXMgYW5vdGhlciBwcmVmZXJlbmNlICh2aWEgVVJMIHBhcmFtIGZvciBub3cpXG5kZWZhdWx0TGFuZyA9IHVybFBhcmFtcy5sYW5nIGlmIHVybFBhcmFtcy5sYW5nIGFuZCB0cmFuc2xhdGlvbnNbdXJsUGFyYW1zLmxhbmddXG4jIHVzZSBsYW5ndWFnZSBvZiBwYWdlLCB3aGljaCBpcyB1c2VkIGJ5IENPREFQLCB3aXRoIHNlcGFyYXRlIGJ1aWxkIGZvciBlYWNoIGxhbmd1YWdlXG5pZiAobm90IGRlZmF1bHRMYW5nPykgYW5kIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nIGFuZCAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgaXNudCBcInVua25vd25cIilcbiAgZGVmYXVsdExhbmcgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZ1xuZGVmYXVsdExhbmcgPSAnZW4nIGlmIG5vdCBkZWZhdWx0TGFuZz9cblxudmFyUmVnRXhwID0gLyVcXHtcXHMqKFtefVxcc10qKVxccypcXH0vZ1xuXG50cmFuc2xhdGUgPSAoa2V5LCB2YXJzPXt9LCBsYW5nPWRlZmF1bHRMYW5nKSAtPlxuICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uc1tsYW5nXT9ba2V5XVxuICB0cmFuc2xhdGlvbiA9IGtleSBpZiBub3QgdHJhbnNsYXRpb24/XG4gIHRyYW5zbGF0aW9uLnJlcGxhY2UgdmFyUmVnRXhwLCAobWF0Y2gsIGtleSkgLT5cbiAgICBpZiB2YXJzLmhhc093blByb3BlcnR5IGtleSB0aGVuIHZhcnNba2V5XSBlbHNlIFwiJyoqIFVLTk9XTiBLRVk6ICN7a2V5fSAqKlwiXG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNsYXRlXG4iLCIvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODgwOTI5XG52YXIgdXJsUGFyYW1zID0ge307XG5pZiAod2luZG93ICYmIHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uc2VhcmNoKSB7XG4gICh3aW5kb3cub25wb3BzdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICBwbCAgICAgPSAvXFwrL2csICAvLyBSZWdleCBmb3IgcmVwbGFjaW5nIGFkZGl0aW9uIHN5bWJvbCB3aXRoIGEgc3BhY2VcbiAgICAgICAgICBzZWFyY2ggPSAvKFteJj1dKyk9PyhbXiZdKikvZyxcbiAgICAgICAgICBkZWNvZGUgPSBmdW5jdGlvbiAocykgeyByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHMucmVwbGFjZShwbCwgXCIgXCIpKTsgfSxcbiAgICAgICAgICBxdWVyeSAgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKTtcblxuICAgICAgd2hpbGUgKChtYXRjaCA9IHNlYXJjaC5leGVjKHF1ZXJ5KSkpXG4gICAgICAgICB1cmxQYXJhbXNbZGVjb2RlKG1hdGNoWzFdKV0gPSBkZWNvZGUobWF0Y2hbMl0pO1xuICB9KSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVybFBhcmFtcztcbiIsIntkaXYsIGJ1dHRvbn0gPSBSZWFjdC5ET01cblxuTW9kYWxEaWFsb2cgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vbW9kYWwtZGlhbG9nLXZpZXcnXG5cbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdBbGVydERpYWxvZ1ZpZXcnXG5cbiAgY2xvc2U6IC0+XG4gICAgQHByb3BzLmNsb3NlPygpXG4gICAgQHByb3BzLmNhbGxiYWNrPygpXG5cbiAgcmVuZGVyOiAtPlxuICAgIChNb2RhbERpYWxvZyB7dGl0bGU6IEBwcm9wcy50aXRsZSBvciAodHIgJ35BTEVSVF9ESUFMT0cuVElUTEUnKSwgY2xvc2U6IEBjbG9zZSwgekluZGV4OiA1MDB9LFxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnYWxlcnQtZGlhbG9nJ30sXG4gICAgICAgIChkaXYge2NsYXNzTmFtZTogJ2FsZXJ0LWRpYWxvZy1tZXNzYWdlJywgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtfX2h0bWw6IEBwcm9wcy5tZXNzYWdlfX0pXG4gICAgICAgIChkaXYge2NsYXNzTmFtZTogJ2J1dHRvbnMnfSxcbiAgICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAY2xvc2V9LCB0ciAnfkFMRVJUX0RJQUxPRy5DTE9TRScpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4iLCJNZW51QmFyID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL21lbnUtYmFyLXZpZXcnXG5Qcm92aWRlclRhYmJlZERpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9wcm92aWRlci10YWJiZWQtZGlhbG9nLXZpZXcnXG5Eb3dubG9hZERpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9kb3dubG9hZC1kaWFsb2ctdmlldydcblJlbmFtZURpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9yZW5hbWUtZGlhbG9nLXZpZXcnXG5TaGFyZURpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9zaGFyZS1kaWFsb2ctdmlldydcbkJsb2NraW5nTW9kYWwgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vYmxvY2tpbmctbW9kYWwtdmlldydcbkFsZXJ0RGlhbG9nID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL2FsZXJ0LWRpYWxvZy12aWV3J1xuQ29uZmlybURpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9jb25maXJtLWRpYWxvZy12aWV3J1xuSW1wb3J0VGFiYmVkRGlhbG9nID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL2ltcG9ydC10YWJiZWQtZGlhbG9nLXZpZXcnXG5cbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuaXNTdHJpbmcgPSByZXF1aXJlICcuLi91dGlscy9pcy1zdHJpbmcnXG5cbntkaXYsIGlmcmFtZX0gPSBSZWFjdC5ET01cblxuSW5uZXJBcHAgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdDbG91ZEZpbGVNYW5hZ2VySW5uZXJBcHAnXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiAobmV4dFByb3BzKSAtPlxuICAgIG5leHRQcm9wcy5hcHAgaXNudCBAcHJvcHMuYXBwXG5cbiAgcmVuZGVyOiAtPlxuICAgIChkaXYge2NsYXNzTmFtZTogJ2lubmVyQXBwJ30sXG4gICAgICAoaWZyYW1lIHtzcmM6IEBwcm9wcy5hcHB9KVxuICAgIClcblxuQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ0Nsb3VkRmlsZU1hbmFnZXInXG5cbiAgZ2V0RmlsZW5hbWU6IChtZXRhZGF0YSkgLT5cbiAgICBpZiBtZXRhZGF0YT8uaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpIGFuZCBtZXRhZGF0YS5uYW1lPy5sZW5ndGggPiAwIHRoZW4gbWV0YWRhdGEubmFtZSBlbHNlIG51bGxcblxuICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgZmlsZW5hbWU6IEBnZXRGaWxlbmFtZSBAcHJvcHMuY2xpZW50LnN0YXRlLm1ldGFkYXRhXG4gICAgcHJvdmlkZXI6IEBwcm9wcy5jbGllbnQuc3RhdGUubWV0YWRhdGE/LnByb3ZpZGVyXG4gICAgbWVudUl0ZW1zOiBAcHJvcHMuY2xpZW50Ll91aS5tZW51Py5pdGVtcyBvciBbXVxuICAgIG1lbnVPcHRpb25zOiBAcHJvcHMudWk/Lm1lbnVCYXIgb3Ige31cbiAgICBwcm92aWRlckRpYWxvZzogbnVsbFxuICAgIGRvd25sb2FkRGlhbG9nOiBudWxsXG4gICAgcmVuYW1lRGlhbG9nOiBudWxsXG4gICAgc2hhcmVEaWFsb2c6IG51bGxcbiAgICBhbGVydERpYWxvZzogbnVsbFxuICAgIGNvbmZpcm1EaWFsb2c6IG51bGxcbiAgICBkaXJ0eTogZmFsc2VcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IC0+XG4gICAgQHByb3BzLmNsaWVudC5saXN0ZW4gKGV2ZW50KSA9PlxuICAgICAgZmlsZVN0YXR1cyA9IGlmIGV2ZW50LnN0YXRlLnNhdmluZ1xuICAgICAgICB7bWVzc2FnZTogdHIoJ35GSUxFX1NUQVRVUy5TQVZJTkcnKSwgdHlwZTogJ2luZm8nfVxuICAgICAgZWxzZSBpZiBldmVudC5zdGF0ZS5zYXZlZFxuICAgICAgICBwcm92aWRlck5hbWUgPSBldmVudC5zdGF0ZS5tZXRhZGF0YS5wcm92aWRlcj8uZGlzcGxheU5hbWVcbiAgICAgICAgbWVzc2FnZSA9IGlmIHByb3ZpZGVyTmFtZSBcXFxuICAgICAgICAgICAgICAgICAgICB0aGVuIHRyKCd+RklMRV9TVEFUVVMuU0FWRURfVE9fUFJPVklERVInLCB7IHByb3ZpZGVyTmFtZTogcHJvdmlkZXJOYW1lIH0pIFxcXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdHIoJ35GSUxFX1NUQVRVUy5TQVZFRCcpXG4gICAgICAgIHttZXNzYWdlOiBtZXNzYWdlLCB0eXBlOiAnaW5mbyd9XG4gICAgICBlbHNlIGlmIGV2ZW50LnN0YXRlLmRpcnR5XG4gICAgICAgIHttZXNzYWdlOiB0cignfkZJTEVfU1RBVFVTLlVOU0FWRUQnKSwgdHlwZTogJ2FsZXJ0J31cbiAgICAgIGVsc2VcbiAgICAgICAgbnVsbFxuICAgICAgQHNldFN0YXRlXG4gICAgICAgIGZpbGVuYW1lOiBAZ2V0RmlsZW5hbWUgZXZlbnQuc3RhdGUubWV0YWRhdGFcbiAgICAgICAgcHJvdmlkZXI6IGV2ZW50LnN0YXRlLm1ldGFkYXRhPy5wcm92aWRlclxuICAgICAgICBmaWxlU3RhdHVzOiBmaWxlU3RhdHVzXG5cbiAgICAgIHN3aXRjaCBldmVudC50eXBlXG4gICAgICAgIHdoZW4gJ2Nvbm5lY3RlZCdcbiAgICAgICAgICBAc2V0U3RhdGUgbWVudUl0ZW1zOiBAcHJvcHMuY2xpZW50Ll91aS5tZW51Py5pdGVtcyBvciBbXVxuXG4gICAgQHByb3BzLmNsaWVudC5fdWkubGlzdGVuIChldmVudCkgPT5cbiAgICAgIHN3aXRjaCBldmVudC50eXBlXG4gICAgICAgIHdoZW4gJ3Nob3dQcm92aWRlckRpYWxvZydcbiAgICAgICAgICBAc2V0U3RhdGUgcHJvdmlkZXJEaWFsb2c6IGV2ZW50LmRhdGFcbiAgICAgICAgd2hlbiAnc2hvd0Rvd25sb2FkRGlhbG9nJ1xuICAgICAgICAgIEBzZXRTdGF0ZSBkb3dubG9hZERpYWxvZzogZXZlbnQuZGF0YVxuICAgICAgICB3aGVuICdzaG93UmVuYW1lRGlhbG9nJ1xuICAgICAgICAgIEBzZXRTdGF0ZSByZW5hbWVEaWFsb2c6IGV2ZW50LmRhdGFcbiAgICAgICAgd2hlbiAnc2hvd0ltcG9ydERpYWxvZydcbiAgICAgICAgICBAc2V0U3RhdGUgaW1wb3J0RGlhbG9nOiBldmVudC5kYXRhXG4gICAgICAgIHdoZW4gJ3Nob3dTaGFyZURpYWxvZydcbiAgICAgICAgICBAc2V0U3RhdGUgc2hhcmVEaWFsb2c6IGV2ZW50LmRhdGFcbiAgICAgICAgd2hlbiAnc2hvd0Jsb2NraW5nTW9kYWwnXG4gICAgICAgICAgQHNldFN0YXRlIGJsb2NraW5nTW9kYWxQcm9wczogZXZlbnQuZGF0YVxuICAgICAgICB3aGVuICdoaWRlQmxvY2tpbmdNb2RhbCdcbiAgICAgICAgICBAc2V0U3RhdGUgYmxvY2tpbmdNb2RhbFByb3BzOiBudWxsXG4gICAgICAgIHdoZW4gJ3Nob3dBbGVydERpYWxvZydcbiAgICAgICAgICBAc2V0U3RhdGUgYWxlcnREaWFsb2c6IGV2ZW50LmRhdGFcbiAgICAgICAgd2hlbiAnc2hvd0NvbmZpcm1EaWFsb2cnXG4gICAgICAgICAgQHNldFN0YXRlIGNvbmZpcm1EaWFsb2c6IGV2ZW50LmRhdGFcbiAgICAgICAgd2hlbiAnYXBwZW5kTWVudUl0ZW0nXG4gICAgICAgICAgQHN0YXRlLm1lbnVJdGVtcy5wdXNoIGV2ZW50LmRhdGFcbiAgICAgICAgICBAc2V0U3RhdGUgbWVudUl0ZW1zOiBAc3RhdGUubWVudUl0ZW1zXG4gICAgICAgIHdoZW4gJ3ByZXBlbmRNZW51SXRlbSdcbiAgICAgICAgICBAc3RhdGUubWVudUl0ZW1zLnVuc2hpZnQgZXZlbnQuZGF0YVxuICAgICAgICAgIEBzZXRTdGF0ZSBtZW51SXRlbXM6IEBzdGF0ZS5tZW51SXRlbXNcbiAgICAgICAgd2hlbiAncmVwbGFjZU1lbnVJdGVtJ1xuICAgICAgICAgIGluZGV4ID0gQF9nZXRNZW51SXRlbUluZGV4IGV2ZW50LmRhdGEua2V5XG4gICAgICAgICAgaWYgaW5kZXggaXNudCAtMVxuICAgICAgICAgICAgQHN0YXRlLm1lbnVJdGVtc1tpbmRleF0gPSBldmVudC5kYXRhLml0ZW1cbiAgICAgICAgICAgIEBzZXRTdGF0ZSBtZW51SXRlbXM6IEBzdGF0ZS5tZW51SXRlbXNcbiAgICAgICAgd2hlbiAnaW5zZXJ0TWVudUl0ZW1CZWZvcmUnXG4gICAgICAgICAgaW5kZXggPSBAX2dldE1lbnVJdGVtSW5kZXggZXZlbnQuZGF0YS5rZXlcbiAgICAgICAgICBpZiBpbmRleCBpc250IC0xXG4gICAgICAgICAgICBpZiBpbmRleCBpcyAwXG4gICAgICAgICAgICAgIEBzdGF0ZS5tZW51SXRlbXMudW5zaGlmdCBldmVudC5kYXRhLml0ZW1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgQHN0YXRlLm1lbnVJdGVtcy5zcGxpY2UgaW5kZXgsIDAsIGV2ZW50LmRhdGEuaXRlbVxuICAgICAgICAgICAgQHNldFN0YXRlIG1lbnVJdGVtczogQHN0YXRlLm1lbnVJdGVtc1xuICAgICAgICB3aGVuICdpbnNlcnRNZW51SXRlbUFmdGVyJ1xuICAgICAgICAgIGluZGV4ID0gQF9nZXRNZW51SXRlbUluZGV4IGV2ZW50LmRhdGEua2V5XG4gICAgICAgICAgaWYgaW5kZXggaXNudCAtMVxuICAgICAgICAgICAgaWYgaW5kZXggaXMgQHN0YXRlLm1lbnVJdGVtcy5sZW5ndGggLSAxXG4gICAgICAgICAgICAgIEBzdGF0ZS5tZW51SXRlbXMucHVzaCBldmVudC5kYXRhLml0ZW1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgQHN0YXRlLm1lbnVJdGVtcy5zcGxpY2UgaW5kZXggKyAxLCAwLCBldmVudC5kYXRhLml0ZW1cbiAgICAgICAgICAgIEBzZXRTdGF0ZSBtZW51SXRlbXM6IEBzdGF0ZS5tZW51SXRlbXNcbiAgICAgICAgd2hlbiAnc2V0TWVudUJhckluZm8nXG4gICAgICAgICAgQHN0YXRlLm1lbnVPcHRpb25zLmluZm8gPSBldmVudC5kYXRhXG4gICAgICAgICAgQHNldFN0YXRlIG1lbnVPcHRpb25zOiBAc3RhdGUubWVudU9wdGlvbnNcblxuICBfZ2V0TWVudUl0ZW1JbmRleDogKGtleSkgLT5cbiAgICBpZiBpc1N0cmluZyBrZXlcbiAgICAgIGZvciBpdGVtLCBpbmRleCBpbiBAc3RhdGUubWVudUl0ZW1zXG4gICAgICAgIHJldHVybiBpbmRleCBpZiBpdGVtLmtleSBpcyBrZXlcbiAgICAgIC0xXG4gICAgZWxzZVxuICAgICAgaW5kZXggPSBwYXJzZUludCBrZXksIDEwXG4gICAgICBpZiBpc05hTihpbmRleCkgb3IgaW5kZXggPCAwIG9yIGluZGV4ID4gQHN0YXRlLm1lbnVJdGVtcy5sZW5ndGggLSAxXG4gICAgICAgIC0xXG4gICAgICBlbHNlXG4gICAgICAgIGluZGV4XG5cbiAgY2xvc2VEaWFsb2dzOiAtPlxuICAgIEBzZXRTdGF0ZVxuICAgICAgcHJvdmlkZXJEaWFsb2c6IG51bGxcbiAgICAgIGRvd25sb2FkRGlhbG9nOiBudWxsXG4gICAgICByZW5hbWVEaWFsb2c6IG51bGxcbiAgICAgIHNoYXJlRGlhbG9nOiBudWxsXG4gICAgICBpbXBvcnREaWFsb2c6IG51bGxcblxuICBjbG9zZUFsZXJ0OiAtPlxuICAgIEBzZXRTdGF0ZSBhbGVydERpYWxvZzogbnVsbFxuXG4gIGNsb3NlQ29uZmlybTogLT5cbiAgICBAc2V0U3RhdGUgY29uZmlybURpYWxvZzogbnVsbFxuXG4gIHJlbmRlckRpYWxvZ3M6IC0+XG4gICAgKGRpdiB7fSxcbiAgICAgIGlmIEBzdGF0ZS5ibG9ja2luZ01vZGFsUHJvcHNcbiAgICAgICAgKEJsb2NraW5nTW9kYWwgQHN0YXRlLmJsb2NraW5nTW9kYWxQcm9wcylcbiAgICAgIGVsc2UgaWYgQHN0YXRlLnByb3ZpZGVyRGlhbG9nXG4gICAgICAgIChQcm92aWRlclRhYmJlZERpYWxvZyB7Y2xpZW50OiBAcHJvcHMuY2xpZW50LCBkaWFsb2c6IEBzdGF0ZS5wcm92aWRlckRpYWxvZywgY2xvc2U6IEBjbG9zZURpYWxvZ3N9KVxuICAgICAgZWxzZSBpZiBAc3RhdGUuZG93bmxvYWREaWFsb2dcbiAgICAgICAgKERvd25sb2FkRGlhbG9nIHtjbGllbnQ6IEBwcm9wcy5jbGllbnQsIGZpbGVuYW1lOiBAc3RhdGUuZG93bmxvYWREaWFsb2cuZmlsZW5hbWUsIG1pbWVUeXBlOiBAc3RhdGUuZG93bmxvYWREaWFsb2cubWltZVR5cGUsIGNvbnRlbnQ6IEBzdGF0ZS5kb3dubG9hZERpYWxvZy5jb250ZW50LCBjbG9zZTogQGNsb3NlRGlhbG9nc30pXG4gICAgICBlbHNlIGlmIEBzdGF0ZS5yZW5hbWVEaWFsb2dcbiAgICAgICAgKFJlbmFtZURpYWxvZyB7ZmlsZW5hbWU6IEBzdGF0ZS5yZW5hbWVEaWFsb2cuZmlsZW5hbWUsIGNhbGxiYWNrOiBAc3RhdGUucmVuYW1lRGlhbG9nLmNhbGxiYWNrLCBjbG9zZTogQGNsb3NlRGlhbG9nc30pXG4gICAgICBlbHNlIGlmIEBzdGF0ZS5pbXBvcnREaWFsb2dcbiAgICAgICAgKEltcG9ydFRhYmJlZERpYWxvZyB7Y2xpZW50OiBAcHJvcHMuY2xpZW50LCBkaWFsb2c6IEBzdGF0ZS5pbXBvcnREaWFsb2csIGNsb3NlOiBAY2xvc2VEaWFsb2dzfSlcbiAgICAgIGVsc2UgaWYgQHN0YXRlLnNoYXJlRGlhbG9nXG4gICAgICAgIChTaGFyZURpYWxvZyB7Y2xpZW50OiBAcHJvcHMuY2xpZW50LCBlbmFibGVMYXJhU2hhcmluZzogQHByb3BzLmVuYWJsZUxhcmFTaGFyaW5nLCBjbG9zZTogQGNsb3NlRGlhbG9nc30pXG5cbiAgICAgICMgYWxlcnQgYW5kIGNvbmZpcm0gZGlhbG9ncyBjYW4gYmUgb3ZlcmxheWVkIG9uIG90aGVyIGRpYWxvZ3NcbiAgICAgIGlmIEBzdGF0ZS5hbGVydERpYWxvZ1xuICAgICAgICAoQWxlcnREaWFsb2cge3RpdGxlOiBAc3RhdGUuYWxlcnREaWFsb2cudGl0bGUsIG1lc3NhZ2U6IEBzdGF0ZS5hbGVydERpYWxvZy5tZXNzYWdlLCBjYWxsYmFjazogQHN0YXRlLmFsZXJ0RGlhbG9nLmNhbGxiYWNrLCBjbG9zZTogQGNsb3NlQWxlcnR9KVxuICAgICAgaWYgQHN0YXRlLmNvbmZpcm1EaWFsb2dcbiAgICAgICAgKENvbmZpcm1EaWFsb2cgXy5tZXJnZSB7fSwgQHN0YXRlLmNvbmZpcm1EaWFsb2csIHsgY2xvc2U6IEBjbG9zZUNvbmZpcm0gfSlcbiAgICApXG5cbiAgcmVuZGVyOiAtPlxuICAgIG1lbnVJdGVtcyA9IHVubGVzcyBAcHJvcHMuaGlkZU1lbnVCYXIgdGhlbiBAc3RhdGUubWVudUl0ZW1zIGVsc2UgW11cbiAgICBpZiBAcHJvcHMuYXBwT3JNZW51RWxlbUlkXG4gICAgICAjIENTUyBjbGFzcyBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgaW4gYXBwIChpZnJhbWUpIG9yIHZpZXcgKG1lbnViYXItb25seSkgbW9kZVxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiBpZiBAcHJvcHMudXNpbmdJZnJhbWUgdGhlbiAnYXBwJyBlbHNlICd2aWV3JyB9LFxuICAgICAgICAoTWVudUJhciB7Y2xpZW50OiBAcHJvcHMuY2xpZW50LCBmaWxlbmFtZTogQHN0YXRlLmZpbGVuYW1lLCBwcm92aWRlcjogQHN0YXRlLnByb3ZpZGVyLCBmaWxlU3RhdHVzOiBAc3RhdGUuZmlsZVN0YXR1cywgaXRlbXM6IG1lbnVJdGVtcywgb3B0aW9uczogQHN0YXRlLm1lbnVPcHRpb25zfSlcbiAgICAgICAgIyBvbmx5IHJlbmRlciB0aGUgd3JhcHBlZCBjbGllbnQgYXBwIGluIGFwcCAoaWZyYW1lKSBtb2RlXG4gICAgICAgIGlmIEBwcm9wcy51c2luZ0lmcmFtZVxuICAgICAgICAgIChJbm5lckFwcCB7YXBwOiBAcHJvcHMuYXBwfSlcbiAgICAgICAgQHJlbmRlckRpYWxvZ3MoKVxuICAgICAgKVxuICAgIGVsc2UgaWYgQHN0YXRlLnByb3ZpZGVyRGlhbG9nIG9yIEBzdGF0ZS5kb3dubG9hZERpYWxvZ1xuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnYXBwJ30sXG4gICAgICAgIEByZW5kZXJEaWFsb2dzKClcbiAgICAgIClcbiAgICBlbHNlXG4gICAgICBudWxsXG5cbm1vZHVsZS5leHBvcnRzID0gQXBwXG4iLCJBdXRob3JpemVNaXhpbiA9XG4gIGdldEluaXRpYWxTdGF0ZTogLT5cbiAgICBAX2lzQXV0aG9yaXplZCA9IGZhbHNlXG4gICAgYXV0aG9yaXplZDogZmFsc2VcblxuICAjIFRoZSBjb25zdHJhaW50cyBoZXJlIGFyZSBzb21ld2hhdCBzdWJ0bGUuIFdlIHdhbnQgdG8gdHJ5IHRvXG4gICMgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHVzZXIgaXMgYXV0aG9yaXplZCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlcixcbiAgIyBiZWNhdXNlIGF1dGhvcml6YXRpb24gc3RhdHVzIGNhbiBhZmZlY3QgcmVuZGVyaW5nLiBUaHVzLCB3ZSB3YW50XG4gICMgdG8gcGVyZm9ybSB0aGUgY2hlY2sgaW4gY29tcG9uZW50V2lsbE1vdW50KCkuIFNvbWUgcHJvdmlkZXJzXG4gICMgY2FuL3dpbGwgcmVzcG9uZCBpbW1lZGlhdGVseSwgZWl0aGVyIGJlY2F1c2UgdGhleSBkb24ndCByZXF1aXJlXG4gICMgYXV0aG9yaXphdGlvbiBvciBiZWNhdXNlIHRoZXkgYXJlIGFscmVhZHkgYXV0aG9yaXplZC4gVW5mb3J0dW5hdGVseSxcbiAgIyBzZXRTdGF0ZSgpIGNhbid0IGJlIGNhbGxlZCBpbiBjb21wb25lbnRXaWxsTW91bnQoKSwgc28gaWYgd2UgZ2V0XG4gICMgYW4gaW1tZWRpYXRlIHJlc3BvbnNlLCB3ZSBuZWVkIHRvIHN0b3JlIGl0IGluIGFuIGluc3RhbmNlIHZhcmlhYmxlLlxuICAjIFRoZW4gaW4gY29tcG9uZW50RGlkTW91bnQoKSwgd2UgY2FuIHByb3BhZ2F0ZSB0aGUgaW5zdGFuY2UgdmFyaWFibGVcbiAgIyB0byB0aGUgc3RhdGUgdmlhIGEgY2FsbCB0byBzZXRTdGF0ZSgpLiBTb21lIHByb3ZpZGVycyB3aWxsIG5lZWQgdG9cbiAgIyBtYWtlIGFuIGFzeW5jaHJvbm91cyBjYWxsIHRvIGRldGVybWluZSBhdXRob3JpemF0aW9uIHN0YXR1cy4gVGhpc1xuICAjIGNhbGwgbWF5IGNvbXBsZXRlIGJlZm9yZSBvciBhZnRlciB0aGUgZmlyc3QgcmVuZGVyLCBpLmUuIGJlZm9yZSBvclxuICAjIGFmdGVyIHRoZSBjb21wb25lbnREaWRNb3VudCgpIG1ldGhvZC4gT25jZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQsXG4gICMgdGhlIGNhbGwgdG8gc2V0U3RhdGUoKSBpcyByZXF1aXJlZCB0byBzZXQgdGhlIHN0YXRlIGFuZCB0cmlnZ2VyIGFcbiAgIyByZS1yZW5kZXIuIEluIHRoZSBlbmQgd2UgbmVlZCB0byBtYWludGFpbiBib3RoIHRoZSBpbnN0YW5jZSB2YXJpYWJsZVxuICAjIGFuZCB0aGUgc3RhdGUgdG8gdHJhY2sgdGhlIGF1dGhvcml6YXRpb24gc3RhdHVzLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlXG4gICMgYXV0aG9yaXphdGlvbiBzdGF0dXMsIGFuZCByZS1yZW5kZXIgd2hlbiBhdXRob3JpemF0aW9uIHN0YXR1cyBjaGFuZ2VzLlxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogLT5cbiAgICAjIENoZWNrIGZvciBhdXRob3JpemF0aW9uIGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyLiBQcm92aWRlcnMgdGhhdFxuICAgICMgZG9uJ3QgcmVxdWlyZSBhdXRob3JpemF0aW9uIG9yIGFyZSBhbHJlYWR5IGF1dGhvcml6ZWQgd2lsbCByZXNwb25kXG4gICAgIyBpbW1lZGlhdGVseSwgYnV0IHNpbmNlIHRoZSBjb21wb25lbnQgaXNuJ3QgbW91bnRlZCB5ZXQgd2UgY2FuJ3RcbiAgICAjIGNhbGwgc2V0U3RhdGUsIHNvIHdlIHNldCBhbiBpbnN0YW5jZSB2YXJpYWJsZSBhbmQgdXBkYXRlIHN0YXRlXG4gICAgIyBpbiBjb21wb25lbnREaWRNb3VudCgpLiBQcm92aWRlcnMgdGhhdCByZXF1aXJlIGFzeW5jaHJvbm91cyBjaGVja3NcbiAgICAjIGZvciBhdXRob3JpemF0aW9uIG1heSByZXR1cm4gYmVmb3JlIG9yIGFmdGVyIHRoZSBmaXJzdCByZW5kZXIsIHNvXG4gICAgIyBjb2RlIHNob3VsZCBiZSBwcmVwYXJlZCBmb3IgZWl0aGVyIGV2ZW50dWFsaXR5LlxuICAgIEBwcm9wcy5wcm92aWRlci5hdXRob3JpemVkIChhdXRob3JpemVkKSA9PlxuICAgICAgIyBhbHdheXMgc2V0IHRoZSBpbnN0YW5jZSB2YXJpYWJsZVxuICAgICAgQF9pc0F1dGhvcml6ZWQgPSBhdXRob3JpemVkXG4gICAgICAjIHNldCB0aGUgc3RhdGUgaWYgd2UgY2FuXG4gICAgICBpZiBAX2lzTW91bnRlZFxuICAgICAgICBAc2V0U3RhdGUgYXV0aG9yaXplZDogYXV0aG9yaXplZFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiAtPlxuICAgIEBfaXNNb3VudGVkID0gdHJ1ZVxuICAgICMgc3luY2hyb25pemUgc3RhdGUgaWYgbmVjZXNzYXJ5XG4gICAgaWYgQHN0YXRlLmF1dGhvcml6ZWQgaXNudCBAX2lzQXV0aG9yaXplZFxuICAgICAgQHNldFN0YXRlIGF1dGhvcml6ZWQ6IEBfaXNBdXRob3JpemVkXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IC0+XG4gICAgQF9pc01vdW50ZWQgPSBmYWxzZVxuXG4gIHJlbmRlcjogLT5cbiAgICBpZiBAX2lzQXV0aG9yaXplZCBvciBAc3RhdGUuYXV0aG9yaXplZFxuICAgICAgQHJlbmRlcldoZW5BdXRob3JpemVkKClcbiAgICBlbHNlXG4gICAgICBAcHJvcHMucHJvdmlkZXIucmVuZGVyQXV0aG9yaXphdGlvbkRpYWxvZygpXG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aG9yaXplTWl4aW5cbiIsIk1vZGFsID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL21vZGFsLXZpZXcnXG57ZGl2LCBpfSA9IFJlYWN0LkRPTVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdCbG9ja2luZ01vZGFsJ1xuXG4gIGNsb3NlOiAtPlxuICAgIEBwcm9wcy5jbG9zZT8oKVxuXG4gICMgdXNlZCBieSBDT0RBUCB0byBkaXNtaXNzIHRoZSBzdGFydHVwIGRpYWxvZyBpZiBhIGZpbGUgaXMgZHJvcHBlZCBvbiBpdFxuICBkcm9wOiAoZSkgLT5cbiAgICBAcHJvcHMub25Ecm9wPyBlXG5cbiAgcmVuZGVyOiAtPlxuICAgIChNb2RhbCB7Y2xvc2U6IEBwcm9wcy5jbG9zZX0sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2cnLCBvbkRyb3A6IEBkcm9wfSxcbiAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnbW9kYWwtZGlhbG9nLXdyYXBwZXInfSxcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2ctdGl0bGUnfSxcbiAgICAgICAgICAgIEBwcm9wcy50aXRsZSBvciAnVW50aXRsZWQgRGlhbG9nJ1xuICAgICAgICAgIClcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2ctd29ya3NwYWNlJ30sXG4gICAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2ctYmxvY2tpbmctbWVzc2FnZSd9LCBAcHJvcHMubWVzc2FnZSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4iLCJ7ZGl2LCBidXR0b259ID0gUmVhY3QuRE9NXG5cbk1vZGFsRGlhbG9nID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL21vZGFsLWRpYWxvZy12aWV3J1xuXG50ciA9IHJlcXVpcmUgJy4uL3V0aWxzL3RyYW5zbGF0ZSdcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzc1xuXG4gIGRpc3BsYXlOYW1lOiAnQ29uZmlybURpYWxvZ1ZpZXcnXG5cbiAgY29uZmlybTogLT5cbiAgICBAcHJvcHMuY2FsbGJhY2s/KClcbiAgICBAcHJvcHMuY2xvc2U/KClcblxuICByZWplY3Q6IC0+XG4gICAgQHByb3BzLnJlamVjdENhbGxiYWNrPygpXG4gICAgQHByb3BzLmNsb3NlPygpXG5cbiAgcmVuZGVyOiAtPlxuICAgIChNb2RhbERpYWxvZyB7dGl0bGU6IChAcHJvcHMudGl0bGUgb3IgdHIgJ35DT05GSVJNX0RJQUxPRy5USVRMRScpLCBjbG9zZTogQHJlamVjdCwgekluZGV4OiA1MDB9LFxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnY29uZmlybS1kaWFsb2cnfSxcbiAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnY29uZmlybS1kaWFsb2ctbWVzc2FnZScsIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7X19odG1sOiBAcHJvcHMubWVzc2FnZX19KVxuICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdidXR0b25zJ30sXG4gICAgICAgICAgKGJ1dHRvbiB7b25DbGljazogQGNvbmZpcm19LCBAcHJvcHMueWVzVGl0bGUgb3IgdHIgJ35DT05GSVJNX0RJQUxPRy5ZRVMnKVxuICAgICAgICAgICgoYnV0dG9uIHtvbkNsaWNrOiBAcmVqZWN0fSwgQHByb3BzLm5vVGl0bGUgb3IgdHIgJ35DT05GSVJNX0RJQUxPRy5OTycpIGlmIG5vdCBAcHJvcHMuaGlkZU5vQnV0dG9uKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuIiwie2RpdiwgaW5wdXQsIGEsIGJ1dHRvbn0gPSBSZWFjdC5ET01cblxuTW9kYWxEaWFsb2cgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vbW9kYWwtZGlhbG9nLXZpZXcnXG5DbG91ZE1ldGFkYXRhID0gKHJlcXVpcmUgJy4uL3Byb3ZpZGVycy9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdEb3dubG9hZERpYWxvZ1ZpZXcnXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIGZpbGVuYW1lID0gQ2xvdWRNZXRhZGF0YS53aXRoRXh0ZW5zaW9uKEBwcm9wcy5maWxlbmFtZSBvciAodHIgXCJ+TUVOVUJBUi5VTlRJVExFRF9ET0NVTUVOVFwiKSwgJ2pzb24nKVxuICAgIHN0YXRlID1cbiAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgdHJpbW1lZEZpbGVuYW1lOiBAdHJpbSBmaWxlbmFtZVxuICAgICAgaW5jbHVkZVNoYXJlSW5mbzogZmFsc2VcbiAgICAgIHNoYXJlZDogQHByb3BzLmNsaWVudC5pc1NoYXJlZCgpXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IC0+XG4gICAgQHJlZnMuZmlsZW5hbWUuZm9jdXMoKVxuXG4gIHVwZGF0ZUZpbGVuYW1lOiAtPlxuICAgIGZpbGVuYW1lID0gQHJlZnMuZmlsZW5hbWUudmFsdWVcbiAgICBAc2V0U3RhdGVcbiAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgdHJpbW1lZEZpbGVuYW1lOiBAdHJpbSBmaWxlbmFtZVxuXG4gIHVwZGF0ZUluY2x1ZGVTaGFyZUluZm86IC0+XG4gICAgQHNldFN0YXRlIGluY2x1ZGVTaGFyZUluZm86IEByZWZzLmluY2x1ZGVTaGFyZUluZm8uY2hlY2tlZFxuXG4gIHRyaW06IChzKSAtPlxuICAgIHMucmVwbGFjZSAvXlxccyt8XFxzKyQvLCAnJ1xuXG4gIGRvd25sb2FkOiAoZSwgc2ltdWxhdGVDbGljaykgLT5cbiAgICBpZiBub3QgQGRvd25sb2FkRGlzYWJsZWQoKVxuICAgICAgQHJlZnMuZG93bmxvYWQuc2V0QXR0cmlidXRlICdocmVmJywgQHByb3BzLmNsaWVudC5nZXREb3dubG9hZFVybChAcHJvcHMuY29udGVudCwgQHN0YXRlLmluY2x1ZGVTaGFyZUluZm8pXG4gICAgICBAcmVmcy5kb3dubG9hZC5jbGljaygpIGlmIHNpbXVsYXRlQ2xpY2tcbiAgICAgIEBwcm9wcy5jbG9zZSgpXG4gICAgZWxzZVxuICAgICAgZT8ucHJldmVudERlZmF1bHQoKVxuICAgICAgQHJlZnMuZmlsZW5hbWUuZm9jdXMoKVxuXG4gIGRvd25sb2FkRGlzYWJsZWQ6IC0+XG4gICAgQHN0YXRlLnRyaW1tZWRGaWxlbmFtZS5sZW5ndGggaXMgMFxuXG4gIHdhdGNoRm9yRW50ZXI6IChlKSAtPlxuICAgIGlmIGUua2V5Q29kZSBpcyAxMyBhbmQgbm90IEBkb3dubG9hZERpc2FibGVkKClcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgQGRvd25sb2FkKG51bGwsIHRydWUpXG5cbiAgcmVuZGVyOiAtPlxuICAgIChNb2RhbERpYWxvZyB7dGl0bGU6ICh0ciAnfkRJQUxPRy5ET1dOTE9BRCcpLCBjbG9zZTogQHByb3BzLmNsb3NlfSxcbiAgICAgIChkaXYge2NsYXNzTmFtZTogJ2Rvd25sb2FkLWRpYWxvZyd9LFxuICAgICAgICAoaW5wdXQge3R5cGU6ICd0ZXh0JywgcmVmOiAnZmlsZW5hbWUnLCBwbGFjZWhvbGRlcjogJ0ZpbGVuYW1lJywgdmFsdWU6IEBzdGF0ZS5maWxlbmFtZSwgb25DaGFuZ2U6IEB1cGRhdGVGaWxlbmFtZSwgb25LZXlEb3duOiBAd2F0Y2hGb3JFbnRlcn0pXG4gICAgICAgIGlmIEBzdGF0ZS5zaGFyZWRcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdkb3dubG9hZC1zaGFyZSd9LFxuICAgICAgICAgICAgKGlucHV0IHt0eXBlOiAnY2hlY2tib3gnLCByZWY6ICdpbmNsdWRlU2hhcmVJbmZvJywgdmFsdWU6IEBzdGF0ZS5pbmNsdWRlU2hhcmVJbmZvLCBvbkNoYW5nZTogQHVwZGF0ZUluY2x1ZGVTaGFyZUluZm99KVxuICAgICAgICAgICAgKHRyICd+RE9XTkxPQURfRElBTE9HLklOQ0xVREVfU0hBUkVfSU5GTycpXG4gICAgICAgICAgKVxuICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdidXR0b25zJ30sXG4gICAgICAgICAgKGEge2hyZWY6ICcjJywgcmVmOiAnZG93bmxvYWQnLCBjbGFzc05hbWU6IChpZiBAZG93bmxvYWREaXNhYmxlZCgpIHRoZW4gJ2Rpc2FibGVkJyBlbHNlICcnKSwgZG93bmxvYWQ6IEBzdGF0ZS50cmltbWVkRmlsZW5hbWUsIG9uQ2xpY2s6IEBkb3dubG9hZH0sIHRyICd+RE9XTkxPQURfRElBTE9HLkRPV05MT0FEJylcbiAgICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAcHJvcHMuY2xvc2V9LCB0ciAnfkRPV05MT0FEX0RJQUxPRy5DQU5DRUwnKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuIiwie2RpdiwgaSwgc3BhbiwgdWwsIGxpLCBzdmcsIGcsIHJlY3R9ID0gUmVhY3QuRE9NXG5cbkRyb3Bkb3duSXRlbSA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ0Ryb3Bkb3duSXRlbSdcblxuICBjbGlja2VkOiAtPlxuICAgIEBwcm9wcy5zZWxlY3QgQHByb3BzLml0ZW1cblxuICBtb3VzZUVudGVyOiAtPlxuICAgIGlmIEBwcm9wcy5pdGVtLml0ZW1zXG4gICAgICBtZW51SXRlbSA9ICQgUmVhY3RET00uZmluZERPTU5vZGUgQHJlZnMuaXRlbVxuICAgICAgbWVudSA9IG1lbnVJdGVtLnBhcmVudCgpLnBhcmVudCgpXG5cbiAgICAgIEBwcm9wcy5zZXRTdWJNZW51XG4gICAgICAgIHN0eWxlOlxuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgbGVmdDogbWVudS53aWR0aCgpXG4gICAgICAgICAgdG9wOiBtZW51SXRlbS5wb3NpdGlvbigpLnRvcCAtIHBhcnNlSW50KG1lbnVJdGVtLmNzcygncGFkZGluZy10b3AnKSlcbiAgICAgICAgaXRlbXM6IEBwcm9wcy5pdGVtLml0ZW1zXG4gICAgZWxzZVxuICAgICAgQHByb3BzLnNldFN1Yk1lbnU/IG51bGxcblxuICByZW5kZXI6IC0+XG4gICAgZW5hYmxlZCA9IGlmIEBwcm9wcy5pdGVtLmhhc093blByb3BlcnR5ICdlbmFibGVkJ1xuICAgICAgaWYgdHlwZW9mIEBwcm9wcy5pdGVtLmVuYWJsZWQgaXMgJ2Z1bmN0aW9uJ1xuICAgICAgICBAcHJvcHMuaXRlbS5lbmFibGVkKClcbiAgICAgIGVsc2VcbiAgICAgICAgQHByb3BzLml0ZW0uZW5hYmxlZFxuICAgIGVsc2VcbiAgICAgIHRydWVcblxuICAgIGNsYXNzZXMgPSBbJ21lbnVJdGVtJ11cbiAgICBpZiBAcHJvcHMuaXRlbS5zZXBhcmF0b3JcbiAgICAgIGNsYXNzZXMucHVzaCAnc2VwYXJhdG9yJ1xuICAgICAgKGxpIHtjbGFzc05hbWU6IGNsYXNzZXMuam9pbignICcpfSwgJycpXG4gICAgZWxzZVxuICAgICAgY2xhc3Nlcy5wdXNoICdkaXNhYmxlZCcgaWYgbm90IGVuYWJsZWQgb3Igbm90IChAcHJvcHMuaXRlbS5hY3Rpb24gb3IgQHByb3BzLml0ZW0uaXRlbXMpXG4gICAgICBuYW1lID0gQHByb3BzLml0ZW0ubmFtZSBvciBAcHJvcHMuaXRlbVxuICAgICAgKGxpIHtyZWY6ICdpdGVtJywgY2xhc3NOYW1lOiBjbGFzc2VzLmpvaW4oJyAnKSwgb25DbGljazogQGNsaWNrZWQsIG9uTW91c2VFbnRlcjogQG1vdXNlRW50ZXIgfSxcbiAgICAgICAgaWYgQHByb3BzLml0ZW0uaXRlbXNcbiAgICAgICAgICAoaSB7Y2xhc3NOYW1lOiAnaWNvbi1pbnNwZWN0b3JBcnJvdy1jb2xsYXBzZSd9KVxuICAgICAgICBuYW1lXG4gICAgICApXG5cbkRyb3BEb3duID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ0Ryb3Bkb3duJ1xuXG4gIGdldEluaXRpYWxTdGF0ZTogLT5cbiAgICBzaG93aW5nTWVudTogZmFsc2VcbiAgICB0aW1lb3V0OiBudWxsXG4gICAgc3ViTWVudTogbnVsbFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogLT5cbiAgICBpZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlZG93bicsIEBjaGVja0JsdXIsIHRydWVcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICd0b3VjaHN0YXJ0JywgQGNoZWNrQmx1ciwgdHJ1ZVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiAtPlxuICAgIGlmIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJywgQGNoZWNrQmx1ciwgdHJ1ZVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIgJ3RvdWNoc3RhcnQnLCBAY2hlY2tCbHVyLCB0cnVlXG5cbiAgY2hlY2tCbHVyOiAtPlxuICAgIGlmIEBzdGF0ZS5zaG93aW5nTWVudVxuICAgICAgQGJsdXIoKVxuXG4gIGJsdXI6IC0+XG4gICAgQHVuYmx1cigpXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQgKCA9PiBAc2V0U3RhdGUge3Nob3dpbmdNZW51OiBmYWxzZSwgc3ViTWVudTogZmFsc2V9ICksIDUwMFxuICAgIEBzZXRTdGF0ZSB7dGltZW91dDogdGltZW91dH1cblxuICB1bmJsdXI6IC0+XG4gICAgaWYgQHN0YXRlLnRpbWVvdXRcbiAgICAgIGNsZWFyVGltZW91dChAc3RhdGUudGltZW91dClcbiAgICBAc2V0U3RhdGUge3RpbWVvdXQ6IG51bGx9XG5cbiAgc2V0U3ViTWVudTogKHN1Yk1lbnUpIC0+XG4gICAgQHNldFN0YXRlIHN1Yk1lbnU6IHN1Yk1lbnVcblxuICBzZWxlY3Q6IChpdGVtKSAtPlxuICAgIHJldHVybiBpZiBpdGVtPy5pdGVtc1xuICAgIG5leHRTdGF0ZSA9IChub3QgQHN0YXRlLnNob3dpbmdNZW51KVxuICAgIEBzZXRTdGF0ZSB7c2hvd2luZ01lbnU6IG5leHRTdGF0ZX1cbiAgICByZXR1cm4gdW5sZXNzIGl0ZW1cbiAgICBpdGVtLmFjdGlvbj8oKVxuXG4gIHJlbmRlcjogLT5cbiAgICBtZW51Q2xhc3MgPSBpZiBAc3RhdGUuc2hvd2luZ01lbnUgdGhlbiAnbWVudS1zaG93aW5nJyBlbHNlICdtZW51LWhpZGRlbidcbiAgICBzZWxlY3QgPSAoaXRlbSkgPT5cbiAgICAgICggPT4gQHNlbGVjdChpdGVtKSlcbiAgICAoZGl2IHtjbGFzc05hbWU6ICdtZW51J30sXG4gICAgICBpZiBAcHJvcHMuaXRlbXM/Lmxlbmd0aCA+IDBcbiAgICAgICAgKGRpdiB7fSxcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdtZW51LWFuY2hvcicsIG9uQ2xpY2s6ID0+IEBzZWxlY3QobnVsbCl9LFxuICAgICAgICAgICAgKHN2ZyB7dmVyc2lvbjogJzEuMScsIHdpZHRoOiAxNiwgaGVpZ2h0OiAxNiwgdmlld0JveDogJzAgMCAxNiAxNicsIGVuYWJsZUJhY2tncm91bmQ6ICduZXcgMCAwIDE2IDE2J30sXG4gICAgICAgICAgICAgIChnIHt9LFxuICAgICAgICAgICAgICAgIChyZWN0IHt5OiAyLCB3aWR0aDogMTYsIGhlaWdodDogMn0pXG4gICAgICAgICAgICAgICAgKHJlY3Qge3k6IDcsIHdpZHRoOiAxNiwgaGVpZ2h0OiAyfSlcbiAgICAgICAgICAgICAgICAocmVjdCB7eTogMTIsIHdpZHRoOiAxNiwgaGVpZ2h0OiAyfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6IG1lbnVDbGFzcywgb25Nb3VzZUxlYXZlOiBAYmx1ciwgb25Nb3VzZUVudGVyOiBAdW5ibHVyfSxcbiAgICAgICAgICAgICh1bCB7fSxcbiAgICAgICAgICAgICAgKERyb3Bkb3duSXRlbSB7a2V5OiBpbmRleCwgaXRlbTogaXRlbSwgc2VsZWN0OiBAc2VsZWN0LCBzZXRTdWJNZW51OiBAc2V0U3ViTWVudX0pIGZvciBpdGVtLCBpbmRleCBpbiBAcHJvcHMuaXRlbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIEBzdGF0ZS5zdWJNZW51XG4gICAgICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogbWVudUNsYXNzLCBzdHlsZTogQHN0YXRlLnN1Yk1lbnUuc3R5bGV9LFxuICAgICAgICAgICAgICAgICh1bCB7fSxcbiAgICAgICAgICAgICAgICAgIChEcm9wZG93bkl0ZW0ge2tleTogaW5kZXgsIGl0ZW06IGl0ZW0sIHNlbGVjdDogQHNlbGVjdH0pIGZvciBpdGVtLCBpbmRleCBpbiBAc3RhdGUuc3ViTWVudS5pdGVtc1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgIClcbiAgICApXG5cbm1vZHVsZS5leHBvcnRzID0gRHJvcERvd25cbiIsIkF1dGhvcml6ZU1peGluID0gcmVxdWlyZSAnLi9hdXRob3JpemUtbWl4aW4nXG5DbG91ZE1ldGFkYXRhID0gKHJlcXVpcmUgJy4uL3Byb3ZpZGVycy9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5cbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuXG57ZGl2LCBpbWcsIGksIHNwYW4sIGlucHV0LCBidXR0b259ID0gUmVhY3QuRE9NXG5cbkZpbGVMaXN0RmlsZSA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgUmVhY3QuY3JlYXRlQ2xhc3NcbiAgZGlzcGxheU5hbWU6ICdGaWxlTGlzdEZpbGUnXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiAtPlxuICAgIEBsYXN0Q2xpY2sgPSAwXG5cbiAgZmlsZVNlbGVjdGVkOiAgKGUpIC0+XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIG5vdyA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcbiAgICBAcHJvcHMuZmlsZVNlbGVjdGVkIEBwcm9wcy5tZXRhZGF0YVxuICAgIGlmIG5vdyAtIEBsYXN0Q2xpY2sgPD0gMjUwXG4gICAgICBAcHJvcHMuZmlsZUNvbmZpcm1lZCgpXG4gICAgQGxhc3RDbGljayA9IG5vd1xuXG4gIHJlbmRlcjogLT5cbiAgICBzZWxlY3RhYmxlQ2xhc3MgPSBpZiBAcHJvcHMubWV0YWRhdGEudHlwZSBpc250IENsb3VkTWV0YWRhdGEuTGFiZWwgdGhlbiAnc2VsZWN0YWJsZScgZWxzZSAnJ1xuICAgIHNlbGVjdGVkQ2xhc3MgPSBpZiBAcHJvcHMuc2VsZWN0ZWQgdGhlbiAnc2VsZWN0ZWQnIGVsc2UgJydcbiAgICBzdWJGb2xkZXJDbGFzcyA9IGlmIEBwcm9wcy5pc1N1YkZvbGRlciB0aGVuICdzdWJmb2xkZXInIGVsc2UgJydcbiAgICAoZGl2IHtjbGFzc05hbWU6IFwiI3tzZWxlY3RhYmxlQ2xhc3N9ICN7c2VsZWN0ZWRDbGFzc30gI3tzdWJGb2xkZXJDbGFzc31cIlxuICAgICAgICAgICwgdGl0bGU6IEBwcm9wcy5tZXRhZGF0YS5kZXNjcmlwdGlvbiBvciB1bmRlZmluZWRcbiAgICAgICAgICAsIG9uQ2xpY2s6IGlmIEBwcm9wcy5tZXRhZGF0YS50eXBlIGlzbnQgQ2xvdWRNZXRhZGF0YS5MYWJlbCB0aGVuIEBmaWxlU2VsZWN0ZWQgZWxzZSB1bmRlZmluZWQgfSxcbiAgICAgIChSZWFjdC5ET00uaSB7Y2xhc3NOYW1lOiBpZiBAcHJvcHMubWV0YWRhdGEudHlwZSBpcyBDbG91ZE1ldGFkYXRhLkZvbGRlciB0aGVuICdpY29uLWluc3BlY3RvckFycm93LWNvbGxhcHNlJyBlbHNlIGlmIEBwcm9wcy5tZXRhZGF0YS50eXBlIGlzIENsb3VkTWV0YWRhdGEuRmlsZSB0aGVuICdpY29uLW5vdGVUb29sJ30pXG4gICAgICBAcHJvcHMubWV0YWRhdGEubmFtZVxuICAgIClcblxuRmlsZUxpc3QgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IFJlYWN0LmNyZWF0ZUNsYXNzXG4gIGRpc3BsYXlOYW1lOiAnRmlsZUxpc3QnXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIGxvYWRpbmc6IHRydWVcblxuICBjb21wb25lbnREaWRNb3VudDogLT5cbiAgICBAX2lzTW91bnRlZCA9IHRydWVcbiAgICBAbG9hZCBAcHJvcHMuZm9sZGVyXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogKG5leHRQcm9wcykgLT5cbiAgICBpZiBuZXh0UHJvcHMuZm9sZGVyIGlzbnQgQHByb3BzLmZvbGRlclxuICAgICAgQGxvYWQgbmV4dFByb3BzLmZvbGRlclxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiAtPlxuICAgIEBfaXNNb3VudGVkID0gZmFsc2VcblxuICBsb2FkOiAoZm9sZGVyKSAtPlxuICAgIEBwcm9wcy5wcm92aWRlci5saXN0IGZvbGRlciwgKGVyciwgbGlzdCkgPT5cbiAgICAgIHJldHVybiBAcHJvcHMuY2xpZW50LmFsZXJ0KGVycikgaWYgZXJyXG4gICAgICAjIGFzeW5jaHJvbm91cyBjYWxsYmFjayBtYXkgYmUgY2FsbGVkIGFmdGVyIGRpYWxvZyBoYXMgYmVlbiBkaXNtaXNzZWRcbiAgICAgIGlmIEBfaXNNb3VudGVkXG4gICAgICAgIEBzZXRTdGF0ZVxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICBAcHJvcHMubGlzdExvYWRlZCBsaXN0XG5cbiAgcGFyZW50U2VsZWN0ZWQ6IChlKSAtPlxuICAgIEBwcm9wcy5maWxlU2VsZWN0ZWQgQHByb3BzLmZvbGRlcj8ucGFyZW50XG5cbiAgcmVuZGVyOiAtPlxuICAgIGxpc3QgPSBbXVxuICAgIGlzU3ViRm9sZGVyID0gQHByb3BzLmZvbGRlcj9cbiAgICBpZiBpc1N1YkZvbGRlclxuICAgICAgbGlzdC5wdXNoIChkaXYge2tleTogJ3BhcmVudCcsIGNsYXNzTmFtZTogJ3NlbGVjdGFibGUnLCBvbkNsaWNrOiBAcGFyZW50U2VsZWN0ZWR9LCAoUmVhY3QuRE9NLmkge2NsYXNzTmFtZTogJ2ljb24tcGFsZXR0ZUFycm93LWNvbGxhcHNlJ30pLCBAcHJvcHMuZm9sZGVyLm5hbWUpXG4gICAgZm9yIG1ldGFkYXRhLCBpIGluIEBwcm9wcy5saXN0XG4gICAgICBsaXN0LnB1c2ggKEZpbGVMaXN0RmlsZSB7a2V5OiBpLCBtZXRhZGF0YTogbWV0YWRhdGEsIHNlbGVjdGVkOiBAcHJvcHMuc2VsZWN0ZWRGaWxlIGlzIG1ldGFkYXRhLCBmaWxlU2VsZWN0ZWQ6IEBwcm9wcy5maWxlU2VsZWN0ZWQsIGZpbGVDb25maXJtZWQ6IEBwcm9wcy5maWxlQ29uZmlybWVkLCBpc1N1YkZvbGRlcjogaXNTdWJGb2xkZXJ9KVxuXG4gICAgKGRpdiB7Y2xhc3NOYW1lOiAnZmlsZWxpc3QnfSxcbiAgICAgIGlmIEBzdGF0ZS5sb2FkaW5nXG4gICAgICAgIHRyIFwifkZJTEVfRElBTE9HLkxPQURJTkdcIlxuICAgICAgZWxzZVxuICAgICAgICBsaXN0XG4gICAgKVxuXG5GaWxlRGlhbG9nVGFiID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgZGlzcGxheU5hbWU6ICdGaWxlRGlhbG9nVGFiJ1xuXG4gIG1peGluczogW0F1dGhvcml6ZU1peGluXVxuXG4gIGdldEluaXRpYWxTdGF0ZTogLT5cbiAgICBpbml0aWFsU3RhdGUgPSBAZ2V0U3RhdGVGb3JGb2xkZXIoQHByb3BzLmNsaWVudC5zdGF0ZS5tZXRhZGF0YT8ucGFyZW50LCB0cnVlKSBvciBudWxsXG4gICAgaW5pdGlhbFN0YXRlLmZpbGVuYW1lID0gaW5pdGlhbFN0YXRlLm1ldGFkYXRhPy5uYW1lIG9yICcnXG4gICAgaW5pdGlhbFN0YXRlXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IC0+XG4gICAgQF9pc01vdW50ZWQgPSB0cnVlXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IC0+XG4gICAgQF9pc01vdW50ZWQgPSBmYWxzZVxuXG4gIGlzT3BlbjogLT5cbiAgICBAcHJvcHMuZGlhbG9nLmFjdGlvbiBpcyAnb3BlbkZpbGUnXG5cbiAgZmlsZW5hbWVDaGFuZ2VkOiAoZSkgLT5cbiAgICBmaWxlbmFtZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgQHNldFN0YXRlXG4gICAgICBmaWxlbmFtZTogZmlsZW5hbWVcbiAgICAgIG1ldGFkYXRhOiBAZmluZE1ldGFkYXRhIGZpbGVuYW1lLCBAc3RhdGUubGlzdFxuXG4gIGxpc3RMb2FkZWQ6IChsaXN0KSAtPlxuICAgICMgYXN5bmNocm9ub3VzIGNhbGxiYWNrIG1heSBiZSBjYWxsZWQgYWZ0ZXIgZGlhbG9nIGhhcyBiZWVuIGRpc21pc3NlZFxuICAgIGlmIEBfaXNNb3VudGVkXG4gICAgICBAc2V0U3RhdGUgbGlzdDogbGlzdFxuXG4gIGdldFNhdmVNZXRhZGF0YTogLT5cbiAgICAjIFRoZSBzYXZlIG1ldGFkYXRhIGZvciBhIGZpbGUgdGhhdCBtYXkgaGF2ZSBiZWVuIG9wZW5lZCBmcm9tIGFub3RoZXJcbiAgICAjIHByb3ZpZGVyIG11c3QgYmUgY2xvbmVkLCBidXQgd2l0aG91dCBjbG9uaW5nIHRoZSBwcm92aWRlciBmaWVsZC5cbiAgICAjIEZ1cnRoZXJtb3JlLCBpZiB0aGUgcHJvdmlkZXIgaGFzIGNoYW5nZWQsIHRoZSBwcm92aWRlciBhbmQgcHJvdmlkZXJEYXRhXG4gICAgIyBmaWVsZHMgc2hvdWxkIGJlIGNsZWFyZWQuXG4gICAgc2F2ZU1ldGFkYXRhID0gaWYgQHByb3BzLmNsaWVudC5zdGF0ZS5tZXRhZGF0YSB0aGVuIF8uY2xvbmUgQHByb3BzLmNsaWVudC5zdGF0ZS5tZXRhZGF0YSBlbHNlIG51bGxcbiAgICBpZiBzYXZlTWV0YWRhdGFcbiAgICAgIGlmIEBwcm9wcy5wcm92aWRlciBpcyBzYXZlTWV0YWRhdGEucHJvdmlkZXJcbiAgICAgICAgc2F2ZU1ldGFkYXRhLnByb3ZpZGVyRGF0YSA9IF8uY2xvbmVEZWVwIHNhdmVNZXRhZGF0YS5wcm92aWRlckRhdGFcbiAgICAgIGVsc2VcbiAgICAgICAgc2F2ZU1ldGFkYXRhLnByb3ZpZGVyID0gbnVsbFxuICAgICAgICBzYXZlTWV0YWRhdGEucHJvdmlkZXJEYXRhID0gbnVsbFxuICAgICAgICBzYXZlTWV0YWRhdGEuZm9yY2VTYXZlRGlhbG9nID0gZmFsc2VcbiAgICBzYXZlTWV0YWRhdGFcblxuICBnZXRTdGF0ZUZvckZvbGRlcjogKGZvbGRlciwgaW5pdGlhbEZvbGRlcikgLT5cbiAgICBtZXRhZGF0YSA9IGlmIEBpc09wZW4oKSB0aGVuIEBzdGF0ZT8ubWV0YWRhdGEgb3IgbnVsbCBlbHNlIEBnZXRTYXZlTWV0YWRhdGEoKVxuXG4gICAgaWYgaW5pdGlhbEZvbGRlciBhbmQgKEBwcm9wcy5jbGllbnQuc3RhdGUubWV0YWRhdGE/LnByb3ZpZGVyIGlzbnQgQHByb3BzLnByb3ZpZGVyKVxuICAgICAgZm9sZGVyID0gbnVsbFxuICAgIGVsc2VcbiAgICAgIG1ldGFkYXRhPy5wYXJlbnQgPSBmb2xkZXJcblxuICAgIGZvbGRlcjogZm9sZGVyXG4gICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gICAgbGlzdDogW11cblxuICBmaWxlU2VsZWN0ZWQ6IChtZXRhZGF0YSkgLT5cbiAgICBpZiBtZXRhZGF0YT8udHlwZSBpcyBDbG91ZE1ldGFkYXRhLkZvbGRlclxuICAgICAgQHNldFN0YXRlIEBnZXRTdGF0ZUZvckZvbGRlciBtZXRhZGF0YVxuICAgIGVsc2UgaWYgbWV0YWRhdGE/LnR5cGUgaXMgQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICBAc2V0U3RhdGVcbiAgICAgICAgZmlsZW5hbWU6IG1ldGFkYXRhLm5hbWVcbiAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gICAgZWxzZVxuICAgICAgQHNldFN0YXRlIEBnZXRTdGF0ZUZvckZvbGRlciBudWxsXG5cbiAgY29uZmlybTogLT5cbiAgICBjb25maXJtZWQgPSAobWV0YWRhdGEpID0+XG4gICAgICAjIGVuc3VyZSB0aGUgbWV0YWRhdGEgcHJvdmlkZXIgaXMgdGhlIGN1cnJlbnRseS1zaG93aW5nIHRhYlxuICAgICAgQHN0YXRlLm1ldGFkYXRhID0gbWV0YWRhdGFcbiAgICAgIGlmIEBzdGF0ZS5tZXRhZGF0YS5wcm92aWRlciBpc250IEBwcm9wcy5wcm92aWRlclxuICAgICAgICBAc3RhdGUubWV0YWRhdGEucHJvdmlkZXIgPSBAcHJvcHMucHJvdmlkZXJcbiAgICAgICAgIyBpZiBzd2l0Y2hpbmcgcHJvdmlkZXIsIHRoZW4gY2xlYXIgcHJvdmlkZXJEYXRhXG4gICAgICAgIEBzdGF0ZS5tZXRhZGF0YS5wcm92aWRlckRhdGEgPSB7fVxuICAgICAgQHByb3BzLmRpYWxvZy5jYWxsYmFjaz8gQHN0YXRlLm1ldGFkYXRhXG4gICAgICBAcHJvcHMuY2xvc2UoKVxuXG4gICAgZmlsZW5hbWUgPSAkLnRyaW0gQHN0YXRlLmZpbGVuYW1lXG4gICAgZXhpc3RpbmdNZXRhZGF0YSA9IEBmaW5kTWV0YWRhdGEgZmlsZW5hbWUsIEBzdGF0ZS5saXN0XG4gICAgbWV0YWRhdGEgPSBAc3RhdGUubWV0YWRhdGEgb3IgZXhpc3RpbmdNZXRhZGF0YVxuXG4gICAgaWYgbWV0YWRhdGFcbiAgICAgIGlmIEBpc09wZW4oKVxuICAgICAgICBjb25maXJtZWQgbWV0YWRhdGFcbiAgICAgIGVsc2UgaWYgZXhpc3RpbmdNZXRhZGF0YVxuICAgICAgICBAcHJvcHMuY2xpZW50LmNvbmZpcm0gXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gb3ZlcndyaXRlICN7ZXhpc3RpbmdNZXRhZGF0YS5uYW1lfT9cIiwgLT4gY29uZmlybWVkIGV4aXN0aW5nTWV0YWRhdGFcbiAgICAgIGVsc2VcbiAgICAgICAgY29uZmlybWVkIG1ldGFkYXRhXG4gICAgZWxzZSBpZiBAaXNPcGVuKClcbiAgICAgIEBwcm9wcy5jbGllbnQuYWxlcnQgXCIje2ZpbGVuYW1lfSBub3QgZm91bmRcIlxuICAgIGVsc2VcbiAgICAgIGNvbmZpcm1lZCBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgICBuYW1lOiBmaWxlbmFtZVxuICAgICAgICB0eXBlOiBDbG91ZE1ldGFkYXRhLkZpbGVcbiAgICAgICAgcGFyZW50OiBAc3RhdGUuZm9sZGVyIG9yIG51bGxcbiAgICAgICAgcHJvdmlkZXI6IEBwcm9wcy5wcm92aWRlclxuXG4gIHJlbW92ZTogLT5cbiAgICBpZiBAc3RhdGUubWV0YWRhdGEgYW5kIEBzdGF0ZS5tZXRhZGF0YS50eXBlIGlzbnQgQ2xvdWRNZXRhZGF0YS5Gb2xkZXJcbiAgICAgIEBwcm9wcy5jbGllbnQuY29uZmlybSB0cihcIn5GSUxFX0RJQUxPRy5SRU1PVkVfQ09ORklSTVwiLCB7ZmlsZW5hbWU6IEBzdGF0ZS5tZXRhZGF0YS5uYW1lfSksID0+XG4gICAgICAgIEBwcm9wcy5wcm92aWRlci5yZW1vdmUgQHN0YXRlLm1ldGFkYXRhLCAoZXJyKSA9PlxuICAgICAgICAgIGlmIG5vdCBlcnJcbiAgICAgICAgICAgIEBwcm9wcy5jbGllbnQuYWxlcnQgdHIoXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9NRVNTQUdFXCIsIHtmaWxlbmFtZTogQHN0YXRlLm1ldGFkYXRhLm5hbWV9KSwgdHIoXCJ+RklMRV9ESUFMT0cuUkVNT1ZFRF9USVRMRVwiKVxuICAgICAgICAgICAgbGlzdCA9IEBzdGF0ZS5saXN0LnNsaWNlIDBcbiAgICAgICAgICAgIGluZGV4ID0gbGlzdC5pbmRleE9mIEBzdGF0ZS5tZXRhZGF0YVxuICAgICAgICAgICAgbGlzdC5zcGxpY2UgaW5kZXgsIDFcbiAgICAgICAgICAgIEBzZXRTdGF0ZVxuICAgICAgICAgICAgICBsaXN0OiBsaXN0XG4gICAgICAgICAgICAgIG1ldGFkYXRhOiBudWxsXG4gICAgICAgICAgICAgIGZpbGVuYW1lOiAnJ1xuXG4gIGNhbmNlbDogLT5cbiAgICBAcHJvcHMuY2xvc2UoKVxuXG4gIGZpbmRNZXRhZGF0YTogKGZpbGVuYW1lLCBsaXN0KSAtPlxuICAgIGZvciBtZXRhZGF0YSBpbiBsaXN0XG4gICAgICBpZiBtZXRhZGF0YS5uYW1lIGlzIGZpbGVuYW1lXG4gICAgICAgIHJldHVybiBtZXRhZGF0YVxuICAgIG51bGxcblxuICB3YXRjaEZvckVudGVyOiAoZSkgLT5cbiAgICBpZiBlLmtleUNvZGUgaXMgMTMgYW5kIG5vdCBAY29uZmlybURpc2FibGVkKClcbiAgICAgIEBjb25maXJtKClcblxuICBjb25maXJtRGlzYWJsZWQ6IC0+XG4gICAgKEBzdGF0ZS5maWxlbmFtZS5sZW5ndGggaXMgMCkgb3IgKEBpc09wZW4oKSBhbmQgbm90IEBzdGF0ZS5tZXRhZGF0YSlcblxuICByZW5kZXJXaGVuQXV0aG9yaXplZDogLT5cbiAgICBjb25maXJtRGlzYWJsZWQgPSBAY29uZmlybURpc2FibGVkKClcbiAgICByZW1vdmVEaXNhYmxlZCA9IChAc3RhdGUubWV0YWRhdGEgaXMgbnVsbCkgb3IgKEBzdGF0ZS5tZXRhZGF0YS50eXBlIGlzIENsb3VkTWV0YWRhdGEuRm9sZGVyKVxuXG4gICAgKGRpdiB7Y2xhc3NOYW1lOiAnZGlhbG9nVGFiJ30sXG4gICAgICAoaW5wdXQge3R5cGU6ICd0ZXh0JywgdmFsdWU6IEBzdGF0ZS5maWxlbmFtZSwgcGxhY2Vob2xkZXI6ICh0ciBcIn5GSUxFX0RJQUxPRy5GSUxFTkFNRVwiKSwgb25DaGFuZ2U6IEBmaWxlbmFtZUNoYW5nZWQsIG9uS2V5RG93bjogQHdhdGNoRm9yRW50ZXJ9KVxuICAgICAgKEZpbGVMaXN0IHtwcm92aWRlcjogQHByb3BzLnByb3ZpZGVyLCBmb2xkZXI6IEBzdGF0ZS5mb2xkZXIsIHNlbGVjdGVkRmlsZTogQHN0YXRlLm1ldGFkYXRhLCBmaWxlU2VsZWN0ZWQ6IEBmaWxlU2VsZWN0ZWQsIGZpbGVDb25maXJtZWQ6IEBjb25maXJtLCBsaXN0OiBAc3RhdGUubGlzdCwgbGlzdExvYWRlZDogQGxpc3RMb2FkZWQsIGNsaWVudDogQHByb3BzLmNsaWVudH0pXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdidXR0b25zJ30sXG4gICAgICAgIChidXR0b24ge29uQ2xpY2s6IEBjb25maXJtLCBkaXNhYmxlZDogY29uZmlybURpc2FibGVkLCBjbGFzc05hbWU6IGlmIGNvbmZpcm1EaXNhYmxlZCB0aGVuICdkaXNhYmxlZCcgZWxzZSAnJ30sIGlmIEBpc09wZW4oKSB0aGVuICh0ciBcIn5GSUxFX0RJQUxPRy5PUEVOXCIpIGVsc2UgKHRyIFwifkZJTEVfRElBTE9HLlNBVkVcIikpXG4gICAgICAgIGlmIEBwcm9wcy5wcm92aWRlci5jYW4gJ3JlbW92ZSdcbiAgICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAcmVtb3ZlLCBkaXNhYmxlZDogcmVtb3ZlRGlzYWJsZWQsIGNsYXNzTmFtZTogaWYgcmVtb3ZlRGlzYWJsZWQgdGhlbiAnZGlzYWJsZWQnIGVsc2UgJyd9LCAodHIgXCJ+RklMRV9ESUFMT0cuUkVNT1ZFXCIpKVxuICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAY2FuY2VsfSwgKHRyIFwifkZJTEVfRElBTE9HLkNBTkNFTFwiKSlcbiAgICAgIClcbiAgICApXG5cbm1vZHVsZS5leHBvcnRzID0gRmlsZURpYWxvZ1RhYlxuIiwiTW9kYWxUYWJiZWREaWFsb2cgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vbW9kYWwtdGFiYmVkLWRpYWxvZy12aWV3J1xuVGFiYmVkUGFuZWwgPSByZXF1aXJlICcuL3RhYmJlZC1wYW5lbC12aWV3J1xuTG9jYWxGaWxlVGFiID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL2xvY2FsLWZpbGUtdGFiLWxpc3QtdmlldydcblVybFRhYiA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi91cmwtdGFiLXZpZXcnXG5cbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuXG5Mb2NhbEZpbGVJbXBvcnRUYWIgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgZGlzcGxheU5hbWU6ICdJbXBvcnRUYWJiZWREaWFsb2cnXG5cbiAgaW1wb3J0RmlsZTogKG1ldGFkYXRhLCB2aWEpIC0+XG4gICAgc3dpdGNoIG1ldGFkYXRhLnByb3ZpZGVyXG4gICAgICB3aGVuICdsb2NhbEZpbGUnXG4gICAgICAgIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IChsb2FkZWQpID0+XG4gICAgICAgICAgZGF0YSA9XG4gICAgICAgICAgICBmaWxlOlxuICAgICAgICAgICAgICBuYW1lOiBtZXRhZGF0YS5wcm92aWRlckRhdGEuZmlsZS5uYW1lLFxuICAgICAgICAgICAgICBjb250ZW50OiBsb2FkZWQudGFyZ2V0LnJlc3VsdFxuICAgICAgICAgICAgICBvYmplY3Q6IG1ldGFkYXRhLnByb3ZpZGVyRGF0YS5maWxlXG4gICAgICAgICAgICB2aWE6IHZpYVxuICAgICAgICAgIEBwcm9wcy5kaWFsb2cuY2FsbGJhY2s/IGRhdGFcbiAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQgbWV0YWRhdGEucHJvdmlkZXJEYXRhLmZpbGVcblxuICBpbXBvcnRVcmw6ICh1cmwsIHZpYSkgLT5cbiAgICBAcHJvcHMuZGlhbG9nLmNhbGxiYWNrPyB7dXJsOiB1cmwsIHZpYTogdmlhfVxuXG4gIHJlbmRlcjogIC0+XG4gICAgdGFicyA9IFtcbiAgICAgIFRhYmJlZFBhbmVsLlRhYlxuICAgICAgICBrZXk6IDBcbiAgICAgICAgbGFiZWw6ICh0ciBcIn5JTVBPUlQuTE9DQUxfRklMRVwiKVxuICAgICAgICBjb21wb25lbnQ6IExvY2FsRmlsZVRhYlxuICAgICAgICAgIGNsaWVudDogQHByb3BzLmNsaWVudFxuICAgICAgICAgIGRpYWxvZzpcbiAgICAgICAgICAgIGNhbGxiYWNrOiBAaW1wb3J0RmlsZVxuICAgICAgICAgIHByb3ZpZGVyOiAnbG9jYWxGaWxlJyAjIHdlIGFyZSBmYWtpbmcgdGhlIHByb3ZpZGVyIGhlcmUgc28gd2UgY2FuIHJldXNlIHRoZSBsb2NhbCBmaWxlIHRhYlxuICAgICAgICAgIGNsb3NlOiBAcHJvcHMuY2xvc2VcbiAgICAgIFRhYmJlZFBhbmVsLlRhYlxuICAgICAgICBrZXk6IDFcbiAgICAgICAgbGFiZWw6ICh0ciBcIn5JTVBPUlQuVVJMXCIpXG4gICAgICAgIGNvbXBvbmVudDogVXJsVGFiXG4gICAgICAgICAgY2xpZW50OiBAcHJvcHMuY2xpZW50XG4gICAgICAgICAgZGlhbG9nOlxuICAgICAgICAgICAgY2FsbGJhY2s6IEBpbXBvcnRVcmxcbiAgICAgICAgICBjbG9zZTogQHByb3BzLmNsb3NlXG4gICAgXVxuICAgIChNb2RhbFRhYmJlZERpYWxvZyB7dGl0bGU6ICh0ciBcIn5ESUFMT0cuSU1QT1JUX0RBVEFcIiksIGNsb3NlOiBAcHJvcHMuY2xvc2UsIHRhYnM6IHRhYnMsIHNlbGVjdGVkVGFiSW5kZXg6IDB9KVxuIiwie2RpdiwgaW5wdXQsIGJ1dHRvbn0gPSBSZWFjdC5ET01cbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuQ2xvdWRNZXRhZGF0YSA9IChyZXF1aXJlICcuLi9wcm92aWRlcnMvcHJvdmlkZXItaW50ZXJmYWNlJykuQ2xvdWRNZXRhZGF0YVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdMb2NhbEZpbGVMaXN0VGFiJ1xuXG4gICMgU3RhbmRhcmQgUmVhY3QgJ2Ryb3AnIGV2ZW50IGhhbmRsZXJzIGFyZSB0cmlnZ2VyZWQgYWZ0ZXIgY2xpZW50ICdkcm9wJyBldmVudCBoYW5kbGVycy5cbiAgIyBCeSBleHBsaWNpdGx5IGluc3RhbGxpbmcgRE9NIGV2ZW50IGhhbmRsZXJzIHdlIGdldCBmaXJzdCBjcmFjayBhdCB0aGUgJ2Ryb3AnIGV2ZW50LlxuICBjb21wb25lbnREaWRNb3VudDogLT5cbiAgICBAcmVmcy5kcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyICdkcm9wJywgQGRyb3BcbiAgICByZXR1cm5cblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogLT5cbiAgICBAcmVmcy5kcm9wWm9uZS5yZW1vdmVFdmVudExpc3RlbmVyICdkcm9wJywgQGRyb3BcbiAgICByZXR1cm5cblxuICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgaG92ZXI6IGZhbHNlXG5cbiAgY2hhbmdlZDogKGUpIC0+XG4gICAgZmlsZXMgPSBlLnRhcmdldC5maWxlc1xuICAgIGlmIGZpbGVzLmxlbmd0aCA+IDFcbiAgICAgIEBwcm9wcy5jbGllbnQuYWxlcnQgdHIgXCJ+TE9DQUxfRklMRV9ESUFMT0cuTVVMVElQTEVfRklMRVNfU0VMRUNURURcIlxuICAgIGVsc2UgaWYgZmlsZXMubGVuZ3RoIGlzIDFcbiAgICAgIEBvcGVuRmlsZSBmaWxlc1swXSwgJ3NlbGVjdCdcblxuICBvcGVuRmlsZTogKGZpbGUsIHZpYSkgLT5cbiAgICBtZXRhZGF0YSA9IG5ldyBDbG91ZE1ldGFkYXRhXG4gICAgICBuYW1lOiBmaWxlLm5hbWUuc3BsaXQoJy4nKVswXVxuICAgICAgdHlwZTogQ2xvdWRNZXRhZGF0YS5GaWxlXG4gICAgICBwYXJlbnQ6IG51bGxcbiAgICAgIHByb3ZpZGVyOiBAcHJvcHMucHJvdmlkZXJcbiAgICAgIHByb3ZpZGVyRGF0YTpcbiAgICAgICAgZmlsZTogZmlsZVxuICAgIEBwcm9wcy5kaWFsb2cuY2FsbGJhY2s/IG1ldGFkYXRhLCB2aWFcbiAgICBAcHJvcHMuY2xvc2UoKVxuXG4gIGNhbmNlbDogLT5cbiAgICBAcHJvcHMuY2xvc2UoKVxuXG4gIGRyYWdFbnRlcjogKGUpIC0+XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgQHNldFN0YXRlIGhvdmVyOiB0cnVlXG5cbiAgZHJhZ0xlYXZlOiAoZSkgLT5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBAc2V0U3RhdGUgaG92ZXI6IGZhbHNlXG5cbiAgZHJvcDogKGUpIC0+XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGRyb3BwZWRGaWxlcyA9IGlmIGUuZGF0YVRyYW5zZmVyIHRoZW4gZS5kYXRhVHJhbnNmZXIuZmlsZXMgZWxzZSBlLnRhcmdldC5maWxlc1xuICAgIGlmIGRyb3BwZWRGaWxlcy5sZW5ndGggPiAxXG4gICAgICBAcHJvcHMuY2xpZW50LmFsZXJ0IHRyIFwifkxPQ0FMX0ZJTEVfRElBTE9HLk1VTFRJUExFX0ZJTEVTX0RST1BQRURcIlxuICAgIGVsc2UgaWYgZHJvcHBlZEZpbGVzLmxlbmd0aCBpcyAxXG4gICAgICBAb3BlbkZpbGUgZHJvcHBlZEZpbGVzWzBdLCAnZHJvcCdcbiAgICByZXR1cm5cblxuICByZW5kZXI6IC0+XG4gICAgZHJvcENsYXNzID0gXCJkcm9wQXJlYSN7aWYgQHN0YXRlLmhvdmVyIHRoZW4gJyBkcm9wSG92ZXInIGVsc2UgJyd9XCJcbiAgICAoZGl2IHtjbGFzc05hbWU6ICdkaWFsb2dUYWIgbG9jYWxGaWxlTG9hZCd9LFxuICAgICAgIyAnZHJvcCcgZXZlbnQgaGFuZGxlciBpbnN0YWxsZWQgYXMgRE9NIGV2ZW50IGhhbmRsZXIgaW4gY29tcG9uZW50RGlkTW91bnQoKVxuICAgICAgKGRpdiB7cmVmOiAnZHJvcFpvbmUnLCBjbGFzc05hbWU6IGRyb3BDbGFzcywgb25EcmFnRW50ZXI6IEBkcmFnRW50ZXIsIG9uRHJhZ0xlYXZlOiBAZHJhZ0xlYXZlfSxcbiAgICAgICAgKHRyIFwifkxPQ0FMX0ZJTEVfRElBTE9HLkRST1BfRklMRV9IRVJFXCIpXG4gICAgICAgIChpbnB1dCB7dHlwZTogJ2ZpbGUnLCBvbkNoYW5nZTogQGNoYW5nZWR9KVxuICAgICAgKVxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnYnV0dG9ucyd9LFxuICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAY2FuY2VsfSwgKHRyIFwifkZJTEVfRElBTE9HLkNBTkNFTFwiKSlcbiAgICAgIClcbiAgICApXG4iLCJ7ZGl2LCBpbnB1dCwgYnV0dG9uLCBhfSA9IFJlYWN0LkRPTVxudHIgPSByZXF1aXJlICcuLi91dGlscy90cmFuc2xhdGUnXG5DbG91ZE1ldGFkYXRhID0gKHJlcXVpcmUgJy4uL3Byb3ZpZGVycy9wcm92aWRlci1pbnRlcmZhY2UnKS5DbG91ZE1ldGFkYXRhXG5jbG91ZENvbnRlbnRGYWN0b3J5ID0gKHJlcXVpcmUgJy4uL3Byb3ZpZGVycy9wcm92aWRlci1pbnRlcmZhY2UnKS5jbG91ZENvbnRlbnRGYWN0b3J5XG5GaWxlU2F2ZXIgPSByZXF1aXJlKCcuLi9saWIvZmlsZS1zYXZlcicpXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ0xvY2FsRmlsZVNhdmVUYWInXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgICMgSWYgdGhlIGRpYWxvZyBoYXMgdGhlIGNvbnRlbnQgdG8gc2F2ZSwgd2hpY2ggb2NjdXJzIHdoZW4gc2F2aW5nIHNlY29uZGFyeSBjb250ZW50XG4gICAgIyBsaWtlIENTViBmaWxlcywgdGhlbiB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBkb2N1bWVudCBjb250ZW50IGFuZCBtYWtlIHN1cmUgdGhhdFxuICAgICMgaXQgZG9lc24ndCBnZXQgbW9kaWZpZWQgYnkgKGZvciBpbnN0YW5jZSkgdHJ5aW5nIHRvIHJlbW92ZSBzaGFyaW5nIG1ldGFkYXRhLiBUb1xuICAgICMgZG8gc28sIHdlIHNwZWNpZnkgdGhhdCB3ZSB3YW50IHRvIGluY2x1ZGUgdGhlIHNoYXJlIGluZm8sIHdoaWNoIHRlbGxzIHRoZSBjbGllbnRcbiAgICAjIHRvIGxlYXZlIHRoZSBjb250ZW50IGFsb25lLlxuICAgIGhhc1Byb3BzQ29udGVudCA9IEBwcm9wcy5kaWFsb2cuZGF0YT8uY29udGVudD9cbiAgICBmaWxlbmFtZSA9IEBwcm9wcy5jbGllbnQuc3RhdGUubWV0YWRhdGE/Lm5hbWUgb3IgKHRyIFwifk1FTlVCQVIuVU5USVRMRURfRE9DVU1FTlRcIilcbiAgICBleHRlbnNpb24gPSBpZiBoYXNQcm9wc0NvbnRlbnQgYW5kIEBwcm9wcy5kaWFsb2cuZGF0YS5leHRlbnNpb24gXFxcbiAgICAgICAgICAgICAgICAgIHRoZW4gQHByb3BzLmRpYWxvZy5kYXRhLmV4dGVuc2lvbiBlbHNlICdqc29uJ1xuICAgIHN0YXRlID1cbiAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgc3VwcG9ydHNEb3dubG9hZEF0dHJpYnV0ZTogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLmRvd25sb2FkIGlzbnQgdW5kZWZpbmVkXG4gICAgICBkb3dubG9hZEZpbGVuYW1lOiBAZ2V0RG93bmxvYWRGaWxlbmFtZSBoYXNQcm9wc0NvbnRlbnQsIGZpbGVuYW1lLCBleHRlbnNpb25cbiAgICAgIGV4dGVuc2lvbjogZXh0ZW5zaW9uXG4gICAgICBtaW1lVHlwZTogaWYgaGFzUHJvcHNDb250ZW50IGFuZCBAcHJvcHMuZGlhbG9nLmRhdGEubWltZVR5cGU/IFxcXG4gICAgICAgICAgICAgICAgICB0aGVuIEBwcm9wcy5kaWFsb2cuZGF0YS5taW1lVHlwZSBlbHNlICd0ZXh0L3BsYWluJyxcbiAgICAgIHNoYXJlZDogQHByb3BzLmNsaWVudC5pc1NoYXJlZCgpXG4gICAgICBoYXNQcm9wc0NvbnRlbnQ6IGhhc1Byb3BzQ29udGVudFxuICAgICAgaW5jbHVkZVNoYXJlSW5mbzogaGFzUHJvcHNDb250ZW50XG4gICAgICBnb3RDb250ZW50OiBoYXNQcm9wc0NvbnRlbnRcbiAgICAgIGNvbnRlbnQ6IEBwcm9wcy5kaWFsb2cuZGF0YT8uY29udGVudFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiAtPlxuICAgIGlmIG5vdCBAc3RhdGUuaGFzUHJvcHNDb250ZW50XG4gICAgICBAcHJvcHMuY2xpZW50Ll9ldmVudCAnZ2V0Q29udGVudCcsIHsgc2hhcmVkOiBAcHJvcHMuY2xpZW50Ll9zaGFyZWRNZXRhZGF0YSgpIH0sIChjb250ZW50KSA9PlxuICAgICAgICBlbnZlbG9wZWRDb250ZW50ID0gY2xvdWRDb250ZW50RmFjdG9yeS5jcmVhdGVFbnZlbG9wZWRDbG91ZENvbnRlbnQgY29udGVudFxuICAgICAgICBAcHJvcHMuY2xpZW50LnN0YXRlPy5jdXJyZW50Q29udGVudD8uY29weU1ldGFkYXRhVG8gZW52ZWxvcGVkQ29udGVudFxuICAgICAgICBAc2V0U3RhdGVcbiAgICAgICAgICBnb3RDb250ZW50OiB0cnVlXG4gICAgICAgICAgY29udGVudDogZW52ZWxvcGVkQ29udGVudFxuXG4gICAgIyBVc2luZyB0aGUgUmVhY3Qgb25DbGljayBoYW5kbGVyIGZvciB0aGUgZG93bmxvYWQgYnV0dG9uIHlpZWxkZWQgb2RkIGJlaGF2aW9yc1xuICAgICMgaW4gd2hpY2ggdGhlIG9uQ2xpY2sgaGFuZGxlciBnb3QgdHJpZ2dlcmVkIG11bHRpcGxlIHRpbWVzIGFuZCB0aGUgZGVmYXVsdFxuICAgICMgaGFuZGxlciBjb3VsZCBub3QgYmUgcHJldmVudGVkLCBwcmVzdW1hYmx5IGR1ZSB0byBSZWFjdCdzIFN5bnRoZXRpY0V2ZW50IHN5c3RlbS5cbiAgICAjIFRoZSBzb2x1dGlvbiBoZXJlIGlzIHRvIHVzZSBzdGFuZGFyZCBicm93c2VyIGV2ZW50IGhhbmRsZXJzLlxuICAgIEByZWZzLmRvd25sb2FkLmFkZEV2ZW50TGlzdGVuZXIgJ2NsaWNrJywgQGNvbmZpcm1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogLT5cbiAgICBAcmVmcy5kb3dubG9hZC5yZW1vdmVFdmVudExpc3RlbmVyICdjbGljaycsIEBjb25maXJtXG5cbiAgZmlsZW5hbWVDaGFuZ2VkOiAtPlxuICAgIGZpbGVuYW1lID0gQHJlZnMuZmlsZW5hbWUudmFsdWVcbiAgICBAc2V0U3RhdGVcbiAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgZG93bmxvYWRGaWxlbmFtZTogQGdldERvd25sb2FkRmlsZW5hbWUgQHN0YXRlLmhhc1Byb3BzQ29udGVudCwgZmlsZW5hbWUsIEBzdGF0ZS5leHRlbnNpb25cblxuICBpbmNsdWRlU2hhcmVJbmZvQ2hhbmdlZDogLT5cbiAgICBAc2V0U3RhdGUgaW5jbHVkZVNoYXJlSW5mbzogQHJlZnMuaW5jbHVkZVNoYXJlSW5mby5jaGVja2VkXG5cbiAgZ2V0RG93bmxvYWRGaWxlbmFtZTogKGhhc1Byb3BzQ29udGVudCwgZmlsZW5hbWUsIGV4dGVuc2lvbikgLT5cbiAgICBuZXdOYW1lID0gZmlsZW5hbWUucmVwbGFjZSAvXlxccyt8XFxzKyQvLCAnJ1xuICAgIGlmIGhhc1Byb3BzQ29udGVudCBcXFxuICAgICAgdGhlbiBDbG91ZE1ldGFkYXRhLm5ld0V4dGVuc2lvbihuZXdOYW1lLCBleHRlbnNpb24pIFxcXG4gICAgICBlbHNlIENsb3VkTWV0YWRhdGEud2l0aEV4dGVuc2lvbihuZXdOYW1lLCBleHRlbnNpb24pXG5cbiAgY29uZmlybTogKGUsIHNpbXVsYXRlQ2xpY2spIC0+XG4gICAgaWYgbm90IEBjb25maXJtRGlzYWJsZWQoKVxuICAgICAgaWYgQHN0YXRlLnN1cHBvcnRzRG93bmxvYWRBdHRyaWJ1dGVcbiAgICAgICAgQHJlZnMuZG93bmxvYWQuaHJlZiA9IEBwcm9wcy5jbGllbnQuZ2V0RG93bmxvYWRVcmwoQHN0YXRlLmNvbnRlbnQsIEBzdGF0ZS5pbmNsdWRlU2hhcmVJbmZvLCBAc3RhdGUubWltZVR5cGUpXG4gICAgICAgIEByZWZzLmRvd25sb2FkLmNsaWNrKCkgaWYgc2ltdWxhdGVDbGlja1xuICAgICAgZWxzZVxuICAgICAgICBibG9iID0gQHByb3BzLmNsaWVudC5nZXREb3dubG9hZEJsb2IoQHN0YXRlLmNvbnRlbnQsIEBzdGF0ZS5pbmNsdWRlU2hhcmVJbmZvLCBAc3RhdGUubWltZVR5cGUpXG4gICAgICAgIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgQHN0YXRlLmRvd25sb2FkRmlsZW5hbWUsIHRydWUpXG4gICAgICAgIGU/LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgbWV0YWRhdGEgPSBuZXcgQ2xvdWRNZXRhZGF0YVxuICAgICAgICBuYW1lOiBAc3RhdGUuZG93bmxvYWRGaWxlbmFtZS5zcGxpdCgnLicpWzBdXG4gICAgICAgIHR5cGU6IENsb3VkTWV0YWRhdGEuRmlsZVxuICAgICAgICBwYXJlbnQ6IG51bGxcbiAgICAgICAgcHJvdmlkZXI6IEBwcm9wcy5wcm92aWRlclxuICAgICAgQHByb3BzLmRpYWxvZy5jYWxsYmFjayBtZXRhZGF0YVxuICAgICAgQHByb3BzLmNsb3NlKClcblxuICAgICAgIyByZXR1cm4gdmFsdWUgaW5kaWNhdGVzIHdoZXRoZXIgdG8gdHJpZ2dlciBocmVmXG4gICAgICByZXR1cm4gQHN0YXRlLnN1cHBvcnRzRG93bmxvYWRBdHRyaWJ1dGVcbiAgICBlbHNlXG4gICAgICBlPy5wcmV2ZW50RGVmYXVsdCgpXG4gICAgcmV0dXJuXG5cbiAgY29udGV4dE1lbnU6IChlKSAtPlxuICAgIEByZWZzLmRvd25sb2FkLmhyZWYgPSBAcHJvcHMuY2xpZW50LmdldERvd25sb2FkVXJsKEBzdGF0ZS5jb250ZW50LCBAc3RhdGUuaW5jbHVkZVNoYXJlSW5mbywgQHN0YXRlLm1pbWVUeXBlKVxuICAgIHJldHVyblxuXG4gIGNhbmNlbDogLT5cbiAgICBAcHJvcHMuY2xvc2UoKVxuICAgIHJldHVyblxuXG4gIHdhdGNoRm9yRW50ZXI6IChlKSAtPlxuICAgIGlmIGUua2V5Q29kZSBpcyAxMyBhbmQgbm90IEBjb25maXJtRGlzYWJsZWQoKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBAY29uZmlybShudWxsLCB0cnVlKVxuICAgIHJldHVyblxuXG4gIGNvbmZpcm1EaXNhYmxlZDogLT5cbiAgICAoQHN0YXRlLmRvd25sb2FkRmlsZW5hbWUubGVuZ3RoIGlzIDApIG9yIG5vdCBAc3RhdGUuZ290Q29udGVudFxuXG4gIHJlbmRlcjogLT5cbiAgICBjb25maXJtRGlzYWJsZWQgPSBAY29uZmlybURpc2FibGVkKClcblxuICAgICMgZm9yIG1vZGVybiBicm93c2Vyc1xuICAgIGRvd25sb2FkQW5jaG9yID0gKGEge1xuICAgICAgaHJlZjogJyMnXG4gICAgICByZWY6ICdkb3dubG9hZCdcbiAgICAgIGNsYXNzTmFtZTogKGlmIGNvbmZpcm1EaXNhYmxlZCB0aGVuICdkaXNhYmxlZCcgZWxzZSAnJylcbiAgICAgIGRvd25sb2FkOiBAc3RhdGUuZG93bmxvYWRGaWxlbmFtZVxuICAgICAgb25Db250ZXh0TWVudTogQGNvbnRleHRNZW51XG4gICAgfSwgdHIgJ35GSUxFX0RJQUxPRy5ET1dOTE9BRCcpXG5cbiAgICAjIGZvciBTYWZhcmkgKG9yIG90aGVyIG5vbi1tb2Rlcm4gYnJvd3NlcnMpXG4gICAgZG93bmxvYWRCdXR0b24gPSAoYnV0dG9uIHtcbiAgICAgIHJlZjogJ2Rvd25sb2FkJ1xuICAgICAgY2xhc3NOYW1lOiAoaWYgY29uZmlybURpc2FibGVkIHRoZW4gJ2Rpc2FibGVkJyBlbHNlICcnKVxuICAgIH0sIHRyICd+RklMRV9ESUFMT0cuRE9XTkxPQUQnKVxuXG4gICAgKGRpdiB7Y2xhc3NOYW1lOiAnZGlhbG9nVGFiIGxvY2FsRmlsZVNhdmUnfSxcbiAgICAgIChpbnB1dCB7dHlwZTogJ3RleHQnLCByZWY6ICdmaWxlbmFtZScsIHZhbHVlOiBAc3RhdGUuZmlsZW5hbWUsIHBsYWNlaG9sZGVyOiAodHIgXCJ+RklMRV9ESUFMT0cuRklMRU5BTUVcIiksIG9uQ2hhbmdlOiBAZmlsZW5hbWVDaGFuZ2VkLCBvbktleURvd246IEB3YXRjaEZvckVudGVyfSksXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdzYXZlQXJlYSd9LFxuICAgICAgICBpZiBAc3RhdGUuc2hhcmVkIGFuZCBub3QgQHN0YXRlLmhhc1Byb3BzQ29udGVudFxuICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogJ3NoYXJlQ2hlY2tib3gnfSxcbiAgICAgICAgICAgIChpbnB1dCB7dHlwZTogJ2NoZWNrYm94JywgcmVmOiAnaW5jbHVkZVNoYXJlSW5mbycsIHZhbHVlOiBAc3RhdGUuaW5jbHVkZVNoYXJlSW5mbywgb25DaGFuZ2U6IEBpbmNsdWRlU2hhcmVJbmZvQ2hhbmdlZH0pXG4gICAgICAgICAgICAodHIgJ35ET1dOTE9BRF9ESUFMT0cuSU5DTFVERV9TSEFSRV9JTkZPJylcbiAgICAgICAgICApXG4gICAgICApXG4gICAgICBkaXYoe2NsYXNzTmFtZTogJ25vdGUnfSwgdHIoJ35GSUxFX0RJQUxPRy5ET1dOTE9BRF9OT1RFJywge2Rvd25sb2FkOiB0cignfkZJTEVfRElBTE9HLkRPV05MT0FEJyl9KSlcbiAgICAgIChkaXYge2NsYXNzTmFtZTogJ2J1dHRvbnMnfSxcbiAgICAgICAgaWYgQHN0YXRlLnN1cHBvcnRzRG93bmxvYWRBdHRyaWJ1dGUgdGhlbiBkb3dubG9hZEFuY2hvciBlbHNlIGRvd25sb2FkQnV0dG9uXG4gICAgICAgIChidXR0b24ge29uQ2xpY2s6IEBjYW5jZWx9LCAodHIgXCJ+RklMRV9ESUFMT0cuQ0FOQ0VMXCIpKVxuICAgICAgKVxuICAgICkiLCJ7ZGl2LCBpLCBzcGFuLCBpbnB1dH0gPSBSZWFjdC5ET01cblxuRHJvcGRvd24gPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vZHJvcGRvd24tdmlldydcbnRyID0gcmVxdWlyZSAnLi4vdXRpbHMvdHJhbnNsYXRlJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdNZW51QmFyJ1xuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogLT5cbiAgICAjIG5lZWQgdG8gdXNlIGRpcmVjdCBET00gZXZlbnRzIGJlY2F1c2UgdGhlIGV2ZW50IG5lZWRzIHRvIGJlIGNhcHR1cmVkXG4gICAgaWYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdtb3VzZWRvd24nLCBAY2hlY2tCbHVyLCB0cnVlXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAndG91Y2hzdGFydCcsIEBjaGVja0JsdXIsIHRydWVcblxuICAgIEBwcm9wcy5jbGllbnQuX3VpLmxpc3RlbiAoZXZlbnQpID0+XG4gICAgICBzd2l0Y2ggZXZlbnQudHlwZVxuICAgICAgICB3aGVuICdlZGl0SW5pdGlhbEZpbGVuYW1lJ1xuICAgICAgICAgIEBzZXRTdGF0ZVxuICAgICAgICAgICAgZWRpdGluZ0ZpbGVuYW1lOiB0cnVlXG4gICAgICAgICAgICBlZGl0aW5nSW5pdGlhbEZpbGVuYW1lOiB0cnVlXG4gICAgICAgICAgc2V0VGltZW91dCAoPT4gQGZvY3VzRmlsZW5hbWUoKSksIDEwXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IC0+XG4gICAgaWYgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyICdtb3VzZWRvd24nLCBAY2hlY2tCbHVyLCB0cnVlXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAndG91Y2hzdGFydCcsIEBjaGVja0JsdXIsIHRydWVcblxuICBnZXRGaWxlbmFtZTogKHByb3BzKSAtPlxuICAgIGlmIHByb3BzLmZpbGVuYW1lPy5sZW5ndGggPiAwIHRoZW4gcHJvcHMuZmlsZW5hbWUgZWxzZSAodHIgXCJ+TUVOVUJBUi5VTlRJVExFRF9ET0NVTUVOVFwiKVxuXG4gIGdldEVkaXRhYmxlRmlsZW5hbWU6IChwcm9wcykgLT5cbiAgICBpZiBwcm9wcy5maWxlbmFtZT8ubGVuZ3RoID4gMCB0aGVuIHByb3BzLmZpbGVuYW1lIGVsc2UgKHRyIFwifk1FTlVCQVIuVU5USVRMRURfRE9DVU1FTlRcIilcblxuICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgc3RhdGUgPVxuICAgICAgZWRpdGluZ0ZpbGVuYW1lOiBmYWxzZVxuICAgICAgZmlsZW5hbWU6IEBnZXRGaWxlbmFtZSBAcHJvcHNcbiAgICAgIGVkaXRhYmxlRmlsZW5hbWU6IEBnZXRFZGl0YWJsZUZpbGVuYW1lIEBwcm9wc1xuICAgICAgaW5pdGlhbEVkaXRhYmxlRmlsZW5hbWU6IEBnZXRFZGl0YWJsZUZpbGVuYW1lIEBwcm9wc1xuICAgICAgZWRpdGluZ0luaXRpYWxGaWxlbmFtZTogZmFsc2VcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiAobmV4dFByb3BzKSAtPlxuICAgIEBzZXRTdGF0ZVxuICAgICAgZmlsZW5hbWU6IEBnZXRGaWxlbmFtZSBuZXh0UHJvcHNcbiAgICAgIGVkaXRhYmxlRmlsZW5hbWU6IEBnZXRFZGl0YWJsZUZpbGVuYW1lIG5leHRQcm9wc1xuICAgICAgcHJvdmlkZXI6IG5leHRQcm9wcy5wcm92aWRlclxuXG4gIGZpbGVuYW1lQ2xpY2tlZDogKGUpIC0+XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIEBzZXRTdGF0ZVxuICAgICAgZWRpdGluZ0ZpbGVuYW1lOiB0cnVlXG4gICAgICBlZGl0aW5nSW5pdGlhbEZpbGVuYW1lOiBmYWxzZVxuICAgIHNldFRpbWVvdXQgKD0+IEBmb2N1c0ZpbGVuYW1lKCkpLCAxMFxuXG4gIGZpbGVuYW1lQ2hhbmdlZDogLT5cbiAgICBAc2V0U3RhdGVcbiAgICAgIGVkaXRhYmxlRmlsZW5hbWU6IEBmaWxlbmFtZSgpLnZhbHVlXG5cbiAgZmlsZW5hbWVCbHVycmVkOiAtPlxuICAgIEByZW5hbWUoKVxuXG4gIGZpbGVuYW1lOiAtPlxuICAgIFJlYWN0RE9NLmZpbmRET01Ob2RlKEByZWZzLmZpbGVuYW1lKVxuXG4gIGZvY3VzRmlsZW5hbWU6IC0+XG4gICAgZWwgPSBAZmlsZW5hbWUoKVxuICAgIGVsLmZvY3VzKClcbiAgICBlbC5zZWxlY3QoKVxuXG4gIGNhbmNlbEVkaXQ6IC0+XG4gICAgQHNldFN0YXRlXG4gICAgICBlZGl0aW5nRmlsZW5hbWU6IGZhbHNlXG4gICAgICBlZGl0YWJsZUZpbGVuYW1lOiBpZiBAc3RhdGUuZmlsZW5hbWU/Lmxlbmd0aCA+IDAgdGhlbiBAc3RhdGUuZmlsZW5hbWUgZWxzZSBAc3RhdGUuaW5pdGlhbEVkaXRhYmxlRmlsZW5hbWVcblxuICByZW5hbWU6IC0+XG4gICAgZmlsZW5hbWUgPSBAc3RhdGUuZWRpdGFibGVGaWxlbmFtZS5yZXBsYWNlIC9eXFxzK3xcXHMrJC8sICcnXG4gICAgaWYgZmlsZW5hbWUubGVuZ3RoID4gMFxuICAgICAgaWYgQHN0YXRlLmVkaXRpbmdJbml0aWFsRmlsZW5hbWVcbiAgICAgICAgQHByb3BzLmNsaWVudC5zZXRJbml0aWFsRmlsZW5hbWUgZmlsZW5hbWVcbiAgICAgIGVsc2VcbiAgICAgICAgQHByb3BzLmNsaWVudC5yZW5hbWUgQHByb3BzLmNsaWVudC5zdGF0ZS5tZXRhZGF0YSwgZmlsZW5hbWVcbiAgICAgIEBzZXRTdGF0ZVxuICAgICAgICBlZGl0aW5nRmlsZW5hbWU6IGZhbHNlXG4gICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgICBlZGl0YWJsZUZpbGVuYW1lOiBmaWxlbmFtZVxuICAgIGVsc2VcbiAgICAgIEBjYW5jZWxFZGl0KClcblxuICB3YXRjaEZvckVudGVyOiAoZSkgLT5cbiAgICBpZiBlLmtleUNvZGUgaXMgMTNcbiAgICAgIEByZW5hbWUoKVxuICAgIGVsc2UgaWYgZS5rZXlDb2RlIGlzIDI3XG4gICAgICBAY2FuY2VsRWRpdCgpXG5cbiAgaGVscDogLT5cbiAgICB3aW5kb3cub3BlbiBAcHJvcHMub3B0aW9ucy5oZWxwLCAnX2JsYW5rJ1xuXG4gICMgQ09EQVAgZWF0cyB0aGUgY2xpY2sgZXZlbnRzIGluIHRoZSBtYWluIHdvcmtzcGFjZSB3aGljaCBjYXVzZXMgdGhlIGJsdXIgZXZlbnQgbm90IHRvIGZpcmUgc28gd2UgbmVlZCB0byBjaGVjayBmb3IgYSBub24tYnViYmxpbmcgZ2xvYmFsIGNsaWNrIGV2ZW50IHdoZW4gZWRpdGluZ1xuICBjaGVja0JsdXI6IChlKSAtPlxuICAgIEBmaWxlbmFtZUJsdXJyZWQoKSBpZiBAc3RhdGUuZWRpdGluZ0ZpbGVuYW1lIGFuZCBlLnRhcmdldCBpc250IEBmaWxlbmFtZSgpXG5cbiAgcmVuZGVyOiAtPlxuICAgIChkaXYge2NsYXNzTmFtZTogJ21lbnUtYmFyJ30sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdtZW51LWJhci1sZWZ0J30sXG4gICAgICAgIChEcm9wZG93biB7aXRlbXM6IEBwcm9wcy5pdGVtc30pXG4gICAgICAgIGlmIEBzdGF0ZS5lZGl0aW5nRmlsZW5hbWVcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6J21lbnUtYmFyLWNvbnRlbnQtZmlsZW5hbWUnfSxcbiAgICAgICAgICAgIChpbnB1dCB7cmVmOiAnZmlsZW5hbWUnLCB2YWx1ZTogQHN0YXRlLmVkaXRhYmxlRmlsZW5hbWUsIG9uQ2hhbmdlOiBAZmlsZW5hbWVDaGFuZ2VkLCBvbktleURvd246IEB3YXRjaEZvckVudGVyfSlcbiAgICAgICAgICApXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6J21lbnUtYmFyLWNvbnRlbnQtZmlsZW5hbWUnLCBvbkNsaWNrOiBAZmlsZW5hbWVDbGlja2VkfSwgQHN0YXRlLmZpbGVuYW1lKVxuICAgICAgICBpZiBAcHJvcHMuZmlsZVN0YXR1c1xuICAgICAgICAgIChzcGFuIHtjbGFzc05hbWU6IFwibWVudS1iYXItZmlsZS1zdGF0dXMtI3tAcHJvcHMuZmlsZVN0YXR1cy50eXBlfVwifSwgQHByb3BzLmZpbGVTdGF0dXMubWVzc2FnZSlcbiAgICAgIClcbiAgICAgIChkaXYge2NsYXNzTmFtZTogJ21lbnUtYmFyLXJpZ2h0J30sXG4gICAgICAgIGlmIEBwcm9wcy5vcHRpb25zLmluZm9cbiAgICAgICAgICAoc3BhbiB7Y2xhc3NOYW1lOiAnbWVudS1iYXItaW5mbyd9LCBAcHJvcHMub3B0aW9ucy5pbmZvKVxuICAgICAgICBpZiBAcHJvcHMucHJvdmlkZXI/LmF1dGhvcml6ZWQoKVxuICAgICAgICAgIEBwcm9wcy5wcm92aWRlci5yZW5kZXJVc2VyKClcbiAgICAgICAgaWYgQHByb3BzLm9wdGlvbnMuaGVscFxuICAgICAgICAgIChpIHtzdHlsZToge2ZvbnRTaXplOiBcIjEzcHhcIn0sIGNsYXNzTmFtZTogJ2NsaWNrYWJsZSBpY29uLWhlbHAnLCBvbkNsaWNrOiBAaGVscH0pXG4gICAgICApXG4gICAgKVxuIiwiTW9kYWwgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vbW9kYWwtdmlldydcbntkaXYsIGl9ID0gUmVhY3QuRE9NXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ01vZGFsRGlhbG9nJ1xuXG4gIGNsb3NlOiAtPlxuICAgIEBwcm9wcy5jbG9zZT8oKVxuXG4gIHJlbmRlcjogLT5cbiAgICAoTW9kYWwge2Nsb3NlOiBAY2xvc2UsIHpJbmRleDogQHByb3BzLnpJbmRleH0sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2cnfSxcbiAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnbW9kYWwtZGlhbG9nLXdyYXBwZXInfSxcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2ctdGl0bGUnfSxcbiAgICAgICAgICAgIChpIHtjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLXRpdGxlLWNsb3NlIGljb24tZXhcIiwgb25DbGljazogQGNsb3NlfSlcbiAgICAgICAgICAgIEBwcm9wcy50aXRsZSBvciAnVW50aXRsZWQgRGlhbG9nJ1xuICAgICAgICAgIClcbiAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1kaWFsb2ctd29ya3NwYWNlJ30sIEBwcm9wcy5jaGlsZHJlbilcbiAgICAgICAgKVxuICAgICAgKVxuICAgIClcbiIsIk1vZGFsRGlhbG9nID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL21vZGFsLWRpYWxvZy12aWV3J1xuVGFiYmVkUGFuZWwgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vdGFiYmVkLXBhbmVsLXZpZXcnXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ01vZGFsVGFiYmVkRGlhbG9nVmlldydcblxuICByZW5kZXI6IC0+XG4gICAgKE1vZGFsRGlhbG9nIHt0aXRsZTogQHByb3BzLnRpdGxlLCBjbG9zZTogQHByb3BzLmNsb3NlfSxcbiAgICAgIChUYWJiZWRQYW5lbCB7dGFiczogQHByb3BzLnRhYnMsIHNlbGVjdGVkVGFiSW5kZXg6IEBwcm9wcy5zZWxlY3RlZFRhYkluZGV4fSlcbiAgICApXG4iLCJ7ZGl2fSA9IFJlYWN0LkRPTVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdNb2RhbCdcblxuICB3YXRjaEZvckVzY2FwZTogKGUpIC0+XG4gICAgaWYgZS5rZXlDb2RlIGlzIDI3XG4gICAgICBAcHJvcHMuY2xvc2U/KClcblxuICAjIHNoYWRvdyB0aGUgZW50aXJlIHZpZXdwb3J0IGJlaGluZCB0aGUgZGlhbG9nXG4gIGdldERpbWVuc2lvbnM6IC0+XG4gICAgd2lkdGg6ICQod2luZG93KS53aWR0aCgpICsgJ3B4J1xuICAgIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpICsgJ3B4J1xuXG4gIGdldEluaXRpYWxTdGF0ZTogLT5cbiAgICBkaW1lbnNpb25zID0gQGdldERpbWVuc2lvbnMoKVxuICAgIGluaXRpYWxTdGF0ZSA9XG4gICAgICBiYWNrZ3JvdW5kU3R5bGU6IEBnZXRCYWNrZ3JvdW5kU3R5bGUgZGltZW5zaW9uc1xuICAgICAgY29udGVudFN0eWxlOiBAZ2V0Q29udGVudFN0eWxlIGRpbWVuc2lvbnNcblxuICBnZXRCYWNrZ3JvdW5kU3R5bGU6IChkaW1lbnNpb25zKSAtPlxuICAgIGlmIEBwcm9wcy56SW5kZXhcbiAgICAgIHsgekluZGV4OiBAcHJvcHMuekluZGV4LCB3aWR0aDogZGltZW5zaW9ucy53aWR0aCwgaGVpZ2h0OiBkaW1lbnNpb25zLmhlaWdodCB9XG4gICAgZWxzZVxuICAgICAgZGltZW5zaW9uc1xuXG4gIGdldENvbnRlbnRTdHlsZTogKGRpbWVuc2lvbnMpIC0+XG4gICAgaWYgQHByb3BzLnpJbmRleFxuICAgICAgeyB6SW5kZXg6IEBwcm9wcy56SW5kZXggKyAxLCB3aWR0aDogZGltZW5zaW9ucy53aWR0aCwgaGVpZ2h0OiBkaW1lbnNpb25zLmhlaWdodCB9XG4gICAgZWxzZVxuICAgICAgZGltZW5zaW9uc1xuXG4gIHVwZGF0ZVN0eWxlczogLT5cbiAgICBkaW1lbnNpb25zID0gQGdldERpbWVuc2lvbnMoKVxuICAgIEBzZXRTdGF0ZVxuICAgICAgYmFja2dyb3VuZFN0eWxlOiBAZ2V0QmFja2dyb3VuZFN0eWxlIGRpbWVuc2lvbnNcbiAgICAgIGNvbnRlbnRTdHlsZTogQGdldENvbnRlbnRTdHlsZSBkaW1lbnNpb25zXG5cbiAgIyB1c2UgYmluZC91bmJpbmQgZm9yIGNsaWVudHMgdXNpbmcgb2xkZXIgdmVyc2lvbnMgb2YgalF1ZXJ5XG4gIGNvbXBvbmVudERpZE1vdW50OiAtPlxuICAgICQod2luZG93KS5iaW5kICdrZXl1cCcsIEB3YXRjaEZvckVzY2FwZVxuICAgICQod2luZG93KS5iaW5kICdyZXNpemUnLCBAdXBkYXRlU3R5bGVzXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IC0+XG4gICAgJCh3aW5kb3cpLnVuYmluZCAna2V5dXAnLCBAd2F0Y2hGb3JFc2NhcGVcbiAgICAkKHdpbmRvdykudW5iaW5kICdyZXNpemUnLCBAdXBkYXRlU3R5bGVzXG5cbiAgcmVuZGVyOiAtPlxuICAgIChkaXYge2NsYXNzTmFtZTogJ21vZGFsJ30sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdtb2RhbC1iYWNrZ3JvdW5kJywgc3R5bGU6IEBzdGF0ZS5iYWNrZ3JvdW5kU3R5bGV9KVxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnbW9kYWwtY29udGVudCcsIHN0eWxlOiBAc3RhdGUuY29udGVudFN0eWxlfSwgQHByb3BzLmNoaWxkcmVuKVxuICAgIClcbiIsIk1vZGFsVGFiYmVkRGlhbG9nID0gUmVhY3QuY3JlYXRlRmFjdG9yeSByZXF1aXJlICcuL21vZGFsLXRhYmJlZC1kaWFsb2ctdmlldydcblRhYmJlZFBhbmVsID0gcmVxdWlyZSAnLi90YWJiZWQtcGFuZWwtdmlldydcbkNsb3VkTWV0YWRhdGEgPSAocmVxdWlyZSAnLi4vcHJvdmlkZXJzL3Byb3ZpZGVyLWludGVyZmFjZScpLkNsb3VkTWV0YWRhdGFcbkZpbGVEaWFsb2dUYWIgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vZmlsZS1kaWFsb2ctdGFiLXZpZXcnXG5TZWxlY3RQcm92aWRlckRpYWxvZ1RhYiA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9zZWxlY3QtcHJvdmlkZXItZGlhbG9nLXRhYi12aWV3J1xuXG50ciA9IHJlcXVpcmUgJy4uL3V0aWxzL3RyYW5zbGF0ZSdcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzc1xuICBkaXNwbGF5TmFtZTogJ1Byb3ZpZGVyVGFiYmVkRGlhbG9nJ1xuXG4gIHJlbmRlcjogIC0+XG4gICAgW2NhcGFiaWxpdHksIFRhYkNvbXBvbmVudF0gPSBzd2l0Y2ggQHByb3BzLmRpYWxvZy5hY3Rpb25cbiAgICAgIHdoZW4gJ29wZW5GaWxlJyB0aGVuIFsnbGlzdCcsIEZpbGVEaWFsb2dUYWJdXG4gICAgICB3aGVuICdzYXZlRmlsZScsICdzYXZlRmlsZUFzJyB0aGVuIFsnc2F2ZScsIEZpbGVEaWFsb2dUYWJdXG4gICAgICB3aGVuICdzYXZlU2Vjb25kYXJ5RmlsZUFzJyB0aGVuIFsnZXhwb3J0JywgRmlsZURpYWxvZ1RhYl1cbiAgICAgIHdoZW4gJ2NyZWF0ZUNvcHknIHRoZW4gWydzYXZlJywgRmlsZURpYWxvZ1RhYl1cbiAgICAgIHdoZW4gJ3NlbGVjdFByb3ZpZGVyJyB0aGVuIFtudWxsLCBTZWxlY3RQcm92aWRlckRpYWxvZ1RhYl1cblxuICAgIHRhYnMgPSBbXVxuICAgIHNlbGVjdGVkVGFiSW5kZXggPSAwXG4gICAgZm9yIHByb3ZpZGVyLCBpIGluIEBwcm9wcy5jbGllbnQuc3RhdGUuYXZhaWxhYmxlUHJvdmlkZXJzXG4gICAgICBpZiBub3QgY2FwYWJpbGl0eSBvciBwcm92aWRlci5jYXBhYmlsaXRpZXNbY2FwYWJpbGl0eV1cbiAgICAgICAgZmlsdGVyZWRUYWJDb21wb25lbnQgPSBwcm92aWRlci5maWx0ZXJUYWJDb21wb25lbnQgY2FwYWJpbGl0eSwgVGFiQ29tcG9uZW50XG4gICAgICAgIGlmIGZpbHRlcmVkVGFiQ29tcG9uZW50XG4gICAgICAgICAgY29tcG9uZW50ID0gZmlsdGVyZWRUYWJDb21wb25lbnRcbiAgICAgICAgICAgIGNsaWVudDogQHByb3BzLmNsaWVudFxuICAgICAgICAgICAgZGlhbG9nOiBAcHJvcHMuZGlhbG9nXG4gICAgICAgICAgICBjbG9zZTogQHByb3BzLmNsb3NlXG4gICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJcbiAgICAgICAgICBvblNlbGVjdGVkID0gaWYgcHJvdmlkZXIub25Qcm92aWRlclRhYlNlbGVjdGVkIHRoZW4gcHJvdmlkZXIub25Qcm92aWRlclRhYlNlbGVjdGVkLmJpbmQocHJvdmlkZXIpIGVsc2UgbnVsbFxuICAgICAgICAgIHRhYnMucHVzaCBUYWJiZWRQYW5lbC5UYWIge2tleTogaSwgbGFiZWw6ICh0ciBwcm92aWRlci5kaXNwbGF5TmFtZSksIGNvbXBvbmVudDogY29tcG9uZW50LCBjYXBhYmlsaXR5OiBjYXBhYmlsaXR5LCBvblNlbGVjdGVkOiBvblNlbGVjdGVkfVxuICAgICAgICAgIGlmIHByb3ZpZGVyLm5hbWUgaXMgQHByb3BzLmNsaWVudC5zdGF0ZS5tZXRhZGF0YT8ucHJvdmlkZXI/Lm5hbWVcbiAgICAgICAgICAgIHNlbGVjdGVkVGFiSW5kZXggPSB0YWJzLmxlbmd0aCAtIDFcblxuICAgIChNb2RhbFRhYmJlZERpYWxvZyB7dGl0bGU6ICh0ciBAcHJvcHMuZGlhbG9nLnRpdGxlKSwgY2xvc2U6IEBwcm9wcy5jbG9zZSwgdGFiczogdGFicywgc2VsZWN0ZWRUYWJJbmRleDogc2VsZWN0ZWRUYWJJbmRleH0pXG4iLCJ7ZGl2LCBpbnB1dCwgYSwgYnV0dG9ufSA9IFJlYWN0LkRPTVxuXG5Nb2RhbERpYWxvZyA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgcmVxdWlyZSAnLi9tb2RhbC1kaWFsb2ctdmlldydcblxudHIgPSByZXF1aXJlICcuLi91dGlscy90cmFuc2xhdGUnXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ1JlbmFtZURpYWxvZ1ZpZXcnXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIGZpbGVuYW1lID0gQHByb3BzLmZpbGVuYW1lIG9yICcnXG4gICAgc3RhdGUgPVxuICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lXG4gICAgICB0cmltbWVkRmlsZW5hbWU6IEB0cmltIGZpbGVuYW1lXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IC0+XG4gICAgQGZpbGVuYW1lID0gUmVhY3RET00uZmluZERPTU5vZGUgQHJlZnMuZmlsZW5hbWVcbiAgICBAZmlsZW5hbWUuZm9jdXMoKVxuXG4gIHVwZGF0ZUZpbGVuYW1lOiAtPlxuICAgIGZpbGVuYW1lID0gQGZpbGVuYW1lLnZhbHVlXG4gICAgQHNldFN0YXRlXG4gICAgICBmaWxlbmFtZTogZmlsZW5hbWVcbiAgICAgIHRyaW1tZWRGaWxlbmFtZTogQHRyaW0gZmlsZW5hbWVcblxuICB0cmltOiAocykgLT5cbiAgICBzLnJlcGxhY2UgL15cXHMrfFxccyskLywgJydcblxuICByZW5hbWU6IChlKSAtPlxuICAgIGlmIEBzdGF0ZS50cmltbWVkRmlsZW5hbWUubGVuZ3RoID4gMFxuICAgICAgQHByb3BzLmNhbGxiYWNrPyBAc3RhdGUuZmlsZW5hbWVcbiAgICAgIEBwcm9wcy5jbG9zZSgpXG4gICAgZWxzZVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBAZmlsZW5hbWUuZm9jdXMoKVxuXG4gIHJlbmRlcjogLT5cbiAgICAoTW9kYWxEaWFsb2cge3RpdGxlOiAodHIgJ35ESUFMT0cuUkVOQU1FJyksIGNsb3NlOiBAcHJvcHMuY2xvc2V9LFxuICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAncmVuYW1lLWRpYWxvZyd9LFxuICAgICAgICAoaW5wdXQge3JlZjogJ2ZpbGVuYW1lJywgcGxhY2Vob2xkZXI6ICdGaWxlbmFtZScsIHZhbHVlOiBAc3RhdGUuZmlsZW5hbWUsIG9uQ2hhbmdlOiBAdXBkYXRlRmlsZW5hbWV9KVxuICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdidXR0b25zJ30sXG4gICAgICAgICAgKGJ1dHRvbiB7Y2xhc3NOYW1lOiAoaWYgQHN0YXRlLnRyaW1tZWRGaWxlbmFtZS5sZW5ndGggaXMgMCB0aGVuICdkaXNhYmxlZCcgZWxzZSAnJyksIG9uQ2xpY2s6IEByZW5hbWV9LCB0ciAnflJFTkFNRV9ESUFMT0cuUkVOQU1FJylcbiAgICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAcHJvcHMuY2xvc2V9LCB0ciAnflJFTkFNRV9ESUFMT0cuQ0FOQ0VMJylcbiAgICAgICAgKVxuICAgICAgKVxuICAgIClcbiIsIntkaXZ9ID0gUmVhY3QuRE9NXG5cblNlbGVjdFByb3ZpZGVyRGlhbG9nVGFiID0gUmVhY3QuY3JlYXRlRmFjdG9yeSBSZWFjdC5jcmVhdGVDbGFzc1xuICBkaXNwbGF5TmFtZTogJ1NlbGVjdFByb3ZpZGVyRGlhbG9nVGFiJ1xuICByZW5kZXI6IC0+IChkaXYge30sIFwiVE9ETzogU2VsZWN0UHJvdmlkZXJEaWFsb2dUYWI6ICN7QHByb3BzLnByb3ZpZGVyLmRpc3BsYXlOYW1lfVwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdFByb3ZpZGVyRGlhbG9nVGFiXG4iLCJ7ZGl2LCBpbnB1dCwgYSwgYnV0dG9uLCBzdHJvbmcsIHRleHRhcmVhLCBzdmcsIGcsIHBhdGgsIHNwYW4sIGNpcmNsZSwgdWwsIGxpfSA9IFJlYWN0LkRPTVxuXG5TSE9XX0xPTkdFVklUWV9XQVJOSU5HID0gZmFsc2VcblxuTW9kYWxEaWFsb2cgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IHJlcXVpcmUgJy4vbW9kYWwtZGlhbG9nLXZpZXcnXG5nZXRRdWVyeVBhcmFtID0gcmVxdWlyZSAnLi4vdXRpbHMvZ2V0LXF1ZXJ5LXBhcmFtJ1xuXG50ciA9IHJlcXVpcmUgJy4uL3V0aWxzL3RyYW5zbGF0ZSdcbnNvY2lhbEljb25zID0gcmVxdWlyZSAnc3ZnLXNvY2lhbC1pY29ucy9saWIvaWNvbnMuanNvbidcblxuU29jaWFsSWNvbiA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkgUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ1NvY2lhbEljb24nXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIGRhdGE6IHNvY2lhbEljb25zW0Bwcm9wcy5pY29uXVxuXG4gIGNsaWNrZWQ6IC0+XG4gICAgd2luZG93Lm9wZW4gQHByb3BzLnVybFxuXG4gIHJlbmRlcjogLT5cbiAgICAoYSB7Y2xhc3NOYW1lOiAnc29jaWFsLWljb24nLCBocmVmOiBAcHJvcHMudXJsLCB0YXJnZXQ6ICdfYmxhbmsnfSxcbiAgICAgIChkaXYge2NsYXNzTmFtZTogJ3NvY2lhbC1jb250YWluZXInfSxcbiAgICAgICAgKHN2ZyB7Y2xhc3NOYW1lOiAnc29jaWFsLXN2ZycsIHZpZXdCb3g6ICcwIDAgNjQgNjQnfSxcbiAgICAgICAgICAoZyB7Y2xhc3NOYW1lOiAnc29jaWFsLXN2Zy1iYWNrZ3JvdW5kJ30sXG4gICAgICAgICAgICAoY2lyY2xlIHtjeDogMzIsIGN5OiAzMiwgcjogMzF9KVxuICAgICAgICAgIClcbiAgICAgICAgICAoZyB7Y2xhc3NOYW1lOiAnc29jaWFsLXN2Zy1pY29uJ30sXG4gICAgICAgICAgICAocGF0aCB7ZDogQHN0YXRlLmRhdGEuaWNvbn0pXG4gICAgICAgICAgKVxuICAgICAgICAgIChnIHtjbGFzc05hbWU6ICdzb2NpYWwtc3ZnLW1hc2snLCBzdHlsZToge2ZpbGw6IEBzdGF0ZS5kYXRhLmNvbG9yfX0sXG4gICAgICAgICAgICAocGF0aCB7ZDogQHN0YXRlLmRhdGEubWFza30pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdTaGFyZURpYWxvZ1ZpZXcnXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIGxpbms6IEBnZXRTaGFyZUxpbmsoKVxuICAgIGVtYmVkOiBAZ2V0RW1iZWQoKVxuICAgIGxhcmE6IEBnZXRMYXJhXG4gICAgICBjb2RhcFNlcnZlclVybDogXCJodHRwczovL2NvZGFwLmNvbmNvcmQub3JnL3JlbGVhc2VzL2xhdGVzdC9cIlxuICAgICAgbGF1bmNoQnV0dG9uVGV4dDogXCJMYXVuY2hcIlxuICAgIGNvZGFwU2VydmVyVXJsOiBcImh0dHBzOi8vY29kYXAuY29uY29yZC5vcmcvcmVsZWFzZXMvbGF0ZXN0L1wiXG4gICAgbGF1bmNoQnV0dG9uVGV4dDogXCJMYXVuY2hcIlxuICAgIHRhYlNlbGVjdGVkOiAnbGluaydcblxuICBnZXRTaGFyZWREb2N1bWVudElkOiAtPlxuICAgICMgZXh0cmFjdCBzaGFyZWREb2N1bWVudElkIGZyb20gQ2xvdWRDb250ZW50XG4gICAgaWYgQHByb3BzLmNsaWVudC5pc1NoYXJlZCgpXG4gICAgICBAcHJvcHMuY2xpZW50LnN0YXRlLmN1cnJlbnRDb250ZW50Py5nZXQgXCJzaGFyZWREb2N1bWVudElkXCJcbiAgICBlbHNlXG4gICAgICBudWxsXG5cbiAgZ2V0U2hhcmVMaW5rOiAtPlxuICAgIHNoYXJlZERvY3VtZW50SWQgPSBAZ2V0U2hhcmVkRG9jdW1lbnRJZCgpXG4gICAgaWYgc2hhcmVkRG9jdW1lbnRJZFxuICAgICAgIyBzaGFyZSBsaW5rIGNvbWJpbmVzIGRvY3VtZW50IFVSTCB3aXRoIHNoYXJlZERvY3VtZW50SWRcbiAgICAgIFwiI3tAcHJvcHMuY2xpZW50LmdldEN1cnJlbnRVcmwoKX0jc2hhcmVkPSN7c2hhcmVkRG9jdW1lbnRJZH1cIlxuICAgIGVsc2VcbiAgICAgIG51bGxcblxuICBnZXRFbWJlZDogLT5cbiAgICBpZiBAZ2V0U2hhcmVMaW5rKClcbiAgICAgIFwiXCJcIjxpZnJhbWUgd2lkdGg9XCIzOThweFwiIGhlaWdodD1cIjMxM3B4XCIgZnJhbWVib3JkZXI9XCJub1wiIHNjcm9sbGluZz1cIm5vXCIgYWxsb3dmdWxsc2NyZWVuPVwidHJ1ZVwiIHdlYmtpdGFsbG93ZnVsbHNjcmVlbj1cInRydWVcIiBtb3phbGxvd2Z1bGxzY3JlZW49XCJ0cnVlXCIgc3JjPVwiI3tAZ2V0U2hhcmVMaW5rKCl9XCI+PC9pZnJhbWU+XCJcIlwiXG4gICAgZWxzZVxuICAgICAgbnVsbFxuXG4gIGdldExhcmE6IChvcHRpb25zID0gbnVsbCkgLT5cbiAgICBzaGFyZWREb2N1bWVudElkID0gQGdldFNoYXJlZERvY3VtZW50SWQoKVxuICAgIGlmIHNoYXJlZERvY3VtZW50SWRcbiAgICAgIGRvY3VtZW50U2VydmVyID0gZ2V0UXVlcnlQYXJhbSgnZG9jdW1lbnRTZXJ2ZXInKSBvciAnaHR0cHM6Ly9kb2N1bWVudC1zdG9yZS5jb25jb3JkLm9yZydcbiAgICAgIGRvY3VtZW50U2VydmVyID0gZG9jdW1lbnRTZXJ2ZXIuc2xpY2UoMCwgLTEpIHdoaWxlIGRvY3VtZW50U2VydmVyLnN1YnN0cigtMSkgaXMgJy8nICAjIHJlbW92ZSB0cmFpbGluZyBzbGFzaFxuICAgICAgc2VydmVyID0gZW5jb2RlVVJJQ29tcG9uZW50IChpZiBvcHRpb25zPy5oYXNPd25Qcm9wZXJ0eSgnY29kYXBTZXJ2ZXJVcmwnKSB0aGVuIG9wdGlvbnMuY29kYXBTZXJ2ZXJVcmwgZWxzZSBAc3RhdGUuY29kYXBTZXJ2ZXJVcmwpXG4gICAgICBidXR0b25UZXh0ID0gZW5jb2RlVVJJQ29tcG9uZW50IChpZiBvcHRpb25zPy5oYXNPd25Qcm9wZXJ0eSgnbGF1bmNoQnV0dG9uVGV4dCcpIHRoZW4gb3B0aW9ucy5sYXVuY2hCdXR0b25UZXh0IGVsc2UgQHN0YXRlLmxhdW5jaEJ1dHRvblRleHQpXG4gICAgICBcIiN7ZG9jdW1lbnRTZXJ2ZXJ9L3YyL2RvY3VtZW50cy8je3NoYXJlZERvY3VtZW50SWR9L2xhdW5jaD9zZXJ2ZXI9I3tzZXJ2ZXJ9JmJ1dHRvblRleHQ9I3tidXR0b25UZXh0fVwiXG4gICAgZWxzZVxuICAgICAgbnVsbFxuXG4gICMgYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zdWRvZG9raS9jb3B5LXRvLWNsaXBib2FyZC9ibG9iL21hc3Rlci9pbmRleC5qc1xuICBjb3B5OiAoZSkgLT5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb3BpZWQgPSBmYWxzZVxuICAgIHRvQ29weSA9IEBzdGF0ZVtAc3RhdGUudGFiU2VsZWN0ZWRdXG4gICAgdHJ5XG4gICAgICBtYXJrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnbWFyaydcbiAgICAgIG1hcmsuaW5uZXJUZXh0ID0gdG9Db3B5XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIG1hcmtcblxuICAgICAgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKClcbiAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKVxuXG4gICAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKClcbiAgICAgIHJhbmdlLnNlbGVjdE5vZGUgbWFya1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlIHJhbmdlXG5cbiAgICAgIGNvcGllZCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kICdjb3B5J1xuICAgIGNhdGNoXG4gICAgICB0cnlcbiAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YSAndGV4dCcsIHRvQ29weVxuICAgICAgICBjb3BpZWQgPSB0cnVlXG4gICAgICBjYXRjaFxuICAgICAgICBjb3BpZWQgPSBmYWxzZVxuICAgIGZpbmFsbHlcbiAgICAgIGlmIHNlbGVjdGlvblxuICAgICAgICBpZiB0eXBlb2Ygc2VsZWN0aW9uLnJlbW92ZVJhbmdlIGlzICdmdW5jdGlvbidcbiAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlUmFuZ2UgcmFuZ2VcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKVxuICAgICAgaWYgbWFya1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkIG1hcmtcbiAgICAgIEBwcm9wcy5jbGllbnQuYWxlcnQgdHIoaWYgY29waWVkIHRoZW4gXCJ+U0hBUkVfRElBTE9HLkNPUFlfU1VDQ0VTU1wiIGVsc2UgXCJ+U0hBUkVfRElBTE9HLkNPUFlfRVJST1JcIiksICh0ciBcIn5TSEFSRV9ESUFMT0cuQ09QWV9USVRMRVwiKVxuXG4gIHVwZGF0ZVNoYXJlOiAtPlxuICAgIEBwcm9wcy5jbGllbnQuc2hhcmVVcGRhdGUoKVxuXG4gIHRvZ2dsZVNoYXJlOiAoZSkgLT5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBAcHJvcHMuY2xpZW50LnRvZ2dsZVNoYXJlID0+XG4gICAgICBAc2V0U3RhdGVcbiAgICAgICAgbGluazogQGdldFNoYXJlTGluaygpXG4gICAgICAgIGVtYmVkOiBAZ2V0RW1iZWQoKVxuICAgICAgICBsYXJhOiBAZ2V0TGFyYSgpXG5cbiAgc2VsZWN0TGlua1RhYjogLT5cbiAgICBAc2V0U3RhdGUgdGFiU2VsZWN0ZWQ6ICdsaW5rJ1xuXG4gIHNlbGVjdEVtYmVkVGFiOiAtPlxuICAgIEBzZXRTdGF0ZSB0YWJTZWxlY3RlZDogJ2VtYmVkJ1xuXG4gIHNlbGVjdExhcmFUYWI6IC0+XG4gICAgQHNldFN0YXRlIHRhYlNlbGVjdGVkOiAnbGFyYSdcblxuICBjaGFuZ2VkQ29kYXBTZXJ2ZXJVcmw6IC0+XG4gICAgY29kYXBTZXJ2ZXJVcmwgPSBSZWFjdERPTS5maW5kRE9NTm9kZShAcmVmcy5jb2RhcFNlcnZlclVybCkudmFsdWVcbiAgICBAc2V0U3RhdGVcbiAgICAgIGNvZGFwU2VydmVyVXJsOiBjb2RhcFNlcnZlclVybFxuICAgICAgbGFyYTogQGdldExhcmEgY29kYXBTZXJ2ZXJVcmw6IGNvZGFwU2VydmVyVXJsXG5cbiAgY2hhbmdlZExhdW5jaEJ1dHRvblRleHQ6IC0+XG4gICAgbGF1bmNoQnV0dG9uVGV4dCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKEByZWZzLmxhdW5jaEJ1dHRvblRleHQpLnZhbHVlXG4gICAgQHNldFN0YXRlXG4gICAgICBsYXVuY2hCdXR0b25UZXh0OiBsYXVuY2hCdXR0b25UZXh0XG4gICAgICBsYXJhOiBAZ2V0TGFyYSBsYXVuY2hCdXR0b25UZXh0OiBsYXVuY2hCdXR0b25UZXh0XG5cbiAgcmVuZGVyOiAtPlxuICAgIHNoYXJpbmcgPSBAc3RhdGUubGluayBpc250IG51bGxcblxuICAgIChNb2RhbERpYWxvZyB7dGl0bGU6ICh0ciAnfkRJQUxPRy5TSEFSRUQnKSwgY2xvc2U6IEBwcm9wcy5jbG9zZX0sXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdzaGFyZS1kaWFsb2cnfSxcbiAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnc2hhcmUtdG9wLWRpYWxvZyd9LFxuICAgICAgICAgIGlmIHNoYXJpbmdcbiAgICAgICAgICAgIChkaXYge30sXG4gICAgICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogJ3NoYXJlLXN0YXR1cyd9LFxuICAgICAgICAgICAgICAgIFwiU2hhcmVkIHZpZXcgaXMgXCIsIChzdHJvbmcge30sIFwiZW5hYmxlZFwiKVxuICAgICAgICAgICAgICAgIChhIHtocmVmOiAnIycsIG9uQ2xpY2s6IEB0b2dnbGVTaGFyZX0sICdTdG9wIHNoYXJpbmcnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogJ3NoYXJlLWJ1dHRvbid9LFxuICAgICAgICAgICAgICAgIChidXR0b24ge29uQ2xpY2s6IEB1cGRhdGVTaGFyZX0sIFwiVXBkYXRlIHNoYXJlZCB2aWV3XCIpXG4gICAgICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnc2hhcmUtYnV0dG9uLWhlbHAtc2hhcmluZyd9LFxuICAgICAgICAgICAgICAgICAgKGEge2hyZWY6IEBzdGF0ZS5saW5rLCB0YXJnZXQ6ICdfYmxhbmsnfSwgJ1ByZXZpZXcgc2hhcmVkIHZpZXcnKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIChkaXYge30sXG4gICAgICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogJ3NoYXJlLXN0YXR1cyd9LFxuICAgICAgICAgICAgICAgIFwiU2hhcmVkIHZpZXcgaXMgXCIsIChzdHJvbmcge30sIFwiZGlzYWJsZWRcIilcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdzaGFyZS1idXR0b24nfSxcbiAgICAgICAgICAgICAgICAoYnV0dG9uIHtvbkNsaWNrOiBAdG9nZ2xlU2hhcmV9LCBcIkVuYWJsZSBzaGFyaW5nXCIpXG4gICAgICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnc2hhcmUtYnV0dG9uLWhlbHAtbm90LXNoYXJpbmcnfSwgXCJXaGVuIHNoYXJpbmcgaXMgZW5hYmxlZCwgYSBjb3B5IG9mIHRoZSBjdXJyZW50IHZpZXcgaXMgY3JlYXRlZC4gIFRoaXMgY29weSBjYW4gYmUgc2hhcmVkLlwiKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgaWYgc2hhcmluZ1xuICAgICAgICAgIChkaXYge30sXG4gICAgICAgICAgICAodWwge2NsYXNzTmFtZTogJ3NoYXJpbmctdGFicyd9LFxuICAgICAgICAgICAgICAobGkge2NsYXNzTmFtZTogXCJzaGFyaW5nLXRhYiN7aWYgQHN0YXRlLnRhYlNlbGVjdGVkIGlzICdsaW5rJyB0aGVuICcgc2hhcmluZy10YWItc2VsZWN0ZWQnIGVsc2UgJyd9XCIsIHN0eWxlOiB7bWFyZ2luTGVmdDogMTB9LCBvbkNsaWNrOiBAc2VsZWN0TGlua1RhYn0sICdMaW5rJylcbiAgICAgICAgICAgICAgKGxpIHtjbGFzc05hbWU6IFwic2hhcmluZy10YWIgc2hhcmluZy10YWItZW1iZWQje2lmIEBzdGF0ZS50YWJTZWxlY3RlZCBpcyAnZW1iZWQnIHRoZW4gJyBzaGFyaW5nLXRhYi1zZWxlY3RlZCcgZWxzZSAnJ31cIiwgb25DbGljazogQHNlbGVjdEVtYmVkVGFifSwgJ0VtYmVkJylcbiAgICAgICAgICAgICAgaWYgQHByb3BzLmVuYWJsZUxhcmFTaGFyaW5nXG4gICAgICAgICAgICAgICAgKGxpIHtjbGFzc05hbWU6IFwic2hhcmluZy10YWIgc2hhcmluZy10YWItbGFyYSN7aWYgQHN0YXRlLnRhYlNlbGVjdGVkIGlzICdsYXJhJyB0aGVuICcgc2hhcmluZy10YWItc2VsZWN0ZWQnIGVsc2UgJyd9XCIsIG9uQ2xpY2s6IEBzZWxlY3RMYXJhVGFifSwgJ0xBUkEnKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnc2hhcmluZy10YWItY29udGVudHMnfSxcbiAgICAgICAgICAgICAgc3dpdGNoIEBzdGF0ZS50YWJTZWxlY3RlZFxuICAgICAgICAgICAgICAgIHdoZW4gJ2VtYmVkJ1xuICAgICAgICAgICAgICAgICAgKGRpdiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJFbWJlZCBjb2RlIGZvciBpbmNsdWRpbmcgaW4gd2VicGFnZXMgb3Igb3RoZXIgd2ViLWJhc2VkIGNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgaWYgZG9jdW1lbnQuZXhlY0NvbW1hbmQgb3Igd2luZG93LmNsaXBib2FyZERhdGFcbiAgICAgICAgICAgICAgICAgICAgICAoYSB7Y2xhc3NOYW1lOiAnY29weS1saW5rJywgaHJlZjogJyMnLCBvbkNsaWNrOiBAY29weX0sIHRyICd+U0hBUkVfRElBTE9HLkNPUFknKVxuICAgICAgICAgICAgICAgICAgICAoZGl2IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICh0ZXh0YXJlYSB7dmFsdWU6IEBzdGF0ZS5lbWJlZCwgcmVhZE9ubHk6IHRydWV9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgd2hlbiAnbGFyYSdcbiAgICAgICAgICAgICAgICAgIChkaXYge30sXG4gICAgICAgICAgICAgICAgICAgIFwiVXNlIHRoaXMgbGluayB3aGVuIGNyZWF0aW5nIGFuIGFjdGl2aXR5IGluIExBUkFcIixcbiAgICAgICAgICAgICAgICAgICAgaWYgZG9jdW1lbnQuZXhlY0NvbW1hbmQgb3Igd2luZG93LmNsaXBib2FyZERhdGFcbiAgICAgICAgICAgICAgICAgICAgICAoYSB7Y2xhc3NOYW1lOiAnY29weS1saW5rJywgaHJlZjogJyMnLCBvbkNsaWNrOiBAY29weX0sIHRyICd+U0hBUkVfRElBTE9HLkNPUFknKVxuICAgICAgICAgICAgICAgICAgICAoZGl2IHt9LFxuICAgICAgICAgICAgICAgICAgICAgIChpbnB1dCB7dmFsdWU6IEBzdGF0ZS5sYXJhLCByZWFkT25seTogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnbGFyYS1zZXR0aW5ncyd9LFxuICAgICAgICAgICAgICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogJ2NvZGFwLXNlcnZlci11cmwnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ09EQVAgU2VydmVyIFVSTDpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKGRpdiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGlucHV0IHt2YWx1ZTogQHN0YXRlLmNvZGFwU2VydmVyVXJsLCByZWY6ICdjb2RhcFNlcnZlclVybCcsIG9uQ2hhbmdlOiBAY2hhbmdlZENvZGFwU2VydmVyVXJsfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiAnbGF1bmNoLWJ1dHRvbi10ZXh0J30sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkxhdW5jaCBCdXR0b24gVGV4dDpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKGRpdiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGlucHV0IHt2YWx1ZTogQHN0YXRlLmxhdW5jaEJ1dHRvblRleHQsIHJlZjogJ2xhdW5jaEJ1dHRvblRleHQnLCBvbkNoYW5nZTogQGNoYW5nZWRMYXVuY2hCdXR0b25UZXh0fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAoZGl2IHt9LFxuICAgICAgICAgICAgICAgICAgICBcIlBhc3RlIHRoaXMgaW50byBhbiBlbWFpbCBvciB0ZXh0IG1lc3NhZ2UgXCIsXG4gICAgICAgICAgICAgICAgICAgIGlmIGRvY3VtZW50LmV4ZWNDb21tYW5kIG9yIHdpbmRvdy5jbGlwYm9hcmREYXRhXG4gICAgICAgICAgICAgICAgICAgICAgKGEge2NsYXNzTmFtZTogJ2NvcHktbGluaycsIGhyZWY6ICcjJywgb25DbGljazogQGNvcHl9LCB0ciAnflNIQVJFX0RJQUxPRy5DT1BZJylcbiAgICAgICAgICAgICAgICAgICAgKGRpdiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAoaW5wdXQge3ZhbHVlOiBAc3RhdGUubGluaywgcmVhZE9ubHk6IHRydWV9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogJ3NvY2lhbC1pY29ucyd9LFxuICAgICAgICAgICAgICAgICAgICAgIChTb2NpYWxJY29uIHtpY29uOiAnZmFjZWJvb2snLCB1cmw6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9I3tlbmNvZGVVUklDb21wb25lbnQgQHN0YXRlLmxpbmt9XCJ9KVxuICAgICAgICAgICAgICAgICAgICAgIChTb2NpYWxJY29uIHtpY29uOiAndHdpdHRlcicsIHVybDogXCJodHRwczovL3R3aXR0ZXIuY29tL2hvbWU/c3RhdHVzPSN7ZW5jb2RlVVJJQ29tcG9uZW50IEBzdGF0ZS5saW5rfVwifSlcbiAgICAgICAgICAgICAgICAgICAgICAjIG5vdCB3b3JraW5nIHdpdGggdXJsIHBhcmFtZXRlcjogKFNvY2lhbEljb24ge2ljb246ICdnb29nbGUnLCB1cmw6IFwiaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vc2hhcmU/dXJsPSN7ZW5jb2RlVVJJQ29tcG9uZW50IEBzdGF0ZS5saW5rfVwifSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcblxuICAgICAgICAoZGl2IHtjbGFzc05hbWU6ICdidXR0b25zJ30sXG4gICAgICAgICAgKGJ1dHRvbiB7b25DbGljazogQHByb3BzLmNsb3NlfSwgdHIgJ35TSEFSRV9ESUFMT0cuQ0xPU0UnKVxuICAgICAgICApXG4gICAgICAgIChkaXYge2NsYXNzTmFtZTogJ2xvbmdldml0eS13YXJuaW5nJ30sIHRyICd+U0hBUkVfRElBTE9HLkxPTkdFVklUWV9XQVJOSU5HJykgaWYgU0hPV19MT05HRVZJVFlfV0FSTklOR1xuICAgICAgKVxuICAgIClcbiIsIntkaXYsIHVsLCBsaSwgYX0gPSBSZWFjdC5ET01cblxuY2xhc3MgVGFiSW5mb1xuICBjb25zdHJ1Y3RvcjogKHNldHRpbmdzPXt9KSAtPlxuICAgIHtAbGFiZWwsIEBjb21wb25lbnQsIEBjYXBhYmlsaXR5LCBAb25TZWxlY3RlZH0gPSBzZXR0aW5nc1xuXG5UYWIgPSBSZWFjdC5jcmVhdGVGYWN0b3J5IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdUYWJiZWRQYW5lbFRhYidcblxuICBjbGlja2VkOiAoZSkgLT5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBAcHJvcHMub25TZWxlY3RlZCBAcHJvcHMuaW5kZXhcblxuICByZW5kZXI6IC0+XG4gICAgY2xhc3NuYW1lID0gaWYgQHByb3BzLnNlbGVjdGVkIHRoZW4gJ3RhYi1zZWxlY3RlZCcgZWxzZSAnJ1xuICAgIChsaSB7Y2xhc3NOYW1lOiBjbGFzc25hbWUsIG9uQ2xpY2s6IEBjbGlja2VkfSwgQHByb3BzLmxhYmVsKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG5cbiAgZGlzcGxheU5hbWU6ICdUYWJiZWRQYW5lbFZpZXcnXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgIHNlbGVjdGVkVGFiSW5kZXg6IEBwcm9wcy5zZWxlY3RlZFRhYkluZGV4IG9yIDBcblxuICBjb21wb25lbnREaWRNb3VudDogLT5cbiAgICBAcHJvcHMudGFic1tAc3RhdGUuc2VsZWN0ZWRUYWJJbmRleF0ub25TZWxlY3RlZD8oQHByb3BzLnRhYnNbQHN0YXRlLnNlbGVjdGVkVGFiSW5kZXhdLmNhcGFiaWxpdHkpXG5cbiAgc3RhdGljczpcbiAgICBUYWI6IChzZXR0aW5ncykgLT4gbmV3IFRhYkluZm8gc2V0dGluZ3NcblxuICBzZWxlY3RlZFRhYjogKGluZGV4KSAtPlxuICAgIEBwcm9wcy50YWJzW2luZGV4XS5vblNlbGVjdGVkPyhAcHJvcHMudGFic1tpbmRleF0uY2FwYWJpbGl0eSlcbiAgICBAc2V0U3RhdGUgc2VsZWN0ZWRUYWJJbmRleDogaW5kZXhcblxuICByZW5kZXJUYWI6ICh0YWIsIGluZGV4KSAtPlxuICAgIChUYWJcbiAgICAgIGxhYmVsOiB0YWIubGFiZWxcbiAgICAgIGtleTogaW5kZXhcbiAgICAgIGluZGV4OiBpbmRleFxuICAgICAgc2VsZWN0ZWQ6IChpbmRleCBpcyBAc3RhdGUuc2VsZWN0ZWRUYWJJbmRleClcbiAgICAgIG9uU2VsZWN0ZWQ6IEBzZWxlY3RlZFRhYlxuICAgIClcblxuICByZW5kZXJUYWJzOiAtPlxuICAgIChkaXYge2NsYXNzTmFtZTogJ3dvcmtzcGFjZS10YWJzJ30sXG4gICAgICAodWwge2tleTogaW5kZXh9LCBAcmVuZGVyVGFiKHRhYiwgaW5kZXgpIGZvciB0YWIsIGluZGV4IGluIEBwcm9wcy50YWJzKVxuICAgIClcblxuICByZW5kZXJTZWxlY3RlZFBhbmVsOiAtPlxuICAgIChkaXYge2NsYXNzTmFtZTogJ3dvcmtzcGFjZS10YWItY29tcG9uZW50J30sXG4gICAgICBmb3IgdGFiLCBpbmRleCBpbiBAcHJvcHMudGFic1xuICAgICAgICAoZGl2IHtcbiAgICAgICAgICBrZXk6IGluZGV4XG4gICAgICAgICAgc3R5bGU6XG4gICAgICAgICAgICBkaXNwbGF5OiBpZiBpbmRleCBpcyBAc3RhdGUuc2VsZWN0ZWRUYWJJbmRleCB0aGVuICdibG9jaycgZWxzZSAnbm9uZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRhYi5jb21wb25lbnRcbiAgICAgICAgKVxuICAgIClcblxuICByZW5kZXI6IC0+XG4gICAgKGRpdiB7Y2xhc3NOYW1lOiBcInRhYmJlZC1wYW5lbFwifSxcbiAgICAgIEByZW5kZXJUYWJzKClcbiAgICAgIEByZW5kZXJTZWxlY3RlZFBhbmVsKClcbiAgICApXG4iLCJ7ZGl2LCBpbnB1dCwgYnV0dG9ufSA9IFJlYWN0LkRPTVxudHIgPSByZXF1aXJlICcuLi91dGlscy90cmFuc2xhdGUnXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBkaXNwbGF5TmFtZTogJ1VybFRhYidcblxuICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgaG92ZXI6IGZhbHNlXG5cbiAgaW1wb3J0VXJsOiAodXJsLCB2aWEpIC0+XG4gICAgQHByb3BzLmRpYWxvZy5jYWxsYmFjaz8gdXJsLCB2aWFcbiAgICBAcHJvcHMuY2xvc2UoKVxuXG4gIGltcG9ydDogLT5cbiAgICB1cmwgPSAkLnRyaW0gUmVhY3RET00uZmluZERPTU5vZGUoQHJlZnMudXJsKS52YWx1ZVxuICAgIGlmIHVybC5sZW5ndGggaXMgMFxuICAgICAgQHByb3BzLmNsaWVudC5hbGVydCB0ciBcIn5JTVBPUlRfVVJMLlBMRUFTRV9FTlRFUl9VUkxcIlxuICAgIGVsc2VcbiAgICAgIEBpbXBvcnRVcmwgdXJsLCAnc2VsZWN0J1xuXG4gIGNhbmNlbDogLT5cbiAgICBAcHJvcHMuY2xvc2UoKVxuXG4gIGRyYWdFbnRlcjogKGUpIC0+XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgQHNldFN0YXRlIGhvdmVyOiB0cnVlXG5cbiAgZHJhZ0xlYXZlOiAoZSkgLT5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBAc2V0U3RhdGUgaG92ZXI6IGZhbHNlXG5cbiAgZHJvcDogKGUpIC0+XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgaWYgZS5kYXRhVHJhbnNmZXJcbiAgICAgIGRyb3BwZWRVcmxzID0gKGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3VybCcpIG9yIGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvdXJpLWxpc3QnKSBvciAnJykuc3BsaXQgJ1xcbidcbiAgICAgIGlmIGRyb3BwZWRVcmxzLmxlbmd0aCA+IDFcbiAgICAgICAgQHByb3BzLmNsaWVudC5hbGVydCB0ciBcIn5JTVBPUlRfVVJMLk1VTFRJUExFX1VSTFNfRFJPUFBFRFwiXG4gICAgICBlbHNlIGlmIGRyb3BwZWRVcmxzLmxlbmd0aCBpcyAxXG4gICAgICAgIEBpbXBvcnRVcmwgZHJvcHBlZFVybHNbMF0sICdkcm9wJ1xuXG4gIHJlbmRlcjogLT5cbiAgICBkcm9wQ2xhc3MgPSBcInVybERyb3BBcmVhI3tpZiBAc3RhdGUuaG92ZXIgdGhlbiAnIGRyb3BIb3ZlcicgZWxzZSAnJ31cIlxuICAgIChkaXYge2NsYXNzTmFtZTogJ2RpYWxvZ1RhYiB1cmxJbXBvcnQnfSxcbiAgICAgIChkaXYge2NsYXNzTmFtZTogZHJvcENsYXNzLCBvbkRyYWdFbnRlcjogQGRyYWdFbnRlciwgb25EcmFnTGVhdmU6IEBkcmFnTGVhdmUsIG9uRHJvcDogQGRyb3B9LFxuICAgICAgICAodHIgXCJ+VVJMX1RBQi5EUk9QX1VSTF9IRVJFXCIpXG4gICAgICApXG4gICAgICAoaW5wdXQge3JlZjogJ3VybCcsIHBsYWNlaG9sZGVyOiAnVVJMJ30pXG4gICAgICAoZGl2IHtjbGFzc05hbWU6ICdidXR0b25zJ30sXG4gICAgICAgIChidXR0b24ge29uQ2xpY2s6IEBpbXBvcnR9LCAodHIgXCJ+VVJMX1RBQi5JTVBPUlRcIikpXG4gICAgICAgIChidXR0b24ge29uQ2xpY2s6IEBjYW5jZWx9LCAodHIgXCJ+RklMRV9ESUFMT0cuQ0FOQ0VMXCIpKVxuICAgICAgKVxuICAgIClcbiJdfQ==
